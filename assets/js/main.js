/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={"./node_modules/@tannin/compile/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/@tannin/postfix/index.js"),s=n("./node_modules/@tannin/evaluate/index.js");function i(e){var t=(0,o.default)(e);return function(e){return(0,s.default)(t,e)}}},"./node_modules/@tannin/evaluate/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o={"!":function(e){return!e},"*":function(e,t){return e*t},"/":function(e,t){return e/t},"%":function(e,t){return e%t},"+":function(e,t){return e+t},"-":function(e,t){return e-t},"<":function(e,t){return e<t},"<=":function(e,t){return e<=t},">":function(e,t){return e>t},">=":function(e,t){return e>=t},"==":function(e,t){return e===t},"!=":function(e,t){return e!==t},"&&":function(e,t){return e&&t},"||":function(e,t){return e||t},"?:":function(e,t,n){if(e)throw t;return n}};function s(e,t){var n,s,i,r,a,l,c=[];for(n=0;n<e.length;n++){if(a=e[n],r=o[a]){for(s=r.length,i=Array(s);s--;)i[s]=c.pop();try{l=r.apply(null,i)}catch(e){return e}}else l=t.hasOwnProperty(a)?t[a]:+a;c.push(l)}return c[0]}},"./node_modules/@tannin/plural-forms/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@tannin/compile/index.js");function s(e){var t=(0,o.default)(e);return function(e){return+t({n:e})}}},"./node_modules/@tannin/postfix/index.js":(e,t,n)=>{"use strict";var o,s,i,r;function a(e){for(var t,n,a,l,c=[],u=[];t=e.match(r);){for(n=t[0],(a=e.substr(0,t.index).trim())&&c.push(a);l=u.pop();){if(i[n]){if(i[n][0]===l){n=i[n][1]||n;break}}else if(s.indexOf(l)>=0||o[l]<o[n]){u.push(l);break}c.push(l)}i[n]||u.push(n),e=e.substr(t.index+n.length)}return(e=e.trim())&&c.push(e),c.concat(u.reverse())}n.r(t),n.d(t,{default:()=>a}),o={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},s=["(","?"],i={")":["("],":":["?","?:"]},r=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/},"./node_modules/@vue/devtools-api/lib/esm/const.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{HOOK_PLUGIN_SETTINGS_SET:()=>s,HOOK_SETUP:()=>o});const o="devtools-plugin:setup",s="plugin:settings:set"},"./node_modules/@vue/devtools-api/lib/esm/env.js":(e,t,n)=>{"use strict";function o(){return s().__VUE_DEVTOOLS_GLOBAL_HOOK__}function s(){return"undefined"!=typeof navigator&&"undefined"!=typeof window?window:void 0!==n.g?n.g:{}}n.r(t),n.d(t,{getDevtoolsGlobalHook:()=>o,getTarget:()=>s,isProxyAvailable:()=>i});const i="function"==typeof Proxy},"./node_modules/@vue/devtools-api/lib/esm/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{isPerformanceSupported:()=>r.isPerformanceSupported,now:()=>r.now,setupDevtoolsPlugin:()=>a});var o=n("./node_modules/@vue/devtools-api/lib/esm/env.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),i=n("./node_modules/@vue/devtools-api/lib/esm/proxy.js"),r=n("./node_modules/@vue/devtools-api/lib/esm/time.js");function a(e,t){const n=e,r=(0,o.getTarget)(),a=(0,o.getDevtoolsGlobalHook)(),l=o.isProxyAvailable&&n.enableEarlyProxy;if(!a||!r.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__&&l){const e=l?new i.ApiProxy(n,a):null;(r.__VUE_DEVTOOLS_PLUGINS__=r.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:t,proxy:e}),e&&t(e.proxiedTarget)}else a.emit(s.HOOK_SETUP,e,t)}},"./node_modules/@vue/devtools-api/lib/esm/proxy.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{ApiProxy:()=>i});var o=n("./node_modules/@vue/devtools-api/lib/esm/const.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/time.js");class i{constructor(e,t){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=e,this.hook=t;const n={};if(e.settings)for(const t in e.settings){const o=e.settings[t];n[t]=o.defaultValue}const i=`__vue-devtools-plugin-settings__${e.id}`;let r=Object.assign({},n);try{const e=localStorage.getItem(i),t=JSON.parse(e);Object.assign(r,t)}catch(e){}this.fallbacks={getSettings:()=>r,setSettings(e){try{localStorage.setItem(i,JSON.stringify(e))}catch(e){}r=e},now:()=>(0,s.now)()},t&&t.on(o.HOOK_PLUGIN_SETTINGS_SET,((e,t)=>{e===this.plugin.id&&this.fallbacks.setSettings(t)})),this.proxiedOn=new Proxy({},{get:(e,t)=>this.target?this.target.on[t]:(...e)=>{this.onQueue.push({method:t,args:e})}}),this.proxiedTarget=new Proxy({},{get:(e,t)=>this.target?this.target[t]:"on"===t?this.proxiedOn:Object.keys(this.fallbacks).includes(t)?(...e)=>(this.targetQueue.push({method:t,args:e,resolve:()=>{}}),this.fallbacks[t](...e)):(...e)=>new Promise((n=>{this.targetQueue.push({method:t,args:e,resolve:n})}))})}async setRealTarget(e){this.target=e;for(const e of this.onQueue)this.target.on[e.method](...e.args);for(const e of this.targetQueue)e.resolve(await this.target[e.method](...e.args))}}},"./node_modules/@vue/devtools-api/lib/esm/time.js":(e,t,n)=>{"use strict";let o,s;function i(){var e;return void 0!==o||("undefined"!=typeof window&&window.performance?(o=!0,s=window.performance):void 0!==n.g&&(null===(e=n.g.perf_hooks)||void 0===e?void 0:e.performance)?(o=!0,s=n.g.perf_hooks.performance):o=!1),o}function r(){return i()?s.now():Date.now()}n.r(t),n.d(t,{isPerformanceSupported:()=>i,now:()=>r})},"./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{EffectScope:()=>r,ITERATE_KEY:()=>y,ReactiveEffect:()=>x,computed:()=>Ze,customRef:()=>Ge,deferredComputed:()=>it,effect:()=>S,effectScope:()=>a,enableTracking:()=>E,getCurrentScope:()=>c,isProxy:()=>Ee,isReactive:()=>je,isReadonly:()=>Oe,isRef:()=>Le,isShallow:()=>Ce,markRaw:()=>Pe,onScopeDispose:()=>u,pauseTracking:()=>C,proxyRefs:()=>Ue,reactive:()=>_e,readonly:()=>we,ref:()=>Fe,resetTracking:()=>A,shallowReactive:()=>xe,shallowReadonly:()=>Se,shallowRef:()=>Ie,stop:()=>k,toRaw:()=>Ae,toRef:()=>Je,toRefs:()=>Ye,toValue:()=>ze,track:()=>P,trigger:()=>M,triggerRef:()=>Ve,unref:()=>$e});var o=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");function s(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let i;class r{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=i,!e&&i&&(this.index=(i.scopes||(i.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const t=i;try{return i=this,e()}finally{i=t}}else s("cannot run an inactive effect scope.")}on(){i=this}off(){i=this.parent}stop(e){if(this._active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this._active=!1}}}function a(e){return new r(e)}function l(e,t=i){t&&t.active&&t.effects.push(e)}function c(){return i}function u(e){i?i.cleanups.push(e):s("onScopeDispose() is called when there is no active effect scope to be associated with.")}const d=e=>{const t=new Set(e);return t.w=0,t.n=0,t},h=e=>(e.w&g)>0,p=e=>(e.n&g)>0,f=new WeakMap;let m=0,g=1;const b=30;let v;const y=Symbol("iterate"),_=Symbol("Map key iterate");class x{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,l(this,n)}run(){if(!this.active)return this.fn();let e=v,t=j;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=v,v=this,j=!0,g=1<<++m,m<=b?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=g})(this):w(this),this.fn()}finally{m<=b&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let o=0;o<t.length;o++){const s=t[o];h(s)&&!p(s)?s.delete(e):t[n++]=s,s.w&=~g,s.n&=~g}t.length=n}})(this),g=1<<--m,v=this.parent,j=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){v===this?this.deferStop=!0:this.active&&(w(this),this.onStop&&this.onStop(),this.active=!1)}}function w(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}function S(e,t){e.effect instanceof x&&(e=e.effect.fn);const n=new x(e);t&&((0,o.extend)(n,t),t.scope&&l(n,t.scope)),t&&t.lazy||n.run();const s=n.run.bind(n);return s.effect=n,s}function k(e){e.effect.stop()}let j=!0;const O=[];function C(){O.push(j),j=!1}function E(){O.push(j),j=!0}function A(){const e=O.pop();j=void 0===e||e}function P(e,t,n){if(j&&v){let o=f.get(e);o||f.set(e,o=new Map);let s=o.get(n);s||o.set(n,s=d()),T(s,{effect:v,target:e,type:t,key:n})}}function T(e,t){let n=!1;m<=b?p(e)||(e.n|=g,n=!h(e)):n=!e.has(v),n&&(e.add(v),v.deps.push(e),v.onTrack&&v.onTrack((0,o.extend)({effect:v},t)))}function M(e,t,n,s,i,r){const a=f.get(e);if(!a)return;let l=[];if("clear"===t)l=[...a.values()];else if("length"===n&&(0,o.isArray)(e)){const e=Number(s);a.forEach(((t,n)=>{("length"===n||!(0,o.isSymbol)(n)&&n>=e)&&l.push(t)}))}else switch(void 0!==n&&l.push(a.get(n)),t){case"add":(0,o.isArray)(e)?(0,o.isIntegerKey)(n)&&l.push(a.get("length")):(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(_)));break;case"delete":(0,o.isArray)(e)||(l.push(a.get(y)),(0,o.isMap)(e)&&l.push(a.get(_)));break;case"set":(0,o.isMap)(e)&&l.push(a.get(y))}const c={target:e,type:t,key:n,newValue:s,oldValue:i,oldTarget:r};if(1===l.length)l[0]&&R(l[0],c);else{const e=[];for(const t of l)t&&e.push(...t);R(d(e),c)}}function R(e,t){const n=(0,o.isArray)(e)?e:[...e];for(const e of n)e.computed&&D(e,t);for(const e of n)e.computed||D(e,t)}function D(e,t){(e!==v||e.allowRecurse)&&(e.onTrigger&&e.onTrigger((0,o.extend)({effect:e},t)),e.scheduler?e.scheduler():e.run())}const L=(0,o.makeMap)("__proto__,__v_isRef,__isVue"),F=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(o.isSymbol)),I=N();function N(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=Ae(this);for(let e=0,t=this.length;e<t;e++)P(n,"get",e+"");const o=n[t](...e);return-1===o||!1===o?n[t](...e.map(Ae)):o}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){C();const n=Ae(this)[t].apply(this,e);return A(),n}})),e}function B(e){const t=Ae(this);return P(t,"has",e),t.hasOwnProperty(e)}class V{constructor(e=!1,t=!1){this._isReadonly=e,this._shallow=t}get(e,t,n){const s=this._isReadonly,i=this._shallow;if("__v_isReactive"===t)return!s;if("__v_isReadonly"===t)return s;if("__v_isShallow"===t)return i;if("__v_raw"===t&&n===(s?i?ye:ve:i?be:ge).get(e))return e;const r=(0,o.isArray)(e);if(!s){if(r&&(0,o.hasOwn)(I,t))return Reflect.get(I,t,n);if("hasOwnProperty"===t)return B}const a=Reflect.get(e,t,n);return((0,o.isSymbol)(t)?F.has(t):L(t))?a:(s||P(e,"get",t),i?a:Le(a)?r&&(0,o.isIntegerKey)(t)?a:a.value:(0,o.isObject)(a)?s?we(a):_e(a):a)}}class $ extends V{constructor(e=!1){super(!1,e)}set(e,t,n,s){let i=e[t];if(Oe(i)&&Le(i)&&!Le(n))return!1;if(!this._shallow&&(Ce(n)||Oe(n)||(i=Ae(i),n=Ae(n)),!(0,o.isArray)(e)&&Le(i)&&!Le(n)))return i.value=n,!0;const r=(0,o.isArray)(e)&&(0,o.isIntegerKey)(t)?Number(t)<e.length:(0,o.hasOwn)(e,t),a=Reflect.set(e,t,n,s);return e===Ae(s)&&(r?(0,o.hasChanged)(n,i)&&M(e,"set",t,n,i):M(e,"add",t,n)),a}deleteProperty(e,t){const n=(0,o.hasOwn)(e,t),s=e[t],i=Reflect.deleteProperty(e,t);return i&&n&&M(e,"delete",t,void 0,s),i}has(e,t){const n=Reflect.has(e,t);return(0,o.isSymbol)(t)&&F.has(t)||P(e,"has",t),n}ownKeys(e){return P(e,"iterate",(0,o.isArray)(e)?"length":y),Reflect.ownKeys(e)}}class z extends V{constructor(e=!1){super(!0,e)}set(e,t){return s(`Set operation on key "${String(t)}" failed: target is readonly.`,e),!0}deleteProperty(e,t){return s(`Delete operation on key "${String(t)}" failed: target is readonly.`,e),!0}}const H=new $,U=new z,W=new $(!0),G=new z(!0),Y=e=>e,q=e=>Reflect.getPrototypeOf(e);function K(e,t,n=!1,s=!1){const i=Ae(e=e.__v_raw),r=Ae(t);n||((0,o.hasChanged)(t,r)&&P(i,"get",t),P(i,"get",r));const{has:a}=q(i),l=s?Y:n?Me:Te;return a.call(i,t)?l(e.get(t)):a.call(i,r)?l(e.get(r)):void(e!==i&&e.get(t))}function J(e,t=!1){const n=this.__v_raw,s=Ae(n),i=Ae(e);return t||((0,o.hasChanged)(e,i)&&P(s,"has",e),P(s,"has",i)),e===i?n.has(e):n.has(e)||n.has(i)}function X(e,t=!1){return e=e.__v_raw,!t&&P(Ae(e),"iterate",y),Reflect.get(e,"size",e)}function Q(e){e=Ae(e);const t=Ae(this);return q(t).has.call(t,e)||(t.add(e),M(t,"add",e,e)),this}function Z(e,t){t=Ae(t);const n=Ae(this),{has:s,get:i}=q(n);let r=s.call(n,e);r?me(n,s,e):(e=Ae(e),r=s.call(n,e));const a=i.call(n,e);return n.set(e,t),r?(0,o.hasChanged)(t,a)&&M(n,"set",e,t,a):M(n,"add",e,t),this}function ee(e){const t=Ae(this),{has:n,get:o}=q(t);let s=n.call(t,e);s?me(t,n,e):(e=Ae(e),s=n.call(t,e));const i=o?o.call(t,e):void 0,r=t.delete(e);return s&&M(t,"delete",e,void 0,i),r}function te(){const e=Ae(this),t=0!==e.size,n=(0,o.isMap)(e)?new Map(e):new Set(e),s=e.clear();return t&&M(e,"clear",void 0,void 0,n),s}function ne(e,t){return function(n,o){const s=this,i=s.__v_raw,r=Ae(i),a=t?Y:e?Me:Te;return!e&&P(r,"iterate",y),i.forEach(((e,t)=>n.call(o,a(e),a(t),s)))}}function oe(e,t,n){return function(...s){const i=this.__v_raw,r=Ae(i),a=(0,o.isMap)(r),l="entries"===e||e===Symbol.iterator&&a,c="keys"===e&&a,u=i[e](...s),d=n?Y:t?Me:Te;return!t&&P(r,"iterate",c?_:y),{next(){const{value:e,done:t}=u.next();return t?{value:e,done:t}:{value:l?[d(e[0]),d(e[1])]:d(e),done:t}},[Symbol.iterator](){return this}}}}function se(e){return function(...t){{const n=t[0]?`on key "${t[0]}" `:"";console.warn(`${(0,o.capitalize)(e)} operation ${n}failed: target is readonly.`,Ae(this))}return"delete"!==e&&("clear"===e?void 0:this)}}function ie(){const e={get(e){return K(this,e)},get size(){return X(this)},has:J,add:Q,set:Z,delete:ee,clear:te,forEach:ne(!1,!1)},t={get(e){return K(this,e,!1,!0)},get size(){return X(this)},has:J,add:Q,set:Z,delete:ee,clear:te,forEach:ne(!1,!0)},n={get(e){return K(this,e,!0)},get size(){return X(this,!0)},has(e){return J.call(this,e,!0)},add:se("add"),set:se("set"),delete:se("delete"),clear:se("clear"),forEach:ne(!0,!1)},o={get(e){return K(this,e,!0,!0)},get size(){return X(this,!0)},has(e){return J.call(this,e,!0)},add:se("add"),set:se("set"),delete:se("delete"),clear:se("clear"),forEach:ne(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((s=>{e[s]=oe(s,!1,!1),n[s]=oe(s,!0,!1),t[s]=oe(s,!1,!0),o[s]=oe(s,!0,!0)})),[e,n,t,o]}const[re,ae,le,ce]=ie();function ue(e,t){const n=t?e?ce:le:e?ae:re;return(t,s,i)=>"__v_isReactive"===s?!e:"__v_isReadonly"===s?e:"__v_raw"===s?t:Reflect.get((0,o.hasOwn)(n,s)&&s in t?n:t,s,i)}const de={get:ue(!1,!1)},he={get:ue(!1,!0)},pe={get:ue(!0,!1)},fe={get:ue(!0,!0)};function me(e,t,n){const s=Ae(n);if(s!==n&&t.call(e,s)){const t=(0,o.toRawType)(e);console.warn(`Reactive ${t} contains both the raw and reactive versions of the same object${"Map"===t?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const ge=new WeakMap,be=new WeakMap,ve=new WeakMap,ye=new WeakMap;function _e(e){return Oe(e)?e:ke(e,!1,H,de,ge)}function xe(e){return ke(e,!1,W,he,be)}function we(e){return ke(e,!0,U,pe,ve)}function Se(e){return ke(e,!0,G,fe,ye)}function ke(e,t,n,s,i){if(!(0,o.isObject)(e))return console.warn(`value cannot be made reactive: ${String(e)}`),e;if(e.__v_raw&&(!t||!e.__v_isReactive))return e;const r=i.get(e);if(r)return r;const a=(l=e).__v_skip||!Object.isExtensible(l)?0:function(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}((0,o.toRawType)(l));var l;if(0===a)return e;const c=new Proxy(e,2===a?s:n);return i.set(e,c),c}function je(e){return Oe(e)?je(e.__v_raw):!(!e||!e.__v_isReactive)}function Oe(e){return!(!e||!e.__v_isReadonly)}function Ce(e){return!(!e||!e.__v_isShallow)}function Ee(e){return je(e)||Oe(e)}function Ae(e){const t=e&&e.__v_raw;return t?Ae(t):e}function Pe(e){return(0,o.def)(e,"__v_skip",!0),e}const Te=e=>(0,o.isObject)(e)?_e(e):e,Me=e=>(0,o.isObject)(e)?we(e):e;function Re(e){j&&v&&T((e=Ae(e)).dep||(e.dep=d()),{target:e,type:"get",key:"value"})}function De(e,t){const n=(e=Ae(e)).dep;n&&R(n,{target:e,type:"set",key:"value",newValue:t})}function Le(e){return!(!e||!0!==e.__v_isRef)}function Fe(e){return Ne(e,!1)}function Ie(e){return Ne(e,!0)}function Ne(e,t){return Le(e)?e:new Be(e,t)}class Be{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:Ae(e),this._value=t?e:Te(e)}get value(){return Re(this),this._value}set value(e){const t=this.__v_isShallow||Ce(e)||Oe(e);e=t?e:Ae(e),(0,o.hasChanged)(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:Te(e),De(this,e))}}function Ve(e){De(e,e.value)}function $e(e){return Le(e)?e.value:e}function ze(e){return(0,o.isFunction)(e)?e():$e(e)}const He={get:(e,t,n)=>$e(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const s=e[t];return Le(s)&&!Le(n)?(s.value=n,!0):Reflect.set(e,t,n,o)}};function Ue(e){return je(e)?e:new Proxy(e,He)}class We{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:n}=e((()=>Re(this)),(()=>De(this)));this._get=t,this._set=n}get value(){return this._get()}set value(e){this._set(e)}}function Ge(e){return new We(e)}function Ye(e){Ee(e)||console.warn("toRefs() expects a reactive object but received a plain one.");const t=(0,o.isArray)(e)?new Array(e.length):{};for(const n in e)t[n]=Xe(e,n);return t}class qe{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return e=Ae(this._object),t=this._key,null==(n=f.get(e))?void 0:n.get(t);var e,t,n}}class Ke{constructor(e){this._getter=e,this.__v_isRef=!0,this.__v_isReadonly=!0}get value(){return this._getter()}}function Je(e,t,n){return Le(e)?e:(0,o.isFunction)(e)?new Ke(e):(0,o.isObject)(e)&&arguments.length>1?Xe(e,t,n):Fe(e)}function Xe(e,t,n){const o=e[t];return Le(o)?o:new qe(e,t,n)}class Qe{constructor(e,t,n,o){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this._dirty=!0,this.effect=new x(e,(()=>{this._dirty||(this._dirty=!0,De(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){const e=Ae(this);return Re(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function Ze(e,t,n=!1){let s,i;const r=(0,o.isFunction)(e);r?(s=e,i=()=>{console.warn("Write operation failed: computed value is readonly")}):(s=e.get,i=e.set);const a=new Qe(s,i,r||!i,n);return t&&!n&&(a.effect.onTrack=t.onTrack,a.effect.onTrigger=t.onTrigger),a}const et=Promise.resolve(),tt=[];let nt=!1;const ot=()=>{for(let e=0;e<tt.length;e++)tt[e]();tt.length=0,nt=!1};class st{constructor(e){let t;this.dep=void 0,this._dirty=!0,this.__v_isRef=!0,this.__v_isReadonly=!0;let n=!1,o=!1;this.effect=new x(e,(e=>{if(this.dep){if(e)t=this._value,n=!0;else if(!o){const e=n?t:this._value;o=!0,n=!1,s=()=>{this.effect.active&&this._get()!==e&&De(this),o=!1},tt.push(s),nt||(nt=!0,et.then(ot))}for(const e of this.dep)e.computed instanceof st&&e.scheduler(!0)}var s;this._dirty=!0})),this.effect.computed=this}_get(){return this._dirty?(this._dirty=!1,this._value=this.effect.run()):this._value}get value(){return Re(this),Ae(this)._get()}}function it(e){return new st(e)}},"./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>tt,BaseTransitionPropsValidators:()=>et,Comment:()=>vo,EffectScope:()=>o.EffectScope,Fragment:()=>go,KeepAlive:()=>pt,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>yo,Suspense:()=>Te,Teleport:()=>fo,Text:()=>bo,assertNumber:()=>d,callWithAsyncErrorHandling:()=>f,callWithErrorHandling:()=>p,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>Bo,compatUtils:()=>Ds,computed:()=>Ss,createBlock:()=>Ao,createCommentVNode:()=>Ho,createElementBlock:()=>Eo,createElementVNode:()=>Fo,createHydrationRenderer:()=>so,createPropsRestProxy:()=>rn,createRenderer:()=>oo,createSlots:()=>Dt,createStaticVNode:()=>zo,createTextVNode:()=>$o,createVNode:()=>Io,customRef:()=>o.customRef,defineAsyncComponent:()=>ut,defineComponent:()=>lt,defineEmits:()=>Gt,defineExpose:()=>Yt,defineModel:()=>Jt,defineOptions:()=>qt,defineProps:()=>Wt,defineSlots:()=>Kt,devtools:()=>H,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>Zo,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>at,guardReactiveProps:()=>No,h:()=>ks,handleError:()=>m,hasInjectionContext:()=>jn,initCustomFormatter:()=>Es,inject:()=>kn,isMemoSame:()=>Ps,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>fs,isShallow:()=>o.isShallow,isVNode:()=>Po,markRaw:()=>o.markRaw,mergeDefaults:()=>on,mergeModels:()=>sn,mergeProps:()=>Yo,nextTick:()=>O,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>mt,onBeforeMount:()=>St,onBeforeUnmount:()=>Ct,onBeforeUpdate:()=>jt,onDeactivated:()=>gt,onErrorCaptured:()=>Mt,onMounted:()=>kt,onRenderTracked:()=>Tt,onRenderTriggered:()=>Pt,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>At,onUnmounted:()=>Et,onUpdated:()=>Ot,openBlock:()=>wo,popScopeId:()=>ce,provide:()=>Sn,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>le,queuePostFlushCb:()=>A,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>ps,renderList:()=>Rt,renderSlot:()=>Lt,resolveComponent:()=>ke,resolveDirective:()=>Ce,resolveDynamicComponent:()=>Oe,resolveFilter:()=>Rs,resolveTransitionHooks:()=>ot,setBlockTracking:()=>Oo,setDevtoolsHook:()=>Y,setTransitionHooks:()=>rt,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>js,ssrUtils:()=>Ms,stop:()=>o.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>It,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,toValue:()=>o.toValue,transformVNodeArgs:()=>Mo,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>Zt,useModel:()=>en,useSSRContext:()=>Os,useSlots:()=>Qt,useTransitionState:()=>Qe,version:()=>Ts,warn:()=>l,watch:()=>ze,watchEffect:()=>Ne,watchPostEffect:()=>Be,watchSyncEffect:()=>Ve,withAsyncContext:()=>an,withCtx:()=>de,withDefaults:()=>Xt,withDirectives:()=>qe,withMemo:()=>As,withScopeId:()=>ue});var o=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js"),s=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js");const i=[];function r(e){i.push(e)}function a(){i.pop()}function l(e,...t){(0,o.pauseTracking)();const n=i.length?i[i.length-1].component:null,s=n&&n.appContext.config.warnHandler,r=function(){let e=i[i.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}();if(s)p(s,n,11,[e+t.join(""),n&&n.proxy,r.map((({vnode:e})=>`at <${xs(n,e.type)}>`)).join("\n"),r]);else{const n=[`[Vue warn]: ${e}`,...t];r.length&&n.push("\n",...function(e){const t=[];return e.forEach(((e,n)=>{t.push(...0===n?[]:["\n"],...function({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=!!e.component&&null==e.component.parent,s=` at <${xs(e.component,e.type,o)}`,i=">"+n;return e.props?[s,...c(e.props),i]:[s+i]}(e))})),t}(r)),console.warn(...n)}(0,o.resetTracking)()}function c(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach((n=>{t.push(...u(n,e[n]))})),n.length>3&&t.push(" ..."),t}function u(e,t,n){return(0,s.isString)(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):"number"==typeof t||"boolean"==typeof t||null==t?n?t:[`${e}=${t}`]:(0,o.isRef)(t)?(t=u(e,(0,o.toRaw)(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):(0,s.isFunction)(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=(0,o.toRaw)(t),n?t:[`${e}=`,t])}function d(e,t){void 0!==e&&("number"!=typeof e?l(`${t} is not a valid number - got ${JSON.stringify(e)}.`):isNaN(e)&&l(`${t} is NaN - the duration expression might be incorrect.`))}const h={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/core"};function p(e,t,n,o){let s;try{s=o?e(...o):e()}catch(e){m(e,t,n)}return s}function f(e,t,n,o){if((0,s.isFunction)(e)){const i=p(e,t,n,o);return i&&(0,s.isPromise)(i)&&i.catch((e=>{m(e,t,n)})),i}const i=[];for(let s=0;s<e.length;s++)i.push(f(e[s],t,n,o));return i}function m(e,t,n,o=!0){const s=t?t.vnode:null;if(t){let o=t.parent;const s=t.proxy,i=h[n];for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,s,i))return;o=o.parent}const r=t.appContext.config.errorHandler;if(r)return void p(r,null,10,[e,s,i])}!function(e,t,n,o=!0){{const s=h[t];if(n&&r(n),l("Unhandled error"+(s?` during execution of ${s}`:"")),n&&a(),o)throw e;console.error(e)}}(e,n,s,o)}let g=!1,b=!1;const v=[];let y=0;const _=[];let x=null,w=0;const S=Promise.resolve();let k=null;const j=100;function O(e){const t=k||S;return e?t.then(this?e.bind(this):e):t}function C(e){v.length&&v.includes(e,g&&e.allowRecurse?y+1:y)||(null==e.id?v.push(e):v.splice(function(e){let t=y+1,n=v.length;for(;t<n;){const o=t+n>>>1,s=v[o],i=M(s);i<e||i===e&&s.pre?t=o+1:n=o}return t}(e.id),0,e),E())}function E(){g||b||(b=!0,k=S.then(D))}function A(e){(0,s.isArray)(e)?_.push(...e):x&&x.includes(e,e.allowRecurse?w+1:w)||_.push(e),E()}function P(e,t=(g?y+1:0)){for(e=e||new Map;t<v.length;t++){const n=v[t];if(n&&n.pre){if(L(e,n))continue;v.splice(t,1),t--,n()}}}function T(e){if(_.length){const t=[...new Set(_)];if(_.length=0,x)return void x.push(...t);for(x=t,e=e||new Map,x.sort(((e,t)=>M(e)-M(t))),w=0;w<x.length;w++)L(e,x[w])||x[w]();x=null,w=0}}const M=e=>null==e.id?1/0:e.id,R=(e,t)=>{const n=M(e)-M(t);if(0===n){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function D(e){b=!1,g=!0,e=e||new Map,v.sort(R);const t=t=>L(e,t);try{for(y=0;y<v.length;y++){const e=v[y];if(e&&!1!==e.active){if(t(e))continue;p(e,null,14)}}}finally{y=0,v.length=0,T(e),g=!1,k=null,(v.length||_.length)&&D(e)}}function L(e,t){if(e.has(t)){const n=e.get(t);if(n>j){const e=t.ownerInstance,n=e&&_s(e.type);return l(`Maximum recursive updates exceeded${n?` in component <${n}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`),!0}e.set(t,n+1)}else e.set(t,1)}let F=!1;const I=new Set;(0,s.getGlobalThis)().__VUE_HMR_RUNTIME__={createRecord:z(B),rerender:z((function(e,t){const n=N.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach((e=>{t&&(e.render=t,V(e.type).render=t),e.renderCache=[],F=!0,e.update(),F=!1})))})),reload:z((function(e,t){const n=N.get(e);if(!n)return;t=V(t),$(n.initialDef,t);const o=[...n.instances];for(const e of o){const o=V(e.type);I.has(o)||(o!==n.initialDef&&$(o,t),I.add(o)),e.appContext.propsCache.delete(e.type),e.appContext.emitsCache.delete(e.type),e.appContext.optionsCache.delete(e.type),e.ceReload?(I.add(o),e.ceReload(t.styles),I.delete(o)):e.parent?C(e.parent.update):e.appContext.reload?e.appContext.reload():"undefined"!=typeof window?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required.")}A((()=>{for(const e of o)I.delete(V(e.type))}))}))};const N=new Map;function B(e,t){return!N.has(e)&&(N.set(e,{initialDef:V(t),instances:new Set}),!0)}function V(e){return ws(e)?e.__vccOpts:e}function $(e,t){(0,s.extend)(e,t);for(const n in e)"__file"===n||n in t||delete e[n]}function z(e){return(t,n)=>{try{return e(t,n)}catch(e){console.error(e),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}let H,U=[],W=!1;function G(e,...t){H?H.emit(e,...t):W||U.push({event:e,args:t})}function Y(e,t){var n,o;H=e,H?(H.enabled=!0,U.forEach((({event:e,args:t})=>H.emit(e,...t))),U=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null==(o=null==(n=window.navigator)?void 0:n.userAgent)?void 0:o.includes("jsdom"))?((t.__VUE_DEVTOOLS_HOOK_REPLAY__=t.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((e=>{Y(e,t)})),setTimeout((()=>{H||(t.__VUE_DEVTOOLS_HOOK_REPLAY__=null,W=!0,U=[])}),3e3)):(W=!0,U=[])}const q=Q("component:added"),K=Q("component:updated"),J=Q("component:removed"),X=e=>{H&&"function"==typeof H.cleanupBuffer&&!H.cleanupBuffer(e)&&J(e)};function Q(e){return t=>{G(e,t.appContext.app,t.uid,t.parent?t.parent.uid:void 0,t)}}const Z=te("perf:start"),ee=te("perf:end");function te(e){return(t,n,o)=>{G(e,t.appContext.app,t.uid,t,n,o)}}function ne(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||s.EMPTY_OBJ;{const{emitsOptions:o,propsOptions:[i]}=e;if(o)if(t in o){const e=o[t];(0,s.isFunction)(e)&&(e(...n)||l(`Invalid event arguments: event validation failed for event "${t}".`))}else i&&(0,s.toHandlerKey)(t)in i||l(`Component emitted event "${t}" but it is neither declared in the emits option nor as an "${(0,s.toHandlerKey)(t)}" prop.`)}let i=n;const r=t.startsWith("update:"),a=r&&t.slice(7);if(a&&a in o){const e=`${"modelValue"===a?"model":a}Modifiers`,{number:t,trim:r}=o[e]||s.EMPTY_OBJ;r&&(i=n.map((e=>(0,s.isString)(e)?e.trim():e))),t&&(i=n.map(s.looseToNumber))}!function(e,t,n){G("component:emit",e.appContext.app,e,t,n)}(e,t,i);{const n=t.toLowerCase();n!==t&&o[(0,s.toHandlerKey)(n)]&&l(`Event "${n}" is emitted in component ${xs(e,e.type)} but the handler is registered for "${t}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${(0,s.hyphenate)(t)}" instead of "${t}".`)}let c,u=o[c=(0,s.toHandlerKey)(t)]||o[c=(0,s.toHandlerKey)((0,s.camelize)(t))];!u&&r&&(u=o[c=(0,s.toHandlerKey)((0,s.hyphenate)(t))]),u&&f(u,e,6,i);const d=o[c+"Once"];if(d){if(e.emitted){if(e.emitted[c])return}else e.emitted={};e.emitted[c]=!0,f(d,e,6,i)}}function oe(e,t,n=!1){const o=t.emitsCache,i=o.get(e);if(void 0!==i)return i;const r=e.emits;let a={},l=!1;if(__VUE_OPTIONS_API__&&!(0,s.isFunction)(e)){const o=e=>{const n=oe(e,t,!0);n&&(l=!0,(0,s.extend)(a,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return r||l?((0,s.isArray)(r)?r.forEach((e=>a[e]=null)):(0,s.extend)(a,r),(0,s.isObject)(e)&&o.set(e,a),a):((0,s.isObject)(e)&&o.set(e,null),null)}function se(e,t){return!(!e||!(0,s.isOn)(t))&&(t=t.slice(2).replace(/Once$/,""),(0,s.hasOwn)(e,t[0].toLowerCase()+t.slice(1))||(0,s.hasOwn)(e,(0,s.hyphenate)(t))||(0,s.hasOwn)(e,t))}let ie=null,re=null;function ae(e){const t=ie;return ie=e,re=e&&e.type.__scopeId||null,t}function le(e){re=e}function ce(){re=null}const ue=e=>de;function de(e,t=ie,n){if(!t)return e;if(e._n)return e;const o=(...n)=>{o._d&&Oo(-1);const s=ae(t);let i;try{i=e(...n)}finally{ae(s),o._d&&Oo(1)}return K(t),i};return o._n=!0,o._c=!0,o._d=!0,o}let he=!1;function pe(){he=!0}function fe(e){const{type:t,vnode:n,proxy:o,withProxy:i,props:r,propsOptions:[a],slots:c,attrs:u,emit:d,render:h,renderCache:p,data:f,setupState:g,ctx:b,inheritAttrs:v}=e;let y,_;const x=ae(e);he=!1;try{if(4&n.shapeFlag){const e=i||o,t=g.__isScriptSetup?new Proxy(e,{get:(e,t,n)=>(l(`Property '${String(t)}' was accessed via 'this'. Avoid using 'this' in templates.`),Reflect.get(e,t,n))}):e;y=Uo(h.call(t,e,p,r,g,f,b)),_=u}else{const e=t;u===r&&pe(),y=Uo(e.length>1?e(r,{get attrs(){return pe(),u},slots:c,emit:d}):e(r,null)),_=t.props?u:be(u)}}catch(t){_o.length=0,m(t,e,1),y=Io(vo)}let w,S=y;if(y.patchFlag>0&&2048&y.patchFlag&&([S,w]=me(y)),_&&!1!==v){const e=Object.keys(_),{shapeFlag:t}=S;if(e.length)if(7&t)a&&e.some(s.isModelListener)&&(_=ve(_,a)),S=Bo(S,_);else if(!he&&S.type!==vo){const e=Object.keys(u),t=[],n=[];for(let o=0,i=e.length;o<i;o++){const i=e[o];(0,s.isOn)(i)?(0,s.isModelListener)(i)||t.push(i[2].toLowerCase()+i.slice(3)):n.push(i)}n.length&&l(`Extraneous non-props attributes (${n.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`),t.length&&l(`Extraneous non-emits event listeners (${t.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`)}}return n.dirs&&(ye(S)||l("Runtime directive used on component with non-element root node. The directives will not function as intended."),S=Bo(S),S.dirs=S.dirs?S.dirs.concat(n.dirs):n.dirs),n.transition&&(ye(S)||l("Component inside <Transition> renders non-element root node that cannot be animated."),S.transition=n.transition),w?w(S):y=S,ae(x),y}const me=e=>{const t=e.children,n=e.dynamicChildren,o=ge(t);if(!o)return[e,void 0];const s=t.indexOf(o),i=n?n.indexOf(o):-1;return[Uo(o),o=>{t[s]=o,n&&(i>-1?n[i]=o:o.patchFlag>0&&(e.dynamicChildren=[...n,o]))}]};function ge(e){let t;for(let n=0;n<e.length;n++){const o=e[n];if(!Po(o))return;if(o.type!==vo||"v-if"===o.children){if(t)return;t=o}}return t}const be=e=>{let t;for(const n in e)("class"===n||"style"===n||(0,s.isOn)(n))&&((t||(t={}))[n]=e[n]);return t},ve=(e,t)=>{const n={};for(const o in e)(0,s.isModelListener)(o)&&o.slice(9)in t||(n[o]=e[o]);return n},ye=e=>7&e.shapeFlag||e.type===vo;function _e(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let s=0;s<o.length;s++){const i=o[s];if(t[i]!==e[i]&&!se(n,i))return!0}return!1}function xe({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}const we="components",Se="directives";function ke(e,t){return Ee(we,e,!0,t)||e}const je=Symbol.for("v-ndc");function Oe(e){return(0,s.isString)(e)?Ee(we,e,!1)||e:e||je}function Ce(e){return Ee(Se,e)}function Ee(e,t,n=!0,o=!1){const i=ie||Qo;if(i){const r=i.type;if(e===we){const e=_s(r,!1);if(e&&(e===t||e===(0,s.camelize)(t)||e===(0,s.capitalize)((0,s.camelize)(t))))return r}const a=Ae(i[e]||r[e],t)||Ae(i.appContext[e],t);if(!a&&o)return r;if(n&&!a){const n=e===we?"\nIf this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.":"";l(`Failed to resolve ${e.slice(0,-1)}: ${t}${n}`)}return a}l(`resolve${(0,s.capitalize)(e.slice(0,-1))} can only be used in render() or setup().`)}function Ae(e,t){return e&&(e[t]||e[(0,s.camelize)(t)]||e[(0,s.capitalize)((0,s.camelize)(t))])}const Pe=e=>e.__isSuspense,Te={name:"Suspense",__isSuspense:!0,process(e,t,n,o,s,i,r,a,l,c){null==e?function(e,t,n,o,s,i,r,a,l){const{p:c,o:{createElement:u}}=l,d=u("div"),h=e.suspense=De(e,s,o,t,d,n,i,r,a,l);c(null,h.pendingBranch=e.ssContent,d,null,o,h,i,r),h.deps>0?(Me(e,"onPending"),Me(e,"onFallback"),c(null,e.ssFallback,t,n,o,null,i,r),Ie(h,e.ssFallback)):h.resolve(!1,!0)}(t,n,o,s,i,r,a,l,c):function(e,t,n,o,s,i,r,a,{p:l,um:c,o:{createElement:u}}){const d=t.suspense=e.suspense;d.vnode=t,t.el=e.el;const h=t.ssContent,p=t.ssFallback,{activeBranch:f,pendingBranch:m,isInFallback:g,isHydrating:b}=d;if(m)d.pendingBranch=h,To(h,m)?(l(m,h,d.hiddenContainer,null,s,d,i,r,a),d.deps<=0?d.resolve():g&&(l(f,p,n,o,s,null,i,r,a),Ie(d,p))):(d.pendingId++,b?(d.isHydrating=!1,d.activeBranch=m):c(m,s,d),d.deps=0,d.effects.length=0,d.hiddenContainer=u("div"),g?(l(null,h,d.hiddenContainer,null,s,d,i,r,a),d.deps<=0?d.resolve():(l(f,p,n,o,s,null,i,r,a),Ie(d,p))):f&&To(h,f)?(l(f,h,n,o,s,d,i,r,a),d.resolve(!0)):(l(null,h,d.hiddenContainer,null,s,d,i,r,a),d.deps<=0&&d.resolve()));else if(f&&To(h,f))l(f,h,n,o,s,d,i,r,a),Ie(d,h);else if(Me(t,"onPending"),d.pendingBranch=h,d.pendingId++,l(null,h,d.hiddenContainer,null,s,d,i,r,a),d.deps<=0)d.resolve();else{const{timeout:e,pendingId:t}=d;e>0?setTimeout((()=>{d.pendingId===t&&d.fallback(p)}),e):0===e&&d.fallback(p)}}(e,t,n,o,s,r,a,l,c)},hydrate:function(e,t,n,o,s,i,r,a,l){const c=t.suspense=De(t,o,n,e.parentNode,document.createElement("div"),null,s,i,r,a,!0),u=l(e,c.pendingBranch=t.ssContent,n,c,i,r);return 0===c.deps&&c.resolve(!1,!0),u},create:De,normalize:function(e){const{shapeFlag:t,children:n}=e,o=32&t;e.ssContent=Le(o?n.default:n),e.ssFallback=o?Le(n.fallback):Io(vo)}};function Me(e,t){const n=e.props&&e.props[t];(0,s.isFunction)(n)&&n()}let Re=!1;function De(e,t,n,o,i,l,c,u,h,p,f=!1){Re||(Re=!0,console[console.info?"info":"log"]("<Suspense> is an experimental feature and its API will likely change."));const{p:g,m:b,um:v,n:y,o:{parentNode:_,remove:x}}=p;let w;const S=function(e){var t;return null!=(null==(t=e.props)?void 0:t.suspensible)&&!1!==e.props.suspensible}(e);S&&(null==t?void 0:t.pendingBranch)&&(w=t.pendingId,t.deps++);const k=e.props?(0,s.toNumber)(e.props.timeout):void 0;d(k,"Suspense timeout");const j={vnode:e,parent:t,parentComponent:n,isSVG:c,container:o,hiddenContainer:i,anchor:l,deps:0,pendingId:0,timeout:"number"==typeof k?k:-1,activeBranch:null,pendingBranch:null,isInFallback:!0,isHydrating:f,isUnmounted:!1,effects:[],resolve(e=!1,n=!1){if(!e&&!j.pendingBranch)throw new Error("suspense.resolve() is called without a pending branch.");if(j.isUnmounted)throw new Error("suspense.resolve() is called on an already unmounted suspense boundary.");const{vnode:o,activeBranch:s,pendingBranch:i,pendingId:r,effects:a,parentComponent:l,container:c}=j;let u=!1;if(j.isHydrating)j.isHydrating=!1;else if(!e){u=s&&i.transition&&"out-in"===i.transition.mode,u&&(s.transition.afterLeave=()=>{r===j.pendingId&&(b(i,c,y(s),0),A(a))});let{anchor:e}=j;s&&(e=y(s),v(s,l,j,!0)),u||b(i,c,e,0)}Ie(j,i),j.pendingBranch=null,j.isInFallback=!1;let d=j.parent,h=!1;for(;d;){if(d.pendingBranch){d.effects.push(...a),h=!0;break}d=d.parent}h||u||A(a),j.effects=[],S&&t&&t.pendingBranch&&w===t.pendingId&&(t.deps--,0!==t.deps||n||t.resolve()),Me(o,"onResolve")},fallback(e){if(!j.pendingBranch)return;const{vnode:t,activeBranch:n,parentComponent:o,container:s,isSVG:i}=j;Me(t,"onFallback");const r=()=>{j.isInFallback&&(g(null,e,s,y(n),o,null,i,u,h),Ie(j,e))},a=e.transition&&"out-in"===e.transition.mode;a&&(n.transition.afterLeave=r),j.isInFallback=!0,v(n,o,null,!0),a||r()},move(e,t,n){j.activeBranch&&b(j.activeBranch,e,t,n),j.container=e},next:()=>j.activeBranch&&y(j.activeBranch),registerDep(e,t){const n=!!j.pendingBranch;n&&j.deps++;const o=e.vnode.el;e.asyncDep.catch((t=>{m(t,e,0)})).then((s=>{if(e.isUnmounted||j.isUnmounted||j.pendingId!==e.suspenseId)return;e.asyncResolved=!0;const{vnode:i}=e;r(i),hs(e,s,!1),o&&(i.el=o);const l=!o&&e.subTree.el;t(e,i,_(o||e.subTree.el),o?null:y(e.subTree),j,c,h),l&&x(l),xe(e,i.el),a(),n&&0==--j.deps&&j.resolve()}))},unmount(e,t){j.isUnmounted=!0,j.activeBranch&&v(j.activeBranch,n,e,t),j.pendingBranch&&v(j.pendingBranch,n,e,t)}};return j}function Le(e){let t;if((0,s.isFunction)(e)){const n=jo&&e._c;n&&(e._d=!1,wo()),e=e(),n&&(e._d=!0,t=xo,So())}if((0,s.isArray)(e)){const t=ge(e);!t&&e.filter((e=>e!==je)).length>0&&l("<Suspense> slots expect a single root node."),e=t}return e=Uo(e),t&&!e.dynamicChildren&&(e.dynamicChildren=t.filter((t=>t!==e))),e}function Fe(e,t){t&&t.pendingBranch?(0,s.isArray)(e)?t.effects.push(...e):t.effects.push(e):A(e)}function Ie(e,t){e.activeBranch=t;const{vnode:n,parentComponent:o}=e,s=n.el=t.el;o&&o.subTree===n&&(o.vnode.el=s,xe(o,s))}function Ne(e,t){return He(e,null,t)}function Be(e,t){return He(e,null,(0,s.extend)({},t,{flush:"post"}))}function Ve(e,t){return He(e,null,(0,s.extend)({},t,{flush:"sync"}))}const $e={};function ze(e,t,n){return(0,s.isFunction)(t)||l("`watch(fn, options?)` signature has been moved to a separate API. Use `watchEffect(fn, options?)` instead. `watch` now only supports `watch(source, cb, options?) signature."),He(e,t,n)}function He(e,t,{immediate:n,deep:i,flush:r,onTrack:a,onTrigger:c}=s.EMPTY_OBJ){var u;t||(void 0!==n&&l('watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.'),void 0!==i&&l('watch() "deep" option is only respected when using the watch(source, callback, options?) signature.'));const d=e=>{l("Invalid watch source: ",e,"A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.")},h=(0,o.getCurrentScope)()===(null==(u=Qo)?void 0:u.scope)?Qo:null;let m,g,b=!1,v=!1;if((0,o.isRef)(e)?(m=()=>e.value,b=(0,o.isShallow)(e)):(0,o.isReactive)(e)?(m=()=>e,i=!0):(0,s.isArray)(e)?(v=!0,b=e.some((e=>(0,o.isReactive)(e)||(0,o.isShallow)(e))),m=()=>e.map((e=>(0,o.isRef)(e)?e.value:(0,o.isReactive)(e)?Ge(e):(0,s.isFunction)(e)?p(e,h,2):void d(e)))):(0,s.isFunction)(e)?m=t?()=>p(e,h,2):()=>{if(!h||!h.isUnmounted)return g&&g(),f(e,h,3,[_])}:(m=s.NOOP,d(e)),t&&i){const e=m;m=()=>Ge(e())}let y,_=e=>{g=k.onStop=()=>{p(e,h,4),g=k.onStop=void 0}};if(us){if(_=s.NOOP,t?n&&f(t,h,3,[m(),v?[]:void 0,_]):m(),"sync"!==r)return s.NOOP;{const e=Os();y=e.__watcherHandles||(e.__watcherHandles=[])}}let x=v?new Array(e.length).fill($e):$e;const w=()=>{if(k.active)if(t){const e=k.run();(i||b||(v?e.some(((e,t)=>(0,s.hasChanged)(e,x[t]))):(0,s.hasChanged)(e,x)))&&(g&&g(),f(t,h,3,[e,x===$e?void 0:v&&x[0]===$e?[]:x,_]),x=e)}else k.run()};let S;w.allowRecurse=!!t,"sync"===r?S=w:"post"===r?S=()=>no(w,h&&h.suspense):(w.pre=!0,h&&(w.id=h.uid),S=()=>C(w));const k=new o.ReactiveEffect(m,S);k.onTrack=a,k.onTrigger=c,t?n?w():x=k.run():"post"===r?no(k.run.bind(k),h&&h.suspense):k.run();const j=()=>{k.stop(),h&&h.scope&&(0,s.remove)(h.scope.effects,k)};return y&&y.push(j),j}function Ue(e,t,n){const o=this.proxy,i=(0,s.isString)(e)?e.includes(".")?We(o,e):()=>o[e]:e.bind(o,o);let r;(0,s.isFunction)(t)?r=t:(r=t.handler,n=t);const a=Qo;os(this);const l=He(i,r.bind(o),n);return a?os(a):ss(),l}function We(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function Ge(e,t){if(!(0,s.isObject)(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),(0,o.isRef)(e))Ge(e.value,t);else if((0,s.isArray)(e))for(let n=0;n<e.length;n++)Ge(e[n],t);else if((0,s.isSet)(e)||(0,s.isMap)(e))e.forEach((e=>{Ge(e,t)}));else if((0,s.isPlainObject)(e))for(const n in e)Ge(e[n],t);return e}function Ye(e){(0,s.isBuiltInDirective)(e)&&l("Do not use built-in directive ids as custom directive id: "+e)}function qe(e,t){const n=ie;if(null===n)return l("withDirectives can only be used inside render functions."),e;const o=bs(n)||n.proxy,i=e.dirs||(e.dirs=[]);for(let e=0;e<t.length;e++){let[n,r,a,l=s.EMPTY_OBJ]=t[e];n&&((0,s.isFunction)(n)&&(n={mounted:n,updated:n}),n.deep&&Ge(r),i.push({dir:n,instance:o,value:r,oldValue:void 0,arg:a,modifiers:l}))}return e}function Ke(e,t,n,s){const i=e.dirs,r=t&&t.dirs;for(let a=0;a<i.length;a++){const l=i[a];r&&(l.oldValue=r[a].value);let c=l.dir[s];c&&((0,o.pauseTracking)(),f(c,n,8,[e.el,l,e,t]),(0,o.resetTracking)())}}const Je=Symbol("_leaveCb"),Xe=Symbol("_enterCb");function Qe(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return kt((()=>{e.isMounted=!0})),Ct((()=>{e.isUnmounting=!0})),e}const Ze=[Function,Array],et={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:Ze,onEnter:Ze,onAfterEnter:Ze,onEnterCancelled:Ze,onBeforeLeave:Ze,onLeave:Ze,onAfterLeave:Ze,onLeaveCancelled:Ze,onBeforeAppear:Ze,onAppear:Ze,onAfterAppear:Ze,onAppearCancelled:Ze},tt={name:"BaseTransition",props:et,setup(e,{slots:t}){const n=Zo(),s=Qe();let i;return()=>{const r=t.default&&at(t.default(),!0);if(!r||!r.length)return;let a=r[0];if(r.length>1){let e=!1;for(const t of r)if(t.type!==vo){if(e){l("<transition> can only be used on a single element or component. Use <transition-group> for lists.");break}a=t,e=!0}}const c=(0,o.toRaw)(e),{mode:u}=c;if(u&&"in-out"!==u&&"out-in"!==u&&"default"!==u&&l(`invalid <transition> mode: ${u}`),s.isLeaving)return st(a);const d=it(a);if(!d)return st(a);const h=ot(d,c,s,n);rt(d,h);const p=n.subTree,f=p&&it(p);let m=!1;const{getTransitionKey:g}=d.type;if(g){const e=g();void 0===i?i=e:e!==i&&(i=e,m=!0)}if(f&&f.type!==vo&&(!To(d,f)||m)){const e=ot(f,c,s,n);if(rt(f,e),"out-in"===u)return s.isLeaving=!0,e.afterLeave=()=>{s.isLeaving=!1,!1!==n.update.active&&n.update()},st(a);"in-out"===u&&d.type!==vo&&(e.delayLeave=(e,t,n)=>{nt(s,f)[String(f.key)]=f,e[Je]=()=>{t(),e[Je]=void 0,delete h.delayedLeave},h.delayedLeave=n})}return a}}};function nt(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}function ot(e,t,n,o){const{appear:i,mode:r,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:d,onBeforeLeave:h,onLeave:p,onAfterLeave:m,onLeaveCancelled:g,onBeforeAppear:b,onAppear:v,onAfterAppear:y,onAppearCancelled:_}=t,x=String(e.key),w=nt(n,e),S=(e,t)=>{e&&f(e,o,9,t)},k=(e,t)=>{const n=t[1];S(e,t),(0,s.isArray)(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},j={mode:r,persisted:a,beforeEnter(t){let o=l;if(!n.isMounted){if(!i)return;o=b||l}t[Je]&&t[Je](!0);const s=w[x];s&&To(e,s)&&s.el[Je]&&s.el[Je](),S(o,[t])},enter(e){let t=c,o=u,s=d;if(!n.isMounted){if(!i)return;t=v||c,o=y||u,s=_||d}let r=!1;const a=e[Xe]=t=>{r||(r=!0,S(t?s:o,[e]),j.delayedLeave&&j.delayedLeave(),e[Xe]=void 0)};t?k(t,[e,a]):a()},leave(t,o){const s=String(e.key);if(t[Xe]&&t[Xe](!0),n.isUnmounting)return o();S(h,[t]);let i=!1;const r=t[Je]=n=>{i||(i=!0,o(),S(n?g:m,[t]),t[Je]=void 0,w[s]===e&&delete w[s])};w[s]=e,p?k(p,[t,r]):r()},clone:e=>ot(e,t,n,o)};return j}function st(e){if(ht(e))return(e=Bo(e)).children=null,e}function it(e){return ht(e)?e.component?e.component.subTree:e.children?e.children[0]:void 0:e}function rt(e,t){6&e.shapeFlag&&e.component?rt(e.component.subTree,t):128&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function at(e,t=!1,n){let o=[],s=0;for(let i=0;i<e.length;i++){let r=e[i];const a=null==n?r.key:String(n)+String(null!=r.key?r.key:i);r.type===go?(128&r.patchFlag&&s++,o=o.concat(at(r.children,t,a))):(t||r.type!==vo)&&o.push(null!=a?Bo(r,{key:a}):r)}if(s>1)for(let e=0;e<o.length;e++)o[e].patchFlag=-2;return o}function lt(e,t){return(0,s.isFunction)(e)?(()=>(0,s.extend)({name:e.name},t,{setup:e}))():e}const ct=e=>!!e.type.__asyncLoader;function ut(e){(0,s.isFunction)(e)&&(e={loader:e});const{loader:t,loadingComponent:n,errorComponent:i,delay:r=200,timeout:a,suspensible:c=!0,onError:u}=e;let d,h=null,p=0;const f=()=>{let e;return h||(e=h=t().catch((e=>{if(e=e instanceof Error?e:new Error(String(e)),u)return new Promise(((t,n)=>{u(e,(()=>t((p++,h=null,f()))),(()=>n(e)),p+1)}));throw e})).then((t=>{if(e!==h&&h)return h;if(t||l("Async component loader resolved to undefined. If you are using retry(), make sure to return its return value."),t&&(t.__esModule||"Module"===t[Symbol.toStringTag])&&(t=t.default),t&&!(0,s.isObject)(t)&&!(0,s.isFunction)(t))throw new Error(`Invalid async component load result: ${t}`);return d=t,t})))};return lt({name:"AsyncComponentWrapper",__asyncLoader:f,get __asyncResolved(){return d},setup(){const e=Qo;if(d)return()=>dt(d,e);const t=t=>{h=null,m(t,e,13,!i)};if(c&&e.suspense||us)return f().then((t=>()=>dt(t,e))).catch((e=>(t(e),()=>i?Io(i,{error:e}):null)));const s=(0,o.ref)(!1),l=(0,o.ref)(),u=(0,o.ref)(!!r);return r&&setTimeout((()=>{u.value=!1}),r),null!=a&&setTimeout((()=>{if(!s.value&&!l.value){const e=new Error(`Async component timed out after ${a}ms.`);t(e),l.value=e}}),a),f().then((()=>{s.value=!0,e.parent&&ht(e.parent.vnode)&&C(e.parent.update)})).catch((e=>{t(e),l.value=e})),()=>s.value&&d?dt(d,e):l.value&&i?Io(i,{error:l.value}):n&&!u.value?Io(n):void 0}})}function dt(e,t){const{ref:n,props:o,children:s,ce:i}=t.vnode,r=Io(e,o,s);return r.ref=n,r.ce=i,delete t.vnode.ce,r}const ht=e=>e.type.__isKeepAlive,pt={name:"KeepAlive",__isKeepAlive:!0,props:{include:[String,RegExp,Array],exclude:[String,RegExp,Array],max:[String,Number]},setup(e,{slots:t}){const n=Zo(),o=n.ctx;if(!o.renderer)return()=>{const e=t.default&&t.default();return e&&1===e.length?e[0]:e};const i=new Map,r=new Set;let a=null;n.__v_cache=i;const c=n.suspense,{renderer:{p:u,m:d,um:h,o:{createElement:p}}}=o,f=p("div");function m(e){yt(e),h(e,n,c,!0)}function g(e){i.forEach(((t,n)=>{const o=_s(t.type);!o||e&&e(o)||b(n)}))}function b(e){const t=i.get(e);a&&To(t,a)?a&&yt(a):m(t),i.delete(e),r.delete(e)}o.activate=(e,t,n,o,i)=>{const r=e.component;d(e,t,n,0,c),u(r.vnode,e,t,n,r,c,o,e.slotScopeIds,i),no((()=>{r.isDeactivated=!1,r.a&&(0,s.invokeArrayFns)(r.a);const t=e.props&&e.props.onVnodeMounted;t&&qo(t,r.parent,e)}),c),q(r)},o.deactivate=e=>{const t=e.component;d(e,f,null,1,c),no((()=>{t.da&&(0,s.invokeArrayFns)(t.da);const n=e.props&&e.props.onVnodeUnmounted;n&&qo(n,t.parent,e),t.isDeactivated=!0}),c),q(t)},ze((()=>[e.include,e.exclude]),(([e,t])=>{e&&g((t=>ft(e,t))),t&&g((e=>!ft(t,e)))}),{flush:"post",deep:!0});let v=null;const y=()=>{null!=v&&i.set(v,_t(n.subTree))};return kt(y),Ot(y),Ct((()=>{i.forEach((e=>{const{subTree:t,suspense:o}=n,s=_t(t);if(e.type!==s.type||e.key!==s.key)m(e);else{yt(s);const e=s.component.da;e&&no(e,o)}}))})),()=>{if(v=null,!t.default)return null;const n=t.default(),o=n[0];if(n.length>1)return l("KeepAlive should contain exactly one component child."),a=null,n;if(!Po(o)||!(4&o.shapeFlag||128&o.shapeFlag))return a=null,o;let s=_t(o);const c=s.type,u=_s(ct(s)?s.type.__asyncResolved||{}:c),{include:d,exclude:h,max:p}=e;if(d&&(!u||!ft(d,u))||h&&u&&ft(h,u))return a=s,o;const f=null==s.key?c:s.key,m=i.get(f);return s.el&&(s=Bo(s),128&o.shapeFlag&&(o.ssContent=s)),v=f,m?(s.el=m.el,s.component=m.component,s.transition&&rt(s,s.transition),s.shapeFlag|=512,r.delete(f),r.add(f)):(r.add(f),p&&r.size>parseInt(p,10)&&b(r.values().next().value)),s.shapeFlag|=256,a=s,Pe(o.type)?o:s}}};function ft(e,t){return(0,s.isArray)(e)?e.some((e=>ft(e,t))):(0,s.isString)(e)?e.split(",").includes(t):!!(0,s.isRegExp)(e)&&e.test(t)}function mt(e,t){bt(e,"a",t)}function gt(e,t){bt(e,"da",t)}function bt(e,t,n=Qo){const o=e.__wdc||(e.__wdc=()=>{let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});if(xt(t,o,n),n){let e=n.parent;for(;e&&e.parent;)ht(e.parent.vnode)&&vt(o,t,n,e),e=e.parent}}function vt(e,t,n,o){const i=xt(t,e,o,!0);Et((()=>{(0,s.remove)(o[t],i)}),n)}function yt(e){e.shapeFlag&=-257,e.shapeFlag&=-513}function _t(e){return 128&e.shapeFlag?e.ssContent:e}function xt(e,t,n=Qo,i=!1){if(n){const s=n[e]||(n[e]=[]),r=t.__weh||(t.__weh=(...s)=>{if(n.isUnmounted)return;(0,o.pauseTracking)(),os(n);const i=f(t,n,e,s);return ss(),(0,o.resetTracking)(),i});return i?s.unshift(r):s.push(r),r}l(`${(0,s.toHandlerKey)(h[e].replace(/ hook$/,""))} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`)}const wt=e=>(t,n=Qo)=>(!us||"sp"===e)&&xt(e,((...e)=>t(...e)),n),St=wt("bm"),kt=wt("m"),jt=wt("bu"),Ot=wt("u"),Ct=wt("bum"),Et=wt("um"),At=wt("sp"),Pt=wt("rtg"),Tt=wt("rtc");function Mt(e,t=Qo){xt("ec",e,t)}function Rt(e,t,n,o){let i;const r=n&&n[o];if((0,s.isArray)(e)||(0,s.isString)(e)){i=new Array(e.length);for(let n=0,o=e.length;n<o;n++)i[n]=t(e[n],n,void 0,r&&r[n])}else if("number"==typeof e){Number.isInteger(e)||l(`The v-for range expect an integer value but got ${e}.`),i=new Array(e);for(let n=0;n<e;n++)i[n]=t(n+1,n,void 0,r&&r[n])}else if((0,s.isObject)(e))if(e[Symbol.iterator])i=Array.from(e,((e,n)=>t(e,n,void 0,r&&r[n])));else{const n=Object.keys(e);i=new Array(n.length);for(let o=0,s=n.length;o<s;o++){const s=n[o];i[o]=t(e[s],s,o,r&&r[o])}}else i=[];return n&&(n[o]=i),i}function Dt(e,t){for(let n=0;n<t.length;n++){const o=t[n];if((0,s.isArray)(o))for(let t=0;t<o.length;t++)e[o[t].name]=o[t].fn;else o&&(e[o.name]=o.key?(...e)=>{const t=o.fn(...e);return t&&(t.key=o.key),t}:o.fn)}return e}function Lt(e,t,n={},o,s){if(ie.isCE||ie.parent&&ct(ie.parent)&&ie.parent.isCE)return"default"!==t&&(n.name=t),Io("slot",n,o&&o());let i=e[t];i&&i.length>1&&(l("SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template."),i=()=>[]),i&&i._c&&(i._d=!1),wo();const r=i&&Ft(i(n)),a=Ao(go,{key:n.key||r&&r.key||`_${t}`},r||(o?o():[]),r&&1===e._?64:-2);return!s&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),i&&i._c&&(i._d=!0),a}function Ft(e){return e.some((e=>!Po(e)||e.type!==vo&&!(e.type===go&&!Ft(e.children))))?e:null}function It(e,t){const n={};if(!(0,s.isObject)(e))return l("v-on with no argument expects an object value."),n;for(const o in e)n[t&&/[A-Z]/.test(o)?`on:${o}`:(0,s.toHandlerKey)(o)]=e[o];return n}const Nt=e=>e?as(e)?bs(e)||e.proxy:Nt(e.parent):null,Bt=(0,s.extend)(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>(0,o.shallowReadonly)(e.props),$attrs:e=>(0,o.shallowReadonly)(e.attrs),$slots:e=>(0,o.shallowReadonly)(e.slots),$refs:e=>(0,o.shallowReadonly)(e.refs),$parent:e=>Nt(e.parent),$root:e=>Nt(e.root),$emit:e=>e.emit,$options:e=>__VUE_OPTIONS_API__?dn(e):e.type,$forceUpdate:e=>e.f||(e.f=()=>C(e.update)),$nextTick:e=>e.n||(e.n=O.bind(e.proxy)),$watch:e=>__VUE_OPTIONS_API__?Ue.bind(e):s.NOOP}),Vt=e=>"_"===e||"$"===e,$t=(e,t)=>e!==s.EMPTY_OBJ&&!e.__isScriptSetup&&(0,s.hasOwn)(e,t),zt={get({_:e},t){const{ctx:n,setupState:i,data:r,props:a,accessCache:c,type:u,appContext:d}=e;if("__isVue"===t)return!0;let h;if("$"!==t[0]){const o=c[t];if(void 0!==o)switch(o){case 1:return i[t];case 2:return r[t];case 4:return n[t];case 3:return a[t]}else{if($t(i,t))return c[t]=1,i[t];if(r!==s.EMPTY_OBJ&&(0,s.hasOwn)(r,t))return c[t]=2,r[t];if((h=e.propsOptions[0])&&(0,s.hasOwn)(h,t))return c[t]=3,a[t];if(n!==s.EMPTY_OBJ&&(0,s.hasOwn)(n,t))return c[t]=4,n[t];__VUE_OPTIONS_API__&&!ln||(c[t]=0)}}const p=Bt[t];let f,m;return p?("$attrs"===t?((0,o.track)(e,"get",t),pe()):"$slots"===t&&(0,o.track)(e,"get",t),p(e)):(f=u.__cssModules)&&(f=f[t])?f:n!==s.EMPTY_OBJ&&(0,s.hasOwn)(n,t)?(c[t]=4,n[t]):(m=d.config.globalProperties,(0,s.hasOwn)(m,t)?m[t]:void(!ie||(0,s.isString)(t)&&0===t.indexOf("__v")||(r!==s.EMPTY_OBJ&&Vt(t[0])&&(0,s.hasOwn)(r,t)?l(`Property ${JSON.stringify(t)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`):e===ie&&l(`Property ${JSON.stringify(t)} was accessed during render but is not defined on instance.`))))},set({_:e},t,n){const{data:o,setupState:i,ctx:r}=e;return $t(i,t)?(i[t]=n,!0):i.__isScriptSetup&&(0,s.hasOwn)(i,t)?(l(`Cannot mutate <script setup> binding "${t}" from Options API.`),!1):o!==s.EMPTY_OBJ&&(0,s.hasOwn)(o,t)?(o[t]=n,!0):(0,s.hasOwn)(e.props,t)?(l(`Attempting to mutate prop "${t}". Props are readonly.`),!1):"$"===t[0]&&t.slice(1)in e?(l(`Attempting to mutate public property "${t}". Properties starting with $ are reserved and readonly.`),!1):(t in e.appContext.config.globalProperties?Object.defineProperty(r,t,{enumerable:!0,configurable:!0,value:n}):r[t]=n,!0)},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:i,propsOptions:r}},a){let l;return!!n[a]||e!==s.EMPTY_OBJ&&(0,s.hasOwn)(e,a)||$t(t,a)||(l=r[0])&&(0,s.hasOwn)(l,a)||(0,s.hasOwn)(o,a)||(0,s.hasOwn)(Bt,a)||(0,s.hasOwn)(i.config.globalProperties,a)},defineProperty(e,t,n){return null!=n.get?e._.accessCache[t]=0:(0,s.hasOwn)(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)},ownKeys:e=>(l("Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead."),Reflect.ownKeys(e))},Ht=(0,s.extend)({},zt,{get(e,t){if(t!==Symbol.unscopables)return zt.get(e,t,e)},has(e,t){const n="_"!==t[0]&&!(0,s.isGloballyAllowed)(t);return!n&&zt.has(e,t)&&l(`Property ${JSON.stringify(t)} should not start with _ which is a reserved prefix for Vue internals.`),n}}),Ut=e=>l(`${e}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);function Wt(){return Ut("defineProps"),null}function Gt(){return Ut("defineEmits"),null}function Yt(e){Ut("defineExpose")}function qt(e){Ut("defineOptions")}function Kt(){return Ut("defineSlots"),null}function Jt(){Ut("defineModel")}function Xt(e,t){return Ut("withDefaults"),null}function Qt(){return tn().slots}function Zt(){return tn().attrs}function en(e,t,n){const s=Zo();if(!s)return l("useModel() called without active instance."),(0,o.ref)();if(!s.propsOptions[0][t])return l(`useModel() called with prop "${t}" which is not declared.`),(0,o.ref)();if(n&&n.local){const n=(0,o.ref)(e[t]);return ze((()=>e[t]),(e=>n.value=e)),ze(n,(n=>{n!==e[t]&&s.emit(`update:${t}`,n)})),n}return{__v_isRef:!0,get value(){return e[t]},set value(e){s.emit(`update:${t}`,e)}}}function tn(){const e=Zo();return e||l("useContext() called without active instance."),e.setupContext||(e.setupContext=gs(e))}function nn(e){return(0,s.isArray)(e)?e.reduce(((e,t)=>(e[t]=null,e)),{}):e}function on(e,t){const n=nn(e);for(const e in t){if(e.startsWith("__skip"))continue;let o=n[e];o?(0,s.isArray)(o)||(0,s.isFunction)(o)?o=n[e]={type:o,default:t[e]}:o.default=t[e]:null===o?o=n[e]={default:t[e]}:l(`props default key "${e}" has no corresponding declaration.`),o&&t[`__skip_${e}`]&&(o.skipFactory=!0)}return n}function sn(e,t){return e&&t?(0,s.isArray)(e)&&(0,s.isArray)(t)?e.concat(t):(0,s.extend)({},nn(e),nn(t)):e||t}function rn(e,t){const n={};for(const o in e)t.includes(o)||Object.defineProperty(n,o,{enumerable:!0,get:()=>e[o]});return n}function an(e){const t=Zo();t||l("withAsyncContext called without active current instance. This is likely a bug.");let n=e();return ss(),(0,s.isPromise)(n)&&(n=n.catch((e=>{throw os(t),e}))),[n,()=>os(t)]}let ln=!0;function cn(e,t,n){f((0,s.isArray)(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function un(e,t,n,o){const i=o.includes(".")?We(n,o):()=>n[o];if((0,s.isString)(e)){const n=t[e];(0,s.isFunction)(n)?ze(i,n):l(`Invalid watch handler specified by key "${e}"`,n)}else if((0,s.isFunction)(e))ze(i,e.bind(n));else if((0,s.isObject)(e))if((0,s.isArray)(e))e.forEach((e=>un(e,t,n,o)));else{const o=(0,s.isFunction)(e.handler)?e.handler.bind(n):t[e.handler];(0,s.isFunction)(o)?ze(i,o,e):l(`Invalid watch handler specified by key "${e.handler}"`,o)}else l(`Invalid watch option: "${o}"`,e)}function dn(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:i,optionsCache:r,config:{optionMergeStrategies:a}}=e.appContext,l=r.get(t);let c;return l?c=l:i.length||n||o?(c={},i.length&&i.forEach((e=>hn(c,e,a,!0))),hn(c,t,a)):c=t,(0,s.isObject)(t)&&r.set(t,c),c}function hn(e,t,n,o=!1){const{mixins:s,extends:i}=t;i&&hn(e,i,n,!0),s&&s.forEach((t=>hn(e,t,n,!0)));for(const s in t)if(o&&"expose"===s)l('"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.');else{const o=pn[s]||n&&n[s];e[s]=o?o(e[s],t[s]):t[s]}return e}const pn={data:fn,props:vn,emits:vn,methods:bn,computed:bn,beforeCreate:gn,created:gn,beforeMount:gn,mounted:gn,beforeUpdate:gn,updated:gn,beforeDestroy:gn,beforeUnmount:gn,destroyed:gn,unmounted:gn,activated:gn,deactivated:gn,errorCaptured:gn,serverPrefetch:gn,components:bn,directives:bn,watch:function(e,t){if(!e)return t;if(!t)return e;const n=(0,s.extend)(Object.create(null),e);for(const o in t)n[o]=gn(e[o],t[o]);return n},provide:fn,inject:function(e,t){return bn(mn(e),mn(t))}};function fn(e,t){return t?e?function(){return(0,s.extend)((0,s.isFunction)(e)?e.call(this,this):e,(0,s.isFunction)(t)?t.call(this,this):t)}:t:e}function mn(e){if((0,s.isArray)(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function gn(e,t){return e?[...new Set([].concat(e,t))]:t}function bn(e,t){return e?(0,s.extend)(Object.create(null),e,t):t}function vn(e,t){return e?(0,s.isArray)(e)&&(0,s.isArray)(t)?[...new Set([...e,...t])]:(0,s.extend)(Object.create(null),nn(e),nn(null!=t?t:{})):t}function yn(){return{app:null,config:{isNativeTag:s.NO,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let _n=0;function xn(e,t){return function(n,o=null){(0,s.isFunction)(n)||(n=(0,s.extend)({},n)),null==o||(0,s.isObject)(o)||(l("root props passed to app.mount() must be an object."),o=null);const i=yn();Object.defineProperty(i.config,"unwrapInjectedRef",{get:()=>!0,set(){l("app.config.unwrapInjectedRef has been deprecated. 3.3 now always unwraps injected refs in Options API.")}});const r=new WeakSet;let a=!1;const c=i.app={_uid:_n++,_component:n,_props:o,_container:null,_context:i,_instance:null,version:Ts,get config(){return i.config},set config(e){l("app.config cannot be replaced. Modify individual options instead.")},use:(e,...t)=>(r.has(e)?l("Plugin has already been applied to target app."):e&&(0,s.isFunction)(e.install)?(r.add(e),e.install(c,...t)):(0,s.isFunction)(e)?(r.add(e),e(c,...t)):l('A plugin must either be a function or an object with an "install" function.'),c),mixin:e=>(__VUE_OPTIONS_API__?i.mixins.includes(e)?l("Mixin has already been applied to target app"+(e.name?`: ${e.name}`:"")):i.mixins.push(e):l("Mixins are only available in builds supporting Options API"),c),component:(e,t)=>(rs(e,i.config),t?(i.components[e]&&l(`Component "${e}" has already been registered in target app.`),i.components[e]=t,c):i.components[e]),directive:(e,t)=>(Ye(e),t?(i.directives[e]&&l(`Directive "${e}" has already been registered in target app.`),i.directives[e]=t,c):i.directives[e]),mount(s,r,u){if(!a){s.__vue_app__&&l("There is already an app instance mounted on the host container.\n If you want to mount another app on the same host container, you need to unmount the previous app by calling `app.unmount()` first.");const d=Io(n,o);return d.appContext=i,i.reload=()=>{e(Bo(d),s,u)},r&&t?t(d,s):e(d,s,u),a=!0,c._container=s,s.__vue_app__=c,c._instance=d.component,function(e,t){G("app:init",e,t,{Fragment:go,Text:bo,Comment:vo,Static:yo})}(c,Ts),bs(d.component)||d.component.proxy}l("App has already been mounted.\nIf you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. `const createMyApp = () => createApp(App)`")},unmount(){a?(e(null,c._container),c._instance=null,function(e){G("app:unmount",e)}(c),delete c._container.__vue_app__):l("Cannot unmount an app that is not mounted.")},provide:(e,t)=>(e in i.provides&&l(`App already provides property with key "${String(e)}". It will be overwritten with the new value.`),i.provides[e]=t,c),runWithContext(e){wn=c;try{return e()}finally{wn=null}}};return c}}let wn=null;function Sn(e,t){if(Qo){let n=Qo.provides;const o=Qo.parent&&Qo.parent.provides;o===n&&(n=Qo.provides=Object.create(o)),n[e]=t}else l("provide() can only be used inside setup().")}function kn(e,t,n=!1){const o=Qo||ie;if(o||wn){const i=o?null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides:wn._context.provides;if(i&&e in i)return i[e];if(arguments.length>1)return n&&(0,s.isFunction)(t)?t.call(o&&o.proxy):t;l(`injection "${String(e)}" not found.`)}else l("inject() can only be used inside setup() or functional components.")}function jn(){return!!(Qo||ie||wn)}function On(e,t,n,i){const[r,a]=e.propsOptions;let l,c=!1;if(t)for(let o in t){if((0,s.isReservedProp)(o))continue;const u=t[o];let d;r&&(0,s.hasOwn)(r,d=(0,s.camelize)(o))?a&&a.includes(d)?(l||(l={}))[d]=u:n[d]=u:se(e.emitsOptions,o)||o in i&&u===i[o]||(i[o]=u,c=!0)}if(a){const t=(0,o.toRaw)(n),i=l||s.EMPTY_OBJ;for(let o=0;o<a.length;o++){const l=a[o];n[l]=Cn(r,t,l,i[l],e,!(0,s.hasOwn)(i,l))}}return c}function Cn(e,t,n,o,i,r){const a=e[n];if(null!=a){const e=(0,s.hasOwn)(a,"default");if(e&&void 0===o){const e=a.default;if(a.type!==Function&&!a.skipFactory&&(0,s.isFunction)(e)){const{propsDefaults:s}=i;n in s?o=s[n]:(os(i),o=s[n]=e.call(null,t),ss())}else o=e}a[0]&&(r&&!e?o=!1:!a[1]||""!==o&&o!==(0,s.hyphenate)(n)||(o=!0))}return o}function En(e,t,n=!1){const o=t.propsCache,i=o.get(e);if(i)return i;const r=e.props,a={},c=[];let u=!1;if(__VUE_OPTIONS_API__&&!(0,s.isFunction)(e)){const o=e=>{u=!0;const[n,o]=En(e,t,!0);(0,s.extend)(a,n),o&&c.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!r&&!u)return(0,s.isObject)(e)&&o.set(e,s.EMPTY_ARR),s.EMPTY_ARR;if((0,s.isArray)(r))for(let e=0;e<r.length;e++){(0,s.isString)(r[e])||l("props must be strings when using array syntax.",r[e]);const t=(0,s.camelize)(r[e]);An(t)&&(a[t]=s.EMPTY_OBJ)}else if(r){(0,s.isObject)(r)||l("invalid props options",r);for(const e in r){const t=(0,s.camelize)(e);if(An(t)){const n=r[e],o=a[t]=(0,s.isArray)(n)||(0,s.isFunction)(n)?{type:n}:(0,s.extend)({},n);if(o){const e=Mn(Boolean,o.type),n=Mn(String,o.type);o[0]=e>-1,o[1]=n<0||e<n,(e>-1||(0,s.hasOwn)(o,"default"))&&c.push(t)}}}}const d=[a,c];return(0,s.isObject)(e)&&o.set(e,d),d}function An(e){return"$"!==e[0]||(l(`Invalid prop name: "${e}" is a reserved property.`),!1)}function Pn(e){const t=e&&e.toString().match(/^\s*(function|class) (\w+)/);return t?t[2]:null===e?"null":""}function Tn(e,t){return Pn(e)===Pn(t)}function Mn(e,t){return(0,s.isArray)(t)?t.findIndex((t=>Tn(t,e))):(0,s.isFunction)(t)&&Tn(t,e)?0:-1}function Rn(e,t,n){const i=(0,o.toRaw)(t),r=n.propsOptions[0];for(const t in r){let n=r[t];null!=n&&Dn(t,i[t],n,!(0,s.hasOwn)(e,t)&&!(0,s.hasOwn)(e,(0,s.hyphenate)(t)))}}function Dn(e,t,n,o){const{type:i,required:r,validator:a,skipCheck:c}=n;if(r&&o)l('Missing required prop: "'+e+'"');else if(null!=t||r){if(null!=i&&!0!==i&&!c){let n=!1;const o=(0,s.isArray)(i)?i:[i],r=[];for(let e=0;e<o.length&&!n;e++){const{valid:s,expectedType:i}=Fn(t,o[e]);r.push(i||""),n=s}if(!n)return void l(function(e,t,n){if(0===n.length)return`Prop type [] for prop "${e}" won't match anything. Did you mean to use type Array instead?`;let o=`Invalid prop: type check failed for prop "${e}". Expected ${n.map(s.capitalize).join(" | ")}`;const i=n[0],r=(0,s.toRawType)(t),a=In(t,i),l=In(t,r);return 1===n.length&&Nn(i)&&!function(...e){return e.some((e=>"boolean"===e.toLowerCase()))}(i,r)&&(o+=` with value ${a}`),o+=`, got ${r} `,Nn(r)&&(o+=`with value ${l}.`),o}(e,t,r))}a&&!a(t)&&l('Invalid prop: custom validator check failed for prop "'+e+'".')}}const Ln=(0,s.makeMap)("String,Number,Boolean,Function,Symbol,BigInt");function Fn(e,t){let n;const o=Pn(t);if(Ln(o)){const s=typeof e;n=s===o.toLowerCase(),n||"object"!==s||(n=e instanceof t)}else n="Object"===o?(0,s.isObject)(e):"Array"===o?(0,s.isArray)(e):"null"===o?null===e:e instanceof t;return{valid:n,expectedType:o}}function In(e,t){return"String"===t?`"${e}"`:"Number"===t?`${Number(e)}`:`${e}`}function Nn(e){return["string","number","boolean"].some((t=>e.toLowerCase()===t))}const Bn=e=>"_"===e[0]||"$stable"===e,Vn=e=>(0,s.isArray)(e)?e.map(Uo):[Uo(e)],$n=(e,t,n)=>{if(t._n)return t;const o=de(((...n)=>(Qo&&l(`Slot "${e}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`),Vn(t(...n)))),n);return o._c=!1,o},zn=(e,t,n)=>{const o=e._ctx;for(const n in e){if(Bn(n))continue;const i=e[n];if((0,s.isFunction)(i))t[n]=$n(n,i,o);else if(null!=i){l(`Non-function value encountered for slot "${n}". Prefer function slots for better performance.`);const e=Vn(i);t[n]=()=>e}}},Hn=(e,t)=>{ht(e.vnode)||l("Non-function value encountered for default slot. Prefer function slots for better performance.");const n=Vn(t);e.slots.default=()=>n},Un=(e,t)=>{if(32&e.vnode.shapeFlag){const n=t._;n?(e.slots=(0,o.toRaw)(t),(0,s.def)(t,"_",n)):zn(t,e.slots={})}else e.slots={},t&&Hn(e,t);(0,s.def)(e.slots,Ro,1)},Wn=(e,t,n)=>{const{vnode:i,slots:r}=e;let a=!0,l=s.EMPTY_OBJ;if(32&i.shapeFlag){const i=t._;i?F?((0,s.extend)(r,t),(0,o.trigger)(e,"set","$slots")):n&&1===i?a=!1:((0,s.extend)(r,t),n||1!==i||delete r._):(a=!t.$stable,zn(t,r)),l=t}else t&&(Hn(e,t),l={default:1});if(a)for(const e in r)Bn(e)||null!=l[e]||delete r[e]};function Gn(e,t,n,i,r=!1){if((0,s.isArray)(e))return void e.forEach(((e,o)=>Gn(e,t&&((0,s.isArray)(t)?t[o]:t),n,i,r)));if(ct(i)&&!r)return;const a=4&i.shapeFlag?bs(i.component)||i.component.proxy:i.el,c=r?null:a,{i:u,r:d}=e;if(!u)return void l("Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.");const h=t&&t.r,f=u.refs===s.EMPTY_OBJ?u.refs={}:u.refs,m=u.setupState;if(null!=h&&h!==d&&((0,s.isString)(h)?(f[h]=null,(0,s.hasOwn)(m,h)&&(m[h]=null)):(0,o.isRef)(h)&&(h.value=null)),(0,s.isFunction)(d))p(d,u,12,[c,f]);else{const t=(0,s.isString)(d),i=(0,o.isRef)(d);if(t||i){const o=()=>{if(e.f){const n=t?(0,s.hasOwn)(m,d)?m[d]:f[d]:d.value;r?(0,s.isArray)(n)&&(0,s.remove)(n,a):(0,s.isArray)(n)?n.includes(a)||n.push(a):t?(f[d]=[a],(0,s.hasOwn)(m,d)&&(m[d]=f[d])):(d.value=[a],e.k&&(f[e.k]=d.value))}else t?(f[d]=c,(0,s.hasOwn)(m,d)&&(m[d]=c)):i?(d.value=c,e.k&&(f[e.k]=c)):l("Invalid template ref type:",d,`(${typeof d})`)};c?(o.id=-1,no(o,n)):o()}else l("Invalid template ref type:",d,`(${typeof d})`)}}let Yn=!1;const qn=e=>/svg/.test(e.namespaceURI)&&"foreignObject"!==e.tagName,Kn=e=>8===e.nodeType;function Jn(e){const{mt:t,p:n,o:{patchProp:o,createText:i,nextSibling:r,parentNode:a,remove:c,insert:u,createComment:d}}=e,h=(n,o,s,c,d,_=!1)=>{const x=Kn(n)&&"["===n.data,w=()=>g(n,o,s,c,d,x),{type:S,ref:k,shapeFlag:j,patchFlag:O}=o;let C=n.nodeType;o.el=n,"__vnode"in n||Object.defineProperty(n,"__vnode",{value:o,enumerable:!1}),"__vueParentComponent"in n||Object.defineProperty(n,"__vueParentComponent",{value:s,enumerable:!1}),-2===O&&(_=!1,o.dynamicChildren=null);let E=null;switch(S){case bo:3!==C?""===o.children?(u(o.el=i(""),a(n),n),E=n):E=w():(n.data!==o.children&&(Yn=!0,l(`Hydration text mismatch:\n- Server rendered: ${JSON.stringify(n.data)}\n- Client rendered: ${JSON.stringify(o.children)}`),n.data=o.children),E=r(n));break;case vo:y(n)?(E=r(n),v(o.el=n.content.firstChild,n,s)):E=8!==C||x?w():r(n);break;case yo:if(x&&(C=(n=r(n)).nodeType),1===C||3===C){E=n;const e=!o.children.length;for(let t=0;t<o.staticCount;t++)e&&(o.children+=1===E.nodeType?E.outerHTML:E.data),t===o.staticCount-1&&(o.anchor=E),E=r(E);return x?r(E):E}w();break;case go:E=x?m(n,o,s,c,d,_):w();break;default:if(1&j)E=1===C&&o.type.toLowerCase()===n.tagName.toLowerCase()||y(n)?p(n,o,s,c,d,_):w();else if(6&j){o.slotScopeIds=d;const e=a(n);if(E=x?b(n):Kn(n)&&"teleport start"===n.data?b(n,n.data,"teleport end"):r(n),t(o,e,null,s,c,qn(e),_),ct(o)){let t;x?(t=Io(go),t.anchor=E?E.previousSibling:e.lastChild):t=3===n.nodeType?$o(""):Io("div"),t.el=n,o.component.subTree=t}}else 64&j?E=8!==C?w():o.type.hydrate(n,o,s,c,d,_,e,f):128&j?E=o.type.hydrate(n,o,s,c,qn(a(n)),d,_,e,h):l("Invalid HostVNode type:",S,`(${typeof S})`)}return null!=k&&Gn(k,null,c,o),E},p=(e,t,n,i,r,a)=>{a=a||!!t.dynamicChildren;const{type:u,props:d,patchFlag:h,shapeFlag:p,dirs:m,transition:g}=t,b="input"===u||"option"===u;{if(m&&Ke(t,null,n,"created"),d)if(b||!a||48&h)for(const t in d)(b&&(t.endsWith("value")||"indeterminate"===t)||(0,s.isOn)(t)&&!(0,s.isReservedProp)(t)||"."===t[0])&&o(e,t,null,d[t],!1,void 0,n);else d.onClick&&o(e,"onClick",null,d.onClick,!1,void 0,n);let u;(u=d&&d.onVnodeBeforeMount)&&qo(u,n,t);let _=!1;if(y(e)){_=ao(i,g)&&n&&n.vnode.props&&n.vnode.props.appear;const o=e.content.firstChild;_&&g.beforeEnter(o),v(o,e,n),t.el=e=o}if(m&&Ke(t,null,n,"beforeMount"),((u=d&&d.onVnodeMounted)||m||_)&&Fe((()=>{u&&qo(u,n,t),_&&g.enter(e),m&&Ke(t,null,n,"mounted")}),i),16&p&&(!d||!d.innerHTML&&!d.textContent)){let o=f(e.firstChild,t,e,n,i,r,a),s=!1;for(;o;){Yn=!0,s||(l(`Hydration children mismatch in <${t.type}>: server rendered element contains more child nodes than client vdom.`),s=!0);const e=o;o=o.nextSibling,c(e)}}else 8&p&&e.textContent!==t.children&&(Yn=!0,l(`Hydration text content mismatch in <${t.type}>:\n- Server rendered: ${e.textContent}\n- Client rendered: ${t.children}`),e.textContent=t.children)}return e.nextSibling},f=(e,t,o,s,i,r,a)=>{a=a||!!t.dynamicChildren;const c=t.children,u=c.length;let d=!1;for(let t=0;t<u;t++){const u=a?c[t]:c[t]=Uo(c[t]);if(e)e=h(e,u,s,i,r,a);else{if(u.type===bo&&!u.children)continue;Yn=!0,d||(l(`Hydration children mismatch in <${o.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`),d=!0),n(null,u,o,null,s,i,qn(o),r)}}return e},m=(e,t,n,o,s,i)=>{const{slotScopeIds:l}=t;l&&(s=s?s.concat(l):l);const c=a(e),h=f(r(e),t,c,n,o,s,i);return h&&Kn(h)&&"]"===h.data?r(t.anchor=h):(Yn=!0,u(t.anchor=d("]"),c,h),h)},g=(e,t,o,s,i,u)=>{if(Yn=!0,l("Hydration node mismatch:\n- Client vnode:",t.type,"\n- Server rendered DOM:",e,3===e.nodeType?"(text)":Kn(e)&&"["===e.data?"(start of fragment)":""),t.el=null,u){const t=b(e);for(;;){const n=r(e);if(!n||n===t)break;c(n)}}const d=r(e),h=a(e);return c(e),n(null,t,h,d,o,s,qn(h),i),d},b=(e,t="[",n="]")=>{let o=0;for(;e;)if((e=r(e))&&Kn(e)&&(e.data===t&&o++,e.data===n)){if(0===o)return r(e);o--}return e},v=(e,t,n)=>{const o=t.parentNode;o&&o.replaceChild(e,t);let s=n;for(;s;)s.vnode.el===t&&(s.vnode.el=s.subTree.el=e),s=s.parent},y=e=>1===e.nodeType&&"template"===e.tagName.toLowerCase();return[(e,t)=>{if(!t.hasChildNodes())return l("Attempting to hydrate existing markup but container is empty. Performing full mount instead."),n(null,e,t),T(),void(t._vnode=e);Yn=!1,h(t.firstChild,e,null,null,null),T(),t._vnode=e,Yn&&console.error("Hydration completed but contains mismatches.")},h]}let Xn,Qn;function Zn(e,t){e.appContext.config.performance&&to()&&Qn.mark(`vue-${t}-${e.uid}`),Z(e,t,to()?Qn.now():Date.now())}function eo(e,t){if(e.appContext.config.performance&&to()){const n=`vue-${t}-${e.uid}`,o=n+":end";Qn.mark(o),Qn.measure(`<${xs(e,e.type)}> ${t}`,n,o),Qn.clearMarks(n),Qn.clearMarks(o)}ee(e,t,to()?Qn.now():Date.now())}function to(){return void 0!==Xn||("undefined"!=typeof window&&window.performance?(Xn=!0,Qn=window.performance):Xn=!1),Xn}const no=Fe;function oo(e){return io(e)}function so(e){return io(e,Jn)}function io(e,t){!function(){const e=[];if("boolean"!=typeof __VUE_OPTIONS_API__&&(e.push("__VUE_OPTIONS_API__"),(0,s.getGlobalThis)().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(e.push("__VUE_PROD_DEVTOOLS__"),(0,s.getGlobalThis)().__VUE_PROD_DEVTOOLS__=!1),e.length){const t=e.length>1;console.warn(`Feature flag${t?"s":""} ${e.join(", ")} ${t?"are":"is"} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.\n\nFor more details, see https://link.vuejs.org/feature-flags.`)}}();const n=(0,s.getGlobalThis)();n.__VUE__=!0,Y(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:i,remove:c,patchProp:u,createElement:d,createText:h,createComment:p,setText:f,setElementText:m,parentNode:g,nextSibling:b,setScopeId:_=s.NOOP,insertStaticContent:x}=e,w=(e,t,n,o=null,s=null,i=null,r=!1,a=null,c=!F&&!!t.dynamicChildren)=>{if(e===t)return;e&&!To(e,t)&&(o=ae(e),te(e,s,i,!0),e=null),-2===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:u,ref:d,shapeFlag:h}=t;switch(u){case bo:S(e,t,n,o);break;case vo:k(e,t,n,o);break;case yo:null==e?j(t,n,o,r):O(e,t,n,r);break;case go:$(e,t,n,o,s,i,r,a,c);break;default:1&h?A(e,t,n,o,s,i,r,a,c):6&h?z(e,t,n,o,s,i,r,a,c):64&h||128&h?u.process(e,t,n,o,s,i,r,a,c,ce):l("Invalid VNode type:",u,`(${typeof u})`)}null!=d&&s&&Gn(d,e&&e.ref,i,t||e,!t)},S=(e,t,n,o)=>{if(null==e)i(t.el=h(t.children),n,o);else{const n=t.el=e.el;t.children!==e.children&&f(n,t.children)}},k=(e,t,n,o)=>{null==e?i(t.el=p(t.children||""),n,o):t.el=e.el},j=(e,t,n,o)=>{[e.el,e.anchor]=x(e.children,t,n,o,e.el,e.anchor)},O=(e,t,n,o)=>{if(t.children!==e.children){const s=b(e.anchor);E(e),[t.el,t.anchor]=x(t.children,n,s,o)}else t.el=e.el,t.anchor=e.anchor},E=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=b(e),c(e),e=n;c(t)},A=(e,t,n,o,s,i,r,a,l)=>{r=r||"svg"===t.type,null==e?M(t,n,o,s,i,r,a,l):L(e,t,s,i,r,a,l)},M=(e,t,n,o,r,a,l,c)=>{let h,p;const{type:f,props:g,shapeFlag:b,transition:v,dirs:y}=e;if(h=e.el=d(e.type,a,g&&g.is,g),8&b?m(h,e.children):16&b&&D(e.children,h,null,o,r,a&&"foreignObject"!==f,l,c),y&&Ke(e,null,o,"created"),R(h,e,e.scopeId,l,o),g){for(const t in g)"value"===t||(0,s.isReservedProp)(t)||u(h,t,null,g[t],a,e.children,o,r,re);"value"in g&&u(h,"value",null,g.value),(p=g.onVnodeBeforeMount)&&qo(p,o,e)}Object.defineProperty(h,"__vnode",{value:e,enumerable:!1}),Object.defineProperty(h,"__vueParentComponent",{value:o,enumerable:!1}),y&&Ke(e,null,o,"beforeMount");const _=ao(r,v);_&&v.beforeEnter(h),i(h,t,n),((p=g&&g.onVnodeMounted)||_||y)&&no((()=>{p&&qo(p,o,e),_&&v.enter(h),y&&Ke(e,null,o,"mounted")}),r)},R=(e,t,n,o,s)=>{if(n&&_(e,n),o)for(let t=0;t<o.length;t++)_(e,o[t]);if(s){let n=s.subTree;if(n.patchFlag>0&&2048&n.patchFlag&&(n=ge(n.children)||n),t===n){const t=s.vnode;R(e,t,t.scopeId,t.slotScopeIds,s.parent)}}},D=(e,t,n,o,s,i,r,a,l=0)=>{for(let c=l;c<e.length;c++){const l=e[c]=a?Wo(e[c]):Uo(e[c]);w(null,l,t,n,o,s,i,r,a)}},L=(e,t,n,o,i,r,a)=>{const l=t.el=e.el;let{patchFlag:c,dynamicChildren:d,dirs:h}=t;c|=16&e.patchFlag;const p=e.props||s.EMPTY_OBJ,f=t.props||s.EMPTY_OBJ;let g;n&&ro(n,!1),(g=f.onVnodeBeforeUpdate)&&qo(g,n,t,e),h&&Ke(t,e,n,"beforeUpdate"),n&&ro(n,!0),F&&(c=0,a=!1,d=null);const b=i&&"foreignObject"!==t.type;if(d?(I(e.dynamicChildren,d,l,n,o,b,r),lo(e,t)):a||J(e,t,l,null,n,o,b,r,!1),c>0){if(16&c)V(l,t,p,f,n,o,i);else if(2&c&&p.class!==f.class&&u(l,"class",null,f.class,i),4&c&&u(l,"style",p.style,f.style,i),8&c){const s=t.dynamicProps;for(let t=0;t<s.length;t++){const r=s[t],a=p[r],c=f[r];c===a&&"value"!==r||u(l,r,a,c,i,e.children,n,o,re)}}1&c&&e.children!==t.children&&m(l,t.children)}else a||null!=d||V(l,t,p,f,n,o,i);((g=f.onVnodeUpdated)||h)&&no((()=>{g&&qo(g,n,t,e),h&&Ke(t,e,n,"updated")}),o)},I=(e,t,n,o,s,i,r)=>{for(let a=0;a<t.length;a++){const l=e[a],c=t[a],u=l.el&&(l.type===go||!To(l,c)||70&l.shapeFlag)?g(l.el):n;w(l,c,u,null,o,s,i,r,!0)}},V=(e,t,n,o,i,r,a)=>{if(n!==o){if(n!==s.EMPTY_OBJ)for(const l in n)(0,s.isReservedProp)(l)||l in o||u(e,l,n[l],null,a,t.children,i,r,re);for(const l in o){if((0,s.isReservedProp)(l))continue;const c=o[l],d=n[l];c!==d&&"value"!==l&&u(e,l,d,c,a,t.children,i,r,re)}"value"in o&&u(e,"value",n.value,o.value)}},$=(e,t,n,o,s,r,a,l,c)=>{const u=t.el=e?e.el:h(""),d=t.anchor=e?e.anchor:h("");let{patchFlag:p,dynamicChildren:f,slotScopeIds:m}=t;(F||2048&p)&&(p=0,c=!1,f=null),m&&(l=l?l.concat(m):m),null==e?(i(u,n,o),i(d,n,o),D(t.children,n,d,s,r,a,l,c)):p>0&&64&p&&f&&e.dynamicChildren?(I(e.dynamicChildren,f,n,s,r,a,l),lo(e,t)):J(e,t,n,d,s,r,a,l,c)},z=(e,t,n,o,s,i,r,a,l)=>{t.slotScopeIds=a,null==e?512&t.shapeFlag?s.ctx.activate(t,n,o,r,l):H(t,n,o,s,i,r,l):U(e,t,l)},H=(e,t,n,o,s,i,l)=>{const c=e.component=Xo(e,o,s);if(c.type.__hmrId&&function(e){const t=e.type.__hmrId;let n=N.get(t);n||(B(t,e.type),n=N.get(t)),n.instances.add(e)}(c),r(e),Zn(c,"mount"),ht(e)&&(c.ctx.renderer=ce),Zn(c,"init"),ds(c),eo(c,"init"),c.asyncDep){if(s&&s.registerDep(c,W),!e.el){const e=c.subTree=Io(vo);k(null,e,t,n)}}else W(c,e,t,n,s,i,l),a(),eo(c,"mount")},U=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:s,component:i}=e,{props:r,children:a,patchFlag:l}=t,c=i.emitsOptions;if((s||a)&&F)return!0;if(t.dirs||t.transition)return!0;if(!(n&&l>=0))return!(!s&&!a||a&&a.$stable)||o!==r&&(o?!r||_e(o,r,c):!!r);if(1024&l)return!0;if(16&l)return o?_e(o,r,c):!!r;if(8&l){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(r[n]!==o[n]&&!se(c,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return r(t),G(o,t,n),void a();o.next=t,function(e){const t=v.indexOf(e);t>y&&v.splice(t,1)}(o.update),o.update()}else t.el=e.el,o.vnode=t},W=(e,t,n,i,l,c,u)=>{const d=e.effect=new o.ReactiveEffect((()=>{if(e.isMounted){let t,{next:n,bu:o,u:i,parent:d,vnode:h}=e,p=n;r(n||e.vnode),ro(e,!1),n?(n.el=h.el,G(e,n,u)):n=h,o&&(0,s.invokeArrayFns)(o),(t=n.props&&n.props.onVnodeBeforeUpdate)&&qo(t,d,n,h),ro(e,!0),Zn(e,"render");const f=fe(e);eo(e,"render");const m=e.subTree;e.subTree=f,Zn(e,"patch"),w(m,f,g(m.el),ae(m),e,l,c),eo(e,"patch"),n.el=f.el,null===p&&xe(e,f.el),i&&no(i,l),(t=n.props&&n.props.onVnodeUpdated)&&no((()=>qo(t,d,n,h)),l),K(e),a()}else{let o;const{el:r,props:a}=t,{bm:u,m:d,parent:h}=e,p=ct(t);if(ro(e,!1),u&&(0,s.invokeArrayFns)(u),!p&&(o=a&&a.onVnodeBeforeMount)&&qo(o,h,t),ro(e,!0),r&&de){const n=()=>{Zn(e,"render"),e.subTree=fe(e),eo(e,"render"),Zn(e,"hydrate"),de(r,e.subTree,e,l,null),eo(e,"hydrate")};p?t.type.__asyncLoader().then((()=>!e.isUnmounted&&n())):n()}else{Zn(e,"render");const o=e.subTree=fe(e);eo(e,"render"),Zn(e,"patch"),w(null,o,n,i,e,l,c),eo(e,"patch"),t.el=o.el}if(d&&no(d,l),!p&&(o=a&&a.onVnodeMounted)){const e=t;no((()=>qo(o,h,e)),l)}(256&t.shapeFlag||h&&ct(h.vnode)&&256&h.vnode.shapeFlag)&&e.a&&no(e.a,l),e.isMounted=!0,q(e),t=n=i=null}}),(()=>C(h)),e.scope),h=e.update=()=>d.run();h.id=e.uid,ro(e,!0),d.onTrack=e.rtc?t=>(0,s.invokeArrayFns)(e.rtc,t):void 0,d.onTrigger=e.rtg?t=>(0,s.invokeArrayFns)(e.rtg,t):void 0,h.ownerInstance=e,h()},G=(e,t,n)=>{t.component=e;const i=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,i){const{props:r,attrs:a,vnode:{patchFlag:l}}=e,c=(0,o.toRaw)(r),[u]=e.propsOptions;let d=!1;if(function(e){for(;e;){if(e.type.__hmrId)return!0;e=e.parent}}(e)||!(i||l>0)||16&l){let o;On(e,t,r,a)&&(d=!0);for(const i in c)t&&((0,s.hasOwn)(t,i)||(o=(0,s.hyphenate)(i))!==i&&(0,s.hasOwn)(t,o))||(u?!n||void 0===n[i]&&void 0===n[o]||(r[i]=Cn(u,c,i,void 0,e,!0)):delete r[i]);if(a!==c)for(const e in a)t&&(0,s.hasOwn)(t,e)||(delete a[e],d=!0)}else if(8&l){const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let i=n[o];if(se(e.emitsOptions,i))continue;const l=t[i];if(u)if((0,s.hasOwn)(a,i))l!==a[i]&&(a[i]=l,d=!0);else{const t=(0,s.camelize)(i);r[t]=Cn(u,c,t,l,e,!1)}else l!==a[i]&&(a[i]=l,d=!0)}}d&&(0,o.trigger)(e,"set","$attrs"),Rn(t||{},r,e)}(e,t.props,i,n),Wn(e,t.children,n),(0,o.pauseTracking)(),P(),(0,o.resetTracking)()},J=(e,t,n,o,s,i,r,a,l=!1)=>{const c=e&&e.children,u=e?e.shapeFlag:0,d=t.children,{patchFlag:h,shapeFlag:p}=t;if(h>0){if(128&h)return void Z(c,d,n,o,s,i,r,a,l);if(256&h)return void Q(c,d,n,o,s,i,r,a,l)}8&p?(16&u&&re(c,s,i),d!==c&&m(n,d)):16&u?16&p?Z(c,d,n,o,s,i,r,a,l):re(c,s,i,!0):(8&u&&m(n,""),16&p&&D(d,n,o,s,i,r,a,l))},Q=(e,t,n,o,i,r,a,l,c)=>{e=e||s.EMPTY_ARR,t=t||s.EMPTY_ARR;const u=e.length,d=t.length,h=Math.min(u,d);let p;for(p=0;p<h;p++){const o=t[p]=c?Wo(t[p]):Uo(t[p]);w(e[p],o,n,null,i,r,a,l,c)}u>d?re(e,i,r,!0,!1,h):D(t,n,o,i,r,a,l,c,h)},Z=(e,t,n,o,i,r,a,c,u)=>{let d=0;const h=t.length;let p=e.length-1,f=h-1;for(;d<=p&&d<=f;){const o=e[d],s=t[d]=u?Wo(t[d]):Uo(t[d]);if(!To(o,s))break;w(o,s,n,null,i,r,a,c,u),d++}for(;d<=p&&d<=f;){const o=e[p],s=t[f]=u?Wo(t[f]):Uo(t[f]);if(!To(o,s))break;w(o,s,n,null,i,r,a,c,u),p--,f--}if(d>p){if(d<=f){const e=f+1,s=e<h?t[e].el:o;for(;d<=f;)w(null,t[d]=u?Wo(t[d]):Uo(t[d]),n,s,i,r,a,c,u),d++}}else if(d>f)for(;d<=p;)te(e[d],i,r,!0),d++;else{const m=d,g=d,b=new Map;for(d=g;d<=f;d++){const e=t[d]=u?Wo(t[d]):Uo(t[d]);null!=e.key&&(b.has(e.key)&&l("Duplicate keys found during update:",JSON.stringify(e.key),"Make sure keys are unique."),b.set(e.key,d))}let v,y=0;const _=f-g+1;let x=!1,S=0;const k=new Array(_);for(d=0;d<_;d++)k[d]=0;for(d=m;d<=p;d++){const o=e[d];if(y>=_){te(o,i,r,!0);continue}let s;if(null!=o.key)s=b.get(o.key);else for(v=g;v<=f;v++)if(0===k[v-g]&&To(o,t[v])){s=v;break}void 0===s?te(o,i,r,!0):(k[s-g]=d+1,s>=S?S=s:x=!0,w(o,t[s],n,null,i,r,a,c,u),y++)}const j=x?function(e){const t=e.slice(),n=[0];let o,s,i,r,a;const l=e.length;for(o=0;o<l;o++){const l=e[o];if(0!==l){if(s=n[n.length-1],e[s]<l){t[o]=s,n.push(o);continue}for(i=0,r=n.length-1;i<r;)a=i+r>>1,e[n[a]]<l?i=a+1:r=a;l<e[n[i]]&&(i>0&&(t[o]=n[i-1]),n[i]=o)}}for(i=n.length,r=n[i-1];i-- >0;)n[i]=r,r=t[r];return n}(k):s.EMPTY_ARR;for(v=j.length-1,d=_-1;d>=0;d--){const e=g+d,s=t[e],l=e+1<h?t[e+1].el:o;0===k[d]?w(null,s,n,l,i,r,a,c,u):x&&(v<0||d!==j[v]?ee(s,n,l,2):v--)}}},ee=(e,t,n,o,s=null)=>{const{el:r,type:a,transition:l,children:c,shapeFlag:u}=e;if(6&u)ee(e.component.subTree,t,n,o);else if(128&u)e.suspense.move(t,n,o);else if(64&u)a.move(e,t,n,ce);else if(a!==go)if(a!==yo)if(2!==o&&1&u&&l)if(0===o)l.beforeEnter(r),i(r,t,n),no((()=>l.enter(r)),s);else{const{leave:e,delayLeave:o,afterLeave:s}=l,a=()=>i(r,t,n),c=()=>{e(r,(()=>{a(),s&&s()}))};o?o(r,a,c):c()}else i(r,t,n);else(({el:e,anchor:t},n,o)=>{let s;for(;e&&e!==t;)s=b(e),i(e,n,o),e=s;i(t,n,o)})(e,t,n);else{i(r,t,n);for(let e=0;e<c.length;e++)ee(c[e],t,n,o);i(e.anchor,t,n)}},te=(e,t,n,o=!1,s=!1)=>{const{type:i,props:r,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:d,dirs:h}=e;if(null!=a&&Gn(a,null,n,e,!0),256&u)return void t.ctx.deactivate(e);const p=1&u&&h,f=!ct(e);let m;if(f&&(m=r&&r.onVnodeBeforeUnmount)&&qo(m,t,e),6&u)ie(e.component,n,o);else{if(128&u)return void e.suspense.unmount(n,o);p&&Ke(e,null,t,"beforeUnmount"),64&u?e.type.remove(e,t,n,s,ce,o):c&&(i!==go||d>0&&64&d)?re(c,t,n,!1,!0):(i===go&&384&d||!s&&16&u)&&re(l,t,n),o&&ne(e)}(f&&(m=r&&r.onVnodeUnmounted)||p)&&no((()=>{m&&qo(m,t,e),p&&Ke(e,null,t,"unmounted")}),n)},ne=e=>{const{type:t,el:n,anchor:o,transition:s}=e;if(t===go)return void(e.patchFlag>0&&2048&e.patchFlag&&s&&!s.persisted?e.children.forEach((e=>{e.type===vo?c(e.el):ne(e)})):oe(n,o));if(t===yo)return void E(e);const i=()=>{c(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:o}=s,r=()=>t(n,i);o?o(e.el,i,r):r()}else i()},oe=(e,t)=>{let n;for(;e!==t;)n=b(e),c(e),e=n;c(t)},ie=(e,t,n)=>{e.type.__hmrId&&function(e){N.get(e.type.__hmrId).instances.delete(e)}(e);const{bum:o,scope:i,update:r,subTree:a,um:l}=e;o&&(0,s.invokeArrayFns)(o),i.stop(),r&&(r.active=!1,te(a,e,t,n)),l&&no(l,t),no((()=>{e.isUnmounted=!0}),t),t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve()),X(e)},re=(e,t,n,o=!1,s=!1,i=0)=>{for(let r=i;r<e.length;r++)te(e[r],t,n,o,s)},ae=e=>6&e.shapeFlag?ae(e.component.subTree):128&e.shapeFlag?e.suspense.next():b(e.anchor||e.el),le=(e,t,n)=>{null==e?t._vnode&&te(t._vnode,null,null,!0):w(t._vnode||null,e,t,null,null,null,n),P(),T(),t._vnode=e},ce={p:w,um:te,m:ee,r:ne,mt:H,mc:D,pc:J,pbc:I,n:ae,o:e};let ue,de;return t&&([ue,de]=t(ce)),{render:le,hydrate:ue,createApp:xn(le,ue)}}function ro({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}function ao(e,t){return(!e||e&&!e.pendingBranch)&&t&&!t.persisted}function lo(e,t,n=!1){const o=e.children,i=t.children;if((0,s.isArray)(o)&&(0,s.isArray)(i))for(let e=0;e<o.length;e++){const t=o[e];let s=i[e];1&s.shapeFlag&&!s.dynamicChildren&&((s.patchFlag<=0||32===s.patchFlag)&&(s=i[e]=Wo(i[e]),s.el=t.el),n||lo(t,s)),s.type===bo&&(s.el=t.el),s.type!==vo||s.el||(s.el=t.el)}}const co=e=>e&&(e.disabled||""===e.disabled),uo=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,ho=(e,t)=>{const n=e&&e.to;if((0,s.isString)(n)){if(t){const e=t(n);return e||l(`Failed to locate Teleport target with selector "${n}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`),e}return l("Current renderer does not support string target for Teleports. (missing querySelector renderer option)"),null}return n||co(e)||l(`Invalid Teleport target: ${n}`),n};function po(e,t,n,{o:{insert:o},m:s},i=2){0===i&&o(e.targetAnchor,t,n);const{el:r,anchor:a,shapeFlag:l,children:c,props:u}=e,d=2===i;if(d&&o(r,t,n),(!d||co(u))&&16&l)for(let e=0;e<c.length;e++)s(c[e],t,n,2);d&&o(a,t,n)}const fo={name:"Teleport",__isTeleport:!0,process(e,t,n,o,s,i,r,a,c,u){const{mc:d,pc:h,pbc:p,o:{insert:f,querySelector:m,createText:g,createComment:b}}=u,v=co(t.props);let{shapeFlag:y,children:_,dynamicChildren:x}=t;if(F&&(c=!1,x=null),null==e){const e=t.el=b("teleport start"),u=t.anchor=b("teleport end");f(e,n,o),f(u,n,o);const h=t.target=ho(t.props,m),p=t.targetAnchor=g("");h?(f(p,h),r=r||uo(h)):v||l("Invalid Teleport target on mount:",h,`(${typeof h})`);const x=(e,t)=>{16&y&&d(_,e,t,s,i,r,a,c)};v?x(n,u):h&&x(h,p)}else{t.el=e.el;const o=t.anchor=e.anchor,d=t.target=e.target,f=t.targetAnchor=e.targetAnchor,g=co(e.props),b=g?n:d,y=g?o:f;if(r=r||uo(d),x?(p(e.dynamicChildren,x,b,s,i,r,a),lo(e,t,!0)):c||h(e,t,b,y,s,i,r,a,!1),v)g?t.props&&e.props&&t.props.to!==e.props.to&&(t.props.to=e.props.to):po(t,n,o,u,1);else if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=ho(t.props,m);e?po(t,e,null,u,0):l("Invalid Teleport target on update:",d,`(${typeof d})`)}else g&&po(t,d,f,u,1)}mo(t)},remove(e,t,n,o,{um:s,o:{remove:i}},r){const{shapeFlag:a,children:l,anchor:c,targetAnchor:u,target:d,props:h}=e;if(d&&i(u),r&&i(c),16&a){const e=r||!co(h);for(let o=0;o<l.length;o++){const i=l[o];s(i,t,n,e,!!i.dynamicChildren)}}},move:po,hydrate:function(e,t,n,o,s,i,{o:{nextSibling:r,parentNode:a,querySelector:l}},c){const u=t.target=ho(t.props,l);if(u){const l=u._lpa||u.firstChild;if(16&t.shapeFlag)if(co(t.props))t.anchor=c(r(e),t,a(e),n,o,s,i),t.targetAnchor=l;else{t.anchor=r(e);let a=l;for(;a;)if(a=r(a),a&&8===a.nodeType&&"teleport anchor"===a.data){t.targetAnchor=a,u._lpa=t.targetAnchor&&r(t.targetAnchor);break}c(l,t,u,n,o,s,i)}mo(t)}return t.anchor&&r(t.anchor)}};function mo(e){const t=e.ctx;if(t&&t.ut){let n=e.children[0].el;for(;n&&n!==e.targetAnchor;)1===n.nodeType&&n.setAttribute("data-v-owner",t.uid),n=n.nextSibling;t.ut()}}const go=Symbol.for("v-fgt"),bo=Symbol.for("v-txt"),vo=Symbol.for("v-cmt"),yo=Symbol.for("v-stc"),_o=[];let xo=null;function wo(e=!1){_o.push(xo=e?null:[])}function So(){_o.pop(),xo=_o[_o.length-1]||null}let ko,jo=1;function Oo(e){jo+=e}function Co(e){return e.dynamicChildren=jo>0?xo||s.EMPTY_ARR:null,So(),jo>0&&xo&&xo.push(e),e}function Eo(e,t,n,o,s,i){return Co(Fo(e,t,n,o,s,i,!0))}function Ao(e,t,n,o,s){return Co(Io(e,t,n,o,s,!0))}function Po(e){return!!e&&!0===e.__v_isVNode}function To(e,t){return 6&t.shapeFlag&&I.has(t.type)?(e.shapeFlag&=-257,t.shapeFlag&=-513,!1):e.type===t.type&&e.key===t.key}function Mo(e){ko=e}const Ro="__vInternal",Do=({key:e})=>null!=e?e:null,Lo=({ref:e,ref_key:t,ref_for:n})=>("number"==typeof e&&(e=""+e),null!=e?(0,s.isString)(e)||(0,o.isRef)(e)||(0,s.isFunction)(e)?{i:ie,r:e,k:t,f:!!n}:e:null);function Fo(e,t=null,n=null,o=0,i=null,r=(e===go?0:1),a=!1,c=!1){const u={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Do(t),ref:t&&Lo(t),scopeId:re,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:o,dynamicProps:i,dynamicChildren:null,appContext:null,ctx:ie};return c?(Go(u,n),128&r&&e.normalize(u)):n&&(u.shapeFlag|=(0,s.isString)(n)?8:16),u.key!=u.key&&l("VNode created with invalid key (NaN). VNode type:",u.type),jo>0&&!a&&xo&&(u.patchFlag>0||6&r)&&32!==u.patchFlag&&xo.push(u),u}const Io=(...e)=>function(e,t=null,n=null,i=0,r=null,a=!1){if(e&&e!==je||(e||l(`Invalid vnode type when creating vnode: ${e}.`),e=vo),Po(e)){const o=Bo(e,t,!0);return n&&Go(o,n),jo>0&&!a&&xo&&(6&o.shapeFlag?xo[xo.indexOf(e)]=o:xo.push(o)),o.patchFlag|=-2,o}if(ws(e)&&(e=e.__vccOpts),t){t=No(t);let{class:e,style:n}=t;e&&!(0,s.isString)(e)&&(t.class=(0,s.normalizeClass)(e)),(0,s.isObject)(n)&&((0,o.isProxy)(n)&&!(0,s.isArray)(n)&&(n=(0,s.extend)({},n)),t.style=(0,s.normalizeStyle)(n))}const c=(0,s.isString)(e)?1:Pe(e)?128:(e=>e.__isTeleport)(e)?64:(0,s.isObject)(e)?4:(0,s.isFunction)(e)?2:0;return 4&c&&(0,o.isProxy)(e)&&l("Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with `markRaw` or using `shallowRef` instead of `ref`.","\nComponent that was made reactive: ",e=(0,o.toRaw)(e)),Fo(e,t,n,i,r,c,a,!0)}(...ko?ko(e,ie):e);function No(e){return e?(0,o.isProxy)(e)||Ro in e?(0,s.extend)({},e):e:null}function Bo(e,t,n=!1){const{props:o,ref:i,patchFlag:r,children:a}=e,l=t?Yo(o||{},t):o;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:l,key:l&&Do(l),ref:t&&t.ref?n&&i?(0,s.isArray)(i)?i.concat(Lo(t)):[i,Lo(t)]:Lo(t):i,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:-1===r&&(0,s.isArray)(a)?a.map(Vo):a,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,patchFlag:t&&e.type!==go?-1===r?16:16|r:r,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Bo(e.ssContent),ssFallback:e.ssFallback&&Bo(e.ssFallback),el:e.el,anchor:e.anchor,ctx:e.ctx,ce:e.ce}}function Vo(e){const t=Bo(e);return(0,s.isArray)(e.children)&&(t.children=e.children.map(Vo)),t}function $o(e=" ",t=0){return Io(bo,null,e,t)}function zo(e,t){const n=Io(yo,null,e);return n.staticCount=t,n}function Ho(e="",t=!1){return t?(wo(),Ao(vo,null,e)):Io(vo,null,e)}function Uo(e){return null==e||"boolean"==typeof e?Io(vo):(0,s.isArray)(e)?Io(go,null,e.slice()):"object"==typeof e?Wo(e):Io(bo,null,String(e))}function Wo(e){return null===e.el&&-1!==e.patchFlag||e.memo?e:Bo(e)}function Go(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if((0,s.isArray)(t))n=16;else if("object"==typeof t){if(65&o){const n=t.default;return void(n&&(n._c&&(n._d=!1),Go(e,n()),n._c&&(n._d=!0)))}{n=32;const o=t._;o||Ro in t?3===o&&ie&&(1===ie.slots._?t._=1:(t._=2,e.patchFlag|=1024)):t._ctx=ie}}else(0,s.isFunction)(t)?(t={default:t,_ctx:ie},n=32):(t=String(t),64&o?(n=16,t=[$o(t)]):n=8);e.children=t,e.shapeFlag|=n}function Yo(...e){const t={};for(let n=0;n<e.length;n++){const o=e[n];for(const e in o)if("class"===e)t.class!==o.class&&(t.class=(0,s.normalizeClass)([t.class,o.class]));else if("style"===e)t.style=(0,s.normalizeStyle)([t.style,o.style]);else if((0,s.isOn)(e)){const n=t[e],i=o[e];!i||n===i||(0,s.isArray)(n)&&n.includes(i)||(t[e]=n?[].concat(n,i):i)}else""!==e&&(t[e]=o[e])}return t}function qo(e,t,n,o=null){f(e,t,7,[n,o])}const Ko=yn();let Jo=0;function Xo(e,t,n){const i=e.type,r=(t?t.appContext:e.appContext)||Ko,a={uid:Jo++,vnode:e,type:i,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,scope:new o.EffectScope(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:En(i,r),emitsOptions:oe(i,r),emit:null,emitted:null,propsDefaults:s.EMPTY_OBJ,inheritAttrs:i.inheritAttrs,ctx:s.EMPTY_OBJ,data:s.EMPTY_OBJ,props:s.EMPTY_OBJ,attrs:s.EMPTY_OBJ,slots:s.EMPTY_OBJ,refs:s.EMPTY_OBJ,setupState:s.EMPTY_OBJ,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return a.ctx=function(e){const t={};return Object.defineProperty(t,"_",{configurable:!0,enumerable:!1,get:()=>e}),Object.keys(Bt).forEach((n=>{Object.defineProperty(t,n,{configurable:!0,enumerable:!1,get:()=>Bt[n](e),set:s.NOOP})})),t}(a),a.root=t?t.root:a,a.emit=ne.bind(null,a),e.ce&&e.ce(a),a}let Qo=null;const Zo=()=>Qo||ie;let es,ts,ns="__VUE_INSTANCE_SETTERS__";(ts=(0,s.getGlobalThis)()[ns])||(ts=(0,s.getGlobalThis)()[ns]=[]),ts.push((e=>Qo=e)),es=e=>{ts.length>1?ts.forEach((t=>t(e))):ts[0](e)};const os=e=>{es(e),e.scope.on()},ss=()=>{Qo&&Qo.scope.off(),es(null)},is=(0,s.makeMap)("slot,component");function rs(e,t){const n=t.isNativeTag||s.NO;(is(e)||n(e))&&l("Do not use built-in or reserved HTML elements as component id: "+e)}function as(e){return 4&e.vnode.shapeFlag}let ls,cs,us=!1;function ds(e,t=!1){us=t;const{props:n,children:i}=e.vnode,r=as(e);!function(e,t,n,i=!1){const r={},a={};(0,s.def)(a,Ro,1),e.propsDefaults=Object.create(null),On(e,t,r,a);for(const t in e.propsOptions[0])t in r||(r[t]=void 0);Rn(t||{},r,e),n?e.props=i?r:(0,o.shallowReactive)(r):e.type.props?e.props=r:e.props=a,e.attrs=a}(e,n,r,t),Un(e,i);const a=r?function(e,t){var n;const i=e.type;if(i.name&&rs(i.name,e.appContext.config),i.components){const t=Object.keys(i.components);for(let n=0;n<t.length;n++)rs(t[n],e.appContext.config)}if(i.directives){const e=Object.keys(i.directives);for(let t=0;t<e.length;t++)Ye(e[t])}i.compilerOptions&&fs()&&l('"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.'),e.accessCache=Object.create(null),e.proxy=(0,o.markRaw)(new Proxy(e.ctx,zt)),function(e){const{ctx:t,propsOptions:[n]}=e;n&&Object.keys(n).forEach((n=>{Object.defineProperty(t,n,{enumerable:!0,configurable:!0,get:()=>e.props[n],set:s.NOOP})}))}(e);const{setup:r}=i;if(r){const a=e.setupContext=r.length>1?gs(e):null;os(e),(0,o.pauseTracking)();const c=p(r,e,0,[(0,o.shallowReadonly)(e.props),a]);if((0,o.resetTracking)(),ss(),(0,s.isPromise)(c)){if(c.then(ss,ss),t)return c.then((n=>{hs(e,n,t)})).catch((t=>{m(t,e,0)}));e.asyncDep=c,e.suspense||l(`Component <${null!=(n=i.name)?n:"Anonymous"}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`)}else hs(e,c,t)}else ms(e,t)}(e,t):void 0;return us=!1,a}function hs(e,t,n){(0,s.isFunction)(t)?e.type.__ssrInlineRender?e.ssrRender=t:e.render=t:(0,s.isObject)(t)?(Po(t)&&l("setup() should not return VNodes directly - return a render function instead."),e.devtoolsRawSetupState=t,e.setupState=(0,o.proxyRefs)(t),function(e){const{ctx:t,setupState:n}=e;Object.keys((0,o.toRaw)(n)).forEach((e=>{if(!n.__isScriptSetup){if(Vt(e[0]))return void l(`setup() return property ${JSON.stringify(e)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:()=>n[e],set:s.NOOP})}}))}(e)):void 0!==t&&l("setup() should return an object. Received: "+(null===t?"null":typeof t)),ms(e,n)}function ps(e){ls=e,cs=e=>{e.render._rc&&(e.withProxy=new Proxy(e.ctx,Ht))}}const fs=()=>!ls;function ms(e,t,n){const i=e.type;if(!e.render){if(!t&&ls&&!i.render){const t=i.template||dn(e).template;if(t){Zn(e,"compile");const{isCustomElement:n,compilerOptions:o}=e.appContext.config,{delimiters:r,compilerOptions:a}=i,l=(0,s.extend)((0,s.extend)({isCustomElement:n,delimiters:r},o),a);i.render=ls(t,l),eo(e,"compile")}}e.render=i.render||s.NOOP,cs&&cs(e)}if(__VUE_OPTIONS_API__){os(e),(0,o.pauseTracking)();try{!function(e){const t=dn(e),n=e.proxy,i=e.ctx;ln=!1,t.beforeCreate&&cn(t.beforeCreate,e,"bc");const{data:r,computed:a,methods:c,watch:u,provide:d,inject:h,created:p,beforeMount:f,mounted:m,beforeUpdate:g,updated:b,activated:v,deactivated:y,beforeDestroy:_,beforeUnmount:x,destroyed:w,unmounted:S,render:k,renderTracked:j,renderTriggered:O,errorCaptured:C,serverPrefetch:E,expose:A,inheritAttrs:P,components:T,directives:M,filters:R}=t,D=function(){const e=Object.create(null);return(t,n)=>{e[n]?l(`${t} property "${n}" is already defined in ${e[n]}.`):e[n]=t}}();{const[t]=e.propsOptions;if(t)for(const e in t)D("Props",e)}if(h&&function(e,t,n=s.NOOP){(0,s.isArray)(e)&&(e=mn(e));for(const i in e){const r=e[i];let a;a=(0,s.isObject)(r)?"default"in r?kn(r.from||i,r.default,!0):kn(r.from||i):kn(r),(0,o.isRef)(a)?Object.defineProperty(t,i,{enumerable:!0,configurable:!0,get:()=>a.value,set:e=>a.value=e}):t[i]=a,n("Inject",i)}}(h,i,D),c)for(const e in c){const t=c[e];(0,s.isFunction)(t)?(Object.defineProperty(i,e,{value:t.bind(n),configurable:!0,enumerable:!0,writable:!0}),D("Methods",e)):l(`Method "${e}" has type "${typeof t}" in the component definition. Did you reference the function correctly?`)}if(r){(0,s.isFunction)(r)||l("The data option must be a function. Plain object usage is no longer supported.");const t=r.call(n,n);if((0,s.isPromise)(t)&&l("data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>."),(0,s.isObject)(t)){e.data=(0,o.reactive)(t);for(const e in t)D("Data",e),Vt(e[0])||Object.defineProperty(i,e,{configurable:!0,enumerable:!0,get:()=>t[e],set:s.NOOP})}else l("data() should return an object.")}if(ln=!0,a)for(const e in a){const t=a[e],o=(0,s.isFunction)(t)?t.bind(n,n):(0,s.isFunction)(t.get)?t.get.bind(n,n):s.NOOP;o===s.NOOP&&l(`Computed property "${e}" has no getter.`);const r=!(0,s.isFunction)(t)&&(0,s.isFunction)(t.set)?t.set.bind(n):()=>{l(`Write operation failed: computed property "${e}" is readonly.`)},c=Ss({get:o,set:r});Object.defineProperty(i,e,{enumerable:!0,configurable:!0,get:()=>c.value,set:e=>c.value=e}),D("Computed",e)}if(u)for(const e in u)un(u[e],i,n,e);if(d){const e=(0,s.isFunction)(d)?d.call(n):d;Reflect.ownKeys(e).forEach((t=>{Sn(t,e[t])}))}function L(e,t){(0,s.isArray)(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(p&&cn(p,e,"c"),L(St,f),L(kt,m),L(jt,g),L(Ot,b),L(mt,v),L(gt,y),L(Mt,C),L(Tt,j),L(Pt,O),L(Ct,x),L(Et,S),L(At,E),(0,s.isArray)(A))if(A.length){const t=e.exposed||(e.exposed={});A.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});k&&e.render===s.NOOP&&(e.render=k),null!=P&&(e.inheritAttrs=P),T&&(e.components=T),M&&(e.directives=M)}(e)}finally{(0,o.resetTracking)(),ss()}}i.render||e.render!==s.NOOP||t||(!ls&&i.template?l('Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".'):l("Component is missing template or render function."))}function gs(e){return Object.freeze({get attrs(){return function(e){return e.attrsProxy||(e.attrsProxy=new Proxy(e.attrs,{get:(t,n)=>(pe(),(0,o.track)(e,"get","$attrs"),t[n]),set:()=>(l("setupContext.attrs is readonly."),!1),deleteProperty:()=>(l("setupContext.attrs is readonly."),!1)}))}(e)},get slots(){return function(e){return e.slotsProxy||(e.slotsProxy=new Proxy(e.slots,{get:(t,n)=>((0,o.track)(e,"get","$slots"),t[n])}))}(e)},get emit(){return(t,...n)=>e.emit(t,...n)},expose:t=>{if(e.exposed&&l("expose() should be called only once per setup()."),null!=t){let e=typeof t;"object"===e&&((0,s.isArray)(t)?e="array":(0,o.isRef)(t)&&(e="ref")),"object"!==e&&l(`expose() should be passed a plain object, received ${e}.`)}e.exposed=t||{}}})}function bs(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy((0,o.proxyRefs)((0,o.markRaw)(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Bt?Bt[n](e):void 0,has:(e,t)=>t in e||t in Bt}))}const vs=/(?:^|[-_])(\w)/g,ys=e=>e.replace(vs,(e=>e.toUpperCase())).replace(/[-_]/g,"");function _s(e,t=!0){return(0,s.isFunction)(e)?e.displayName||e.name:e.name||t&&e.__name}function xs(e,t,n=!1){let o=_s(t);if(!o&&t.__file){const e=t.__file.match(/([^/\\]+)\.\w+$/);e&&(o=e[1])}if(!o&&e&&e.parent){const n=e=>{for(const n in e)if(e[n]===t)return n};o=n(e.components||e.parent.type.components)||n(e.appContext.components)}return o?ys(o):n?"App":"Anonymous"}function ws(e){return(0,s.isFunction)(e)&&"__vccOpts"in e}const Ss=(e,t)=>(0,o.computed)(e,t,us);function ks(e,t,n){const o=arguments.length;return 2===o?(0,s.isObject)(t)&&!(0,s.isArray)(t)?Po(t)?Io(e,null,[t]):Io(e,t):Io(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Po(n)&&(n=[n]),Io(e,t,n))}const js=Symbol.for("v-scx"),Os=()=>{{const e=kn(js);return e||l("Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build."),e}};function Cs(e){return!(!e||!e.__v_isShallow)}function Es(){if("undefined"==typeof window)return;const e={style:"color:#3ba776"},t={style:"color:#1677ff"},n={style:"color:#f5222d"},i={style:"color:#eb2f96"},r={header:t=>{return(0,s.isObject)(t)?t.__isVue?["div",e,"VueInstance"]:(0,o.isRef)(t)?["div",{},["span",e,(n=t,Cs(n)?"ShallowRef":n.effect?"ComputedRef":"Ref")],"<",c(t.value),">"]:(0,o.isReactive)(t)?["div",{},["span",e,Cs(t)?"ShallowReactive":"Reactive"],"<",c(t),">"+((0,o.isReadonly)(t)?" (readonly)":"")]:(0,o.isReadonly)(t)?["div",{},["span",e,Cs(t)?"ShallowReadonly":"Readonly"],"<",c(t),">"]:null:null;var n},hasBody:e=>e&&e.__isVue,body(e){if(e&&e.__isVue)return["div",{},...a(e.$)]}};function a(e){const t=[];e.type.props&&e.props&&t.push(l("props",(0,o.toRaw)(e.props))),e.setupState!==s.EMPTY_OBJ&&t.push(l("setup",e.setupState)),e.data!==s.EMPTY_OBJ&&t.push(l("data",(0,o.toRaw)(e.data)));const n=u(e,"computed");n&&t.push(l("computed",n));const r=u(e,"inject");return r&&t.push(l("injected",r)),t.push(["div",{},["span",{style:i.style+";opacity:0.66"},"$ (internal): "],["object",{object:e}]]),t}function l(e,t){return t=(0,s.extend)({},t),Object.keys(t).length?["div",{style:"line-height:1.25em;margin-bottom:0.6em"},["div",{style:"color:#476582"},e],["div",{style:"padding-left:1.25em"},...Object.keys(t).map((e=>["div",{},["span",i,e+": "],c(t[e],!1)]))]]:["span",{}]}function c(e,r=!0){return"number"==typeof e?["span",t,e]:"string"==typeof e?["span",n,JSON.stringify(e)]:"boolean"==typeof e?["span",i,e]:(0,s.isObject)(e)?["object",{object:r?(0,o.toRaw)(e):e}]:["span",n,String(e)]}function u(e,t){const n=e.type;if((0,s.isFunction)(n))return;const o={};for(const s in e.ctx)d(n,s,t)&&(o[s]=e.ctx[s]);return o}function d(e,t,n){const o=e[n];return!!((0,s.isArray)(o)&&o.includes(t)||(0,s.isObject)(o)&&t in o)||!(!e.extends||!d(e.extends,t,n))||!(!e.mixins||!e.mixins.some((e=>d(e,t,n))))||void 0}window.devtoolsFormatters?window.devtoolsFormatters.push(r):window.devtoolsFormatters=[r]}function As(e,t,n,o){const s=n[o];if(s&&Ps(s,e))return s;const i=t();return i.memo=e.slice(),n[o]=i}function Ps(e,t){const n=e.memo;if(n.length!=t.length)return!1;for(let e=0;e<n.length;e++)if((0,s.hasChanged)(n[e],t[e]))return!1;return jo>0&&xo&&xo.push(e),!0}const Ts="3.3.10",Ms={createComponentInstance:Xo,setupComponent:ds,renderComponentRoot:fe,setCurrentRenderingInstance:ae,isVNode:Po,normalizeVNode:Uo},Rs=null,Ds=null},"./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>o.BaseTransition,BaseTransitionPropsValidators:()=>o.BaseTransitionPropsValidators,Comment:()=>o.Comment,EffectScope:()=>o.EffectScope,Fragment:()=>o.Fragment,KeepAlive:()=>o.KeepAlive,ReactiveEffect:()=>o.ReactiveEffect,Static:()=>o.Static,Suspense:()=>o.Suspense,Teleport:()=>o.Teleport,Text:()=>o.Text,Transition:()=>h,TransitionGroup:()=>ne,VueElement:()=>Y,assertNumber:()=>o.assertNumber,callWithAsyncErrorHandling:()=>o.callWithAsyncErrorHandling,callWithErrorHandling:()=>o.callWithErrorHandling,camelize:()=>o.camelize,capitalize:()=>o.capitalize,cloneVNode:()=>o.cloneVNode,compatUtils:()=>o.compatUtils,computed:()=>o.computed,createApp:()=>Re,createBlock:()=>o.createBlock,createCommentVNode:()=>o.createCommentVNode,createElementBlock:()=>o.createElementBlock,createElementVNode:()=>o.createElementVNode,createHydrationRenderer:()=>o.createHydrationRenderer,createPropsRestProxy:()=>o.createPropsRestProxy,createRenderer:()=>o.createRenderer,createSSRApp:()=>De,createSlots:()=>o.createSlots,createStaticVNode:()=>o.createStaticVNode,createTextVNode:()=>o.createTextVNode,createVNode:()=>o.createVNode,customRef:()=>o.customRef,defineAsyncComponent:()=>o.defineAsyncComponent,defineComponent:()=>o.defineComponent,defineCustomElement:()=>U,defineEmits:()=>o.defineEmits,defineExpose:()=>o.defineExpose,defineModel:()=>o.defineModel,defineOptions:()=>o.defineOptions,defineProps:()=>o.defineProps,defineSSRCustomElement:()=>W,defineSlots:()=>o.defineSlots,devtools:()=>o.devtools,effect:()=>o.effect,effectScope:()=>o.effectScope,getCurrentInstance:()=>o.getCurrentInstance,getCurrentScope:()=>o.getCurrentScope,getTransitionRawChildren:()=>o.getTransitionRawChildren,guardReactiveProps:()=>o.guardReactiveProps,h:()=>o.h,handleError:()=>o.handleError,hasInjectionContext:()=>o.hasInjectionContext,hydrate:()=>Me,initCustomFormatter:()=>o.initCustomFormatter,initDirectivesForSSR:()=>Be,inject:()=>o.inject,isMemoSame:()=>o.isMemoSame,isProxy:()=>o.isProxy,isReactive:()=>o.isReactive,isReadonly:()=>o.isReadonly,isRef:()=>o.isRef,isRuntimeOnly:()=>o.isRuntimeOnly,isShallow:()=>o.isShallow,isVNode:()=>o.isVNode,markRaw:()=>o.markRaw,mergeDefaults:()=>o.mergeDefaults,mergeModels:()=>o.mergeModels,mergeProps:()=>o.mergeProps,nextTick:()=>o.nextTick,normalizeClass:()=>o.normalizeClass,normalizeProps:()=>o.normalizeProps,normalizeStyle:()=>o.normalizeStyle,onActivated:()=>o.onActivated,onBeforeMount:()=>o.onBeforeMount,onBeforeUnmount:()=>o.onBeforeUnmount,onBeforeUpdate:()=>o.onBeforeUpdate,onDeactivated:()=>o.onDeactivated,onErrorCaptured:()=>o.onErrorCaptured,onMounted:()=>o.onMounted,onRenderTracked:()=>o.onRenderTracked,onRenderTriggered:()=>o.onRenderTriggered,onScopeDispose:()=>o.onScopeDispose,onServerPrefetch:()=>o.onServerPrefetch,onUnmounted:()=>o.onUnmounted,onUpdated:()=>o.onUpdated,openBlock:()=>o.openBlock,popScopeId:()=>o.popScopeId,provide:()=>o.provide,proxyRefs:()=>o.proxyRefs,pushScopeId:()=>o.pushScopeId,queuePostFlushCb:()=>o.queuePostFlushCb,reactive:()=>o.reactive,readonly:()=>o.readonly,ref:()=>o.ref,registerRuntimeCompiler:()=>o.registerRuntimeCompiler,render:()=>Te,renderList:()=>o.renderList,renderSlot:()=>o.renderSlot,resolveComponent:()=>o.resolveComponent,resolveDirective:()=>o.resolveDirective,resolveDynamicComponent:()=>o.resolveDynamicComponent,resolveFilter:()=>o.resolveFilter,resolveTransitionHooks:()=>o.resolveTransitionHooks,setBlockTracking:()=>o.setBlockTracking,setDevtoolsHook:()=>o.setDevtoolsHook,setTransitionHooks:()=>o.setTransitionHooks,shallowReactive:()=>o.shallowReactive,shallowReadonly:()=>o.shallowReadonly,shallowRef:()=>o.shallowRef,ssrContextKey:()=>o.ssrContextKey,ssrUtils:()=>o.ssrUtils,stop:()=>o.stop,toDisplayString:()=>o.toDisplayString,toHandlerKey:()=>o.toHandlerKey,toHandlers:()=>o.toHandlers,toRaw:()=>o.toRaw,toRef:()=>o.toRef,toRefs:()=>o.toRefs,toValue:()=>o.toValue,transformVNodeArgs:()=>o.transformVNodeArgs,triggerRef:()=>o.triggerRef,unref:()=>o.unref,useAttrs:()=>o.useAttrs,useCssModule:()=>q,useCssVars:()=>K,useModel:()=>o.useModel,useSSRContext:()=>o.useSSRContext,useSlots:()=>o.useSlots,useTransitionState:()=>o.useTransitionState,vModelCheckbox:()=>de,vModelDynamic:()=>ve,vModelRadio:()=>pe,vModelSelect:()=>fe,vModelText:()=>ue,vShow:()=>A,version:()=>o.version,warn:()=>o.warn,watch:()=>o.watch,watchEffect:()=>o.watchEffect,watchPostEffect:()=>o.watchPostEffect,watchSyncEffect:()=>o.watchSyncEffect,withAsyncContext:()=>o.withAsyncContext,withCtx:()=>o.withCtx,withDefaults:()=>o.withDefaults,withDirectives:()=>o.withDirectives,withKeys:()=>je,withMemo:()=>o.withMemo,withModifiers:()=>Se,withScopeId:()=>o.withScopeId});var o=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),s=n("./node_modules/@vue/shared/dist/shared.esm-bundler.js"),i=n("./node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js");const r="undefined"!=typeof document?document:null,a=r&&r.createElement("template"),l={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const s=t?r.createElementNS("http://www.w3.org/2000/svg",e):r.createElement(e,n?{is:n}:void 0);return"select"===e&&o&&null!=o.multiple&&s.setAttribute("multiple",o.multiple),s},createText:e=>r.createTextNode(e),createComment:e=>r.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>r.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},insertStaticContent(e,t,n,o,s,i){const r=n?n.previousSibling:t.lastChild;if(s&&(s===i||s.nextSibling))for(;t.insertBefore(s.cloneNode(!0),n),s!==i&&(s=s.nextSibling););else{a.innerHTML=o?`<svg>${e}</svg>`:e;const s=a.content;if(o){const e=s.firstChild;for(;e.firstChild;)s.appendChild(e.firstChild);s.removeChild(e)}t.insertBefore(s,n)}return[r?r.nextSibling:t.firstChild,n?n.previousSibling:t.lastChild]}},c="transition",u="animation",d=Symbol("_vtc"),h=(e,{slots:t})=>(0,o.h)(o.BaseTransition,b(e),t);h.displayName="Transition";const p={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},f=h.props=(0,s.extend)({},o.BaseTransitionPropsValidators,p),m=(e,t=[])=>{(0,s.isArray)(e)?e.forEach((e=>e(...t))):e&&e(...t)},g=e=>!!e&&((0,s.isArray)(e)?e.some((e=>e.length>1)):e.length>1);function b(e){const t={};for(const n in e)n in p||(t[n]=e[n]);if(!1===e.css)return t;const{name:n="v",type:o,duration:i,enterFromClass:r=`${n}-enter-from`,enterActiveClass:a=`${n}-enter-active`,enterToClass:l=`${n}-enter-to`,appearFromClass:c=r,appearActiveClass:u=a,appearToClass:d=l,leaveFromClass:h=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:b=`${n}-leave-to`}=e,w=function(e){if(null==e)return null;if((0,s.isObject)(e))return[v(e.enter),v(e.leave)];{const t=v(e);return[t,t]}}(i),k=w&&w[0],j=w&&w[1],{onBeforeEnter:O,onEnter:E,onEnterCancelled:A,onLeave:P,onLeaveCancelled:T,onBeforeAppear:M=O,onAppear:R=E,onAppearCancelled:D=A}=t,L=(e,t,n)=>{_(e,t?d:l),_(e,t?u:a),n&&n()},F=(e,t)=>{e._isLeaving=!1,_(e,h),_(e,b),_(e,f),t&&t()},I=e=>(t,n)=>{const s=e?R:E,i=()=>L(t,e,n);m(s,[t,i]),x((()=>{_(t,e?c:r),y(t,e?d:l),g(s)||S(t,o,k,i)}))};return(0,s.extend)(t,{onBeforeEnter(e){m(O,[e]),y(e,r),y(e,a)},onBeforeAppear(e){m(M,[e]),y(e,c),y(e,u)},onEnter:I(!1),onAppear:I(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>F(e,t);y(e,h),C(),y(e,f),x((()=>{e._isLeaving&&(_(e,h),y(e,b),g(P)||S(e,o,j,n))})),m(P,[e,n])},onEnterCancelled(e){L(e,!1),m(A,[e])},onAppearCancelled(e){L(e,!0),m(D,[e])},onLeaveCancelled(e){F(e),m(T,[e])}})}function v(e){const t=(0,s.toNumber)(e);return(0,o.assertNumber)(t,"<transition> explicit duration"),t}function y(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e[d]||(e[d]=new Set)).add(t)}function _(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const n=e[d];n&&(n.delete(t),n.size||(e[d]=void 0))}function x(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let w=0;function S(e,t,n,o){const s=e._endId=++w,i=()=>{s===e._endId&&o()};if(n)return setTimeout(i,n);const{type:r,timeout:a,propCount:l}=k(e,t);if(!r)return o();const c=r+"end";let u=0;const d=()=>{e.removeEventListener(c,h),i()},h=t=>{t.target===e&&++u>=l&&d()};setTimeout((()=>{u<l&&d()}),a+1),e.addEventListener(c,h)}function k(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),s=o(`${c}Delay`),i=o(`${c}Duration`),r=j(s,i),a=o(`${u}Delay`),l=o(`${u}Duration`),d=j(a,l);let h=null,p=0,f=0;return t===c?r>0&&(h=c,p=r,f=i.length):t===u?d>0&&(h=u,p=d,f=l.length):(p=Math.max(r,d),h=p>0?r>d?c:u:null,f=h?h===c?i.length:l.length:0),{type:h,timeout:p,propCount:f,hasTransform:h===c&&/\b(transform|all)(,|$)/.test(o(`${c}Property`).toString())}}function j(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>O(t)+O(e[n]))))}function O(e){return"auto"===e?0:1e3*Number(e.slice(0,-1).replace(",","."))}function C(){return document.body.offsetHeight}const E=Symbol("_vod"),A={beforeMount(e,{value:t},{transition:n}){e[E]="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):P(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),P(e,!0),o.enter(e)):o.leave(e,(()=>{P(e,!1)})):P(e,t))},beforeUnmount(e,{value:t}){P(e,t)}};function P(e,t){e.style.display=t?e[E]:"none"}const T=/[^\\];\s*$/,M=/\s*!important$/;function R(e,t,n){if((0,s.isArray)(n))n.forEach((n=>R(e,t,n)));else if(null==n&&(n=""),T.test(n)&&(0,o.warn)(`Unexpected semicolon at the end of '${t}' style value: '${n}'`),t.startsWith("--"))e.setProperty(t,n);else{const o=function(e,t){const n=L[t];if(n)return n;let o=(0,s.camelize)(t);if("filter"!==o&&o in e)return L[t]=o;o=(0,s.capitalize)(o);for(let n=0;n<D.length;n++){const s=D[n]+o;if(s in e)return L[t]=s}return t}(e,t);M.test(n)?e.setProperty((0,s.hyphenate)(o),n.replace(M,""),"important"):e[o]=n}}const D=["Webkit","Moz","ms"],L={},F="http://www.w3.org/1999/xlink";function I(e,t,n,o){e.addEventListener(t,n,o)}const N=Symbol("_vei");const B=/(?:Once|Passive|Capture)$/;let V=0;const $=Promise.resolve(),z=()=>V||($.then((()=>V=0)),V=Date.now()),H=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)>96&&e.charCodeAt(2)<123;function U(e,t){const n=(0,o.defineComponent)(e);class s extends Y{constructor(e){super(n,e,t)}}return s.def=n,s}const W=e=>U(e,Me),G="undefined"!=typeof HTMLElement?HTMLElement:class{};class Y extends G{constructor(e,t={},n){super(),this._def=e,this._props=t,this._instance=null,this._connected=!1,this._resolved=!1,this._numberProps=null,this._ob=null,this.shadowRoot&&n?n(this._createVNode(),this.shadowRoot):(this.shadowRoot&&(0,o.warn)("Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use `defineSSRCustomElement`."),this.attachShadow({mode:"open"}),this._def.__asyncLoader||this._resolveProps(this._def))}connectedCallback(){this._connected=!0,this._instance||(this._resolved?this._update():this._resolveDef())}disconnectedCallback(){this._connected=!1,this._ob&&(this._ob.disconnect(),this._ob=null),(0,o.nextTick)((()=>{this._connected||(Te(null,this.shadowRoot),this._instance=null)}))}_resolveDef(){this._resolved=!0;for(let e=0;e<this.attributes.length;e++)this._setAttr(this.attributes[e].name);this._ob=new MutationObserver((e=>{for(const t of e)this._setAttr(t.attributeName)})),this._ob.observe(this,{attributes:!0});const e=(e,t=!1)=>{const{props:n,styles:o}=e;let i;if(n&&!(0,s.isArray)(n))for(const e in n){const t=n[e];(t===Number||t&&t.type===Number)&&(e in this._props&&(this._props[e]=(0,s.toNumber)(this._props[e])),(i||(i=Object.create(null)))[(0,s.camelize)(e)]=!0)}this._numberProps=i,t&&this._resolveProps(e),this._applyStyles(o),this._update()},t=this._def.__asyncLoader;t?t().then((t=>e(t,!0))):e(this._def)}_resolveProps(e){const{props:t}=e,n=(0,s.isArray)(t)?t:Object.keys(t||{});for(const e of Object.keys(this))"_"!==e[0]&&n.includes(e)&&this._setProp(e,this[e],!0,!1);for(const e of n.map(s.camelize))Object.defineProperty(this,e,{get(){return this._getProp(e)},set(t){this._setProp(e,t)}})}_setAttr(e){let t=this.getAttribute(e);const n=(0,s.camelize)(e);this._numberProps&&this._numberProps[n]&&(t=(0,s.toNumber)(t)),this._setProp(n,t,!1)}_getProp(e){return this._props[e]}_setProp(e,t,n=!0,o=!0){t!==this._props[e]&&(this._props[e]=t,o&&this._instance&&this._update(),n&&(!0===t?this.setAttribute((0,s.hyphenate)(e),""):"string"==typeof t||"number"==typeof t?this.setAttribute((0,s.hyphenate)(e),t+""):t||this.removeAttribute((0,s.hyphenate)(e))))}_update(){Te(this._createVNode(),this.shadowRoot)}_createVNode(){const e=(0,o.createVNode)(this._def,(0,s.extend)({},this._props));return this._instance||(e.ce=e=>{this._instance=e,e.isCE=!0,e.ceReload=e=>{this._styles&&(this._styles.forEach((e=>this.shadowRoot.removeChild(e))),this._styles.length=0),this._applyStyles(e),this._instance=null,this._update()};const t=(e,t)=>{this.dispatchEvent(new CustomEvent(e,{detail:t}))};e.emit=(e,...n)=>{t(e,n),(0,s.hyphenate)(e)!==e&&t((0,s.hyphenate)(e),n)};let n=this;for(;n=n&&(n.parentNode||n.host);)if(n instanceof Y){e.parent=n._instance,e.provides=n._instance.provides;break}}),e}_applyStyles(e){e&&e.forEach((e=>{const t=document.createElement("style");t.textContent=e,this.shadowRoot.appendChild(t),(this._styles||(this._styles=[])).push(t)}))}}function q(e="$style"){{const t=(0,o.getCurrentInstance)();if(!t)return(0,o.warn)("useCssModule must be called inside setup()"),s.EMPTY_OBJ;const n=t.type.__cssModules;if(!n)return(0,o.warn)("Current instance does not have CSS modules injected."),s.EMPTY_OBJ;return n[e]||((0,o.warn)(`Current instance does not have CSS module named "${e}".`),s.EMPTY_OBJ)}}function K(e){const t=(0,o.getCurrentInstance)();if(!t)return void(0,o.warn)("useCssVars is called without current active component instance.");const n=t.ut=(n=e(t.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${t.uid}"]`)).forEach((e=>X(e,n)))},s=()=>{const o=e(t.proxy);J(t.subTree,o),n(o)};(0,o.watchPostEffect)(s),(0,o.onMounted)((()=>{const e=new MutationObserver(s);e.observe(t.subTree.el.parentNode,{childList:!0}),(0,o.onUnmounted)((()=>e.disconnect()))}))}function J(e,t){if(128&e.shapeFlag){const n=e.suspense;e=n.activeBranch,n.pendingBranch&&!n.isHydrating&&n.effects.push((()=>{J(n.activeBranch,t)}))}for(;e.component;)e=e.component.subTree;if(1&e.shapeFlag&&e.el)X(e.el,t);else if(e.type===o.Fragment)e.children.forEach((e=>J(e,t)));else if(e.type===o.Static){let{el:n,anchor:o}=e;for(;n&&(X(n,t),n!==o);)n=n.nextSibling}}function X(e,t){if(1===e.nodeType){const n=e.style;for(const e in t)n.setProperty(`--${e}`,t[e])}}const Q=new WeakMap,Z=new WeakMap,ee=Symbol("_moveCb"),te=Symbol("_enterCb"),ne={name:"TransitionGroup",props:(0,s.extend)({},f,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=(0,o.getCurrentInstance)(),s=(0,o.useTransitionState)();let r,a;return(0,o.onUpdated)((()=>{if(!r.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){const o=e.cloneNode(),s=e[d];s&&s.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const i=1===t.nodeType?t:t.parentNode;i.appendChild(o);const{hasTransform:r}=k(o);return i.removeChild(o),r}(r[0].el,n.vnode.el,t))return;r.forEach(oe),r.forEach(se);const o=r.filter(ie);C(),o.forEach((e=>{const n=e.el,o=n.style;y(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const s=n[ee]=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",s),n[ee]=null,_(n,t))};n.addEventListener("transitionend",s)}))})),()=>{const l=(0,i.toRaw)(e),c=b(l);let u=l.tag||o.Fragment;r=a,a=t.default?(0,o.getTransitionRawChildren)(t.default()):[];for(let e=0;e<a.length;e++){const t=a[e];null!=t.key?(0,o.setTransitionHooks)(t,(0,o.resolveTransitionHooks)(t,c,s,n)):(0,o.warn)("<TransitionGroup> children must be keyed.")}if(r)for(let e=0;e<r.length;e++){const t=r[e];(0,o.setTransitionHooks)(t,(0,o.resolveTransitionHooks)(t,c,s,n)),Q.set(t,t.el.getBoundingClientRect())}return(0,o.createVNode)(u,null,a)}}};function oe(e){const t=e.el;t[ee]&&t[ee](),t[te]&&t[te]()}function se(e){Z.set(e,e.el.getBoundingClientRect())}function ie(e){const t=Q.get(e),n=Z.get(e),o=t.left-n.left,s=t.top-n.top;if(o||s){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${s}px)`,t.transitionDuration="0s",e}}const re=e=>{const t=e.props["onUpdate:modelValue"]||!1;return(0,s.isArray)(t)?e=>(0,s.invokeArrayFns)(t,e):t};function ae(e){e.target.composing=!0}function le(e){const t=e.target;t.composing&&(t.composing=!1,t.dispatchEvent(new Event("input")))}const ce=Symbol("_assign"),ue={created(e,{modifiers:{lazy:t,trim:n,number:o}},i){e[ce]=re(i);const r=o||i.props&&"number"===i.props.type;I(e,t?"change":"input",(t=>{if(t.target.composing)return;let o=e.value;n&&(o=o.trim()),r&&(o=(0,s.looseToNumber)(o)),e[ce](o)})),n&&I(e,"change",(()=>{e.value=e.value.trim()})),t||(I(e,"compositionstart",ae),I(e,"compositionend",le),I(e,"change",le))},mounted(e,{value:t}){e.value=null==t?"":t},beforeUpdate(e,{value:t,modifiers:{lazy:n,trim:o,number:i}},r){if(e[ce]=re(r),e.composing)return;const a=null==t?"":t;if((i||"number"===e.type?(0,s.looseToNumber)(e.value):e.value)!==a){if(document.activeElement===e&&"range"!==e.type){if(n)return;if(o&&e.value.trim()===a)return}e.value=a}}},de={deep:!0,created(e,t,n){e[ce]=re(n),I(e,"change",(()=>{const t=e._modelValue,n=ge(e),o=e.checked,i=e[ce];if((0,s.isArray)(t)){const e=(0,s.looseIndexOf)(t,n),r=-1!==e;if(o&&!r)i(t.concat(n));else if(!o&&r){const n=[...t];n.splice(e,1),i(n)}}else if((0,s.isSet)(t)){const e=new Set(t);o?e.add(n):e.delete(n),i(e)}else i(be(e,o))}))},mounted:he,beforeUpdate(e,t,n){e[ce]=re(n),he(e,t,n)}};function he(e,{value:t,oldValue:n},o){e._modelValue=t,(0,s.isArray)(t)?e.checked=(0,s.looseIndexOf)(t,o.props.value)>-1:(0,s.isSet)(t)?e.checked=t.has(o.props.value):t!==n&&(e.checked=(0,s.looseEqual)(t,be(e,!0)))}const pe={created(e,{value:t},n){e.checked=(0,s.looseEqual)(t,n.props.value),e[ce]=re(n),I(e,"change",(()=>{e[ce](ge(e))}))},beforeUpdate(e,{value:t,oldValue:n},o){e[ce]=re(o),t!==n&&(e.checked=(0,s.looseEqual)(t,o.props.value))}},fe={deep:!0,created(e,{value:t,modifiers:{number:n}},o){const i=(0,s.isSet)(t);I(e,"change",(()=>{const t=Array.prototype.filter.call(e.options,(e=>e.selected)).map((e=>n?(0,s.looseToNumber)(ge(e)):ge(e)));e[ce](e.multiple?i?new Set(t):t:t[0])})),e[ce]=re(o)},mounted(e,{value:t}){me(e,t)},beforeUpdate(e,t,n){e[ce]=re(n)},updated(e,{value:t}){me(e,t)}};function me(e,t){const n=e.multiple;if(!n||(0,s.isArray)(t)||(0,s.isSet)(t)){for(let o=0,i=e.options.length;o<i;o++){const i=e.options[o],r=ge(i);if(n)(0,s.isArray)(t)?i.selected=(0,s.looseIndexOf)(t,r)>-1:i.selected=t.has(r);else if((0,s.looseEqual)(ge(i),t))return void(e.selectedIndex!==o&&(e.selectedIndex=o))}n||-1===e.selectedIndex||(e.selectedIndex=-1)}else(0,o.warn)(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(t).slice(8,-1)}.`)}function ge(e){return"_value"in e?e._value:e.value}function be(e,t){const n=t?"_trueValue":"_falseValue";return n in e?e[n]:t}const ve={created(e,t,n){_e(e,t,n,null,"created")},mounted(e,t,n){_e(e,t,n,null,"mounted")},beforeUpdate(e,t,n,o){_e(e,t,n,o,"beforeUpdate")},updated(e,t,n,o){_e(e,t,n,o,"updated")}};function ye(e,t){switch(e){case"SELECT":return fe;case"TEXTAREA":return ue;default:switch(t){case"checkbox":return de;case"radio":return pe;default:return ue}}}function _e(e,t,n,o,s){const i=ye(e.tagName,n.props&&n.props.type)[s];i&&i(e,t,n,o)}const xe=["ctrl","shift","alt","meta"],we={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>xe.some((n=>e[`${n}Key`]&&!t.includes(n)))},Se=(e,t)=>e._withMods||(e._withMods=(n,...o)=>{for(let e=0;e<t.length;e++){const o=we[t[e]];if(o&&o(n,t))return}return e(n,...o)}),ke={esc:"escape",space:" ",up:"arrow-up",left:"arrow-left",right:"arrow-right",down:"arrow-down",delete:"backspace"},je=(e,t)=>e._withKeys||(e._withKeys=n=>{if(!("key"in n))return;const o=(0,s.hyphenate)(n.key);return t.some((e=>e===o||ke[e]===o))?e(n):void 0}),Oe=(0,s.extend)({patchProp:(e,t,n,i,r=!1,a,l,c,u)=>{"class"===t?function(e,t,n){const o=e[d];o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,i,r):"style"===t?function(e,t,n){const o=e.style,i=(0,s.isString)(n);if(n&&!i){if(t&&!(0,s.isString)(t))for(const e in t)null==n[e]&&R(o,e,"");for(const e in n)R(o,e,n[e])}else{const s=o.display;i?t!==n&&(o.cssText=n):t&&e.removeAttribute("style"),E in e&&(o.display=s)}}(e,n,i):(0,s.isOn)(t)?(0,s.isModelListener)(t)||function(e,t,n,i,r=null){const a=e[N]||(e[N]={}),l=a[t];if(i&&l)l.value=i;else{const[n,c]=function(e){let t;if(B.test(e)){let n;for(t={};n=e.match(B);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}return[":"===e[2]?e.slice(3):(0,s.hyphenate)(e.slice(2)),t]}(t);if(i){const l=a[t]=function(e,t){const n=e=>{if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();(0,o.callWithAsyncErrorHandling)(function(e,t){if((0,s.isArray)(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5,[e])};return n.value=e,n.attached=z(),n}(i,r);I(e,n,l,c)}else l&&(function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,l,c),a[t]=void 0)}}(e,t,0,i,l):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){if(o)return"innerHTML"===t||"textContent"===t||!!(t in e&&H(t)&&(0,s.isFunction)(n));if("spellcheck"===t||"draggable"===t||"translate"===t)return!1;if("form"===t)return!1;if("list"===t&&"INPUT"===e.tagName)return!1;if("type"===t&&"TEXTAREA"===e.tagName)return!1;if("width"===t||"height"===t){const t=e.tagName;return!("IMG"===t||"VIDEO"===t||"CANVAS"===t||"SOURCE"===t)}return(!H(t)||!(0,s.isString)(n))&&t in e}(e,t,i,r))?function(e,t,n,i,r,a,l){if("innerHTML"===t||"textContent"===t)return i&&l(i,r,a),void(e[t]=null==n?"":n);const c=e.tagName;if("value"===t&&"PROGRESS"!==c&&!c.includes("-")){e._value=n;const o=null==n?"":n;return("OPTION"===c?e.getAttribute("value"):e.value)!==o&&(e.value=o),void(null==n&&e.removeAttribute(t))}let u=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?n=(0,s.includeBooleanAttr)(n):null==n&&"string"===o?(n="",u=!0):"number"===o&&(n=0,u=!0)}try{e[t]=n}catch(e){u||(0,o.warn)(`Failed setting prop "${t}" on <${c.toLowerCase()}>: value ${n} is invalid.`,e)}u&&e.removeAttribute(t)}(e,t,i,a,l,c,u):("true-value"===t?e._trueValue=i:"false-value"===t&&(e._falseValue=i),function(e,t,n,o,i){if(o&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(F,t.slice(6,t.length)):e.setAttributeNS(F,t,n);else{const o=(0,s.isSpecialBooleanAttr)(t);null==n||o&&!(0,s.includeBooleanAttr)(n)?e.removeAttribute(t):e.setAttribute(t,o?"":n)}}(e,t,i,r))}},l);let Ce,Ee=!1;function Ae(){return Ce||(Ce=(0,o.createRenderer)(Oe))}function Pe(){return Ce=Ee?Ce:(0,o.createHydrationRenderer)(Oe),Ee=!0,Ce}const Te=(...e)=>{Ae().render(...e)},Me=(...e)=>{Pe().hydrate(...e)},Re=(...e)=>{const t=Ae().createApp(...e);Le(t),Fe(t);const{mount:n}=t;return t.mount=e=>{const o=Ie(e);if(!o)return;const i=t._component;(0,s.isFunction)(i)||i.render||i.template||(i.template=o.innerHTML),o.innerHTML="";const r=n(o,!1,o instanceof SVGElement);return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),r},t},De=(...e)=>{const t=Pe().createApp(...e);Le(t),Fe(t);const{mount:n}=t;return t.mount=e=>{const t=Ie(e);if(t)return n(t,!0,t instanceof SVGElement)},t};function Le(e){Object.defineProperty(e.config,"isNativeTag",{value:e=>(0,s.isHTMLTag)(e)||(0,s.isSVGTag)(e),writable:!1})}function Fe(e){if((0,o.isRuntimeOnly)()){const t=e.config.isCustomElement;Object.defineProperty(e.config,"isCustomElement",{get:()=>t,set(){(0,o.warn)("The `isCustomElement` config option is deprecated. Use `compilerOptions.isCustomElement` instead.")}});const n=e.config.compilerOptions,s='The `compilerOptions` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, `compilerOptions` must be passed to `@vue/compiler-dom` in the build setup instead.\n- For vue-loader: pass it via vue-loader\'s `compilerOptions` loader option.\n- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader\n- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc';Object.defineProperty(e.config,"compilerOptions",{get:()=>((0,o.warn)(s),n),set(){(0,o.warn)(s)}})}}function Ie(e){if((0,s.isString)(e)){const t=document.querySelector(e);return t||(0,o.warn)(`Failed to mount app: mount target selector "${e}" returned null.`),t}return window.ShadowRoot&&e instanceof window.ShadowRoot&&"closed"===e.mode&&(0,o.warn)('mounting on a ShadowRoot with `{mode: "closed"}` may lead to unpredictable bugs'),e}let Ne=!1;const Be=()=>{Ne||(Ne=!0,ue.getSSRProps=({value:e})=>({value:e}),pe.getSSRProps=({value:e},t)=>{if(t.props&&(0,s.looseEqual)(t.props.value,e))return{checked:!0}},de.getSSRProps=({value:e},t)=>{if((0,s.isArray)(e)){if(t.props&&(0,s.looseIndexOf)(e,t.props.value)>-1)return{checked:!0}}else if((0,s.isSet)(e)){if(t.props&&e.has(t.props.value))return{checked:!0}}else if(e)return{checked:!0}},ve.getSSRProps=(e,t)=>{if("string"!=typeof t.type)return;const n=ye(t.type.toUpperCase(),t.props&&t.props.type);return n.getSSRProps?n.getSSRProps(e,t):void 0},A.getSSRProps=({value:e})=>{if(!e)return{style:{display:"none"}}})}},"./node_modules/@vue/shared/dist/shared.esm-bundler.js":(e,t,n)=>{"use strict";function o(e,t){const n=Object.create(null),o=e.split(",");for(let e=0;e<o.length;e++)n[o[e]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}n.r(t),n.d(t,{EMPTY_ARR:()=>i,EMPTY_OBJ:()=>s,NO:()=>a,NOOP:()=>r,PatchFlagNames:()=>Y,camelize:()=>R,capitalize:()=>F,def:()=>V,escapeHtml:()=>xe,escapeHtmlComment:()=>Se,extend:()=>u,genPropsAccessExp:()=>G,generateCodeFrame:()=>Q,getGlobalThis:()=>U,hasChanged:()=>N,hasOwn:()=>p,hyphenate:()=>L,includeBooleanAttr:()=>pe,invokeArrayFns:()=>B,isArray:()=>f,isBooleanAttr:()=>he,isBuiltInDirective:()=>P,isDate:()=>b,isFunction:()=>y,isGloballyAllowed:()=>K,isGloballyWhitelisted:()=>J,isHTMLTag:()=>ae,isIntegerKey:()=>E,isKnownHtmlAttr:()=>ve,isKnownSvgAttr:()=>ye,isMap:()=>m,isModelListener:()=>c,isObject:()=>w,isOn:()=>l,isPlainObject:()=>C,isPromise:()=>S,isRegExp:()=>v,isReservedProp:()=>A,isSSRSafeAttrName:()=>ge,isSVGTag:()=>le,isSet:()=>g,isSpecialBooleanAttr:()=>de,isString:()=>_,isSymbol:()=>x,isVoidTag:()=>ce,looseEqual:()=>ke,looseIndexOf:()=>je,looseToNumber:()=>$,makeMap:()=>o,normalizeClass:()=>ie,normalizeProps:()=>re,normalizeStyle:()=>Z,objectToString:()=>k,parseStringStyle:()=>oe,propsToAttrMap:()=>be,remove:()=>d,slotFlagsText:()=>q,stringifyStyle:()=>se,toDisplayString:()=>Oe,toHandlerKey:()=>I,toNumber:()=>z,toRawType:()=>O,toTypeString:()=>j});const s=Object.freeze({}),i=Object.freeze([]),r=()=>{},a=()=>!1,l=e=>111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&(e.charCodeAt(2)>122||e.charCodeAt(2)<97),c=e=>e.startsWith("onUpdate:"),u=Object.assign,d=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},h=Object.prototype.hasOwnProperty,p=(e,t)=>h.call(e,t),f=Array.isArray,m=e=>"[object Map]"===j(e),g=e=>"[object Set]"===j(e),b=e=>"[object Date]"===j(e),v=e=>"[object RegExp]"===j(e),y=e=>"function"==typeof e,_=e=>"string"==typeof e,x=e=>"symbol"==typeof e,w=e=>null!==e&&"object"==typeof e,S=e=>(w(e)||y(e))&&y(e.then)&&y(e.catch),k=Object.prototype.toString,j=e=>k.call(e),O=e=>j(e).slice(8,-1),C=e=>"[object Object]"===j(e),E=e=>_(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,A=o(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),P=o("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"),T=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},M=/-(\w)/g,R=T((e=>e.replace(M,((e,t)=>t?t.toUpperCase():"")))),D=/\B([A-Z])/g,L=T((e=>e.replace(D,"-$1").toLowerCase())),F=T((e=>e.charAt(0).toUpperCase()+e.slice(1))),I=T((e=>e?`on${F(e)}`:"")),N=(e,t)=>!Object.is(e,t),B=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},V=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},$=e=>{const t=parseFloat(e);return isNaN(t)?e:t},z=e=>{const t=_(e)?Number(e):NaN;return isNaN(t)?e:t};let H;const U=()=>H||(H="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{}),W=/^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;function G(e){return W.test(e)?`__props.${e}`:`__props[${JSON.stringify(e)}]`}const Y={1:"TEXT",2:"CLASS",4:"STYLE",8:"PROPS",16:"FULL_PROPS",32:"NEED_HYDRATION",64:"STABLE_FRAGMENT",128:"KEYED_FRAGMENT",256:"UNKEYED_FRAGMENT",512:"NEED_PATCH",1024:"DYNAMIC_SLOTS",2048:"DEV_ROOT_FRAGMENT",[-1]:"HOISTED",[-2]:"BAIL"},q={1:"STABLE",2:"DYNAMIC",3:"FORWARDED"},K=o("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console"),J=K,X=2;function Q(e,t=0,n=e.length){let o=e.split(/(\r?\n)/);const s=o.filter(((e,t)=>t%2==1));o=o.filter(((e,t)=>t%2==0));let i=0;const r=[];for(let e=0;e<o.length;e++)if(i+=o[e].length+(s[e]&&s[e].length||0),i>=t){for(let a=e-X;a<=e+X||n>i;a++){if(a<0||a>=o.length)continue;const l=a+1;r.push(`${l}${" ".repeat(Math.max(3-String(l).length,0))}|  ${o[a]}`);const c=o[a].length,u=s[a]&&s[a].length||0;if(a===e){const e=t-(i-(c+u)),o=Math.max(1,n>i?c-e:n-t);r.push("   |  "+" ".repeat(e)+"^".repeat(o))}else if(a>e){if(n>i){const e=Math.max(Math.min(n-i,c),1);r.push("   |  "+"^".repeat(e))}i+=c+u}}break}return r.join("\n")}function Z(e){if(f(e)){const t={};for(let n=0;n<e.length;n++){const o=e[n],s=_(o)?oe(o):Z(o);if(s)for(const e in s)t[e]=s[e]}return t}if(_(e)||w(e))return e}const ee=/;(?![^(]*\))/g,te=/:([^]+)/,ne=/\/\*[^]*?\*\//g;function oe(e){const t={};return e.replace(ne,"").split(ee).forEach((e=>{if(e){const n=e.split(te);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function se(e){let t="";if(!e||_(e))return t;for(const n in e){const o=e[n],s=n.startsWith("--")?n:L(n);(_(o)||"number"==typeof o)&&(t+=`${s}:${o};`)}return t}function ie(e){let t="";if(_(e))t=e;else if(f(e))for(let n=0;n<e.length;n++){const o=ie(e[n]);o&&(t+=o+" ")}else if(w(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}function re(e){if(!e)return null;let{class:t,style:n}=e;return t&&!_(t)&&(e.class=ie(t)),n&&(e.style=Z(n)),e}const ae=o("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot"),le=o("svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view"),ce=o("area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr"),ue="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",de=o(ue),he=o(ue+",async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected");function pe(e){return!!e||""===e}const fe=/[>/="'\u0009\u000a\u000c\u0020]/,me={};function ge(e){if(me.hasOwnProperty(e))return me[e];const t=fe.test(e);return t&&console.error(`unsafe attribute name: ${e}`),me[e]=!t}const be={acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},ve=o("accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap"),ye=o("xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan"),_e=/["'&<>]/;function xe(e){const t=""+e,n=_e.exec(t);if(!n)return t;let o,s,i="",r=0;for(s=n.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:o="&quot;";break;case 38:o="&amp;";break;case 39:o="&#39;";break;case 60:o="&lt;";break;case 62:o="&gt;";break;default:continue}r!==s&&(i+=t.slice(r,s)),r=s+1,i+=o}return r!==s?i+t.slice(r,s):i}const we=/^-?>|<!--|-->|--!>|<!-$/g;function Se(e){return e.replace(we,"")}function ke(e,t){if(e===t)return!0;let n=b(e),o=b(t);if(n||o)return!(!n||!o)&&e.getTime()===t.getTime();if(n=x(e),o=x(t),n||o)return e===t;if(n=f(e),o=f(t),n||o)return!(!n||!o)&&function(e,t){if(e.length!==t.length)return!1;let n=!0;for(let o=0;n&&o<e.length;o++)n=ke(e[o],t[o]);return n}(e,t);if(n=w(e),o=w(t),n||o){if(!n||!o)return!1;if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e){const o=e.hasOwnProperty(n),s=t.hasOwnProperty(n);if(o&&!s||!o&&s||!ke(e[n],t[n]))return!1}}return String(e)===String(t)}function je(e,t){return e.findIndex((e=>ke(e,t)))}const Oe=e=>_(e)?e:null==e?"":f(e)||w(e)&&(e.toString===k||!y(e.toString))?JSON.stringify(e,Ce,2):String(e),Ce=(e,t)=>t&&t.__v_isRef?Ce(e,t.value):m(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:g(t)?{[`Set(${t.size})`]:[...t.values()]}:!w(t)||f(t)||C(t)?t:String(t)},"./node_modules/@wordpress/hooks/build-module/createAddHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),s=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const i=function(e,t){return function(n,i,r,a=10){const l=e[t];if(!(0,s.default)(n))return;if(!(0,o.default)(i))return;if("function"!=typeof r)return void console.error("The hook callback must be a function.");if("number"!=typeof a)return void console.error("If specified, the hook priority must be a number.");const c={callback:r,priority:a,namespace:i};if(l[n]){const e=l[n].handlers;let t;for(t=e.length;t>0&&!(a>=e[t-1].priority);t--);t===e.length?e[t]=c:e.splice(t,0,c),l.__current.forEach((e=>{e.name===n&&e.currentIndex>=t&&e.currentIndex++}))}else l[n]={handlers:[c],runs:0};"hookAdded"!==n&&e.doAction("hookAdded",n,i,r,a)}}},"./node_modules/@wordpress/hooks/build-module/createCurrentHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(){var n;const o=e[t];return null!==(n=o.__current[o.__current.length-1]?.name)&&void 0!==n?n:null}}},"./node_modules/@wordpress/hooks/build-module/createDidHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const s=function(e,t){return function(n){const s=e[t];if((0,o.default)(n))return s[n]&&s[n].runs?s[n].runs:0}}},"./node_modules/@wordpress/hooks/build-module/createDoingHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n){const o=e[t];return void 0===n?void 0!==o.__current[0]:!!o.__current[0]&&n===o.__current[0].name}}},"./node_modules/@wordpress/hooks/build-module/createHasHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){return function(n,o){const s=e[t];return void 0!==o?n in s&&s[n].handlers.some((e=>e.namespace===o)):n in s}}},"./node_modules/@wordpress/hooks/build-module/createHooks.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{_Hooks:()=>u,default:()=>d});var o=n("./node_modules/@wordpress/hooks/build-module/createAddHook.js"),s=n("./node_modules/@wordpress/hooks/build-module/createRemoveHook.js"),i=n("./node_modules/@wordpress/hooks/build-module/createHasHook.js"),r=n("./node_modules/@wordpress/hooks/build-module/createRunHook.js"),a=n("./node_modules/@wordpress/hooks/build-module/createCurrentHook.js"),l=n("./node_modules/@wordpress/hooks/build-module/createDoingHook.js"),c=n("./node_modules/@wordpress/hooks/build-module/createDidHook.js");class u{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=(0,o.default)(this,"actions"),this.addFilter=(0,o.default)(this,"filters"),this.removeAction=(0,s.default)(this,"actions"),this.removeFilter=(0,s.default)(this,"filters"),this.hasAction=(0,i.default)(this,"actions"),this.hasFilter=(0,i.default)(this,"filters"),this.removeAllActions=(0,s.default)(this,"actions",!0),this.removeAllFilters=(0,s.default)(this,"filters",!0),this.doAction=(0,r.default)(this,"actions"),this.applyFilters=(0,r.default)(this,"filters",!0),this.currentAction=(0,a.default)(this,"actions"),this.currentFilter=(0,a.default)(this,"filters"),this.doingAction=(0,l.default)(this,"actions"),this.doingFilter=(0,l.default)(this,"filters"),this.didAction=(0,c.default)(this,"actions"),this.didFilter=(0,c.default)(this,"filters")}}const d=function(){return new u}},"./node_modules/@wordpress/hooks/build-module/createRemoveHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/@wordpress/hooks/build-module/validateNamespace.js"),s=n("./node_modules/@wordpress/hooks/build-module/validateHookName.js");const i=function(e,t,n=!1){return function(i,r){const a=e[t];if(!(0,s.default)(i))return;if(!n&&!(0,o.default)(r))return;if(!a[i])return 0;let l=0;if(n)l=a[i].handlers.length,a[i]={runs:a[i].runs,handlers:[]};else{const e=a[i].handlers;for(let t=e.length-1;t>=0;t--)e[t].namespace===r&&(e.splice(t,1),l++,a.__current.forEach((e=>{e.name===i&&e.currentIndex>=t&&e.currentIndex--})))}return"hookRemoved"!==i&&e.doAction("hookRemoved",i,r),l}}},"./node_modules/@wordpress/hooks/build-module/createRunHook.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t,n=!1){return function(o,...s){const i=e[t];i[o]||(i[o]={handlers:[],runs:0}),i[o].runs++;const r=i[o].handlers;if("hookAdded"!==o&&i.all&&r.push(...i.all.handlers),!r||!r.length)return n?s[0]:void 0;const a={name:o,currentIndex:0};for(i.__current.push(a);a.currentIndex<r.length;){const e=r[a.currentIndex].callback.apply(null,s);n&&(s[0]=e),a.currentIndex++}return i.__current.pop(),n?s[0]:void 0}}},"./node_modules/@wordpress/hooks/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{actions:()=>x,addAction:()=>i,addFilter:()=>r,applyFilters:()=>f,createHooks:()=>o.default,currentAction:()=>m,currentFilter:()=>g,defaultHooks:()=>s,didAction:()=>y,didFilter:()=>_,doAction:()=>p,doingAction:()=>b,doingFilter:()=>v,filters:()=>w,hasAction:()=>c,hasFilter:()=>u,removeAction:()=>a,removeAllActions:()=>d,removeAllFilters:()=>h,removeFilter:()=>l});var o=n("./node_modules/@wordpress/hooks/build-module/createHooks.js");const s=(0,o.default)(),{addAction:i,addFilter:r,removeAction:a,removeFilter:l,hasAction:c,hasFilter:u,removeAllActions:d,removeAllFilters:h,doAction:p,applyFilters:f,currentAction:m,currentFilter:g,doingAction:b,doingFilter:v,didAction:y,didFilter:_,actions:x,filters:w}=s},"./node_modules/@wordpress/hooks/build-module/validateHookName.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(e)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(e)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)}},"./node_modules/@wordpress/hooks/build-module/validateNamespace.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e){return"string"!=typeof e||""===e?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(e)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)}},"./node_modules/@wordpress/i18n/build-module/create-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{createI18n:()=>r});var o=n("./node_modules/tannin/index.js");const s={plural_forms:e=>1===e?0:1},i=/^i18n\.(n?gettext|has_translation)(_|$)/,r=(e,t,n)=>{const r=new o.default({}),a=new Set,l=()=>{a.forEach((e=>e()))},c=(e,t="default")=>{r.data[t]={...r.data[t],...e},r.data[t][""]={...s,...r.data[t]?.[""]},delete r.pluralForms[t]},u=(e,t)=>{c(e,t),l()},d=(e="default",t,n,o,s)=>(r.data[e]||c(void 0,e),r.dcnpgettext(e,t,n,o,s)),h=(e="default")=>e,p=(e,t,o)=>{let s=d(o,t,e);return n?(s=n.applyFilters("i18n.gettext_with_context",s,e,t,o),n.applyFilters("i18n.gettext_with_context_"+h(o),s,e,t,o)):s};if(e&&u(e,t),n){const e=e=>{i.test(e)&&l()};n.addAction("hookAdded","core/i18n",e),n.addAction("hookRemoved","core/i18n",e)}return{getLocaleData:(e="default")=>r.data[e],setLocaleData:u,addLocaleData:(e,t="default")=>{r.data[t]={...r.data[t],...e,"":{...s,...r.data[t]?.[""],...e?.[""]}},delete r.pluralForms[t],l()},resetLocaleData:(e,t)=>{r.data={},r.pluralForms={},u(e,t)},subscribe:e=>(a.add(e),()=>a.delete(e)),__:(e,t)=>{let o=d(t,void 0,e);return n?(o=n.applyFilters("i18n.gettext",o,e,t),n.applyFilters("i18n.gettext_"+h(t),o,e,t)):o},_x:p,_n:(e,t,o,s)=>{let i=d(s,void 0,e,t,o);return n?(i=n.applyFilters("i18n.ngettext",i,e,t,o,s),n.applyFilters("i18n.ngettext_"+h(s),i,e,t,o,s)):i},_nx:(e,t,o,s,i)=>{let r=d(i,s,e,t,o);return n?(r=n.applyFilters("i18n.ngettext_with_context",r,e,t,o,s,i),n.applyFilters("i18n.ngettext_with_context_"+h(i),r,e,t,o,s,i)):r},isRTL:()=>"rtl"===p("ltr","text direction"),hasTranslation:(e,t,o)=>{const s=t?t+""+e:e;let i=!!r.data?.[null!=o?o:"default"]?.[s];return n&&(i=n.applyFilters("i18n.has_translation",i,e,t,o),i=n.applyFilters("i18n.has_translation_"+h(o),i,e,t,o)),i}}}},"./node_modules/@wordpress/i18n/build-module/default-i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>d,_n:()=>p,_nx:()=>f,_x:()=>h,default:()=>r,getLocaleData:()=>a,hasTranslation:()=>g,isRTL:()=>m,resetLocaleData:()=>c,setLocaleData:()=>l,subscribe:()=>u});var o=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),s=n("./node_modules/@wordpress/hooks/build-module/index.js");const i=(0,o.createI18n)(void 0,void 0,s.defaultHooks),r=i,a=i.getLocaleData.bind(i),l=i.setLocaleData.bind(i),c=i.resetLocaleData.bind(i),u=i.subscribe.bind(i),d=i.__.bind(i),h=i._x.bind(i),p=i._n.bind(i),f=i._nx.bind(i),m=i.isRTL.bind(i),g=i.hasTranslation.bind(i)},"./node_modules/@wordpress/i18n/build-module/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{__:()=>i.__,_n:()=>i._n,_nx:()=>i._nx,_x:()=>i._x,createI18n:()=>s.createI18n,defaultI18n:()=>i.default,getLocaleData:()=>i.getLocaleData,hasTranslation:()=>i.hasTranslation,isRTL:()=>i.isRTL,resetLocaleData:()=>i.resetLocaleData,setLocaleData:()=>i.setLocaleData,sprintf:()=>o.sprintf,subscribe:()=>i.subscribe});var o=n("./node_modules/@wordpress/i18n/build-module/sprintf.js"),s=n("./node_modules/@wordpress/i18n/build-module/create-i18n.js"),i=n("./node_modules/@wordpress/i18n/build-module/default-i18n.js")},"./node_modules/@wordpress/i18n/build-module/sprintf.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{sprintf:()=>a});var o=n("./node_modules/memize/dist/index.js"),s=n("./node_modules/sprintf-js/src/sprintf.js"),i=n.n(s);const r=(0,o.default)(console.error);function a(e,...t){try{return i().sprintf(e,...t)}catch(t){return t instanceof Error&&r("sprintf error: \n\n"+t.toString()),e}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/tabs/Tabs.vue"),s=n("./src/utils/menu-fix.js");const i={name:"App",components:{Tabs:o.default},watch:{$route:function(){(0,s.menuFix)()}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"Button"}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/vue-chartjs/dist/index.js"),s=n("./node_modules/chart.js/dist/chart.js"),i={name:"BarChart",components:{Bar:o.Bar},props:{chartId:{type:String,default:"bar-chart"},width:{type:Number,default:400},height:{type:Number,default:400},cssClasses:{default:"",type:String},styles:{type:Object,default:function(){}},plugins:{type:Array,default:function(){return[]}},labels:{type:Array,default:function(){return[]}},datasets:{type:Object,default:function(){}},chartOptions:{type:Object,required:!1,default:{responsive:!0,maintainAspectRatio:!1}}},computed:{chartData:function(){return{labels:this.labels,datasets:this.datasets}}}};const r=Object.assign(i,{setup:function(e,t){(0,t.expose)(),s.Chart.register(s.Title,s.Tooltip,s.Legend,s.BarElement,s.CategoryScale,s.LinearScale);var n={get Bar(){return o.Bar},get ChartJS(){return s.Chart},get Title(){return s.Title},get Tooltip(){return s.Tooltip},get Legend(){return s.Legend},get BarElement(){return s.BarElement},get CategoryScale(){return s.CategoryScale},get LinearScale(){return s.LinearScale}};return Object.defineProperty(n,"__isScriptSetup",{enumerable:!1,value:!0}),n}})},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"BaseInput",props:{name:{type:String,required:!0},type:{type:String,required:!1,default:"text"},value:{type:[String,Number,Array],required:!1,default:""},placeholder:{type:String,required:!1,default:""},required:{type:Boolean,required:!1,default:!1},onChange:{type:Function,required:!1,default:function(){}},min:{type:Number,required:!1},max:{type:Number,required:!1}},computed:{isDefaultInput:function(){return["text","number","email","search","url"].includes(this.type)},isCheckbox:function(){return"switch"===this.type||"checkbox"===this.type},isChecked:function(){return 1===parseInt(this.value)}},methods:{onChangeInput:function(e){this.isCheckbox?this.onChange({key:this.name,value:e.target.checked?1:0}):this.onChange({key:this.name,value:e.target.value})}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"SkeletonText",props:{width:{type:String,required:!1,default:"100%"}},computed:{skeletonWidthStyle:function(){return{width:this.width}}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}const r={name:"BaseTable",components:{TableLoading:n("./src/components/tables/TableLoading.vue").default},props:{headers:{type:Array,required:!0},rows:{type:Object,required:!0},loading:{type:Boolean,required:!1,default:!1},htmlColumns:{type:Array,required:!1,default:function(){return[]}}},computed:function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){var o,i,r;o=e,i=t,r=n[t],(i=function(e){var t=function(e,t){if("object"!==s(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==s(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===s(t)?t:String(t)}(i))in o?Object.defineProperty(o,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):o[i]=r})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,o.mapGetters)(["settings"])),methods:{isHtml:function(e){return this.htmlColumns.includes(e)}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={name:"TableLoading",components:{SkeletonText:n("./src/components/skeleton/SkeletonText.vue").default}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o}),n("./src/components/tabs/style.scss");const o={name:"Tabs",components:{},data:function(){return{}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){var o,i,r;o=e,i=t,r=n[t],(i=function(e){var t=function(e,t){if("object"!==s(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==s(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===s(t)?t:String(t)}(i))in o?Object.defineProperty(o,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):o[i]=r})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const a={name:"Graph",components:{BarChart:n("./src/components/chart/BarChart.vue").default},computed:r(r({},(0,o.mapGetters)(["getGraphData"])),{},{graphData:function(){return{labels:this.getGraphData.labels,datasets:[{label:"Values",backgroundColor:"rgba(75, 192, 192, 1)",borderColor:"rgba(75, 192, 192, 1)",borderWidth:5,data:this.getGraphData.values}]}}}),created:function(){this.fetchGraphData()},methods:r({},(0,o.mapActions)(["fetchGraphData"]))}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./src/components/button/Button.vue"),i=n("./src/components/input/BaseInput.vue");function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){var o,s,i;o=e,s=t,i=n[t],(s=function(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(t)?t:String(t)}(s))in o?Object.defineProperty(o,s,{value:i,enumerable:!0,configurable:!0,writable:!0}):o[s]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const u={name:"Settings",components:{Button:s.default,BaseInput:i.default},data:function(){return{wpAmVue,rownumber:"rownumber",numrows:5,checkboxName:"toggleSwitch",checkboxType:"checkbox",checkboxValue:1,checkboxPlaceholder:"Toggle Switch",emails:[]}},mounted:function(){this.emails.push(this.wpAmVue.user.email),this.getSettings()},computed:c(c({},(0,o.mapGetters)(["isSaving","settings"])),{},{isCheckbox:function(){return"checkbox"===this.checkboxType}}),methods:c(c({},(0,o.mapActions)(["storeSettings","getSettings"])),{},{onSubmit:function(e){e.preventDefault();var t={rows:parseInt(this.numrows),readable:this.checkboxValue,emails:this.emails.map((function(e){return e}))};this.storeSettings(t)},onNumRowsChange:function(e){this.numrows=e.value},onCheckboxChange:function(e){this.checkboxValue=e.value},onEmailChange:function(e,t){this.emails[e]=t.value},removeEmail:function(e){this.emails=this.emails.filter((function(t,n){return n!==e}))},addEmail:function(){var e;this.emails.length<5&&(this.emails=[].concat(function(e){if(Array.isArray(e))return a(e)}(e=this.emails)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[""]))},populateFormFields:function(){this.numrows=this.settings.rows||5,this.checkboxValue=this.settings.readable?1:0,this.emails=this.settings.emails||[]}}),watch:{settings:function(){this.populateFormFields()}}}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Table.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){var o,i,r;o=e,i=t,r=n[t],(i=function(e){var t=function(e,t){if("object"!==s(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==s(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===s(t)?t:String(t)}(i))in o?Object.defineProperty(o,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):o[i]=r})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}const a={name:"Table",components:{BaseTable:n("./src/components/tables/BaseTable.vue").default},mounted:function(){this.getTableData()},computed:r({},(0,o.mapGetters)({tableHeaders:"getTableHeaders",tableRows:"getTableRows",settings:"settings"})),methods:r({},(0,o.mapActions)(["getTableData"]))}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={id:"wp-am-vue-app"},i={class:"main-content"};function r(e,t,n,r,a,l){var c=(0,o.resolveComponent)("tabs"),u=(0,o.resolveComponent)("router-view");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",i,[(0,o.createElementVNode)("h3",null,(0,o.toDisplayString)(e.__("WP AM Vue App","wp-am-vue-app")),1),(0,o.createVNode)(c),(0,o.createVNode)(u)])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,i,r){return(0,o.openBlock)(),(0,o.createElementBlock)("button",null,[(0,o.renderSlot)(e.$slots,"default",{},void 0,!0),(0,o.createCommentVNode)(" slot button content ")])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,i,r){return(0,o.openBlock)(),(0,o.createElementBlock)("div",null,[(0,o.createVNode)(s.Bar,{data:r.chartData,"chart-options":n.chartOptions,"chart-id":n.chartId,styles:n.styles,width:n.width,height:n.height,plugins:n.plugins,"css-classes":n.cssClasses},null,8,["data","chart-options","chart-id","styles","width","height","plugins","css-classes"])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>c});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"input-area"},i=["id","name","type","value","placeholder","onchange","min","max"],r={key:1},a=["checked","onchange"],l=function(e){return(0,o.pushScopeId)("data-v-d0938918"),e=e(),(0,o.popScopeId)(),e}((function(){return(0,o.createElementVNode)("span",{class:"toggle-switch"},null,-1)}));function c(e,t,n,c,u,d){return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createCommentVNode)(" Handle input component for general inputs like, text, number, email "),d.isDefaultInput?((0,o.openBlock)(),(0,o.createElementBlock)("input",{key:0,id:n.name,class:"input-main",name:n.name,type:n.type,value:n.value,placeholder:n.placeholder,onchange:d.onChangeInput,min:n.min,max:n.max},null,8,i)):(0,o.createCommentVNode)("v-if",!0),(0,o.createCommentVNode)(" Handle input component for switch type input "),d.isCheckbox?((0,o.openBlock)(),(0,o.createElementBlock)("label",r,[(0,o.createElementVNode)("input",{type:"checkbox",checked:d.isChecked,onchange:d.onChangeInput},null,8,a),l,(0,o.createElementVNode)("span",null,(0,o.toDisplayString)(d.isChecked?"On":"Off"),1)])):(0,o.createCommentVNode)("v-if",!0)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,i,r){return(0,o.openBlock)(),(0,o.createElementBlock)("div",{class:"skeleton skeleton-text",style:(0,o.normalizeStyle)(r.skeletonWidthStyle)},null,4)}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={className:"table-responsive"},i={key:1},r=["innerHTML"],a={key:1};function l(e,t,n,l,c,u){var d=(0,o.resolveComponent)("TableLoading");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[n.loading?((0,o.openBlock)(),(0,o.createBlock)(d,{key:0})):(0,o.createCommentVNode)("v-if",!0),n.loading?(0,o.createCommentVNode)("v-if",!0):((0,o.openBlock)(),(0,o.createElementBlock)("table",i,[(0,o.createElementVNode)("thead",null,[(0,o.createElementVNode)("tr",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.headers,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("th",{key:e},(0,o.toDisplayString)(e),1)})),128))])]),(0,o.createElementVNode)("tbody",null,[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.rows,(function(e){return(0,o.openBlock)(),(0,o.createElementBlock)("tr",{key:e.id},[((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(n.headers,(function(t){return(0,o.openBlock)(),(0,o.createElementBlock)("td",{key:t},[u.isHtml(null==t?void 0:t.toLowerCase())?((0,o.openBlock)(),(0,o.createElementBlock)("div",{key:0,innerHTML:null==e?void 0:e[null==t?void 0:t.toLowerCase()]},null,8,r)):((0,o.openBlock)(),(0,o.createElementBlock)("span",a,(0,o.toDisplayString)(null==e?void 0:e[null==t?void 0:t.toLowerCase()]),1))])})),128))])})),128))])]))])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>s});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js");function s(e,t,n,s,i,r){var a=(0,o.resolveComponent)("SkeletonText");return(0,o.openBlock)(),(0,o.createElementBlock)("table",null,[(0,o.createElementVNode)("thead",null,[(0,o.createElementVNode)("tr",null,[(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("th",null,[(0,o.createVNode)(a,{width:"100px"})])])]),(0,o.createElementVNode)("tbody",null,[((0,o.openBlock)(),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(5,(function(e,t){return(0,o.createElementVNode)("tr",{key:t,style:{"margin-top":"50px"}},[(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})]),(0,o.createElementVNode)("td",null,[(0,o.createVNode)(a,{width:"100px"})])])})),64))])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>l});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={id:"wp-am-vue-app-tabs"},i={class:"tab-item"},r={class:"tab-item"},a={class:"tab-item"};function l(e,t,n,l,c,u){var d=(0,o.resolveComponent)("router-link");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[(0,o.createElementVNode)("div",i,[(0,o.createVNode)(d,{to:"/"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" Settings ")]})),_:1})]),(0,o.createElementVNode)("div",r,[(0,o.createVNode)(d,{to:"/table"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" Table ")]})),_:1})]),(0,o.createElementVNode)("div",a,[(0,o.createVNode)(d,{to:"/graph"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)(" Graph ")]})),_:1})])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=template&id=35f6d25a":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"graph-page"},i=(0,o.createElementVNode)("h4",null,"Graph Page",-1);function r(e,t,n,r,a,l){var c=(0,o.resolveComponent)("BarChart");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[i,(0,o.createVNode)(c,{labels:l.graphData.labels,datasets:l.graphData.datasets,height:100},null,8,["labels","datasets"])])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=template&id=b66ee972&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>f});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=function(e){return(0,o.pushScopeId)("data-v-b66ee972"),e=e(),(0,o.popScopeId)(),e},i={class:"settings-page"},r=s((function(){return(0,o.createElementVNode)("h4",null,"Settings",-1)})),a=s((function(){return(0,o.createElementVNode)("label",{for:"row"},"Number of Row",-1)})),l=s((function(){return(0,o.createElementVNode)("br",null,null,-1)})),c=s((function(){return(0,o.createElementVNode)("label",{for:"readable"},"Readble Date",-1)})),u=s((function(){return(0,o.createElementVNode)("br",null,null,-1)})),d={style:{"margin-bottom":"30px"}},h=s((function(){return(0,o.createElementVNode)("label",null,"Emails (1-5):",-1)})),p=["onClick"];function f(e,t,n,s,f,m){var g=(0,o.resolveComponent)("BaseInput"),b=(0,o.resolveComponent)("Button");return(0,o.openBlock)(),(0,o.createElementBlock)("div",i,[r,(0,o.createElementVNode)("form",{onSubmit:t[1]||(t[1]=(0,o.withModifiers)((function(){return m.onSubmit&&m.onSubmit.apply(m,arguments)}),["prevent"])),method:"post"},[a,(0,o.createVNode)(g,{name:f.rownumber,type:"number",value:f.numrows,min:1,max:5,"on-change":m.onNumRowsChange},null,8,["name","value","on-change"]),l,c,m.isCheckbox?((0,o.openBlock)(),(0,o.createBlock)(g,{key:0,name:f.checkboxName,type:f.checkboxType,value:f.checkboxValue,placeholder:f.checkboxPlaceholder,"on-change":m.onCheckboxChange},null,8,["name","type","value","placeholder","on-change"])):(0,o.createCommentVNode)("v-if",!0),u,(0,o.createElementVNode)("div",d,[h,((0,o.openBlock)(!0),(0,o.createElementBlock)(o.Fragment,null,(0,o.renderList)(f.emails,(function(e,t){return(0,o.openBlock)(),(0,o.createElementBlock)("div",{class:"inline-input",key:t},[(0,o.createVNode)(g,{name:"email["+t+"]",type:"email",value:e,placeholder:"email@example.com","on-change":function(e){return m.onEmailChange(t,e)}},null,8,["name","value","on-change"]),f.emails.length>1?((0,o.openBlock)(),(0,o.createElementBlock)("button",{key:0,onClick:(0,o.withModifiers)((function(e){return m.removeEmail(t)}),["prevent"]),class:"remove-button"}," Remove ",8,p)):(0,o.createCommentVNode)("v-if",!0)])})),128)),f.emails.length<5?((0,o.openBlock)(),(0,o.createElementBlock)("button",{key:0,onClick:t[0]||(t[0]=(0,o.withModifiers)((function(){return m.addEmail&&m.addEmail.apply(m,arguments)}),["prevent"])),class:"add-button"}," Add Email ")):(0,o.createCommentVNode)("v-if",!0)]),(0,o.createVNode)(b,{type:"submit"},{default:(0,o.withCtx)((function(){return[(0,o.createTextVNode)("Save")]})),_:1})],32)])}},"./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Table.vue?vue&type=template&id=05650cda":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s={class:"table-page"},i=(0,o.createElementVNode)("h4",null,"Table Page",-1);function r(e,t,n,r,a,l){var c=(0,o.resolveComponent)("BaseTable");return(0,o.openBlock)(),(0,o.createElementBlock)("div",s,[i,(0,o.createVNode)(c,{headers:e.tableHeaders,rows:e.tableRows},null,8,["headers","rows"])])}},"./src/i18n.js":(e,t,n)=>{"use strict";n.r(t);var o=n("./node_modules/@wordpress/i18n/build-module/index.js");window.__=o.__,window.sprintf=o.sprintf},"./src/mixins/i18n.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={methods:{__:function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e,t){return __(e,t)})),sprintf:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),o=1;o<t;o++)n[o-1]=arguments[o];return sprintf.apply(void 0,[e].concat(n))}))}}},"./src/router/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/vue-router/dist/vue-router.mjs"),s=n("./src/pages/Table.vue"),i=n("./src/pages/Settings.vue"),r=n("./src/pages/Graph.vue"),a=[{path:"/",name:"Settings",component:i.default,alias:"/settings"},{path:"/table",name:"Table",component:s.default},{path:"/graph",name:"Graph",component:r.default}];const l=(0,o.createRouter)({history:(0,o.createWebHistory)(wpAmVue.site.base_url),routes:a})},"./src/store/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/vuex/dist/vuex.esm-bundler.js"),s=n("./src/store/modules/settings.js"),i=n("./src/store/modules/global.js"),r=n("./src/store/modules/graph.js"),a=n("./src/store/modules/table.js");const l=(0,o.createStore)({modules:{global:i.default,settings:s.default,graph:r.default,table:a.default},strict:!0,plugins:[(0,o.createLogger)()]})},"./src/store/modules/global.js":(e,t,n)=>{"use strict";function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){var s,i,r;s=e,i=t,r=n[t],(i=function(e){var t=function(e,t){if("object"!==o(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var s=n.call(e,"string");if("object"!==o(s))return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===o(t)?t:String(t)}(i))in s?Object.defineProperty(s,i,{value:r,enumerable:!0,configurable:!0,writable:!0}):s[i]=r})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}n.r(t),n.d(t,{default:()=>r});const r={state:function(){return{alert:{isVisible:!1,message:"",type:"default"}}},getters:{alert:function(e){return e.alert}},actions:{setAlert:function(e,t){var n=e.commit;n("setAlert",t),"success"===t.type&&setTimeout((function(){n("hideAlert")}),5e3)},showAlert:function(e){(0,e.commit)("setIsAlertVisible",!0)},hideAlert:function(e){(0,e.commit)("hideAlert",!1)}},mutations:{setAlert:function(e,t){e.alert=i(i({},e.alert),{},{isVisible:!0},t)},hideAlert:function(e){e.alert={isVisible:!1,message:"",type:"default"}},setIsAlertVisible:function(e,t){e.alert=i(i({},e.alert),{},{isVisible:t})}}}},"./src/store/modules/graph.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/axios/lib/axios.js");function s(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}const r={state:{graphData:{labels:[],values:[]}},mutations:{SET_GRAPH_DATA:function(e,t){var n,o;e.graphData.labels=[],e.graphData.values=[],(n=e.graphData.labels).push.apply(n,s(t.labels)),(o=e.graphData.values).push.apply(o,s(t.values))}},actions:{fetchGraphData:function(e){var t=e.commit;o.default.get("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/data")).then((function(e){var n=e.data.graph,o=[],s=[];Object.values(n).forEach((function(e){var t=new Date(1e3*e.date);o.push(t.toLocaleString("default",{month:"long"})),s.push(e.value)})),t("SET_GRAPH_DATA",{labels:o,values:s})})).catch((function(e){console.error("Error fetching data in:",e)}))}},getters:{getGraphData:function(e){return e.graphData}}}},"./src/store/modules/settings.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>l});var o=n("./node_modules/axios/lib/axios.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function i(){i=function(){return t};var e,t={},n=Object.prototype,o=n.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},l=a.iterator||"@@iterator",c=a.asyncIterator||"@@asyncIterator",u=a.toStringTag||"@@toStringTag";function d(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{d({},"")}catch(e){d=function(e,t,n){return e[t]=n}}function h(e,t,n,o){var s=t&&t.prototype instanceof y?t:y,i=Object.create(s.prototype),a=new M(o||[]);return r(i,"_invoke",{value:E(e,n,a)}),i}function p(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}t.wrap=h;var f="suspendedStart",m="suspendedYield",g="executing",b="completed",v={};function y(){}function _(){}function x(){}var w={};d(w,l,(function(){return this}));var S=Object.getPrototypeOf,k=S&&S(S(R([])));k&&k!==n&&o.call(k,l)&&(w=k);var j=x.prototype=y.prototype=Object.create(w);function O(e){["next","throw","return"].forEach((function(t){d(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function n(i,r,a,l){var c=p(e[i],e,r);if("throw"!==c.type){var u=c.arg,d=u.value;return d&&"object"==s(d)&&o.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,a,l)}),(function(e){n("throw",e,a,l)})):t.resolve(d).then((function(e){u.value=e,a(u)}),(function(e){return n("throw",e,a,l)}))}l(c.arg)}var i;r(this,"_invoke",{value:function(e,o){function s(){return new t((function(t,s){n(e,o,t,s)}))}return i=i?i.then(s,s):s()}})}function E(t,n,o){var s=f;return function(i,r){if(s===g)throw new Error("Generator is already running");if(s===b){if("throw"===i)throw r;return{value:e,done:!0}}for(o.method=i,o.arg=r;;){var a=o.delegate;if(a){var l=A(a,o);if(l){if(l===v)continue;return l}}if("next"===o.method)o.sent=o._sent=o.arg;else if("throw"===o.method){if(s===f)throw s=b,o.arg;o.dispatchException(o.arg)}else"return"===o.method&&o.abrupt("return",o.arg);s=g;var c=p(t,n,o);if("normal"===c.type){if(s=o.done?b:m,c.arg===v)continue;return{value:c.arg,done:o.done}}"throw"===c.type&&(s=b,o.method="throw",o.arg=c.arg)}}}function A(t,n){var o=n.method,s=t.iterator[o];if(s===e)return n.delegate=null,"throw"===o&&t.iterator.return&&(n.method="return",n.arg=e,A(t,n),"throw"===n.method)||"return"!==o&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+o+"' method")),v;var i=p(s,t.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,v;var r=i.arg;return r?r.done?(n[t.resultName]=r.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):r:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function P(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function T(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function M(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(P,this),this.reset(!0)}function R(t){if(t||""===t){var n=t[l];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,r=function n(){for(;++i<t.length;)if(o.call(t,i))return n.value=t[i],n.done=!1,n;return n.value=e,n.done=!0,n};return r.next=r}}throw new TypeError(s(t)+" is not iterable")}return _.prototype=x,r(j,"constructor",{value:x,configurable:!0}),r(x,"constructor",{value:_,configurable:!0}),_.displayName=d(x,u,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===_||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,x):(e.__proto__=x,d(e,u,"GeneratorFunction")),e.prototype=Object.create(j),e},t.awrap=function(e){return{__await:e}},O(C.prototype),d(C.prototype,c,(function(){return this})),t.AsyncIterator=C,t.async=function(e,n,o,s,i){void 0===i&&(i=Promise);var r=new C(h(e,n,o,s),i);return t.isGeneratorFunction(n)?r:r.next().then((function(e){return e.done?e.value:r.next()}))},O(j),d(j,u,"Generator"),d(j,l,(function(){return this})),d(j,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),n=[];for(var o in t)n.push(o);return n.reverse(),function e(){for(;n.length;){var o=n.pop();if(o in t)return e.value=o,e.done=!1,e}return e.done=!0,e}},t.values=R,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(T),!t)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function s(o,s){return a.type="throw",a.arg=t,n.next=o,s&&(n.method="next",n.arg=e),!!s}for(var i=this.tryEntries.length-1;i>=0;--i){var r=this.tryEntries[i],a=r.completion;if("root"===r.tryLoc)return s("end");if(r.tryLoc<=this.prev){var l=o.call(r,"catchLoc"),c=o.call(r,"finallyLoc");if(l&&c){if(this.prev<r.catchLoc)return s(r.catchLoc,!0);if(this.prev<r.finallyLoc)return s(r.finallyLoc)}else if(l){if(this.prev<r.catchLoc)return s(r.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return s(r.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var s=this.tryEntries[n];if(s.tryLoc<=this.prev&&o.call(s,"finallyLoc")&&this.prev<s.finallyLoc){var i=s;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var r=i?i.completion:{};return r.type=e,r.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(r)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),T(n),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var o=n.completion;if("throw"===o.type){var s=o.arg;T(n)}return s}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,o){return this.delegate={iterator:R(t),resultName:n,nextLoc:o},"next"===this.method&&(this.arg=e),v}},t}function r(e,t,n,o,s,i,r){try{var a=e[i](r),l=a.value}catch(e){return void n(e)}a.done?t(l):Promise.resolve(l).then(o,s)}function a(e){return function(){var t=this,n=arguments;return new Promise((function(o,s){var i=e.apply(t,n);function a(e){r(i,o,s,a,l,"next",e)}function l(e){r(i,o,s,a,l,"throw",e)}a(void 0)}))}}const l={state:function(){return{settings:null,isSaving:!1}},getters:{settings:function(e){return e.settings},isSaving:function(e){return e.isSaving}},actions:{storeSettings:function(e,t){return a(i().mark((function n(){var s,r;return i().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return s=e.commit,n.prev=1,s("setSettingsSaving",!0),n.next=5,o.default.post("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/settings"),t,{headers:{"X-WP-Nonce":"".concat(wpAmVue.site.nonce),"content-type":"application/json"}});case 5:r=n.sent,s("storeSettings",r.data),s("setSettingsSaving",!1),n.next=14;break;case 10:n.prev=10,n.t0=n.catch(1),console.error("Error while saving settings:",n.t0),s("setSettingsSaving",!1);case 14:case"end":return n.stop()}}),n,null,[[1,10]])})))()},getSettings:function(e){return a(i().mark((function t(){var n,s;return i().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=e.commit,t.prev=1,t.next=4,o.default.get("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/settings"));case 4:s=t.sent,n("storeSettings",s.data),t.next=11;break;case 8:t.prev=8,t.t0=t.catch(1),console.error("Error while fetching settings:",t.t0);case 11:case"end":return t.stop()}}),t,null,[[1,8]])})))()}},mutations:{storeSettings:function(e,t){e.settings=t},setSettingsSaving:function(e,t){e.isSaving=t}}}},"./src/store/modules/table.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/axios.js");const s={state:{tableHeaders:[],tableRows:[]},mutations:{SET_TABLE_HEADERS:function(e,t){e.tableHeaders=t},SET_TABLE_ROWS:function(e,t){e.tableRows=t}},actions:{getTableData:function(e){var t=e.commit,n=e.rootGetters.settings;o.default.get("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/data")).then((function(e){var o=e.data.table.data,s=o.headers,i=o.rows.map((function(e){return{id:e.id,url:e.url,title:e.title,pageviews:e.pageviews,date:1===(null==n?void 0:n.readable)?new Date(1e3*e.date).toLocaleString():e.date}})).slice(0,n.rows);t("SET_TABLE_HEADERS",s),t("SET_TABLE_ROWS",i)})).catch((function(e){console.error("Error fetching table data:",e)}))}},getters:{getTableHeaders:function(e){return e.tableHeaders},getTableRows:function(e){return e.tableRows}}}},"./src/utils/menu-fix.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{menuFix:()=>s,pluginSlug:()=>o});var o="wp-am-vue-app";function s(){var e=jQuery,t=e("#toplevel_page_"+o),n=window.location.href,s=n.substr(n.indexOf("admin.php"));e("ul.wp-submenu li",t).removeClass("current"),t.on("click","a",(function(){var n=e(this);e("ul.wp-submenu li",t).removeClass("current"),n.hasClass("wp-has-submenu")?e("li.wp-first-item",t).addClass("current"):n.parents("li").addClass("current")})),e("ul.wp-submenu a",t).each((function(t,n){e(n).attr("href").substring(e(n).attr("href").indexOf("/admin.php")+1)===s&&e(n).parent().addClass("current")}))}s()},"./src/components/tabs/style.scss":(e,t,n)=>{"use strict";n.r(t)},"./src/styles/main.scss":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=style&index=0&id=b66ee972&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t)},"./node_modules/sprintf-js/src/sprintf.js":(e,t,n)=>{var o;!function(){"use strict";var s={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function i(e){return function(e,t){var n,o,r,a,l,c,u,d,h,p=1,f=e.length,m="";for(o=0;o<f;o++)if("string"==typeof e[o])m+=e[o];else if("object"==typeof e[o]){if((a=e[o]).keys)for(n=t[p],r=0;r<a.keys.length;r++){if(null==n)throw new Error(i('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[r],a.keys[r-1]));n=n[a.keys[r]]}else n=a.param_no?t[a.param_no]:t[p++];if(s.not_type.test(a.type)&&s.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),s.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(i("[sprintf] expecting number but found %T",n));switch(s.number.test(a.type)&&(d=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}s.json.test(a.type)?m+=n:(!s.number.test(a.type)||d&&!a.sign?h="":(h=d?"+":"-",n=n.toString().replace(s.sign,"")),c=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",u=a.width-(h+n).length,l=a.width&&u>0?c.repeat(u):"",m+=a.align?h+n+l:"0"===c?h+l+n:l+h+n)}return m}(function(e){if(a[e])return a[e];for(var t,n=e,o=[],i=0;n;){if(null!==(t=s.text.exec(n)))o.push(t[0]);else if(null!==(t=s.modulo.exec(n)))o.push("%");else{if(null===(t=s.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(t[2]){i|=1;var r=[],l=t[2],c=[];if(null===(c=s.key.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(r.push(c[1]);""!==(l=l.substring(c[0].length));)if(null!==(c=s.key_access.exec(l)))r.push(c[1]);else{if(null===(c=s.index_access.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");r.push(c[1])}t[2]=r}else i|=2;if(3===i)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");o.push({placeholder:t[0],param_no:t[1],keys:t[2],sign:t[3],pad_char:t[4],align:t[5],width:t[6],precision:t[7],type:t[8]})}n=n.substring(t[0].length)}return a[e]=o}(e),arguments)}function r(e,t){return i.apply(null,[e].concat(t||[]))}var a=Object.create(null);t.sprintf=i,t.vsprintf=r,"undefined"!=typeof window&&(window.sprintf=i,window.vsprintf=r,void 0===(o=function(){return{sprintf:i,vsprintf:r}}.call(t,n,t,e))||(e.exports=o))}()},"./node_modules/tannin/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/@tannin/plural-forms/index.js"),s={contextDelimiter:"",onMissingKey:null};function i(e,t){var n;for(n in this.data=e,this.pluralForms={},this.options={},s)this.options[n]=void 0!==t&&n in t?t[n]:s[n]}i.prototype.getPluralForm=function(e,t){var n,s,i,r=this.pluralForms[e];return r||("function"!=typeof(i=(n=this.data[e][""])["Plural-Forms"]||n["plural-forms"]||n.plural_forms)&&(s=function(e){var t,n,o;for(t=e.split(";"),n=0;n<t.length;n++)if(0===(o=t[n].trim()).indexOf("plural="))return o.substr(7)}(n["Plural-Forms"]||n["plural-forms"]||n.plural_forms),i=(0,o.default)(s)),r=this.pluralForms[e]=i),r(t)},i.prototype.dcnpgettext=function(e,t,n,o,s){var i,r,a;return i=void 0===s?0:this.getPluralForm(e,s),r=n,t&&(r=t+this.options.contextDelimiter+n),(a=this.data[e][r])&&a[i]?a[i]:(this.options.onMissingKey&&this.options.onMissingKey(n,e),0===i?n:o)}},"./node_modules/vue-loader/dist/exportHelper.js":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=(e,t)=>{const n=e.__vccOpts||e;for(const[e,o]of t)n[e]=o;return n}},"./src/App.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/App.vue?vue&type=template&id=7ba5bd90"),s=n("./src/App.vue?vue&type=script&lang=js");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/App.vue"]])},"./src/components/button/Button.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true"),s=n("./src/components/button/Button.vue?vue&type=script&lang=js");n("./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-5975756f"],["__file","src/components/button/Button.vue"]])},"./src/components/chart/BarChart.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc"),s=n("./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/chart/BarChart.vue"]])},"./src/components/input/BaseInput.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true"),s=n("./src/components/input/BaseInput.vue?vue&type=script&lang=js");n("./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-d0938918"],["__file","src/components/input/BaseInput.vue"]])},"./src/components/skeleton/SkeletonText.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true"),s=n("./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js");n("./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-1c6d1848"],["__file","src/components/skeleton/SkeletonText.vue"]])},"./src/components/tables/BaseTable.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true"),s=n("./src/components/tables/BaseTable.vue?vue&type=script&lang=js");n("./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-fc36ea7a"],["__file","src/components/tables/BaseTable.vue"]])},"./src/components/tables/TableLoading.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true"),s=n("./src/components/tables/TableLoading.vue?vue&type=script&lang=js");n("./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-344abf38"],["__file","src/components/tables/TableLoading.vue"]])},"./src/components/tabs/Tabs.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f"),s=n("./src/components/tabs/Tabs.vue?vue&type=script&lang=js");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/components/tabs/Tabs.vue"]])},"./src/pages/Graph.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/pages/Graph.vue?vue&type=template&id=35f6d25a"),s=n("./src/pages/Graph.vue?vue&type=script&lang=js");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/pages/Graph.vue"]])},"./src/pages/Settings.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/pages/Settings.vue?vue&type=template&id=b66ee972&scoped=true"),s=n("./src/pages/Settings.vue?vue&type=script&lang=js");n("./src/pages/Settings.vue?vue&type=style&index=0&id=b66ee972&lang=scss&scoped=true");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__scopeId","data-v-b66ee972"],["__file","src/pages/Settings.vue"]])},"./src/pages/Table.vue":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./src/pages/Table.vue?vue&type=template&id=05650cda"),s=n("./src/pages/Table.vue?vue&type=script&lang=js");const i=(0,n("./node_modules/vue-loader/dist/exportHelper.js").default)(s.default,[["render",o.render],["__file","src/pages/Table.vue"]])},"./src/App.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=script&lang=js")},"./src/components/button/Button.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=script&lang=js")},"./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=script&setup=true&lang=js")},"./src/components/input/BaseInput.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=script&lang=js")},"./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=script&lang=js")},"./src/components/tables/BaseTable.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=script&lang=js")},"./src/components/tables/TableLoading.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=script&lang=js")},"./src/components/tabs/Tabs.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=script&lang=js")},"./src/pages/Graph.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=script&lang=js")},"./src/pages/Settings.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=script&lang=js")},"./src/pages/Table.vue?vue&type=script&lang=js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o.default});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Table.vue?vue&type=script&lang=js")},"./src/App.vue?vue&type=template&id=7ba5bd90":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/App.vue?vue&type=template&id=7ba5bd90")},"./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=template&id=5975756f&scoped=true")},"./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/chart/BarChart.vue?vue&type=template&id=6a09facc")},"./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=template&id=d0938918&scoped=true")},"./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=template&id=1c6d1848&scoped=true")},"./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=template&id=fc36ea7a&scoped=true")},"./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=template&id=344abf38&scoped=true")},"./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tabs/Tabs.vue?vue&type=template&id=663bac2f")},"./src/pages/Graph.vue?vue&type=template&id=35f6d25a":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Graph.vue?vue&type=template&id=35f6d25a")},"./src/pages/Settings.vue?vue&type=template&id=b66ee972&scoped=true":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=template&id=b66ee972&scoped=true")},"./src/pages/Table.vue?vue&type=template&id=05650cda":(e,t,n)=>{"use strict";n.r(t),n.d(t,{render:()=>o.render});var o=n("./node_modules/babel-loader/lib/index.js??clonedRuleSet-1.use!./node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Table.vue?vue&type=template&id=05650cda")},"./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/button/Button.vue?vue&type=style&index=0&id=5975756f&lang=scss&scoped=true")},"./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/input/BaseInput.vue?vue&type=style&index=0&id=d0938918&lang=scss&scoped=true")},"./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/skeleton/SkeletonText.vue?vue&type=style&index=0&id=1c6d1848&lang=scss&scoped=true")},"./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/BaseTable.vue?vue&type=style&index=0&id=fc36ea7a&lang=scss&scoped=true")},"./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/components/tables/TableLoading.vue?vue&type=style&index=0&id=344abf38&lang=scss&scoped=true")},"./src/pages/Settings.vue?vue&type=style&index=0&id=b66ee972&lang=scss&scoped=true":(e,t,n)=>{"use strict";n.r(t),n("./node_modules/mini-css-extract-plugin/dist/loader.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/sass-loader/dist/cjs.js!./node_modules/vue-loader/dist/index.js??ruleSet[1].rules[13].use[0]!./src/pages/Settings.vue?vue&type=style&index=0&id=b66ee972&lang=scss&scoped=true")},"./node_modules/vue/dist/vue.runtime.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{BaseTransition:()=>s.BaseTransition,BaseTransitionPropsValidators:()=>s.BaseTransitionPropsValidators,Comment:()=>s.Comment,EffectScope:()=>s.EffectScope,Fragment:()=>s.Fragment,KeepAlive:()=>s.KeepAlive,ReactiveEffect:()=>s.ReactiveEffect,Static:()=>s.Static,Suspense:()=>s.Suspense,Teleport:()=>s.Teleport,Text:()=>s.Text,Transition:()=>s.Transition,TransitionGroup:()=>s.TransitionGroup,VueElement:()=>s.VueElement,assertNumber:()=>s.assertNumber,callWithAsyncErrorHandling:()=>s.callWithAsyncErrorHandling,callWithErrorHandling:()=>s.callWithErrorHandling,camelize:()=>s.camelize,capitalize:()=>s.capitalize,cloneVNode:()=>s.cloneVNode,compatUtils:()=>s.compatUtils,compile:()=>i,computed:()=>s.computed,createApp:()=>s.createApp,createBlock:()=>s.createBlock,createCommentVNode:()=>s.createCommentVNode,createElementBlock:()=>s.createElementBlock,createElementVNode:()=>s.createElementVNode,createHydrationRenderer:()=>s.createHydrationRenderer,createPropsRestProxy:()=>s.createPropsRestProxy,createRenderer:()=>s.createRenderer,createSSRApp:()=>s.createSSRApp,createSlots:()=>s.createSlots,createStaticVNode:()=>s.createStaticVNode,createTextVNode:()=>s.createTextVNode,createVNode:()=>s.createVNode,customRef:()=>s.customRef,defineAsyncComponent:()=>s.defineAsyncComponent,defineComponent:()=>s.defineComponent,defineCustomElement:()=>s.defineCustomElement,defineEmits:()=>s.defineEmits,defineExpose:()=>s.defineExpose,defineModel:()=>s.defineModel,defineOptions:()=>s.defineOptions,defineProps:()=>s.defineProps,defineSSRCustomElement:()=>s.defineSSRCustomElement,defineSlots:()=>s.defineSlots,devtools:()=>s.devtools,effect:()=>s.effect,effectScope:()=>s.effectScope,getCurrentInstance:()=>s.getCurrentInstance,getCurrentScope:()=>s.getCurrentScope,getTransitionRawChildren:()=>s.getTransitionRawChildren,guardReactiveProps:()=>s.guardReactiveProps,h:()=>s.h,handleError:()=>s.handleError,hasInjectionContext:()=>s.hasInjectionContext,hydrate:()=>s.hydrate,initCustomFormatter:()=>s.initCustomFormatter,initDirectivesForSSR:()=>s.initDirectivesForSSR,inject:()=>s.inject,isMemoSame:()=>s.isMemoSame,isProxy:()=>s.isProxy,isReactive:()=>s.isReactive,isReadonly:()=>s.isReadonly,isRef:()=>s.isRef,isRuntimeOnly:()=>s.isRuntimeOnly,isShallow:()=>s.isShallow,isVNode:()=>s.isVNode,markRaw:()=>s.markRaw,mergeDefaults:()=>s.mergeDefaults,mergeModels:()=>s.mergeModels,mergeProps:()=>s.mergeProps,nextTick:()=>s.nextTick,normalizeClass:()=>s.normalizeClass,normalizeProps:()=>s.normalizeProps,normalizeStyle:()=>s.normalizeStyle,onActivated:()=>s.onActivated,onBeforeMount:()=>s.onBeforeMount,onBeforeUnmount:()=>s.onBeforeUnmount,onBeforeUpdate:()=>s.onBeforeUpdate,onDeactivated:()=>s.onDeactivated,onErrorCaptured:()=>s.onErrorCaptured,onMounted:()=>s.onMounted,onRenderTracked:()=>s.onRenderTracked,onRenderTriggered:()=>s.onRenderTriggered,onScopeDispose:()=>s.onScopeDispose,onServerPrefetch:()=>s.onServerPrefetch,onUnmounted:()=>s.onUnmounted,onUpdated:()=>s.onUpdated,openBlock:()=>s.openBlock,popScopeId:()=>s.popScopeId,provide:()=>s.provide,proxyRefs:()=>s.proxyRefs,pushScopeId:()=>s.pushScopeId,queuePostFlushCb:()=>s.queuePostFlushCb,reactive:()=>s.reactive,readonly:()=>s.readonly,ref:()=>s.ref,registerRuntimeCompiler:()=>s.registerRuntimeCompiler,render:()=>s.render,renderList:()=>s.renderList,renderSlot:()=>s.renderSlot,resolveComponent:()=>s.resolveComponent,resolveDirective:()=>s.resolveDirective,resolveDynamicComponent:()=>s.resolveDynamicComponent,resolveFilter:()=>s.resolveFilter,resolveTransitionHooks:()=>s.resolveTransitionHooks,setBlockTracking:()=>s.setBlockTracking,setDevtoolsHook:()=>s.setDevtoolsHook,setTransitionHooks:()=>s.setTransitionHooks,shallowReactive:()=>s.shallowReactive,shallowReadonly:()=>s.shallowReadonly,shallowRef:()=>s.shallowRef,ssrContextKey:()=>s.ssrContextKey,ssrUtils:()=>s.ssrUtils,stop:()=>s.stop,toDisplayString:()=>s.toDisplayString,toHandlerKey:()=>s.toHandlerKey,toHandlers:()=>s.toHandlers,toRaw:()=>s.toRaw,toRef:()=>s.toRef,toRefs:()=>s.toRefs,toValue:()=>s.toValue,transformVNodeArgs:()=>s.transformVNodeArgs,triggerRef:()=>s.triggerRef,unref:()=>s.unref,useAttrs:()=>s.useAttrs,useCssModule:()=>s.useCssModule,useCssVars:()=>s.useCssVars,useModel:()=>s.useModel,useSSRContext:()=>s.useSSRContext,useSlots:()=>s.useSlots,useTransitionState:()=>s.useTransitionState,vModelCheckbox:()=>s.vModelCheckbox,vModelDynamic:()=>s.vModelDynamic,vModelRadio:()=>s.vModelRadio,vModelSelect:()=>s.vModelSelect,vModelText:()=>s.vModelText,vShow:()=>s.vShow,version:()=>s.version,warn:()=>s.warn,watch:()=>s.watch,watchEffect:()=>s.watchEffect,watchPostEffect:()=>s.watchPostEffect,watchSyncEffect:()=>s.watchSyncEffect,withAsyncContext:()=>s.withAsyncContext,withCtx:()=>s.withCtx,withDefaults:()=>s.withDefaults,withDirectives:()=>s.withDirectives,withKeys:()=>s.withKeys,withMemo:()=>s.withMemo,withModifiers:()=>s.withModifiers,withScopeId:()=>s.withScopeId});var o=n("./node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"),s=n("./node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js");(0,o.initCustomFormatter)();const i=()=>{(0,o.warn)('Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".')}},"./node_modules/vuex/dist/vuex.esm-bundler.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Store:()=>I,createLogger:()=>q,createNamespacedHelpers:()=>H,createStore:()=>F,default:()=>Z,mapActions:()=>z,mapGetters:()=>$,mapMutations:()=>V,mapState:()=>B,storeKey:()=>i,useStore:()=>r});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/index.js"),i="store";function r(e){return void 0===e&&(e=null),(0,o.inject)(null!==e?e:i)}function a(e,t){if(void 0===t&&(t=[]),null===e||"object"!=typeof e)return e;var n,o=(n=function(t){return t.original===e},t.filter(n)[0]);if(o)return o.copy;var s=Array.isArray(e)?[]:{};return t.push({original:e,copy:s}),Object.keys(e).forEach((function(n){s[n]=a(e[n],t)})),s}function l(e,t){Object.keys(e).forEach((function(n){return t(e[n],n)}))}function c(e){return null!==e&&"object"==typeof e}function u(e,t){if(!e)throw new Error("[vuex] "+t)}function d(e,t,n){return t.indexOf(e)<0&&(n&&n.prepend?t.unshift(e):t.push(e)),function(){var n=t.indexOf(e);n>-1&&t.splice(n,1)}}function h(e,t){e._actions=Object.create(null),e._mutations=Object.create(null),e._wrappedGetters=Object.create(null),e._modulesNamespaceMap=Object.create(null);var n=e.state;f(e,n,[],e._modules.root,!0),p(e,n,t)}function p(e,t,n){var s=e._state,i=e._scope;e.getters={},e._makeLocalGettersCache=Object.create(null);var r=e._wrappedGetters,a={},c={},d=(0,o.effectScope)(!0);d.run((function(){l(r,(function(t,n){a[n]=function(e,t){return function(){return e(t)}}(t,e),c[n]=(0,o.computed)((function(){return a[n]()})),Object.defineProperty(e.getters,n,{get:function(){return c[n].value},enumerable:!0})}))})),e._state=(0,o.reactive)({data:t}),e._scope=d,e.strict&&function(e){(0,o.watch)((function(){return e._state.data}),(function(){u(e._committing,"do not mutate vuex store state outside mutation handlers.")}),{deep:!0,flush:"sync"})}(e),s&&n&&e._withCommit((function(){s.data=null})),i&&i.stop()}function f(e,t,n,o,s){var i=!n.length,r=e._modules.getNamespace(n);if(o.namespaced&&(e._modulesNamespaceMap[r]&&console.error("[vuex] duplicate namespace "+r+" for the namespaced module "+n.join("/")),e._modulesNamespaceMap[r]=o),!i&&!s){var a=g(t,n.slice(0,-1)),l=n[n.length-1];e._withCommit((function(){l in a&&console.warn('[vuex] state field "'+l+'" was overridden by a module with the same name at "'+n.join(".")+'"'),a[l]=o.state}))}var c=o.context=function(e,t,n){var o=""===t,s={dispatch:o?e.dispatch:function(n,o,s){var i=b(n,o,s),r=i.payload,a=i.options,l=i.type;if(a&&a.root||(l=t+l,e._actions[l]))return e.dispatch(l,r);console.error("[vuex] unknown local action type: "+i.type+", global type: "+l)},commit:o?e.commit:function(n,o,s){var i=b(n,o,s),r=i.payload,a=i.options,l=i.type;a&&a.root||(l=t+l,e._mutations[l])?e.commit(l,r,a):console.error("[vuex] unknown local mutation type: "+i.type+", global type: "+l)}};return Object.defineProperties(s,{getters:{get:o?function(){return e.getters}:function(){return m(e,t)}},state:{get:function(){return g(e.state,n)}}}),s}(e,r,n);o.forEachMutation((function(t,n){!function(e,t,n,o){(e._mutations[t]||(e._mutations[t]=[])).push((function(t){n.call(e,o.state,t)}))}(e,r+n,t,c)})),o.forEachAction((function(t,n){var o=t.root?n:r+n,s=t.handler||t;!function(e,t,n,o){(e._actions[t]||(e._actions[t]=[])).push((function(t){var s,i=n.call(e,{dispatch:o.dispatch,commit:o.commit,getters:o.getters,state:o.state,rootGetters:e.getters,rootState:e.state},t);return(s=i)&&"function"==typeof s.then||(i=Promise.resolve(i)),e._devtoolHook?i.catch((function(t){throw e._devtoolHook.emit("vuex:error",t),t})):i}))}(e,o,s,c)})),o.forEachGetter((function(t,n){!function(e,t,n,o){e._wrappedGetters[t]?console.error("[vuex] duplicate getter key: "+t):e._wrappedGetters[t]=function(e){return n(o.state,o.getters,e.state,e.getters)}}(e,r+n,t,c)})),o.forEachChild((function(o,i){f(e,t,n.concat(i),o,s)}))}function m(e,t){if(!e._makeLocalGettersCache[t]){var n={},o=t.length;Object.keys(e.getters).forEach((function(s){if(s.slice(0,o)===t){var i=s.slice(o);Object.defineProperty(n,i,{get:function(){return e.getters[s]},enumerable:!0})}})),e._makeLocalGettersCache[t]=n}return e._makeLocalGettersCache[t]}function g(e,t){return t.reduce((function(e,t){return e[t]}),e)}function b(e,t,n){return c(e)&&e.type&&(n=t,t=e,e=e.type),u("string"==typeof e,"expects string as the type, but found "+typeof e+"."),{type:e,payload:t,options:n}}var v="vuex:mutations",y="vuex:actions",_="vuex",x=0;function w(e,t){(0,s.setupDevtoolsPlugin)({id:"org.vuejs.vuex",app:e,label:"Vuex",homepage:"https://next.vuex.vuejs.org/",logo:"https://vuejs.org/images/icons/favicon-96x96.png",packageName:"vuex",componentStateTypes:["vuex bindings"]},(function(n){n.addTimelineLayer({id:v,label:"Vuex Mutations",color:S}),n.addTimelineLayer({id:y,label:"Vuex Actions",color:S}),n.addInspector({id:_,label:"Vuex",icon:"storage",treeFilterPlaceholder:"Filter stores..."}),n.on.getInspectorTree((function(n){if(n.app===e&&n.inspectorId===_)if(n.filter){var o=[];C(o,t._modules.root,n.filter,""),n.rootNodes=o}else n.rootNodes=[O(t._modules.root,"")]})),n.on.getInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId;m(t,o),n.state=function(e,t,n){t="root"===n?t:t[n];var o=Object.keys(t),s={state:Object.keys(e.state).map((function(t){return{key:t,editable:!0,value:e.state[t]}}))};if(o.length){var i=function(e){var t={};return Object.keys(e).forEach((function(n){var o=n.split("/");if(o.length>1){var s=t,i=o.pop();o.forEach((function(e){s[e]||(s[e]={_custom:{value:{},display:e,tooltip:"Module",abstract:!0}}),s=s[e]._custom.value})),s[i]=E((function(){return e[n]}))}else t[n]=E((function(){return e[n]}))})),t}(t);s.getters=Object.keys(i).map((function(e){return{key:e.endsWith("/")?j(e):e,editable:!1,value:E((function(){return i[e]}))}}))}return s}((s=t._modules,(r=(i=o).split("/").filter((function(e){return e}))).reduce((function(e,t,n){var o=e[t];if(!o)throw new Error('Missing module "'+t+'" for path "'+i+'".');return n===r.length-1?o:o._children}),"root"===i?s:s.root._children)),"root"===o?t.getters:t._makeLocalGettersCache,o)}var s,i,r})),n.on.editInspectorState((function(n){if(n.app===e&&n.inspectorId===_){var o=n.nodeId,s=n.path;"root"!==o&&(s=o.split("/").filter(Boolean).concat(s)),t._withCommit((function(){n.set(t._state.data,s,n.state.value)}))}})),t.subscribe((function(e,t){var o={};e.payload&&(o.payload=e.payload),o.state=t,n.notifyComponentUpdate(),n.sendInspectorTree(_),n.sendInspectorState(_),n.addTimelineEvent({layerId:v,event:{time:Date.now(),title:e.type,data:o}})})),t.subscribeAction({before:function(e,t){var o={};e.payload&&(o.payload=e.payload),e._id=x++,e._time=Date.now(),o.state=t,n.addTimelineEvent({layerId:y,event:{time:e._time,title:e.type,groupId:e._id,subtitle:"start",data:o}})},after:function(e,t){var o={},s=Date.now()-e._time;o.duration={_custom:{type:"duration",display:s+"ms",tooltip:"Action duration",value:s}},e.payload&&(o.payload=e.payload),o.state=t,n.addTimelineEvent({layerId:y,event:{time:Date.now(),title:e.type,groupId:e._id,subtitle:"end",data:o}})}})}))}var S=8702998,k={label:"namespaced",textColor:16777215,backgroundColor:6710886};function j(e){return e&&"root"!==e?e.split("/").slice(-2,-1)[0]:"Root"}function O(e,t){return{id:t||"root",label:j(t),tags:e.namespaced?[k]:[],children:Object.keys(e._children).map((function(n){return O(e._children[n],t+n+"/")}))}}function C(e,t,n,o){o.includes(n)&&e.push({id:o||"root",label:o.endsWith("/")?o.slice(0,o.length-1):o||"Root",tags:t.namespaced?[k]:[]}),Object.keys(t._children).forEach((function(s){C(e,t._children[s],n,o+s+"/")}))}function E(e){try{return e()}catch(e){return e}}var A=function(e,t){this.runtime=t,this._children=Object.create(null),this._rawModule=e;var n=e.state;this.state=("function"==typeof n?n():n)||{}},P={namespaced:{configurable:!0}};P.namespaced.get=function(){return!!this._rawModule.namespaced},A.prototype.addChild=function(e,t){this._children[e]=t},A.prototype.removeChild=function(e){delete this._children[e]},A.prototype.getChild=function(e){return this._children[e]},A.prototype.hasChild=function(e){return e in this._children},A.prototype.update=function(e){this._rawModule.namespaced=e.namespaced,e.actions&&(this._rawModule.actions=e.actions),e.mutations&&(this._rawModule.mutations=e.mutations),e.getters&&(this._rawModule.getters=e.getters)},A.prototype.forEachChild=function(e){l(this._children,e)},A.prototype.forEachGetter=function(e){this._rawModule.getters&&l(this._rawModule.getters,e)},A.prototype.forEachAction=function(e){this._rawModule.actions&&l(this._rawModule.actions,e)},A.prototype.forEachMutation=function(e){this._rawModule.mutations&&l(this._rawModule.mutations,e)},Object.defineProperties(A.prototype,P);var T=function(e){this.register([],e,!1)};function M(e,t,n){if(L(e,n),t.update(n),n.modules)for(var o in n.modules){if(!t.getChild(o))return void console.warn("[vuex] trying to add a new module '"+o+"' on hot reloading, manual reload is needed");M(e.concat(o),t.getChild(o),n.modules[o])}}T.prototype.get=function(e){return e.reduce((function(e,t){return e.getChild(t)}),this.root)},T.prototype.getNamespace=function(e){var t=this.root;return e.reduce((function(e,n){return e+((t=t.getChild(n)).namespaced?n+"/":"")}),"")},T.prototype.update=function(e){M([],this.root,e)},T.prototype.register=function(e,t,n){var o=this;void 0===n&&(n=!0),L(e,t);var s=new A(t,n);0===e.length?this.root=s:this.get(e.slice(0,-1)).addChild(e[e.length-1],s),t.modules&&l(t.modules,(function(t,s){o.register(e.concat(s),t,n)}))},T.prototype.unregister=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1],o=t.getChild(n);o?o.runtime&&t.removeChild(n):console.warn("[vuex] trying to unregister module '"+n+"', which is not registered")},T.prototype.isRegistered=function(e){var t=this.get(e.slice(0,-1)),n=e[e.length-1];return!!t&&t.hasChild(n)};var R={assert:function(e){return"function"==typeof e},expected:"function"},D={getters:R,mutations:R,actions:{assert:function(e){return"function"==typeof e||"object"==typeof e&&"function"==typeof e.handler},expected:'function or object with "handler" function'}};function L(e,t){Object.keys(D).forEach((function(n){if(t[n]){var o=D[n];l(t[n],(function(t,s){u(o.assert(t),function(e,t,n,o,s){var i=t+" should be "+s+' but "'+t+"."+n+'"';return e.length>0&&(i+=' in module "'+e.join(".")+'"'),i+=" is "+JSON.stringify(o)+"."}(e,n,s,t,o.expected))}))}}))}function F(e){return new I(e)}var I=function e(t){var n=this;void 0===t&&(t={}),u("undefined"!=typeof Promise,"vuex requires a Promise polyfill in this browser."),u(this instanceof e,"store must be called with the new operator.");var o=t.plugins;void 0===o&&(o=[]);var s=t.strict;void 0===s&&(s=!1);var i=t.devtools;this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new T(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._makeLocalGettersCache=Object.create(null),this._scope=null,this._devtools=i;var r=this,a=this.dispatch,l=this.commit;this.dispatch=function(e,t){return a.call(r,e,t)},this.commit=function(e,t,n){return l.call(r,e,t,n)},this.strict=s;var c=this._modules.root.state;f(this,c,[],this._modules.root),p(this,c),o.forEach((function(e){return e(n)}))},N={state:{configurable:!0}};I.prototype.install=function(e,t){e.provide(t||i,this),e.config.globalProperties.$store=this,(void 0===this._devtools||this._devtools)&&w(e,this)},N.state.get=function(){return this._state.data},N.state.set=function(e){u(!1,"use store.replaceState() to explicit replace store state.")},I.prototype.commit=function(e,t,n){var o=this,s=b(e,t,n),i=s.type,r=s.payload,a=s.options,l={type:i,payload:r},c=this._mutations[i];c?(this._withCommit((function(){c.forEach((function(e){e(r)}))})),this._subscribers.slice().forEach((function(e){return e(l,o.state)})),a&&a.silent&&console.warn("[vuex] mutation type: "+i+". Silent option has been removed. Use the filter functionality in the vue-devtools")):console.error("[vuex] unknown mutation type: "+i)},I.prototype.dispatch=function(e,t){var n=this,o=b(e,t),s=o.type,i=o.payload,r={type:s,payload:i},a=this._actions[s];if(a){try{this._actionSubscribers.slice().filter((function(e){return e.before})).forEach((function(e){return e.before(r,n.state)}))}catch(e){console.warn("[vuex] error in before action subscribers: "),console.error(e)}var l=a.length>1?Promise.all(a.map((function(e){return e(i)}))):a[0](i);return new Promise((function(e,t){l.then((function(t){try{n._actionSubscribers.filter((function(e){return e.after})).forEach((function(e){return e.after(r,n.state)}))}catch(e){console.warn("[vuex] error in after action subscribers: "),console.error(e)}e(t)}),(function(e){try{n._actionSubscribers.filter((function(e){return e.error})).forEach((function(t){return t.error(r,n.state,e)}))}catch(e){console.warn("[vuex] error in error action subscribers: "),console.error(e)}t(e)}))}))}console.error("[vuex] unknown action type: "+s)},I.prototype.subscribe=function(e,t){return d(e,this._subscribers,t)},I.prototype.subscribeAction=function(e,t){return d("function"==typeof e?{before:e}:e,this._actionSubscribers,t)},I.prototype.watch=function(e,t,n){var s=this;return u("function"==typeof e,"store.watch only accepts a function."),(0,o.watch)((function(){return e(s.state,s.getters)}),t,Object.assign({},n))},I.prototype.replaceState=function(e){var t=this;this._withCommit((function(){t._state.data=e}))},I.prototype.registerModule=function(e,t,n){void 0===n&&(n={}),"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),u(e.length>0,"cannot register the root module by using registerModule."),this._modules.register(e,t),f(this,this.state,e,this._modules.get(e),n.preserveState),p(this,this.state)},I.prototype.unregisterModule=function(e){var t=this;"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.unregister(e),this._withCommit((function(){delete g(t.state,e.slice(0,-1))[e[e.length-1]]})),h(this)},I.prototype.hasModule=function(e){return"string"==typeof e&&(e=[e]),u(Array.isArray(e),"module path must be a string or an Array."),this._modules.isRegistered(e)},I.prototype.hotUpdate=function(e){this._modules.update(e),h(this,!0)},I.prototype._withCommit=function(e){var t=this._committing;this._committing=!0,e(),this._committing=t},Object.defineProperties(I.prototype,N);var B=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapState: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){var t=this.$store.state,n=this.$store.getters;if(e){var o=Y(this.$store,"mapState",e);if(!o)return;t=o.context.state,n=o.context.getters}return"function"==typeof s?s.call(this,t,n):t[s]},n[o].vuex=!0})),n})),V=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapMutations: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.commit;if(e){var i=Y(this.$store,"mapMutations",e);if(!i)return;o=i.context.commit}return"function"==typeof s?s.apply(this,[o].concat(t)):o.apply(this.$store,[s].concat(t))}})),n})),$=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapGetters: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;s=e+s,n[o]=function(){if(!e||Y(this.$store,"mapGetters",e)){if(s in this.$store.getters)return this.$store.getters[s];console.error("[vuex] unknown getter: "+s)}},n[o].vuex=!0})),n})),z=G((function(e,t){var n={};return W(t)||console.error("[vuex] mapActions: mapper parameter must be either an Array or an Object"),U(t).forEach((function(t){var o=t.key,s=t.val;n[o]=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];var o=this.$store.dispatch;if(e){var i=Y(this.$store,"mapActions",e);if(!i)return;o=i.context.dispatch}return"function"==typeof s?s.apply(this,[o].concat(t)):o.apply(this.$store,[s].concat(t))}})),n})),H=function(e){return{mapState:B.bind(null,e),mapGetters:$.bind(null,e),mapMutations:V.bind(null,e),mapActions:z.bind(null,e)}};function U(e){return W(e)?Array.isArray(e)?e.map((function(e){return{key:e,val:e}})):Object.keys(e).map((function(t){return{key:t,val:e[t]}})):[]}function W(e){return Array.isArray(e)||c(e)}function G(e){return function(t,n){return"string"!=typeof t?(n=t,t=""):"/"!==t.charAt(t.length-1)&&(t+="/"),e(t,n)}}function Y(e,t,n){var o=e._modulesNamespaceMap[n];return o||console.error("[vuex] module namespace not found in "+t+"(): "+n),o}function q(e){void 0===e&&(e={});var t=e.collapsed;void 0===t&&(t=!0);var n=e.filter;void 0===n&&(n=function(e,t,n){return!0});var o=e.transformer;void 0===o&&(o=function(e){return e});var s=e.mutationTransformer;void 0===s&&(s=function(e){return e});var i=e.actionFilter;void 0===i&&(i=function(e,t){return!0});var r=e.actionTransformer;void 0===r&&(r=function(e){return e});var l=e.logMutations;void 0===l&&(l=!0);var c=e.logActions;void 0===c&&(c=!0);var u=e.logger;return void 0===u&&(u=console),function(e){var d=a(e.state);void 0!==u&&(l&&e.subscribe((function(e,i){var r=a(i);if(n(e,d,r)){var l=X(),c=s(e),h="mutation "+e.type+l;K(u,h,t),u.log("%c prev state","color: #9E9E9E; font-weight: bold",o(d)),u.log("%c mutation","color: #03A9F4; font-weight: bold",c),u.log("%c next state","color: #4CAF50; font-weight: bold",o(r)),J(u)}d=r})),c&&e.subscribeAction((function(e,n){if(i(e,n)){var o=X(),s=r(e),a="action "+e.type+o;K(u,a,t),u.log("%c action","color: #03A9F4; font-weight: bold",s),J(u)}})))}}function K(e,t,n){var o=n?e.groupCollapsed:e.group;try{o.call(e,t)}catch(n){e.log(t)}}function J(e){try{e.groupEnd()}catch(t){e.log("—— log end ——")}}function X(){var e=new Date;return" @ "+Q(e.getHours(),2)+":"+Q(e.getMinutes(),2)+":"+Q(e.getSeconds(),2)+"."+Q(e.getMilliseconds(),3)}function Q(e,t){return"0",n=t-e.toString().length,new Array(n+1).join("0")+e;var n}const Z={version:"4.1.0",Store:I,storeKey:i,createStore:F,useStore:r,mapState:B,mapMutations:V,mapGetters:$,mapActions:z,createNamespacedHelpers:H,createLogger:q}},"./node_modules/@kurkle/color/dist/color.esm.js":(e,t,n)=>{"use strict";function o(e){return e+.5|0}n.r(t),n.d(t,{Color:()=>U,b2n:()=>l,b2p:()=>r,default:()=>W,hexParse:()=>g,hexString:()=>v,hsl2rgb:()=>j,hslString:()=>T,hsv2rgb:()=>C,hueParse:()=>A,hwb2rgb:()=>O,lim:()=>s,n2b:()=>a,n2p:()=>c,nameParse:()=>L,p2b:()=>i,rgb2hsl:()=>S,rgbParse:()=>I,rgbString:()=>N,rotate:()=>P,round:()=>o});const s=(e,t,n)=>Math.max(Math.min(e,n),t);function i(e){return s(o(2.55*e),0,255)}function r(e){return s(o(e/2.55),0,100)}function a(e){return s(o(255*e),0,255)}function l(e){return s(o(e/2.55)/100,0,1)}function c(e){return s(o(100*e),0,100)}const u={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},d=[..."0123456789ABCDEF"],h=e=>d[15&e],p=e=>d[(240&e)>>4]+d[15&e],f=e=>(240&e)>>4==(15&e),m=e=>f(e.r)&&f(e.g)&&f(e.b)&&f(e.a);function g(e){var t,n=e.length;return"#"===e[0]&&(4===n||5===n?t={r:255&17*u[e[1]],g:255&17*u[e[2]],b:255&17*u[e[3]],a:5===n?17*u[e[4]]:255}:7!==n&&9!==n||(t={r:u[e[1]]<<4|u[e[2]],g:u[e[3]]<<4|u[e[4]],b:u[e[5]]<<4|u[e[6]],a:9===n?u[e[7]]<<4|u[e[8]]:255})),t}const b=(e,t)=>e<255?t(e):"";function v(e){var t=m(e)?h:p;return e?"#"+t(e.r)+t(e.g)+t(e.b)+b(e.a,t):void 0}const y=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function _(e,t,n){const o=t*Math.min(n,1-n),s=(t,s=(t+e/30)%12)=>n-o*Math.max(Math.min(s-3,9-s,1),-1);return[s(0),s(8),s(4)]}function x(e,t,n){const o=(o,s=(o+e/60)%6)=>n-n*t*Math.max(Math.min(s,4-s,1),0);return[o(5),o(3),o(1)]}function w(e,t,n){const o=_(e,1,.5);let s;for(t+n>1&&(s=1/(t+n),t*=s,n*=s),s=0;s<3;s++)o[s]*=1-t-n,o[s]+=t;return o}function S(e){const t=e.r/255,n=e.g/255,o=e.b/255,s=Math.max(t,n,o),i=Math.min(t,n,o),r=(s+i)/2;let a,l,c;return s!==i&&(c=s-i,l=r>.5?c/(2-s-i):c/(s+i),a=function(e,t,n,o,s){return e===s?(t-n)/o+(t<n?6:0):t===s?(n-e)/o+2:(e-t)/o+4}(t,n,o,c,s),a=60*a+.5),[0|a,l||0,r]}function k(e,t,n,o){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,o)).map(a)}function j(e,t,n){return k(_,e,t,n)}function O(e,t,n){return k(w,e,t,n)}function C(e,t,n){return k(x,e,t,n)}function E(e){return(e%360+360)%360}function A(e){const t=y.exec(e);let n,o=255;if(!t)return;t[5]!==n&&(o=t[6]?i(+t[5]):a(+t[5]));const s=E(+t[2]),r=+t[3]/100,l=+t[4]/100;return n="hwb"===t[1]?O(s,r,l):"hsv"===t[1]?C(s,r,l):j(s,r,l),{r:n[0],g:n[1],b:n[2],a:o}}function P(e,t){var n=S(e);n[0]=E(n[0]+t),n=j(n),e.r=n[0],e.g=n[1],e.b=n[2]}function T(e){if(!e)return;const t=S(e),n=t[0],o=c(t[1]),s=c(t[2]);return e.a<255?`hsla(${n}, ${o}%, ${s}%, ${l(e.a)})`:`hsl(${n}, ${o}%, ${s}%)`}const M={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},R={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let D;function L(e){D||(D=function(){const e={},t=Object.keys(R),n=Object.keys(M);let o,s,i,r,a;for(o=0;o<t.length;o++){for(r=a=t[o],s=0;s<n.length;s++)i=n[s],a=a.replace(i,M[i]);i=parseInt(R[r],16),e[a]=[i>>16&255,i>>8&255,255&i]}return e}(),D.transparent=[0,0,0,0]);const t=D[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}const F=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function I(e){const t=F.exec(e);let n,o,r,a=255;if(t){if(t[7]!==n){const e=+t[7];a=t[8]?i(e):s(255*e,0,255)}return n=+t[1],o=+t[3],r=+t[5],n=255&(t[2]?i(n):s(n,0,255)),o=255&(t[4]?i(o):s(o,0,255)),r=255&(t[6]?i(r):s(r,0,255)),{r:n,g:o,b:r,a}}}function N(e){return e&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${l(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`)}const B=e=>e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055,V=e=>e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4);function $(e,t,n){if(e){let o=S(e);o[t]=Math.max(0,Math.min(o[t]+o[t]*n,0===t?360:1)),o=j(o),e.r=o[0],e.g=o[1],e.b=o[2]}}function z(e,t){return e?Object.assign(t||{},e):e}function H(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=a(e[3]))):(t=z(e,{r:0,g:0,b:0,a:1})).a=a(t.a),t}class U{constructor(e){if(e instanceof U)return e;const t=typeof e;let n;var o;"object"===t?n=H(e):"string"===t&&(n=g(e)||L(e)||("r"===(o=e).charAt(0)?I(o):A(o))),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=z(this._rgb);return e&&(e.a=l(e.a)),e}set rgb(e){this._rgb=H(e)}rgbString(){return this._valid?N(this._rgb):void 0}hexString(){return this._valid?v(this._rgb):void 0}hslString(){return this._valid?T(this._rgb):void 0}mix(e,t){if(e){const n=this.rgb,o=e.rgb;let s;const i=t===s?.5:t,r=2*i-1,a=n.a-o.a,l=((r*a==-1?r:(r+a)/(1+r*a))+1)/2;s=1-l,n.r=255&l*n.r+s*o.r+.5,n.g=255&l*n.g+s*o.g+.5,n.b=255&l*n.b+s*o.b+.5,n.a=i*n.a+(1-i)*o.a,this.rgb=n}return this}interpolate(e,t){return e&&(this._rgb=function(e,t,n){const o=V(l(e.r)),s=V(l(e.g)),i=V(l(e.b));return{r:a(B(o+n*(V(l(t.r))-o))),g:a(B(s+n*(V(l(t.g))-s))),b:a(B(i+n*(V(l(t.b))-i))),a:e.a+n*(t.a-e.a)}}(this._rgb,e._rgb,t)),this}clone(){return new U(this.rgb)}alpha(e){return this._rgb.a=a(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=o(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return $(this._rgb,2,e),this}darken(e){return $(this._rgb,2,-e),this}saturate(e){return $(this._rgb,1,e),this}desaturate(e){return $(this._rgb,1,-e),this}rotate(e){return P(this._rgb,e),this}}function W(e){return new U(e)}},"./node_modules/axios/lib/adapters/adapters.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/helpers/null.js"),i=n("./node_modules/axios/lib/adapters/xhr.js"),r=n("./node_modules/axios/lib/core/AxiosError.js");const a={http:s.default,xhr:i.default};o.default.forEach(a,((e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const l=e=>`- ${e}`,c=e=>o.default.isFunction(e)||null===e||!1===e,u={getAdapter:e=>{e=o.default.isArray(e)?e:[e];const{length:t}=e;let n,s;const i={};for(let o=0;o<t;o++){let t;if(n=e[o],s=n,!c(n)&&(s=a[(t=String(n)).toLowerCase()],void 0===s))throw new r.default(`Unknown adapter '${t}'`);if(s)break;i[t||"#"+o]=s}if(!s){const e=Object.entries(i).map((([e,t])=>`adapter ${e} `+(!1===t?"is not supported by the environment":"is not available in the build")));let n=t?e.length>1?"since :\n"+e.map(l).join("\n"):" "+l(e[0]):"as no adapter specified";throw new r.default("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return s},adapters:a}},"./node_modules/axios/lib/adapters/xhr.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>b});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/core/settle.js"),i=n("./node_modules/axios/lib/helpers/cookies.js"),r=n("./node_modules/axios/lib/helpers/buildURL.js"),a=n("./node_modules/axios/lib/core/buildFullPath.js"),l=n("./node_modules/axios/lib/helpers/isURLSameOrigin.js"),c=n("./node_modules/axios/lib/defaults/transitional.js"),u=n("./node_modules/axios/lib/core/AxiosError.js"),d=n("./node_modules/axios/lib/cancel/CanceledError.js"),h=n("./node_modules/axios/lib/helpers/parseProtocol.js"),p=n("./node_modules/axios/lib/platform/index.js"),f=n("./node_modules/axios/lib/core/AxiosHeaders.js"),m=n("./node_modules/axios/lib/helpers/speedometer.js");function g(e,t){let n=0;const o=(0,m.default)(50,250);return s=>{const i=s.loaded,r=s.lengthComputable?s.total:void 0,a=i-n,l=o(a);n=i;const c={loaded:i,total:r,progress:r?i/r:void 0,bytes:a,rate:l||void 0,estimated:l&&r&&i<=r?(r-i)/l:void 0,event:s};c[t?"download":"upload"]=!0,e(c)}}const b="undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){let m=e.data;const b=f.default.from(e.headers).normalize();let v,y,{responseType:_,withXSRFToken:x}=e;function w(){e.cancelToken&&e.cancelToken.unsubscribe(v),e.signal&&e.signal.removeEventListener("abort",v)}if(o.default.isFormData(m))if(p.default.hasStandardBrowserEnv||p.default.hasStandardBrowserWebWorkerEnv)b.setContentType(!1);else if(!1!==(y=b.getContentType())){const[e,...t]=y?y.split(";").map((e=>e.trim())).filter(Boolean):[];b.setContentType([e||"multipart/form-data",...t].join("; "))}let S=new XMLHttpRequest;if(e.auth){const t=e.auth.username||"",n=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";b.set("Authorization","Basic "+btoa(t+":"+n))}const k=(0,a.default)(e.baseURL,e.url);function j(){if(!S)return;const o=f.default.from("getAllResponseHeaders"in S&&S.getAllResponseHeaders()),i={data:_&&"text"!==_&&"json"!==_?S.response:S.responseText,status:S.status,statusText:S.statusText,headers:o,config:e,request:S};(0,s.default)((function(e){t(e),w()}),(function(e){n(e),w()}),i),S=null}if(S.open(e.method.toUpperCase(),(0,r.default)(k,e.params,e.paramsSerializer),!0),S.timeout=e.timeout,"onloadend"in S?S.onloadend=j:S.onreadystatechange=function(){S&&4===S.readyState&&(0!==S.status||S.responseURL&&0===S.responseURL.indexOf("file:"))&&setTimeout(j)},S.onabort=function(){S&&(n(new u.default("Request aborted",u.default.ECONNABORTED,e,S)),S=null)},S.onerror=function(){n(new u.default("Network Error",u.default.ERR_NETWORK,e,S)),S=null},S.ontimeout=function(){let t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const o=e.transitional||c.default;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new u.default(t,o.clarifyTimeoutError?u.default.ETIMEDOUT:u.default.ECONNABORTED,e,S)),S=null},p.default.hasStandardBrowserEnv&&(x&&o.default.isFunction(x)&&(x=x(e)),x||!1!==x&&(0,l.default)(k))){const t=e.xsrfHeaderName&&e.xsrfCookieName&&i.default.read(e.xsrfCookieName);t&&b.set(e.xsrfHeaderName,t)}void 0===m&&b.setContentType(null),"setRequestHeader"in S&&o.default.forEach(b.toJSON(),(function(e,t){S.setRequestHeader(t,e)})),o.default.isUndefined(e.withCredentials)||(S.withCredentials=!!e.withCredentials),_&&"json"!==_&&(S.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&S.addEventListener("progress",g(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&S.upload&&S.upload.addEventListener("progress",g(e.onUploadProgress)),(e.cancelToken||e.signal)&&(v=t=>{S&&(n(!t||t.type?new d.default(null,e,S):t),S.abort(),S=null)},e.cancelToken&&e.cancelToken.subscribe(v),e.signal&&(e.signal.aborted?v():e.signal.addEventListener("abort",v)));const O=(0,h.default)(k);O&&-1===p.default.protocols.indexOf(O)?n(new u.default("Unsupported protocol "+O+":",u.default.ERR_BAD_REQUEST,e)):S.send(m||null)}))}},"./node_modules/axios/lib/axios.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>x});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/helpers/bind.js"),i=n("./node_modules/axios/lib/core/Axios.js"),r=n("./node_modules/axios/lib/core/mergeConfig.js"),a=n("./node_modules/axios/lib/defaults/index.js"),l=n("./node_modules/axios/lib/helpers/formDataToJSON.js"),c=n("./node_modules/axios/lib/cancel/CanceledError.js"),u=n("./node_modules/axios/lib/cancel/CancelToken.js"),d=n("./node_modules/axios/lib/cancel/isCancel.js"),h=n("./node_modules/axios/lib/env/data.js"),p=n("./node_modules/axios/lib/helpers/toFormData.js"),f=n("./node_modules/axios/lib/core/AxiosError.js"),m=n("./node_modules/axios/lib/helpers/spread.js"),g=n("./node_modules/axios/lib/helpers/isAxiosError.js"),b=n("./node_modules/axios/lib/core/AxiosHeaders.js"),v=n("./node_modules/axios/lib/adapters/adapters.js"),y=n("./node_modules/axios/lib/helpers/HttpStatusCode.js");const _=function e(t){const n=new i.default(t),a=(0,s.default)(i.default.prototype.request,n);return o.default.extend(a,i.default.prototype,n,{allOwnKeys:!0}),o.default.extend(a,n,null,{allOwnKeys:!0}),a.create=function(n){return e((0,r.default)(t,n))},a}(a.default);_.Axios=i.default,_.CanceledError=c.default,_.CancelToken=u.default,_.isCancel=d.default,_.VERSION=h.VERSION,_.toFormData=p.default,_.AxiosError=f.default,_.Cancel=_.CanceledError,_.all=function(e){return Promise.all(e)},_.spread=m.default,_.isAxiosError=g.default,_.mergeConfig=r.default,_.AxiosHeaders=b.default,_.formToJSON=e=>(0,l.default)(o.default.isHTMLForm(e)?new FormData(e):e),_.getAdapter=v.default.getAdapter,_.HttpStatusCode=y.default,_.default=_;const x=_},"./node_modules/axios/lib/cancel/CancelToken.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/axios/lib/cancel/CanceledError.js");class s{constructor(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");let t;this.promise=new Promise((function(e){t=e}));const n=this;this.promise.then((e=>{if(!n._listeners)return;let t=n._listeners.length;for(;t-- >0;)n._listeners[t](e);n._listeners=null})),this.promise.then=e=>{let t;const o=new Promise((e=>{n.subscribe(e),t=e})).then(e);return o.cancel=function(){n.unsubscribe(t)},o},e((function(e,s,i){n.reason||(n.reason=new o.default(e,s,i),t(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}static source(){let e;return{token:new s((function(t){e=t})),cancel:e}}}const i=s},"./node_modules/axios/lib/cancel/CanceledError.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/axios/lib/core/AxiosError.js");function s(e,t,n){o.default.call(this,null==e?"canceled":e,o.default.ERR_CANCELED,t,n),this.name="CanceledError"}n("./node_modules/axios/lib/utils.js").default.inherits(s,o.default,{__CANCEL__:!0});const i=s},"./node_modules/axios/lib/cancel/isCancel.js":(e,t,n)=>{"use strict";function o(e){return!(!e||!e.__CANCEL__)}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/core/Axios.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/helpers/buildURL.js"),i=n("./node_modules/axios/lib/core/InterceptorManager.js"),r=n("./node_modules/axios/lib/core/dispatchRequest.js"),a=n("./node_modules/axios/lib/core/mergeConfig.js"),l=n("./node_modules/axios/lib/core/buildFullPath.js"),c=n("./node_modules/axios/lib/helpers/validator.js"),u=n("./node_modules/axios/lib/core/AxiosHeaders.js");const d=c.default.validators;class h{constructor(e){this.defaults=e,this.interceptors={request:new i.default,response:new i.default}}request(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{},t=(0,a.default)(this.defaults,t);const{transitional:n,paramsSerializer:s,headers:i}=t;void 0!==n&&c.default.assertOptions(n,{silentJSONParsing:d.transitional(d.boolean),forcedJSONParsing:d.transitional(d.boolean),clarifyTimeoutError:d.transitional(d.boolean)},!1),null!=s&&(o.default.isFunction(s)?t.paramsSerializer={serialize:s}:c.default.assertOptions(s,{encode:d.function,serialize:d.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let l=i&&o.default.merge(i.common,i[t.method]);i&&o.default.forEach(["delete","get","head","post","put","patch","common"],(e=>{delete i[e]})),t.headers=u.default.concat(l,i);const h=[];let p=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(p=p&&e.synchronous,h.unshift(e.fulfilled,e.rejected))}));const f=[];let m;this.interceptors.response.forEach((function(e){f.push(e.fulfilled,e.rejected)}));let g,b=0;if(!p){const e=[r.default.bind(this),void 0];for(e.unshift.apply(e,h),e.push.apply(e,f),g=e.length,m=Promise.resolve(t);b<g;)m=m.then(e[b++],e[b++]);return m}g=h.length;let v=t;for(b=0;b<g;){const e=h[b++],t=h[b++];try{v=e(v)}catch(e){t.call(this,e);break}}try{m=r.default.call(this,v)}catch(e){return Promise.reject(e)}for(b=0,g=f.length;b<g;)m=m.then(f[b++],f[b++]);return m}getUri(e){e=(0,a.default)(this.defaults,e);const t=(0,l.default)(e.baseURL,e.url);return(0,s.default)(t,e.params,e.paramsSerializer)}}o.default.forEach(["delete","get","head","options"],(function(e){h.prototype[e]=function(t,n){return this.request((0,a.default)(n||{},{method:e,url:t,data:(n||{}).data}))}})),o.default.forEach(["post","put","patch"],(function(e){function t(t){return function(n,o,s){return this.request((0,a.default)(s||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:o}))}}h.prototype[e]=t(),h.prototype[e+"Form"]=t(!0)}));const p=h},"./node_modules/axios/lib/core/AxiosError.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/axios/lib/utils.js");function s(e,t,n,o,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),o&&(this.request=o),s&&(this.response=s)}o.default.inherits(s,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:o.default.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const i=s.prototype,r={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((e=>{r[e]={value:e}})),Object.defineProperties(s,r),Object.defineProperty(i,"isAxiosError",{value:!0}),s.from=(e,t,n,r,a,l)=>{const c=Object.create(i);return o.default.toFlatObject(e,c,(function(e){return e!==Error.prototype}),(e=>"isAxiosError"!==e)),s.call(c,e.message,t,n,r,a),c.cause=e,c.name=e.name,l&&Object.assign(c,l),c};const a=s},"./node_modules/axios/lib/core/AxiosHeaders.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/helpers/parseHeaders.js");const i=Symbol("internals");function r(e){return e&&String(e).trim().toLowerCase()}function a(e){return!1===e||null==e?e:o.default.isArray(e)?e.map(a):String(e)}function l(e,t,n,s,i){return o.default.isFunction(s)?s.call(this,t,n):(i&&(t=n),o.default.isString(t)?o.default.isString(s)?-1!==t.indexOf(s):o.default.isRegExp(s)?s.test(t):void 0:void 0)}class c{constructor(e){e&&this.set(e)}set(e,t,n){const i=this;function l(e,t,n){const s=r(t);if(!s)throw new Error("header name must be a non-empty string");const l=o.default.findKey(i,s);(!l||void 0===i[l]||!0===n||void 0===n&&!1!==i[l])&&(i[l||t]=a(e))}const c=(e,t)=>o.default.forEach(e,((e,n)=>l(e,n,t)));return o.default.isPlainObject(e)||e instanceof this.constructor?c(e,t):o.default.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim())?c((0,s.default)(e),t):null!=e&&l(t,e,n),this}get(e,t){if(e=r(e)){const n=o.default.findKey(this,e);if(n){const e=this[n];if(!t)return e;if(!0===t)return function(e){const t=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let o;for(;o=n.exec(e);)t[o[1]]=o[2];return t}(e);if(o.default.isFunction(t))return t.call(this,e,n);if(o.default.isRegExp(t))return t.exec(e);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,t){if(e=r(e)){const n=o.default.findKey(this,e);return!(!n||void 0===this[n]||t&&!l(0,this[n],n,t))}return!1}delete(e,t){const n=this;let s=!1;function i(e){if(e=r(e)){const i=o.default.findKey(n,e);!i||t&&!l(0,n[i],i,t)||(delete n[i],s=!0)}}return o.default.isArray(e)?e.forEach(i):i(e),s}clear(e){const t=Object.keys(this);let n=t.length,o=!1;for(;n--;){const s=t[n];e&&!l(0,this[s],s,e,!0)||(delete this[s],o=!0)}return o}normalize(e){const t=this,n={};return o.default.forEach(this,((s,i)=>{const r=o.default.findKey(n,i);if(r)return t[r]=a(s),void delete t[i];const l=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((e,t,n)=>t.toUpperCase()+n))}(i):String(i).trim();l!==i&&delete t[i],t[l]=a(s),n[l]=!0})),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const t=Object.create(null);return o.default.forEach(this,((n,s)=>{null!=n&&!1!==n&&(t[s]=e&&o.default.isArray(n)?n.join(", "):n)})),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([e,t])=>e+": "+t)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...t){const n=new this(e);return t.forEach((e=>n.set(e))),n}static accessor(e){const t=(this[i]=this[i]={accessors:{}}).accessors,n=this.prototype;function s(e){const s=r(e);t[s]||(function(e,t){const n=o.default.toCamelCase(" "+t);["get","set","has"].forEach((o=>{Object.defineProperty(e,o+n,{value:function(e,n,s){return this[o].call(this,t,e,n,s)},configurable:!0})}))}(n,e),t[s]=!0)}return o.default.isArray(e)?e.forEach(s):s(e),this}}c.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),o.default.reduceDescriptors(c.prototype,(({value:e},t)=>{let n=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(e){this[n]=e}}})),o.default.freezeMethods(c);const u=c},"./node_modules/axios/lib/core/InterceptorManager.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/utils.js");const s=class{constructor(){this.handlers=[]}use(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){o.default.forEach(this.handlers,(function(t){null!==t&&e(t)}))}}},"./node_modules/axios/lib/core/buildFullPath.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>i});var o=n("./node_modules/axios/lib/helpers/isAbsoluteURL.js"),s=n("./node_modules/axios/lib/helpers/combineURLs.js");function i(e,t){return e&&!(0,o.default)(t)?(0,s.default)(e,t):t}},"./node_modules/axios/lib/core/dispatchRequest.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./node_modules/axios/lib/core/transformData.js"),s=n("./node_modules/axios/lib/cancel/isCancel.js"),i=n("./node_modules/axios/lib/defaults/index.js"),r=n("./node_modules/axios/lib/cancel/CanceledError.js"),a=n("./node_modules/axios/lib/core/AxiosHeaders.js"),l=n("./node_modules/axios/lib/adapters/adapters.js");function c(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new r.default(null,e)}function u(e){return c(e),e.headers=a.default.from(e.headers),e.data=o.default.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),l.default.getAdapter(e.adapter||i.default.adapter)(e).then((function(t){return c(e),t.data=o.default.call(e,e.transformResponse,t),t.headers=a.default.from(t.headers),t}),(function(t){return(0,s.default)(t)||(c(e),t&&t.response&&(t.response.data=o.default.call(e,e.transformResponse,t.response),t.response.headers=a.default.from(t.response.headers))),Promise.reject(t)}))}},"./node_modules/axios/lib/core/mergeConfig.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/core/AxiosHeaders.js");const i=e=>e instanceof s.default?e.toJSON():e;function r(e,t){t=t||{};const n={};function s(e,t,n){return o.default.isPlainObject(e)&&o.default.isPlainObject(t)?o.default.merge.call({caseless:n},e,t):o.default.isPlainObject(t)?o.default.merge({},t):o.default.isArray(t)?t.slice():t}function r(e,t,n){return o.default.isUndefined(t)?o.default.isUndefined(e)?void 0:s(void 0,e,n):s(e,t,n)}function a(e,t){if(!o.default.isUndefined(t))return s(void 0,t)}function l(e,t){return o.default.isUndefined(t)?o.default.isUndefined(e)?void 0:s(void 0,e):s(void 0,t)}function c(n,o,i){return i in t?s(n,o):i in e?s(void 0,n):void 0}const u={url:a,method:a,data:a,baseURL:l,transformRequest:l,transformResponse:l,paramsSerializer:l,timeout:l,timeoutMessage:l,withCredentials:l,withXSRFToken:l,adapter:l,responseType:l,xsrfCookieName:l,xsrfHeaderName:l,onUploadProgress:l,onDownloadProgress:l,decompress:l,maxContentLength:l,maxBodyLength:l,beforeRedirect:l,transport:l,httpAgent:l,httpsAgent:l,cancelToken:l,socketPath:l,responseEncoding:l,validateStatus:c,headers:(e,t)=>r(i(e),i(t),!0)};return o.default.forEach(Object.keys(Object.assign({},e,t)),(function(s){const i=u[s]||r,a=i(e[s],t[s],s);o.default.isUndefined(a)&&i!==c||(n[s]=a)})),n}},"./node_modules/axios/lib/core/settle.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/core/AxiosError.js");function s(e,t,n){const s=n.config.validateStatus;n.status&&s&&!s(n.status)?t(new o.default("Request failed with status code "+n.status,[o.default.ERR_BAD_REQUEST,o.default.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}},"./node_modules/axios/lib/core/transformData.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/defaults/index.js"),i=n("./node_modules/axios/lib/core/AxiosHeaders.js");function r(e,t){const n=this||s.default,r=t||n,a=i.default.from(r.headers);let l=r.data;return o.default.forEach(e,(function(e){l=e.call(n,l,a.normalize(),t?t.status:void 0)})),a.normalize(),l}},"./node_modules/axios/lib/defaults/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>d});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/core/AxiosError.js"),i=n("./node_modules/axios/lib/defaults/transitional.js"),r=n("./node_modules/axios/lib/helpers/toFormData.js"),a=n("./node_modules/axios/lib/helpers/toURLEncodedForm.js"),l=n("./node_modules/axios/lib/platform/index.js"),c=n("./node_modules/axios/lib/helpers/formDataToJSON.js");const u={transitional:i.default,adapter:["xhr","http"],transformRequest:[function(e,t){const n=t.getContentType()||"",s=n.indexOf("application/json")>-1,i=o.default.isObject(e);if(i&&o.default.isHTMLForm(e)&&(e=new FormData(e)),o.default.isFormData(e))return s&&s?JSON.stringify((0,c.default)(e)):e;if(o.default.isArrayBuffer(e)||o.default.isBuffer(e)||o.default.isStream(e)||o.default.isFile(e)||o.default.isBlob(e))return e;if(o.default.isArrayBufferView(e))return e.buffer;if(o.default.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let l;if(i){if(n.indexOf("application/x-www-form-urlencoded")>-1)return(0,a.default)(e,this.formSerializer).toString();if((l=o.default.isFileList(e))||n.indexOf("multipart/form-data")>-1){const t=this.env&&this.env.FormData;return(0,r.default)(l?{"files[]":e}:e,t&&new t,this.formSerializer)}}return i||s?(t.setContentType("application/json",!1),function(e,t,n){if(o.default.isString(e))try{return(0,JSON.parse)(e),o.default.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){const t=this.transitional||u.transitional,n=t&&t.forcedJSONParsing,i="json"===this.responseType;if(e&&o.default.isString(e)&&(n&&!this.responseType||i)){const n=!(t&&t.silentJSONParsing)&&i;try{return JSON.parse(e)}catch(e){if(n){if("SyntaxError"===e.name)throw s.default.from(e,s.default.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:l.default.classes.FormData,Blob:l.default.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};o.default.forEach(["delete","get","head","post","put","patch"],(e=>{u.headers[e]={}}));const d=u},"./node_modules/axios/lib/defaults/transitional.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1}},"./node_modules/axios/lib/env/data.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>o});const o="1.6.2"},"./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/axios/lib/helpers/toFormData.js");function s(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function i(e,t){this._pairs=[],e&&(0,o.default)(e,this,t)}const r=i.prototype;r.append=function(e,t){this._pairs.push([e,t])},r.toString=function(e){const t=e?function(t){return e.call(this,t,s)}:s;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const a=i},"./node_modules/axios/lib/helpers/HttpStatusCode.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const o={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(o).forEach((([e,t])=>{o[t]=e}));const s=o},"./node_modules/axios/lib/helpers/bind.js":(e,t,n)=>{"use strict";function o(e,t){return function(){return e.apply(t,arguments)}}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/buildURL.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");function i(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function r(e,t,n){if(!t)return e;const r=n&&n.encode||i,a=n&&n.serialize;let l;if(l=a?a(t,n):o.default.isURLSearchParams(t)?t.toString():new s.default(t,n).toString(r),l){const t=e.indexOf("#");-1!==t&&(e=e.slice(0,t)),e+=(-1===e.indexOf("?")?"?":"&")+l}return e}},"./node_modules/axios/lib/helpers/combineURLs.js":(e,t,n)=>{"use strict";function o(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/cookies.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/utils.js");const s=n("./node_modules/axios/lib/platform/index.js").default.hasStandardBrowserEnv?{write(e,t,n,s,i,r){const a=[e+"="+encodeURIComponent(t)];o.default.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),o.default.isString(s)&&a.push("path="+s),o.default.isString(i)&&a.push("domain="+i),!0===r&&a.push("secure"),document.cookie=a.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}}},"./node_modules/axios/lib/helpers/formDataToJSON.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/utils.js");const s=function(e){function t(e,n,s,i){let r=e[i++];const a=Number.isFinite(+r),l=i>=e.length;return r=!r&&o.default.isArray(s)?s.length:r,l?(o.default.hasOwnProp(s,r)?s[r]=[s[r],n]:s[r]=n,!a):(s[r]&&o.default.isObject(s[r])||(s[r]=[]),t(e,n,s[r],i)&&o.default.isArray(s[r])&&(s[r]=function(e){const t={},n=Object.keys(e);let o;const s=n.length;let i;for(o=0;o<s;o++)i=n[o],t[i]=e[i];return t}(s[r])),!a)}if(o.default.isFormData(e)&&o.default.isFunction(e.entries)){const n={};return o.default.forEachEntry(e,((e,s)=>{t(function(e){return o.default.matchAll(/\w+|\[(\w*)]/g,e).map((e=>"[]"===e[0]?"":e[1]||e[0]))}(e),s,n,0)})),n}return null}},"./node_modules/axios/lib/helpers/isAbsoluteURL.js":(e,t,n)=>{"use strict";function o(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/isAxiosError.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/utils.js");function s(e){return o.default.isObject(e)&&!0===e.isAxiosError}},"./node_modules/axios/lib/helpers/isURLSameOrigin.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/utils.js");const s=n("./node_modules/axios/lib/platform/index.js").default.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function s(n){let o=n;return e&&(t.setAttribute("href",o),o=t.href),t.setAttribute("href",o),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:"/"===t.pathname.charAt(0)?t.pathname:"/"+t.pathname}}return n=s(window.location.href),function(e){const t=o.default.isString(e)?s(e):e;return t.protocol===n.protocol&&t.host===n.host}}():function(){return!0}},"./node_modules/axios/lib/helpers/null.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=null},"./node_modules/axios/lib/helpers/parseHeaders.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});const o=n("./node_modules/axios/lib/utils.js").default.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),s=e=>{const t={};let n,s,i;return e&&e.split("\n").forEach((function(e){i=e.indexOf(":"),n=e.substring(0,i).trim().toLowerCase(),s=e.substring(i+1).trim(),!n||t[n]&&o[n]||("set-cookie"===n?t[n]?t[n].push(s):t[n]=[s]:t[n]=t[n]?t[n]+", "+s:s)})),t}},"./node_modules/axios/lib/helpers/parseProtocol.js":(e,t,n)=>{"use strict";function o(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/speedometer.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o=function(e,t){e=e||10;const n=new Array(e),o=new Array(e);let s,i=0,r=0;return t=void 0!==t?t:1e3,function(a){const l=Date.now(),c=o[r];s||(s=l),n[i]=a,o[i]=l;let u=r,d=0;for(;u!==i;)d+=n[u++],u%=e;if(i=(i+1)%e,i===r&&(r=(r+1)%e),l-s<t)return;const h=c&&l-c;return h?Math.round(1e3*d/h):void 0}}},"./node_modules/axios/lib/helpers/spread.js":(e,t,n)=>{"use strict";function o(e){return function(t){return e.apply(null,t)}}n.r(t),n.d(t,{default:()=>o})},"./node_modules/axios/lib/helpers/toFormData.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/core/AxiosError.js"),i=n("./node_modules/axios/lib/helpers/null.js");function r(e){return o.default.isPlainObject(e)||o.default.isArray(e)}function a(e){return o.default.endsWith(e,"[]")?e.slice(0,-2):e}function l(e,t,n){return e?e.concat(t).map((function(e,t){return e=a(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}const c=o.default.toFlatObject(o.default,{},null,(function(e){return/^is[A-Z]/.test(e)})),u=function(e,t,n){if(!o.default.isObject(e))throw new TypeError("target must be an object");t=t||new(i.default||FormData);const u=(n=o.default.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!o.default.isUndefined(t[e])}))).metaTokens,d=n.visitor||g,h=n.dots,p=n.indexes,f=(n.Blob||"undefined"!=typeof Blob&&Blob)&&o.default.isSpecCompliantForm(t);if(!o.default.isFunction(d))throw new TypeError("visitor must be a function");function m(e){if(null===e)return"";if(o.default.isDate(e))return e.toISOString();if(!f&&o.default.isBlob(e))throw new s.default("Blob is not supported. Use a Buffer instead.");return o.default.isArrayBuffer(e)||o.default.isTypedArray(e)?f&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function g(e,n,s){let i=e;if(e&&!s&&"object"==typeof e)if(o.default.endsWith(n,"{}"))n=u?n:n.slice(0,-2),e=JSON.stringify(e);else if(o.default.isArray(e)&&function(e){return o.default.isArray(e)&&!e.some(r)}(e)||(o.default.isFileList(e)||o.default.endsWith(n,"[]"))&&(i=o.default.toArray(e)))return n=a(n),i.forEach((function(e,s){!o.default.isUndefined(e)&&null!==e&&t.append(!0===p?l([n],s,h):null===p?n:n+"[]",m(e))})),!1;return!!r(e)||(t.append(l(s,n,h),m(e)),!1)}const b=[],v=Object.assign(c,{defaultVisitor:g,convertValue:m,isVisitable:r});if(!o.default.isObject(e))throw new TypeError("data must be an object");return function e(n,s){if(!o.default.isUndefined(n)){if(-1!==b.indexOf(n))throw Error("Circular reference detected in "+s.join("."));b.push(n),o.default.forEach(n,(function(n,i){!0===(!(o.default.isUndefined(n)||null===n)&&d.call(t,n,o.default.isString(i)?i.trim():i,s,v))&&e(n,s?s.concat(i):[i])})),b.pop()}}(e),t}},"./node_modules/axios/lib/helpers/toURLEncodedForm.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/axios/lib/utils.js"),s=n("./node_modules/axios/lib/helpers/toFormData.js"),i=n("./node_modules/axios/lib/platform/index.js");function r(e,t){return(0,s.default)(e,new i.default.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,s){return i.default.isNode&&o.default.isBuffer(e)?(this.append(t,e.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},t))}},"./node_modules/axios/lib/helpers/validator.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>a});var o=n("./node_modules/axios/lib/env/data.js"),s=n("./node_modules/axios/lib/core/AxiosError.js");const i={};["object","boolean","number","function","string","symbol"].forEach(((e,t)=>{i[e]=function(n){return typeof n===e||"a"+(t<1?"n ":" ")+e}}));const r={};i.transitional=function(e,t,n){function i(e,t){return"[Axios v"+o.VERSION+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return(n,o,a)=>{if(!1===e)throw new s.default(i(o," has been removed"+(t?" in "+t:"")),s.default.ERR_DEPRECATED);return t&&!r[o]&&(r[o]=!0,console.warn(i(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,a)}};const a={assertOptions:function(e,t,n){if("object"!=typeof e)throw new s.default("options must be an object",s.default.ERR_BAD_OPTION_VALUE);const o=Object.keys(e);let i=o.length;for(;i-- >0;){const r=o[i],a=t[r];if(a){const t=e[r],n=void 0===t||a(t,r,e);if(!0!==n)throw new s.default("option "+r+" must be "+n,s.default.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new s.default("Unknown option "+r,s.default.ERR_BAD_OPTION)}},validators:i}},"./node_modules/axios/lib/platform/browser/classes/Blob.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o="undefined"!=typeof Blob?Blob:null},"./node_modules/axios/lib/platform/browser/classes/FormData.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>o});const o="undefined"!=typeof FormData?FormData:null},"./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");const s="undefined"!=typeof URLSearchParams?URLSearchParams:o.default},"./node_modules/axios/lib/platform/browser/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>r});var o=n("./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js"),s=n("./node_modules/axios/lib/platform/browser/classes/FormData.js"),i=n("./node_modules/axios/lib/platform/browser/classes/Blob.js");const r={isBrowser:!0,classes:{URLSearchParams:o.default,FormData:s.default,Blob:i.default},protocols:["http","https","file","blob","url","data"]}},"./node_modules/axios/lib/platform/common/utils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{hasBrowserEnv:()=>o,hasStandardBrowserEnv:()=>s,hasStandardBrowserWebWorkerEnv:()=>r});const o="undefined"!=typeof window&&"undefined"!=typeof document,s=(i="undefined"!=typeof navigator&&navigator.product,o&&["ReactNative","NativeScript","NS"].indexOf(i)<0);var i;const r="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts},"./node_modules/axios/lib/platform/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>s});var o=n("./node_modules/axios/lib/platform/browser/index.js");const s={...n("./node_modules/axios/lib/platform/common/utils.js"),...o.default}},"./node_modules/axios/lib/utils.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>I});var o=n("./node_modules/axios/lib/helpers/bind.js");const{toString:s}=Object.prototype,{getPrototypeOf:i}=Object,r=(a=Object.create(null),e=>{const t=s.call(e);return a[t]||(a[t]=t.slice(8,-1).toLowerCase())});var a;const l=e=>(e=e.toLowerCase(),t=>r(t)===e),c=e=>t=>typeof t===e,{isArray:u}=Array,d=c("undefined"),h=l("ArrayBuffer"),p=c("string"),f=c("function"),m=c("number"),g=e=>null!==e&&"object"==typeof e,b=e=>{if("object"!==r(e))return!1;const t=i(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},v=l("Date"),y=l("File"),_=l("Blob"),x=l("FileList"),w=l("URLSearchParams");function S(e,t,{allOwnKeys:n=!1}={}){if(null==e)return;let o,s;if("object"!=typeof e&&(e=[e]),u(e))for(o=0,s=e.length;o<s;o++)t.call(null,e[o],o,e);else{const s=n?Object.getOwnPropertyNames(e):Object.keys(e),i=s.length;let r;for(o=0;o<i;o++)r=s[o],t.call(null,e[r],r,e)}}function k(e,t){t=t.toLowerCase();const n=Object.keys(e);let o,s=n.length;for(;s-- >0;)if(o=n[s],t===o.toLowerCase())return o;return null}const j="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,O=e=>!d(e)&&e!==j,C=(E="undefined"!=typeof Uint8Array&&i(Uint8Array),e=>E&&e instanceof E);var E;const A=l("HTMLFormElement"),P=(({hasOwnProperty:e})=>(t,n)=>e.call(t,n))(Object.prototype),T=l("RegExp"),M=(e,t)=>{const n=Object.getOwnPropertyDescriptors(e),o={};S(n,((n,s)=>{let i;!1!==(i=t(n,s,e))&&(o[s]=i||n)})),Object.defineProperties(e,o)},R="abcdefghijklmnopqrstuvwxyz",D="0123456789",L={DIGIT:D,ALPHA:R,ALPHA_DIGIT:R+R.toUpperCase()+D},F=l("AsyncFunction"),I={isArray:u,isArrayBuffer:h,isBuffer:function(e){return null!==e&&!d(e)&&null!==e.constructor&&!d(e.constructor)&&f(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:e=>{let t;return e&&("function"==typeof FormData&&e instanceof FormData||f(e.append)&&("formdata"===(t=r(e))||"object"===t&&f(e.toString)&&"[object FormData]"===e.toString()))},isArrayBufferView:function(e){let t;return t="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&h(e.buffer),t},isString:p,isNumber:m,isBoolean:e=>!0===e||!1===e,isObject:g,isPlainObject:b,isUndefined:d,isDate:v,isFile:y,isBlob:_,isRegExp:T,isFunction:f,isStream:e=>g(e)&&f(e.pipe),isURLSearchParams:w,isTypedArray:C,isFileList:x,forEach:S,merge:function e(){const{caseless:t}=O(this)&&this||{},n={},o=(o,s)=>{const i=t&&k(n,s)||s;b(n[i])&&b(o)?n[i]=e(n[i],o):b(o)?n[i]=e({},o):u(o)?n[i]=o.slice():n[i]=o};for(let e=0,t=arguments.length;e<t;e++)arguments[e]&&S(arguments[e],o);return n},extend:(e,t,n,{allOwnKeys:s}={})=>(S(t,((t,s)=>{n&&f(t)?e[s]=(0,o.default)(t,n):e[s]=t}),{allOwnKeys:s}),e),trim:e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:e=>(65279===e.charCodeAt(0)&&(e=e.slice(1)),e),inherits:(e,t,n,o)=>{e.prototype=Object.create(t.prototype,o),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:(e,t,n,o)=>{let s,r,a;const l={};if(t=t||{},null==e)return t;do{for(s=Object.getOwnPropertyNames(e),r=s.length;r-- >0;)a=s[r],o&&!o(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&i(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:r,kindOfTest:l,endsWith:(e,t,n)=>{e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;const o=e.indexOf(t,n);return-1!==o&&o===n},toArray:e=>{if(!e)return null;if(u(e))return e;let t=e.length;if(!m(t))return null;const n=new Array(t);for(;t-- >0;)n[t]=e[t];return n},forEachEntry:(e,t)=>{const n=(e&&e[Symbol.iterator]).call(e);let o;for(;(o=n.next())&&!o.done;){const n=o.value;t.call(e,n[0],n[1])}},matchAll:(e,t)=>{let n;const o=[];for(;null!==(n=e.exec(t));)o.push(n);return o},isHTMLForm:A,hasOwnProperty:P,hasOwnProp:P,reduceDescriptors:M,freezeMethods:e=>{M(e,((t,n)=>{if(f(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const o=e[n];f(o)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(e,t)=>{const n={},o=e=>{e.forEach((e=>{n[e]=!0}))};return u(e)?o(e):o(String(e).split(t)),n},toCamelCase:e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(e,t)=>(e=+e,Number.isFinite(e)?e:t),findKey:k,global:j,isContextDefined:O,ALPHABET:L,generateString:(e=16,t=L.ALPHA_DIGIT)=>{let n="";const{length:o}=t;for(;e--;)n+=t[Math.random()*o|0];return n},isSpecCompliantForm:function(e){return!!(e&&f(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:e=>{const t=new Array(10),n=(e,o)=>{if(g(e)){if(t.indexOf(e)>=0)return;if(!("toJSON"in e)){t[o]=e;const s=u(e)?[]:{};return S(e,((e,t)=>{const i=n(e,o+1);!d(i)&&(s[t]=i)})),t[o]=void 0,s}}return e};return n(e,0)},isAsyncFn:F,isThenable:e=>e&&(g(e)||f(e))&&f(e.then)&&f(e.catch)}},"./node_modules/chart.js/dist/chart.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Animation:()=>l,Animations:()=>c,ArcElement:()=>pt,BarController:()=>P,BarElement:()=>At,BasePlatform:()=>re,BasicPlatform:()=>ae,BubbleController:()=>T,CategoryScale:()=>En,Chart:()=>ct,Colors:()=>Ft,DatasetController:()=>x,Decimation:()=>Bt,DomPlatform:()=>we,DoughnutController:()=>M,Element:()=>ke,Filler:()=>tn,Interaction:()=>Y,Legend:()=>rn,LineController:()=>R,LineElement:()=>xt,LinearScale:()=>Tn,LogarithmicScale:()=>Fn,PieController:()=>L,PointElement:()=>St,PolarAreaController:()=>D,RadarController:()=>F,RadialLinearScale:()=>Un,Scale:()=>Re,ScatterController:()=>I,SubTitle:()=>un,Ticks:()=>o.aL,TimeScale:()=>Qn,TimeSeriesScale:()=>eo,Title:()=>ln,Tooltip:()=>jn,_adapters:()=>$,_detectPlatform:()=>Se,animator:()=>i,controllers:()=>N,defaults:()=>o.d,elements:()=>Pt,layouts:()=>ie,plugins:()=>On,registerables:()=>no,registry:()=>Fe,scales:()=>to});var o=n("./node_modules/chart.js/dist/chunks/helpers.segment.js");class s{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,o){const s=t.listeners[o],i=t.duration;s.forEach((o=>o({chart:e,initial:t.initial,numSteps:i,currentStep:Math.min(n-t.start,i)})))}_refresh(){this._request||(this._running=!0,this._request=o.r.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(e=Date.now()){let t=0;this._charts.forEach(((n,o)=>{if(!n.running||!n.items.length)return;const s=n.items;let i,r=s.length-1,a=!1;for(;r>=0;--r)i=s[r],i._active?(i._total>n.duration&&(n.duration=i._total),i.tick(e),a=!0):(s[r]=s[s.length-1],s.pop());a&&(o.draw(),this._notify(o,n,e,"progress")),s.length||(n.running=!1,this._notify(o,n,e,"complete"),n.initial=!1),t+=s.length})),this._lastDate=e,0===t&&(this._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let o=n.length-1;for(;o>=0;--o)n[o].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}}var i=new s;const r="transparent",a={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const s=(0,o.c)(e||r),i=s.valid&&(0,o.c)(t||r);return i&&i.valid?i.mix(s,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class l{constructor(e,t,n,s){const i=t[n];s=(0,o.a)([e.to,s,i,e.from]);const r=(0,o.a)([e.from,i,s]);this._active=!0,this._fn=e.fn||a[e.type||typeof r],this._easing=o.e[e.easing]||o.e.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=r,this._to=s,this._promises=void 0}active(){return this._active}update(e,t,n){if(this._active){this._notify(!1);const s=this._target[this._prop],i=n-this._start,r=this._duration-i;this._start=n,this._duration=Math.floor(Math.max(r,e.duration)),this._total+=i,this._loop=!!e.loop,this._to=(0,o.a)([e.to,t,s,e.from]),this._from=(0,o.a)([e.from,s,t])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(e){const t=e-this._start,n=this._duration,o=this._prop,s=this._from,i=this._loop,r=this._to;let a;if(this._active=s!==r&&(i||t<n),!this._active)return this._target[o]=r,void this._notify(!0);t<0?this._target[o]=s:(a=t/n%2,a=i&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[o]=this._fn(s,r,a))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}class c{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!(0,o.i)(e))return;const t=Object.keys(o.d.animation),n=this._properties;Object.getOwnPropertyNames(e).forEach((s=>{const i=e[s];if(!(0,o.i)(i))return;const r={};for(const e of t)r[e]=i[e];((0,o.b)(i.properties)&&i.properties||[s]).forEach((e=>{e!==s&&n.has(e)||n.set(e,r)}))}))}_animateOptions(e,t){const n=t.options,o=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!o)return[];const s=this._createAnimations(o,n);return n.$shared&&function(e,t){const n=[],o=Object.keys(t);for(let t=0;t<o.length;t++){const s=e[o[t]];s&&s.active()&&n.push(s.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),s}_createAnimations(e,t){const n=this._properties,o=[],s=e.$animations||(e.$animations={}),i=Object.keys(t),r=Date.now();let a;for(a=i.length-1;a>=0;--a){const c=i[a];if("$"===c.charAt(0))continue;if("options"===c){o.push(...this._animateOptions(e,t));continue}const u=t[c];let d=s[c];const h=n.get(c);if(d){if(h&&d.active()){d.update(h,u,r);continue}d.cancel()}h&&h.duration?(s[c]=d=new l(h,e,c,u),o.push(d)):e[c]=u}return o}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(i.add(this._chart,n),!0):void 0}}function u(e,t){const n=e&&e.options||{},o=n.reverse,s=void 0===n.min?t:0,i=void 0===n.max?t:0;return{start:o?i:s,end:o?s:i}}function d(e,t){const n=[],o=e._getSortedDatasetMetas(t);let s,i;for(s=0,i=o.length;s<i;++s)n.push(o[s].index);return n}function h(e,t,n,s={}){const i=e.keys,r="single"===s.mode;let a,l,c,u;if(null!==t){for(a=0,l=i.length;a<l;++a){if(c=+i[a],c===n){if(s.all)continue;break}u=e.values[c],(0,o.g)(u)&&(r||0===t||(0,o.s)(t)===(0,o.s)(u))&&(t+=u)}return t}}function p(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function f(e,t,n){const o=e[t]||(e[t]={});return o[n]||(o[n]={})}function m(e,t,n,o){for(const s of t.getMatchingVisibleMetas(o).reverse()){const t=e[s.index];if(n&&t>0||!n&&t<0)return s.index}return null}function g(e,t){const{chart:n,_cachedMeta:o}=e,s=n._stacks||(n._stacks={}),{iScale:i,vScale:r,index:a}=o,l=i.axis,c=r.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(i,r,o),d=t.length;let h;for(let e=0;e<d;++e){const n=t[e],{[l]:i,[c]:d}=n;h=(n._stacks||(n._stacks={}))[c]=f(s,u,i),h[a]=d,h._top=m(h,r,!0,o.type),h._bottom=m(h,r,!1,o.type),(h._visualValues||(h._visualValues={}))[a]=d}}function b(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function v(e,t){const n=e.controller.index,o=e.vScale&&e.vScale.axis;if(o){t=t||e._parsed;for(const e of t){const t=e._stacks;if(!t||void 0===t[o]||void 0===t[o][n])return;delete t[o][n],void 0!==t[o]._visualValues&&void 0!==t[o]._visualValues[n]&&delete t[o]._visualValues[n]}}}const y=e=>"reset"===e||"none"===e,_=(e,t)=>t?e:Object.assign({},e);class x{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const e=this._cachedMeta;this.configure(),this.linkScales(),e._stacked=p(e.vScale,e),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(e){this.index!==e&&v(this._cachedMeta),this.index=e}linkScales(){const e=this.chart,t=this._cachedMeta,n=this.getDataset(),s=(e,t,n,o)=>"x"===e?t:"r"===e?o:n,i=t.xAxisID=(0,o.v)(n.xAxisID,b(e,"x")),r=t.yAxisID=(0,o.v)(n.yAxisID,b(e,"y")),a=t.rAxisID=(0,o.v)(n.rAxisID,b(e,"r")),l=t.indexAxis,c=t.iAxisID=s(l,i,r,a),u=t.vAxisID=s(l,r,i,a);t.xScale=this.getScaleForId(i),t.yScale=this.getScaleForId(r),t.rScale=this.getScaleForId(a),t.iScale=this.getScaleForId(c),t.vScale=this.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&(0,o.u)(this._data,this),e._stacked&&v(e)}_dataCheck(){const e=this.getDataset(),t=e.data||(e.data=[]),n=this._data;if((0,o.i)(t))this._data=function(e){const t=Object.keys(e),n=new Array(t.length);let o,s,i;for(o=0,s=t.length;o<s;++o)i=t[o],n[o]={x:i,y:e[i]};return n}(t);else if(n!==t){if(n){(0,o.u)(n,this);const e=this._cachedMeta;v(e),e._parsed=[]}t&&Object.isExtensible(t)&&(0,o.l)(t,this),this._syncList=[],this._data=t}}addElements(){const e=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(e.dataset=new this.datasetElementType)}buildOrUpdateElements(e){const t=this._cachedMeta,n=this.getDataset();let o=!1;this._dataCheck();const s=t._stacked;t._stacked=p(t.vScale,t),t.stack!==n.stack&&(o=!0,v(t),t.stack=n.stack),this._resyncElements(e),(o||s!==t._stacked)&&g(this,t._parsed)}configure(){const e=this.chart.config,t=e.datasetScopeKeys(this._type),n=e.getOptionScopes(this.getDataset(),t,!0);this.options=e.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(e,t){const{_cachedMeta:n,_data:s}=this,{iScale:i,_stacked:r}=n,a=i.axis;let l,c,u,d=0===e&&t===s.length||n._sorted,h=e>0&&n._parsed[e-1];if(!1===this._parsing)n._parsed=s,n._sorted=!0,u=s;else{u=(0,o.b)(s[e])?this.parseArrayData(n,s,e,t):(0,o.i)(s[e])?this.parseObjectData(n,s,e,t):this.parsePrimitiveData(n,s,e,t);const i=()=>null===c[a]||h&&c[a]<h[a];for(l=0;l<t;++l)n._parsed[l+e]=c=u[l],d&&(i()&&(d=!1),h=c);n._sorted=d}r&&g(this,u)}parsePrimitiveData(e,t,n,o){const{iScale:s,vScale:i}=e,r=s.axis,a=i.axis,l=s.getLabels(),c=s===i,u=new Array(o);let d,h,p;for(d=0,h=o;d<h;++d)p=d+n,u[d]={[r]:c||s.parse(l[p],p),[a]:i.parse(t[p],p)};return u}parseArrayData(e,t,n,o){const{xScale:s,yScale:i}=e,r=new Array(o);let a,l,c,u;for(a=0,l=o;a<l;++a)c=a+n,u=t[c],r[a]={x:s.parse(u[0],c),y:i.parse(u[1],c)};return r}parseObjectData(e,t,n,s){const{xScale:i,yScale:r}=e,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c=new Array(s);let u,d,h,p;for(u=0,d=s;u<d;++u)h=u+n,p=t[h],c[u]={x:i.parse((0,o.f)(p,a),h),y:r.parse((0,o.f)(p,l),h)};return c}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const o=this.chart,s=this._cachedMeta,i=t[e.axis];return h({keys:d(o,!0),values:t._stacks[e.axis]._visualValues},i,s.index,{mode:n})}updateRangeFromParsed(e,t,n,o){const s=n[t.axis];let i=null===s?NaN:s;const r=o&&n._stacks[t.axis];o&&r&&(o.values=r,i=h(o,s,this._cachedMeta.index)),e.min=Math.min(e.min,i),e.max=Math.max(e.max,i)}getMinMax(e,t){const n=this._cachedMeta,s=n._parsed,i=n._sorted&&e===n.iScale,r=s.length,a=this._getOtherScale(e),l=((e,t,n)=>e&&!t.hidden&&t._stacked&&{keys:d(n,!0),values:null})(t,n,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:h}=function(e){const{min:t,max:n,minDefined:o,maxDefined:s}=e.getUserBounds();return{min:o?t:Number.NEGATIVE_INFINITY,max:s?n:Number.POSITIVE_INFINITY}}(a);let p,f;function m(){f=s[p];const t=f[a.axis];return!(0,o.g)(f[e.axis])||u>t||h<t}for(p=0;p<r&&(m()||(this.updateRangeFromParsed(c,e,f,l),!i));++p);if(i)for(p=r-1;p>=0;--p)if(!m()){this.updateRangeFromParsed(c,e,f,l);break}return c}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let s,i,r;for(s=0,i=t.length;s<i;++s)r=t[s][e.axis],(0,o.g)(r)&&n.push(r);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,o=t.vScale,s=this.getParsed(e);return{label:n?""+n.getLabelForValue(s[n.axis]):"",value:o?""+o.getLabelForValue(s[o.axis]):""}}_update(e){const t=this._cachedMeta;this.update(e||"default"),t._clip=function(e){let t,n,s,i;return(0,o.i)(e)?(t=e.top,n=e.right,s=e.bottom,i=e.left):t=n=s=i=e,{top:t,right:n,bottom:s,left:i,disabled:!1===e}}((0,o.v)(this.options.clip,function(e,t,n){if(!1===n)return!1;const o=u(e,n),s=u(t,n);return{top:s.end,right:o.end,bottom:s.start,left:o.start}}(t.xScale,t.yScale,this.getMaxOverflow())))}update(e){}draw(){const e=this._ctx,t=this.chart,n=this._cachedMeta,o=n.data||[],s=t.chartArea,i=[],r=this._drawStart||0,a=this._drawCount||o.length-r,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(e,s,r,a),c=r;c<r+a;++c){const t=o[c];t.hidden||(t.active&&l?i.push(t):t.draw(e,s))}for(c=0;c<i.length;++c)i[c].draw(e,s)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const s=this.getDataset();let i;if(e>=0&&e<this._cachedMeta.data.length){const t=this._cachedMeta.data[e];i=t.$context||(t.$context=function(e,t,n){return(0,o.j)(e,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(this.getContext(),e,t)),i.parsed=this.getParsed(e),i.raw=s.data[e],i.index=i.dataIndex=e}else i=this.$context||(this.$context=function(e,t){return(0,o.j)(e,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),i.dataset=s,i.index=i.datasetIndex=this.index;return i.active=!!t,i.mode=n,i}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const s="active"===t,i=this._cachedDataOpts,r=e+"-"+t,a=i[r],l=this.enableOptionSharing&&(0,o.h)(n);if(a)return _(a,l);const c=this.chart.config,u=c.datasetElementScopeKeys(this._type,e),d=s?[`${e}Hover`,"hover",e,""]:[e,""],h=c.getOptionScopes(this.getDataset(),u),p=Object.keys(o.d.elements[e]),f=c.resolveNamedOptions(h,p,(()=>this.getContext(n,s,t)),d);return f.$shared&&(f.$shared=l,i[r]=Object.freeze(_(f,l))),f}_resolveAnimations(e,t,n){const o=this.chart,s=this._cachedDataOpts,i=`animation-${t}`,r=s[i];if(r)return r;let a;if(!1!==o.options.animation){const o=this.chart.config,s=o.datasetAnimationScopeKeys(this._type,t),i=o.getOptionScopes(this.getDataset(),s);a=o.createResolver(i,this.getContext(e,n,t))}const l=new c(o,a&&a.animations);return a&&a._cacheable&&(s[i]=Object.freeze(l)),l}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||y(e)||this.chart._animationsDisabled}_getSharedOptions(e,t){const n=this.resolveDataElementOptions(e,t),o=this._sharedOptions,s=this.getSharedOptions(n),i=this.includeOptions(t,s)||s!==o;return this.updateSharedOptions(s,t,n),{sharedOptions:s,includeOptions:i}}updateElement(e,t,n,o){y(o)?Object.assign(e,n):this._resolveAnimations(t,o).update(e,n)}updateSharedOptions(e,t,n){e&&!y(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,o){e.active=o;const s=this.getStyle(t,o);this._resolveAnimations(t,n,o).update(e,{options:!o&&this.getSharedOptions(s)||s})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this._data,n=this._cachedMeta.data;for(const[e,t,n]of this._syncList)this[e](t,n);this._syncList=[];const o=n.length,s=t.length,i=Math.min(s,o);i&&this.parse(0,i),s>o?this._insertElements(o,s-o,e):s<o&&this._removeElements(s,o-s)}_insertElements(e,t,n=!0){const o=this._cachedMeta,s=o.data,i=e+t;let r;const a=e=>{for(e.length+=t,r=e.length-1;r>=i;r--)e[r]=e[r-t]};for(a(s),r=e;r<i;++r)s[r]=new this.dataElementType;this._parsing&&a(o._parsed),this.parse(e,t),n&&this.updateElements(s,e,t,"reset")}updateElements(e,t,n,o){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const o=n._parsed.splice(e,t);n._stacked&&v(n,o)}n.data.splice(e,t)}_sync(e){if(this._parsing)this._syncList.push(e);else{const[t,n,o]=e;this[t](n,o)}this.chart._dataChanges.push([this.index,...e])}_onDataPush(){const e=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(e,t){t&&this._sync(["_removeElements",e,t]);const n=arguments.length-2;n&&this._sync(["_insertElements",e,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function w(e){const t=e.iScale,n=function(e,t){if(!e._cache.$bar){const n=e.getMatchingVisibleMetas(t);let s=[];for(let t=0,o=n.length;t<o;t++)s=s.concat(n[t].controller.getAllParsedValues(e));e._cache.$bar=(0,o._)(s.sort(((e,t)=>e-t)))}return e._cache.$bar}(t,e.type);let s,i,r,a,l=t._length;const c=()=>{32767!==r&&-32768!==r&&((0,o.h)(a)&&(l=Math.min(l,Math.abs(r-a)||l)),a=r)};for(s=0,i=n.length;s<i;++s)r=t.getPixelForValue(n[s]),c();for(a=void 0,s=0,i=t.ticks.length;s<i;++s)r=t.getPixelForTick(s),c();return l}function S(e,t,n,s){return(0,o.b)(e)?function(e,t,n,o){const s=n.parse(e[0],o),i=n.parse(e[1],o),r=Math.min(s,i),a=Math.max(s,i);let l=r,c=a;Math.abs(r)>Math.abs(a)&&(l=a,c=r),t[n.axis]=c,t._custom={barStart:l,barEnd:c,start:s,end:i,min:r,max:a}}(e,t,n,s):t[n.axis]=n.parse(e,s),t}function k(e,t,n,o){const s=e.iScale,i=e.vScale,r=s.getLabels(),a=s===i,l=[];let c,u,d,h;for(c=n,u=n+o;c<u;++c)h=t[c],d={},d[s.axis]=a||s.parse(r[c],c),l.push(S(h,d,i,c));return l}function j(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}function O(e,t,n,o){let s=t.borderSkipped;const i={};if(!s)return void(e.borderSkipped=i);if(!0===s)return void(e.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:r,end:a,reverse:l,top:c,bottom:u}=function(e){let t,n,o,s,i;return e.horizontal?(t=e.base>e.x,n="left",o="right"):(t=e.base<e.y,n="bottom",o="top"),t?(s="end",i="start"):(s="start",i="end"),{start:n,end:o,reverse:t,top:s,bottom:i}}(e);"middle"===s&&n&&(e.enableBorderRadius=!0,(n._top||0)===o?s=c:(n._bottom||0)===o?s=u:(i[C(u,r,a,l)]=!0,s=c)),i[C(s,r,a,l)]=!0,e.borderSkipped=i}function C(e,t,n,o){var s,i,r;return o?(r=n,e=E(e=(s=e)===(i=t)?r:s===r?i:s,n,t)):e=E(e,t,n),e}function E(e,t,n){return"start"===e?t:"end"===e?n:e}function A(e,{inflateAmount:t},n){e.inflateAmount="auto"===t?1===n?.33:0:t}class P extends x{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(e,t,n,o){return k(e,t,n,o)}parseArrayData(e,t,n,o){return k(e,t,n,o)}parseObjectData(e,t,n,s){const{iScale:i,vScale:r}=e,{xAxisKey:a="x",yAxisKey:l="y"}=this._parsing,c="x"===i.axis?a:l,u="x"===r.axis?a:l,d=[];let h,p,f,m;for(h=n,p=n+s;h<p;++h)m=t[h],f={},f[i.axis]=i.parse((0,o.f)(m,c),h),d.push(S((0,o.f)(m,u),f,r,h));return d}updateRangeFromParsed(e,t,n,o){super.updateRangeFromParsed(e,t,n,o);const s=n._custom;s&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,s.min),e.max=Math.max(e.max,s.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:o}=t,s=this.getParsed(e),i=s._custom,r=j(i)?"["+i.start+", "+i.end+"]":""+o.getLabelForValue(s[o.axis]);return{label:""+n.getLabelForValue(s[n.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,s){const i="reset"===s,{index:r,_cachedMeta:{vScale:a}}=this,l=a.getBasePixel(),c=a.isHorizontal(),u=this._getRuler(),{sharedOptions:d,includeOptions:h}=this._getSharedOptions(t,s);for(let p=t;p<t+n;p++){const t=this.getParsed(p),n=i||(0,o.k)(t[a.axis])?{base:l,head:l}:this._calculateBarValuePixels(p),f=this._calculateBarIndexPixels(p,u),m=(t._stacks||{})[a.axis],g={horizontal:c,base:n.base,enableBorderRadius:!m||j(t._custom)||r===m._top||r===m._bottom,x:c?n.head:f.center,y:c?f.center:n.head,height:c?f.size:Math.abs(n.size),width:c?Math.abs(n.size):f.size};h&&(g.options=d||this.resolveDataElementOptions(p,e[p].active?"active":s));const b=g.options||e[p].options;O(g,b,m,r),A(g,b,u.ratio),this.updateElement(e[p],p,g,s)}}_getStacks(e,t){const{iScale:n}=this._cachedMeta,s=n.getMatchingVisibleMetas(this._type).filter((e=>e.controller.options.grouped)),i=n.options.stacked,r=[],a=e=>{const n=e.controller.getParsed(t),s=n&&n[e.vScale.axis];if((0,o.k)(s)||isNaN(s))return!0};for(const n of s)if((void 0===t||!a(n))&&((!1===i||-1===r.indexOf(n.stack)||void 0===i&&void 0===n.stack)&&r.push(n.stack),n.index===e))break;return r.length||r.push(void 0),r}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const o=this._getStacks(e,n),s=void 0!==t?o.indexOf(t):-1;return-1===s?o.length-1:s}_getRuler(){const e=this.options,t=this._cachedMeta,n=t.iScale,o=[];let s,i;for(s=0,i=t.data.length;s<i;++s)o.push(n.getPixelForValue(this.getParsed(s)[n.axis],s));const r=e.barThickness;return{min:r||w(t),pixels:o,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:e.grouped,ratio:r?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(e){const{_cachedMeta:{vScale:t,_stacked:n,index:s},options:{base:i,minBarLength:r}}=this,a=i||0,l=this.getParsed(e),c=l._custom,u=j(c);let d,h,p=l[t.axis],f=0,m=n?this.applyStack(t,l,n):p;m!==p&&(f=m-p,m=p),u&&(p=c.barStart,m=c.barEnd-c.barStart,0!==p&&(0,o.s)(p)!==(0,o.s)(c.barEnd)&&(f=0),f+=p);const g=(0,o.k)(i)||u?f:i;let b=t.getPixelForValue(g);if(d=this.chart.getDataVisibility(e)?t.getPixelForValue(f+m):b,h=d-b,Math.abs(h)<r){h=function(e,t,n){return 0!==e?(0,o.s)(e):(t.isHorizontal()?1:-1)*(t.min>=n?1:-1)}(h,t,a)*r,p===a&&(b-=h/2);const e=t.getPixelForDecimal(0),i=t.getPixelForDecimal(1),c=Math.min(e,i),f=Math.max(e,i);b=Math.max(Math.min(b,f),c),d=b+h,n&&!u&&(l._stacks[t.axis]._visualValues[s]=t.getValueForPixel(d)-t.getValueForPixel(b))}if(b===t.getPixelForValue(a)){const e=(0,o.s)(h)*t.getLineWidthForValue(a)/2;b+=e,h-=e}return{size:h,base:b,head:d,center:d+h/2}}_calculateBarIndexPixels(e,t){const n=t.scale,s=this.options,i=s.skipNull,r=(0,o.v)(s.maxBarThickness,1/0);let a,l;if(t.grouped){const n=i?this._getStackCount(e):t.stackCount,c="flex"===s.barThickness?function(e,t,n,o){const s=t.pixels,i=s[e];let r=e>0?s[e-1]:null,a=e<s.length-1?s[e+1]:null;const l=n.categoryPercentage;null===r&&(r=i-(null===a?t.end-t.start:a-i)),null===a&&(a=i+i-r);const c=i-(i-Math.min(r,a))/2*l;return{chunk:Math.abs(a-r)/2*l/o,ratio:n.barPercentage,start:c}}(e,t,s,n):function(e,t,n,s){const i=n.barThickness;let r,a;return(0,o.k)(i)?(r=t.min*n.categoryPercentage,a=n.barPercentage):(r=i*s,a=1),{chunk:r/s,ratio:a,start:t.pixels[e]-r/2}}(e,t,s,n),u=this._getStackIndex(this.index,this._cachedMeta.stack,i?e:void 0);a=c.start+c.chunk*u+c.chunk/2,l=Math.min(r,c.chunk*c.ratio)}else a=n.getPixelForValue(this.getParsed(e)[n.axis],e),l=Math.min(r,t.min*t.ratio);return{base:a-l/2,head:a+l/2,center:a,size:l}}draw(){const e=this._cachedMeta,t=e.vScale,n=e.data,o=n.length;let s=0;for(;s<o;++s)null!==this.getParsed(s)[t.axis]&&n[s].draw(this._ctx)}}class T extends x{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(e,t,n,o){const s=super.parsePrimitiveData(e,t,n,o);for(let e=0;e<s.length;e++)s[e]._custom=this.resolveDataElementOptions(e+n).radius;return s}parseArrayData(e,t,n,s){const i=super.parseArrayData(e,t,n,s);for(let e=0;e<i.length;e++){const s=t[n+e];i[e]._custom=(0,o.v)(s[2],this.resolveDataElementOptions(e+n).radius)}return i}parseObjectData(e,t,n,s){const i=super.parseObjectData(e,t,n,s);for(let e=0;e<i.length;e++){const s=t[n+e];i[e]._custom=(0,o.v)(s&&s.r&&+s.r,this.resolveDataElementOptions(e+n).radius)}return i}getMaxOverflow(){const e=this._cachedMeta.data;let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart.data.labels||[],{xScale:o,yScale:s}=t,i=this.getParsed(e),r=o.getLabelForValue(i.x),a=s.getLabelForValue(i.y),l=i._custom;return{label:n[e]||"",value:"("+r+", "+a+(l?", "+l:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,o){const s="reset"===o,{iScale:i,vScale:r}=this._cachedMeta,{sharedOptions:a,includeOptions:l}=this._getSharedOptions(t,o),c=i.axis,u=r.axis;for(let d=t;d<t+n;d++){const t=e[d],n=!s&&this.getParsed(d),h={},p=h[c]=s?i.getPixelForDecimal(.5):i.getPixelForValue(n[c]),f=h[u]=s?r.getBasePixel():r.getPixelForValue(n[u]);h.skip=isNaN(p)||isNaN(f),l&&(h.options=a||this.resolveDataElementOptions(d,t.active?"active":o),s&&(h.options.radius=0)),this.updateElement(t,d,h,o)}}resolveDataElementOptions(e,t){const n=this.getParsed(e);let s=super.resolveDataElementOptions(e,t);s.$shared&&(s=Object.assign({},s,{$shared:!1}));const i=s.radius;return"active"!==t&&(s.radius=0),s.radius+=(0,o.v)(n&&n._custom,i),s}}class M extends x{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e&&!e.startsWith("borderDash")&&!e.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n,color:o}}=e.legend.options;return t.labels.map(((t,s)=>{const i=e.getDatasetMeta(0).controller.getStyle(s);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,fontColor:o,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(s),index:s}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}}}};constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,s=this._cachedMeta;if(!1===this._parsing)s._parsed=n;else{let i,r,a=e=>+n[e];if((0,o.i)(n[e])){const{key:e="value"}=this._parsing;a=t=>+(0,o.f)(n[t],e)}for(i=e,r=e+t;i<r;++i)s._parsed[i]=a(i)}}_getRotation(){return(0,o.t)(this.options.rotation-90)}_getCircumference(){return(0,o.t)(this.options.circumference)}_getRotationExtents(){let e=o.T,t=-o.T;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)&&this.chart.getDatasetMeta(n).type===this._type){const o=this.chart.getDatasetMeta(n).controller,s=o._getRotation(),i=o._getCircumference();e=Math.min(e,s),t=Math.max(t,s+i)}return{rotation:e,circumference:t-e}}update(e){const t=this.chart,{chartArea:n}=t,s=this._cachedMeta,i=s.data,r=this.getMaxBorderWidth()+this.getMaxOffset(i)+this.options.spacing,a=Math.max((Math.min(n.width,n.height)-r)/2,0),l=Math.min((0,o.m)(this.options.cutout,a),1),c=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:h,ratioY:p,offsetX:f,offsetY:m}=function(e,t,n){let s=1,i=1,r=0,a=0;if(t<o.T){const l=e,c=l+t,u=Math.cos(l),d=Math.sin(l),h=Math.cos(c),p=Math.sin(c),f=(e,t,s)=>(0,o.p)(e,l,c,!0)?1:Math.max(t,t*n,s,s*n),m=(e,t,s)=>(0,o.p)(e,l,c,!0)?-1:Math.min(t,t*n,s,s*n),g=f(0,u,h),b=f(o.H,d,p),v=m(o.P,u,h),y=m(o.P+o.H,d,p);s=(g-v)/2,i=(b-y)/2,r=-(g+v)/2,a=-(b+y)/2}return{ratioX:s,ratioY:i,offsetX:r,offsetY:a}}(d,u,l),g=(n.width-r)/h,b=(n.height-r)/p,v=Math.max(Math.min(g,b)/2,0),y=(0,o.n)(this.options.radius,v),_=(y-Math.max(y*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*y,this.offsetY=m*y,s.total=this.calculateTotal(),this.outerRadius=y-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*c,0),this.updateElements(i,0,i.length,e)}_circumference(e,t){const n=this.options,s=this._cachedMeta,i=this._getCircumference();return t&&n.animation.animateRotate||!this.chart.getDataVisibility(e)||null===s._parsed[e]||s.data[e].hidden?0:this.calculateCircumference(s._parsed[e]*i/o.T)}updateElements(e,t,n,o){const s="reset"===o,i=this.chart,r=i.chartArea,a=i.options.animation,l=(r.left+r.right)/2,c=(r.top+r.bottom)/2,u=s&&a.animateScale,d=u?0:this.innerRadius,h=u?0:this.outerRadius,{sharedOptions:p,includeOptions:f}=this._getSharedOptions(t,o);let m,g=this._getRotation();for(m=0;m<t;++m)g+=this._circumference(m,s);for(m=t;m<t+n;++m){const t=this._circumference(m,s),n=e[m],i={x:l+this.offsetX,y:c+this.offsetY,startAngle:g,endAngle:g+t,circumference:t,outerRadius:h,innerRadius:d};f&&(i.options=p||this.resolveDataElementOptions(m,n.active?"active":o)),g+=t,this.updateElement(n,m,i,o)}}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,o=0;for(n=0;n<t.length;n++){const s=e._parsed[n];null===s||isNaN(s)||!this.chart.getDataVisibility(n)||t[n].hidden||(o+=Math.abs(s))}return o}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?o.T*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,s=n.data.labels||[],i=(0,o.o)(t._parsed[e],n.options.locale);return{label:s[e]||"",value:i}}getMaxBorderWidth(e){let t=0;const n=this.chart;let o,s,i,r,a;if(!e)for(o=0,s=n.data.datasets.length;o<s;++o)if(n.isDatasetVisible(o)){i=n.getDatasetMeta(o),e=i.data,r=i.controller;break}if(!e)return 0;for(o=0,s=e.length;o<s;++o)a=r.resolveDataElementOptions(o),"inner"!==a.borderAlign&&(t=Math.max(t,a.borderWidth||0,a.hoverBorderWidth||0));return t}getMaxOffset(e){let t=0;for(let n=0,o=e.length;n<o;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max((0,o.v)(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class R extends x{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(e){const t=this._cachedMeta,{dataset:n,data:s=[],_dataset:i}=t,r=this.chart._animationsDisabled;let{start:a,count:l}=(0,o.q)(t,s,r);this._drawStart=a,this._drawCount=l,(0,o.w)(t)&&(a=0,l=s.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!i._decimated,n.points=s;const c=this.resolveDatasetElementOptions(e);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(n,void 0,{animated:!r,options:c},e),this.updateElements(s,a,l,e)}updateElements(e,t,n,s){const i="reset"===s,{iScale:r,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:u,includeOptions:d}=this._getSharedOptions(t,s),h=r.axis,p=a.axis,{spanGaps:f,segment:m}=this.options,g=(0,o.x)(f)?f:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||i||"none"===s,v=t+n,y=e.length;let _=t>0&&this.getParsed(t-1);for(let n=0;n<y;++n){const f=e[n],y=b?f:{};if(n<t||n>=v){y.skip=!0;continue}const x=this.getParsed(n),w=(0,o.k)(x[p]),S=y[h]=r.getPixelForValue(x[h],n),k=y[p]=i||w?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,x,l):x[p],n);y.skip=isNaN(S)||isNaN(k)||w,y.stop=n>0&&Math.abs(x[h]-_[h])>g,m&&(y.parsed=x,y.raw=c.data[n]),d&&(y.options=u||this.resolveDataElementOptions(n,f.active?"active":s)),b||this.updateElement(f,n,y,s),_=x}}getMaxOverflow(){const e=this._cachedMeta,t=e.dataset,n=t.options&&t.options.borderWidth||0,o=e.data||[];if(!o.length)return n;const s=o[0].size(this.resolveDataElementOptions(0)),i=o[o.length-1].size(this.resolveDataElementOptions(o.length-1));return Math.max(n,s,i)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}class D extends x{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n,color:o}}=e.legend.options;return t.labels.map(((t,s)=>{const i=e.getDatasetMeta(0).controller.getStyle(s);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,fontColor:o,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(s),index:s}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,s=n.data.labels||[],i=(0,o.o)(t._parsed[e].r,n.options.locale);return{label:s[e]||"",value:i}}parseObjectData(e,t,n,s){return o.y.bind(this)(e,t,n,s)}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}getMinMax(){const e=this._cachedMeta,t={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return e.data.forEach(((e,n)=>{const o=this.getParsed(n).r;!isNaN(o)&&this.chart.getDataVisibility(n)&&(o<t.min&&(t.min=o),o>t.max&&(t.max=o))})),t}_updateRadius(){const e=this.chart,t=e.chartArea,n=e.options,o=Math.min(t.right-t.left,t.bottom-t.top),s=Math.max(o/2,0),i=(s-Math.max(n.cutoutPercentage?s/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();this.outerRadius=s-i*this.index,this.innerRadius=this.outerRadius-i}updateElements(e,t,n,s){const i="reset"===s,r=this.chart,a=r.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,u=l.yCenter,d=l.getIndexAngle(0)-.5*o.P;let h,p=d;const f=360/this.countVisibleElements();for(h=0;h<t;++h)p+=this._computeAngle(h,s,f);for(h=t;h<t+n;h++){const t=e[h];let n=p,o=p+this._computeAngle(h,s,f),m=r.getDataVisibility(h)?l.getDistanceFromCenterForValue(this.getParsed(h).r):0;p=o,i&&(a.animateScale&&(m=0),a.animateRotate&&(n=o=d));const g={x:c,y:u,innerRadius:0,outerRadius:m,startAngle:n,endAngle:o,options:this.resolveDataElementOptions(h,t.active?"active":s)};this.updateElement(t,h,g,s)}}countVisibleElements(){const e=this._cachedMeta;let t=0;return e.data.forEach(((e,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&t++})),t}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?(0,o.t)(this.resolveDataElementOptions(e,t).angle||n):0}}class L extends M{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}}class F extends x{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}parseObjectData(e,t,n,s){return o.y.bind(this)(e,t,n,s)}update(e){const t=this._cachedMeta,n=t.dataset,o=t.data||[],s=t.iScale.getLabels();if(n.points=o,"resize"!==e){const t=this.resolveDatasetElementOptions(e);this.options.showLine||(t.borderWidth=0);const i={_loop:!0,_fullLoop:s.length===o.length,options:t};this.updateElement(n,void 0,i,e)}this.updateElements(o,0,o.length,e)}updateElements(e,t,n,o){const s=this._cachedMeta.rScale,i="reset"===o;for(let r=t;r<t+n;r++){const t=e[r],n=this.resolveDataElementOptions(r,t.active?"active":o),a=s.getPointPositionForValue(r,this.getParsed(r).r),l=i?s.xCenter:a.x,c=i?s.yCenter:a.y,u={x:l,y:c,angle:a.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(t,r,u,o)}}}class I extends x{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(e){const t=this._cachedMeta,n=this.chart.data.labels||[],{xScale:o,yScale:s}=t,i=this.getParsed(e),r=o.getLabelForValue(i.x),a=s.getLabelForValue(i.y);return{label:n[e]||"",value:"("+r+", "+a+")"}}update(e){const t=this._cachedMeta,{data:n=[]}=t,s=this.chart._animationsDisabled;let{start:i,count:r}=(0,o.q)(t,n,s);if(this._drawStart=i,this._drawCount=r,(0,o.w)(t)&&(i=0,r=n.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:o,_dataset:i}=t;o._chart=this.chart,o._datasetIndex=this.index,o._decimated=!!i._decimated,o.points=n;const r=this.resolveDatasetElementOptions(e);r.segment=this.options.segment,this.updateElement(o,void 0,{animated:!s,options:r},e)}else this.datasetElementType&&(delete t.dataset,this.datasetElementType=!1);this.updateElements(n,i,r,e)}addElements(){const{showLine:e}=this.options;!this.datasetElementType&&e&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(e,t,n,s){const i="reset"===s,{iScale:r,vScale:a,_stacked:l,_dataset:c}=this._cachedMeta,u=this.resolveDataElementOptions(t,s),d=this.getSharedOptions(u),h=this.includeOptions(s,d),p=r.axis,f=a.axis,{spanGaps:m,segment:g}=this.options,b=(0,o.x)(m)?m:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||i||"none"===s;let y=t>0&&this.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=this.getParsed(u),m=v?t:{},_=(0,o.k)(n[f]),x=m[p]=r.getPixelForValue(n[p],u),w=m[f]=i||_?a.getBasePixel():a.getPixelForValue(l?this.applyStack(a,n,l):n[f],u);m.skip=isNaN(x)||isNaN(w)||_,m.stop=u>0&&Math.abs(n[p]-y[p])>b,g&&(m.parsed=n,m.raw=c.data[u]),h&&(m.options=d||this.resolveDataElementOptions(u,t.active?"active":s)),v||this.updateElement(t,u,m,s),y=n}this.updateSharedOptions(d,s,u)}getMaxOverflow(){const e=this._cachedMeta,t=e.data||[];if(!this.options.showLine){let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}const n=e.dataset,o=n.options&&n.options.borderWidth||0;if(!t.length)return o;const s=t[0].size(this.resolveDataElementOptions(0)),i=t[t.length-1].size(this.resolveDataElementOptions(t.length-1));return Math.max(o,s,i)/2}}var N=Object.freeze({__proto__:null,BarController:P,BubbleController:T,DoughnutController:M,LineController:R,PieController:L,PolarAreaController:D,RadarController:F,ScatterController:I});function B(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class V{static override(e){Object.assign(V.prototype,e)}options;constructor(e){this.options=e||{}}init(){}formats(){return B()}parse(){return B()}format(){return B()}add(){return B()}diff(){return B()}startOf(){return B()}endOf(){return B()}}var $={_date:V};function z(e,t,n,s){const{controller:i,data:r,_sorted:a}=e,l=i._cachedMeta.iScale;if(l&&t===l.axis&&"r"!==t&&a&&r.length){const e=l._reversePixels?o.A:o.B;if(!s)return e(r,t,n);if(i._sharedOptions){const o=r[0],s="function"==typeof o.getRange&&o.getRange(t);if(s){const o=e(r,t,n-s),i=e(r,t,n+s);return{lo:o.lo,hi:i.hi}}}}return{lo:0,hi:r.length-1}}function H(e,t,n,o,s){const i=e.getSortedVisibleDatasetMetas(),r=n[t];for(let e=0,n=i.length;e<n;++e){const{index:n,data:a}=i[e],{lo:l,hi:c}=z(i[e],t,r,s);for(let e=l;e<=c;++e){const t=a[e];t.skip||o(t,n,e)}}}function U(e,t,n,s,i){const r=[];return i||e.isPointInArea(t)?(H(e,n,t,(function(n,a,l){(i||(0,o.C)(n,e.chartArea,0))&&n.inRange(t.x,t.y,s)&&r.push({element:n,datasetIndex:a,index:l})}),!0),r):r}function W(e,t,n,s,i,r){return r||e.isPointInArea(t)?"r"!==n||s?function(e,t,n,o,s,i){let r=[];const a=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,o){const s=t?Math.abs(e.x-o.x):0,i=n?Math.abs(e.y-o.y):0;return Math.sqrt(Math.pow(s,2)+Math.pow(i,2))}}(n);let l=Number.POSITIVE_INFINITY;return H(e,n,t,(function(n,c,u){const d=n.inRange(t.x,t.y,s);if(o&&!d)return;const h=n.getCenterPoint(s);if(!i&&!e.isPointInArea(h)&&!d)return;const p=a(t,h);p<l?(r=[{element:n,datasetIndex:c,index:u}],l=p):p===l&&r.push({element:n,datasetIndex:c,index:u})})),r}(e,t,n,s,i,r):function(e,t,n,s){let i=[];return H(e,n,t,(function(e,n,r){const{startAngle:a,endAngle:l}=e.getProps(["startAngle","endAngle"],s),{angle:c}=(0,o.D)(e,{x:t.x,y:t.y});(0,o.p)(c,a,l)&&i.push({element:e,datasetIndex:n,index:r})})),i}(e,t,n,i):[]}function G(e,t,n,o,s){const i=[],r="x"===n?"inXRange":"inYRange";let a=!1;return H(e,n,t,((e,o,l)=>{e[r](t[n],s)&&(i.push({element:e,datasetIndex:o,index:l}),a=a||e.inRange(t.x,t.y,s))})),o&&!a?[]:i}var Y={evaluateInteractionItems:H,modes:{index(e,t,n,s){const i=(0,o.z)(t,e),r=n.axis||"x",a=n.includeInvisible||!1,l=n.intersect?U(e,i,r,s,a):W(e,i,r,!1,s,a),c=[];return l.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=l[0].index,n=e.data[t];n&&!n.skip&&c.push({element:n,datasetIndex:e.index,index:t})})),c):[]},dataset(e,t,n,s){const i=(0,o.z)(t,e),r=n.axis||"xy",a=n.includeInvisible||!1;let l=n.intersect?U(e,i,r,s,a):W(e,i,r,!1,s,a);if(l.length>0){const t=l[0].datasetIndex,n=e.getDatasetMeta(t).data;l=[];for(let e=0;e<n.length;++e)l.push({element:n[e],datasetIndex:t,index:e})}return l},point:(e,t,n,s)=>U(e,(0,o.z)(t,e),n.axis||"xy",s,n.includeInvisible||!1),nearest(e,t,n,s){const i=(0,o.z)(t,e),r=n.axis||"xy",a=n.includeInvisible||!1;return W(e,i,r,n.intersect,s,a)},x:(e,t,n,s)=>G(e,(0,o.z)(t,e),"x",n.intersect,s),y:(e,t,n,s)=>G(e,(0,o.z)(t,e),"y",n.intersect,s)}};const q=["left","top","right","bottom"];function K(e,t){return e.filter((e=>e.pos===t))}function J(e,t){return e.filter((e=>-1===q.indexOf(e.pos)&&e.box.axis===t))}function X(e,t){return e.sort(((e,n)=>{const o=t?n:e,s=t?e:n;return o.weight===s.weight?o.index-s.index:o.weight-s.weight}))}function Q(e,t,n,o){return Math.max(e[n],t[n])+Math.max(e[o],t[o])}function Z(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function ee(e,t,n,s){const{pos:i,box:r}=n,a=e.maxPadding;if(!(0,o.i)(i)){n.size&&(e[i]-=n.size);const t=s[n.stack]||{size:0,count:1};t.size=Math.max(t.size,n.horizontal?r.height:r.width),n.size=t.size/t.count,e[i]+=n.size}r.getPadding&&Z(a,r.getPadding());const l=Math.max(0,t.outerWidth-Q(a,e,"left","right")),c=Math.max(0,t.outerHeight-Q(a,e,"top","bottom")),u=l!==e.w,d=c!==e.h;return e.w=l,e.h=c,n.horizontal?{same:u,other:d}:{same:d,other:u}}function te(e,t){const n=t.maxPadding;return function(e){const o={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{o[e]=Math.max(t[e],n[e])})),o}(e?["left","right"]:["top","bottom"])}function ne(e,t,n,o){const s=[];let i,r,a,l,c,u;for(i=0,r=e.length,c=0;i<r;++i){a=e[i],l=a.box,l.update(a.width||t.w,a.height||t.h,te(a.horizontal,t));const{same:r,other:d}=ee(t,n,a,o);c|=r&&s.length,u=u||d,l.fullSize||s.push(a)}return c&&ne(s,t,n,o)||u}function oe(e,t,n,o,s){e.top=n,e.left=t,e.right=t+o,e.bottom=n+s,e.width=o,e.height=s}function se(e,t,n,s){const i=n.padding;let{x:r,y:a}=t;for(const l of e){const e=l.box,c=s[l.stack]||{count:1,placed:0,weight:1},u=l.stackWeight/c.weight||1;if(l.horizontal){const s=t.w*u,r=c.size||e.height;(0,o.h)(c.start)&&(a=c.start),e.fullSize?oe(e,i.left,a,n.outerWidth-i.right-i.left,r):oe(e,t.left+c.placed,a,s,r),c.start=a,c.placed+=s,a=e.bottom}else{const s=t.h*u,a=c.size||e.width;(0,o.h)(c.start)&&(r=c.start),e.fullSize?oe(e,r,i.top,a,n.outerHeight-i.bottom-i.top):oe(e,r,t.top+c.placed,a,s),c.start=r,c.placed+=s,r=e.right}}t.x=r,t.y=a}var ie={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,s){if(!e)return;const i=(0,o.E)(e.options.layout.padding),r=Math.max(t-i.width,0),a=Math.max(n-i.height,0),l=function(e){const t=function(e){const t=[];let n,o,s,i,r,a;for(n=0,o=(e||[]).length;n<o;++n)s=e[n],({position:i,options:{stack:r,stackWeight:a=1}}=s),t.push({index:n,box:s,pos:i,horizontal:s.isHorizontal(),weight:s.weight,stack:r&&i+r,stackWeight:a});return t}(e),n=X(t.filter((e=>e.box.fullSize)),!0),o=X(K(t,"left"),!0),s=X(K(t,"right")),i=X(K(t,"top"),!0),r=X(K(t,"bottom")),a=J(t,"x"),l=J(t,"y");return{fullSize:n,leftAndTop:o.concat(i),rightAndBottom:s.concat(l).concat(r).concat(a),chartArea:K(t,"chartArea"),vertical:o.concat(s).concat(l),horizontal:i.concat(r).concat(a)}}(e.boxes),c=l.vertical,u=l.horizontal;(0,o.F)(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const d=c.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,h=Object.freeze({outerWidth:t,outerHeight:n,padding:i,availableWidth:r,availableHeight:a,vBoxMaxWidth:r/2/d,hBoxMaxHeight:a/2}),p=Object.assign({},i);Z(p,(0,o.E)(s));const f=Object.assign({maxPadding:p,w:r,h:a,x:i.left,y:i.top},i),m=function(e,t){const n=function(e){const t={};for(const n of e){const{stack:e,pos:o,stackWeight:s}=n;if(!e||!q.includes(o))continue;const i=t[e]||(t[e]={count:0,placed:0,weight:0,size:0});i.count++,i.weight+=s}return t}(e),{vBoxMaxWidth:o,hBoxMaxHeight:s}=t;let i,r,a;for(i=0,r=e.length;i<r;++i){a=e[i];const{fullSize:r}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*o:r&&t.availableWidth,a.height=s):(a.width=o,a.height=c?c*s:r&&t.availableHeight)}return n}(c.concat(u),h);ne(l.fullSize,f,h,m),ne(c,f,h,m),ne(u,f,h,m)&&ne(c,f,h,m),function(e){const t=e.maxPadding;function n(n){const o=Math.max(t[n]-e[n],0);return e[n]+=o,o}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(f),se(l.leftAndTop,f,h,m),f.x+=f.w,f.y+=f.h,se(l.rightAndBottom,f,h,m),e.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},(0,o.F)(l.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class re{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,o){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,o?Math.floor(t/o):n)}}isAttached(e){return!0}updateConfig(e){}}class ae extends re{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}updateConfig(e){e.options.animation=!1}}const le="$chartjs",ce={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ue=e=>null===e||""===e,de=!!o.K&&{passive:!0};function he(e,t,n){e.canvas.removeEventListener(t,n,de)}function pe(e,t){for(const n of e)if(n===t||n.contains(t))return!0}function fe(e,t,n){const o=e.canvas,s=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||pe(n.addedNodes,o),t=t&&!pe(n.removedNodes,o);t&&n()}));return s.observe(document,{childList:!0,subtree:!0}),s}function me(e,t,n){const o=e.canvas,s=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||pe(n.removedNodes,o),t=t&&!pe(n.addedNodes,o);t&&n()}));return s.observe(document,{childList:!0,subtree:!0}),s}const ge=new Map;let be=0;function ve(){const e=window.devicePixelRatio;e!==be&&(be=e,ge.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function ye(e,t,n){const s=e.canvas,i=s&&(0,o.I)(s);if(!i)return;const r=(0,o.L)(((e,t)=>{const o=i.clientWidth;n(e,t),o<i.clientWidth&&n()}),window),a=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,o=t.contentRect.height;0===n&&0===o||r(n,o)}));return a.observe(i),function(e,t){ge.size||window.addEventListener("resize",ve),ge.set(e,t)}(e,r),a}function _e(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){ge.delete(e),ge.size||window.removeEventListener("resize",ve)}(e)}function xe(e,t,n){const s=e.canvas,i=(0,o.L)((t=>{null!==e.ctx&&n(function(e,t){const n=ce[e.type]||e.type,{x:s,y:i}=(0,o.z)(e,t);return{type:n,chart:t,native:e,x:void 0!==s?s:null,y:void 0!==i?i:null}}(t,e))}),e);return function(e,t,n){e.addEventListener(t,n,de)}(s,t,i),i}class we extends re{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,s=e.getAttribute("height"),i=e.getAttribute("width");if(e[le]={initial:{height:s,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",ue(i)){const t=(0,o.J)(e,"width");void 0!==t&&(e.width=t)}if(ue(s))if(""===e.style.height)e.height=e.width/(t||2);else{const t=(0,o.J)(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t[le])return!1;const n=t[le].initial;["height","width"].forEach((e=>{const s=n[e];(0,o.k)(s)?t.removeAttribute(e):t.setAttribute(e,s)}));const s=n.style||{};return Object.keys(s).forEach((e=>{t.style[e]=s[e]})),t.width=t.width,delete t[le],!0}addEventListener(e,t,n){this.removeEventListener(e,t);const o=e.$proxies||(e.$proxies={}),s={attach:fe,detach:me,resize:ye}[t]||xe;o[t]=s(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),o=n[t];o&&(({attach:_e,detach:_e,resize:_e}[t]||he)(e,t,o),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,s){return(0,o.G)(e,t,n,s)}isAttached(e){const t=(0,o.I)(e);return!(!t||!t.isConnected)}}function Se(e){return!(0,o.M)()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?ae:we}class ke{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return(0,o.x)(this.x)&&(0,o.x)(this.y)}getProps(e,t){const n=this.$animations;if(!t||!n)return this;const o={};return e.forEach((e=>{o[e]=n[e]&&n[e].active()?n[e]._to:this[e]})),o}}function je(e,t,n,s,i){const r=(0,o.v)(s,0),a=Math.min((0,o.v)(i,e.length),e.length);let l,c,u,d=0;for(n=Math.ceil(n),i&&(l=i-s,n=l/Math.floor(l/n)),u=r;u<0;)d++,u=Math.round(r+d*n);for(c=Math.max(r,0);c<a;c++)c===u&&(t.push(e[c]),d++,u=Math.round(r+d*n))}const Oe=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n,Ce=(e,t)=>Math.min(t||e,e);function Ee(e,t){const n=[],o=e.length/t,s=e.length;let i=0;for(;i<s;i+=o)n.push(e[Math.floor(i)]);return n}function Ae(e,t,n){const o=e.ticks.length,s=Math.min(t,o-1),i=e._startPixel,r=e._endPixel,a=1e-6;let l,c=e.getPixelForTick(s);if(!(n&&(l=1===o?Math.max(c-i,r-c):0===t?(e.getPixelForTick(1)-c)/2:(c-e.getPixelForTick(s-1))/2,c+=s<t?l:-l,c<i-a||c>r+a)))return c}function Pe(e){return e.drawTicks?e.tickLength:0}function Te(e,t){if(!e.display)return 0;const n=(0,o.a0)(e.font,t),s=(0,o.E)(e.padding);return((0,o.b)(e.text)?e.text.length:1)*n.lineHeight+s.height}function Me(e,t,n){let s=(0,o.a1)(e);return(n&&"right"!==t||!n&&"right"===t)&&(s=(e=>"left"===e?"right":"right"===e?"left":e)(s)),s}class Re extends ke{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){this.options=e.setContext(this.getContext()),this.axis=e.axis,this._userMin=this.parse(e.min),this._userMax=this.parse(e.max),this._suggestedMin=this.parse(e.suggestedMin),this._suggestedMax=this.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:s}=this;return e=(0,o.O)(e,Number.POSITIVE_INFINITY),t=(0,o.O)(t,Number.NEGATIVE_INFINITY),n=(0,o.O)(n,Number.POSITIVE_INFINITY),s=(0,o.O)(s,Number.NEGATIVE_INFINITY),{min:(0,o.O)(e,n),max:(0,o.O)(t,s),minDefined:(0,o.g)(e),maxDefined:(0,o.g)(t)}}getMinMax(e){let t,{min:n,max:s,minDefined:i,maxDefined:r}=this.getUserBounds();if(i&&r)return{min:n,max:s};const a=this.getMatchingVisibleMetas();for(let o=0,l=a.length;o<l;++o)t=a[o].controller.getMinMax(this,e),i||(n=Math.min(n,t.min)),r||(s=Math.max(s,t.max));return n=r&&n>s?s:n,s=i&&n>s?n:s,{min:(0,o.O)(n,(0,o.O)(s,n)),max:(0,o.O)(s,(0,o.O)(n,s))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}getLabelItems(e=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(e))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){(0,o.Q)(this.options.beforeUpdate,[this])}update(e,t,n){const{beginAtZero:s,grace:i,ticks:r}=this.options,a=r.sampleSize;this.beforeUpdate(),this.maxWidth=e,this.maxHeight=t,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=(0,o.R)(this,i,s),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=a<this.ticks.length;this._convertTicksToLabels(l?Ee(this.ticks,a):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),r.display&&(r.autoSkip||"auto"===r.source)&&(this.ticks=function(e,t){const n=e.options.ticks,s=function(e){const t=e.options.offset,n=e._tickSize(),o=e._length/n+(t?0:1),s=e._maxLength/n;return Math.floor(Math.min(o,s))}(e),i=Math.min(n.maxTicksLimit||s,s),r=n.major.enabled?function(e){const t=[];let n,o;for(n=0,o=e.length;n<o;n++)e[n].major&&t.push(n);return t}(t):[],a=r.length,l=r[0],c=r[a-1],u=[];if(a>i)return function(e,t,n,o){let s,i=0,r=n[0];for(o=Math.ceil(o),s=0;s<e.length;s++)s===r&&(t.push(e[s]),i++,r=n[i*o])}(t,u,r,a/i),u;const d=function(e,t,n){const s=function(e){const t=e.length;let n,o;if(t<2)return!1;for(o=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==o)return!1;return o}(e),i=t.length/n;if(!s)return Math.max(i,1);const r=(0,o.N)(s);for(let e=0,t=r.length-1;e<t;e++){const t=r[e];if(t>i)return t}return Math.max(i,1)}(r,t,i);if(a>0){let e,n;const s=a>1?Math.round((c-l)/(a-1)):null;for(je(t,u,d,(0,o.k)(s)?0:l-s,l),e=0,n=a-1;e<n;e++)je(t,u,d,r[e],r[e+1]);return je(t,u,d,c,(0,o.k)(s)?t.length:c+s),u}return je(t,u,d),u}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let e,t,n=this.options.reverse;this.isHorizontal()?(e=this.left,t=this.right):(e=this.top,t=this.bottom,n=!n),this._startPixel=e,this._endPixel=t,this._reversePixels=n,this._length=t-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){(0,o.Q)(this.options.afterUpdate,[this])}beforeSetDimensions(){(0,o.Q)(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){(0,o.Q)(this.options.afterSetDimensions,[this])}_callHooks(e){this.chart.notifyPlugins(e,this.getContext()),(0,o.Q)(this.options[e],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){(0,o.Q)(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this.options.ticks;let n,s,i;for(n=0,s=e.length;n<s;n++)i=e[n],i.label=(0,o.Q)(t.callback,[i.value,n,e],this)}afterTickToLabelConversion(){(0,o.Q)(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){(0,o.Q)(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this.options,t=e.ticks,n=Ce(this.ticks.length,e.ticks.maxTicksLimit),s=t.minRotation||0,i=t.maxRotation;let r,a,l,c=s;if(!this._isVisible()||!t.display||s>=i||n<=1||!this.isHorizontal())return void(this.labelRotation=s);const u=this._getLabelSizes(),d=u.widest.width,h=u.highest.height,p=(0,o.S)(this.chart.width-d,0,this.maxWidth);r=e.offset?this.maxWidth/n:p/(n-1),d+6>r&&(r=p/(n-(e.offset?.5:1)),a=this.maxHeight-Pe(e.grid)-t.padding-Te(e.title,this.chart.options.font),l=Math.sqrt(d*d+h*h),c=(0,o.U)(Math.min(Math.asin((0,o.S)((u.highest.height+6)/r,-1,1)),Math.asin((0,o.S)(a/l,-1,1))-Math.asin((0,o.S)(h/l,-1,1)))),c=Math.max(s,Math.min(i,c))),this.labelRotation=c}afterCalculateLabelRotation(){(0,o.Q)(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){(0,o.Q)(this.options.beforeFit,[this])}fit(){const e={width:0,height:0},{chart:t,options:{ticks:n,title:s,grid:i}}=this,r=this._isVisible(),a=this.isHorizontal();if(r){const r=Te(s,t.options.font);if(a?(e.width=this.maxWidth,e.height=Pe(i)+r):(e.height=this.maxHeight,e.width=Pe(i)+r),n.display&&this.ticks.length){const{first:t,last:s,widest:i,highest:r}=this._getLabelSizes(),l=2*n.padding,c=(0,o.t)(this.labelRotation),u=Math.cos(c),d=Math.sin(c);if(a){const t=n.mirror?0:d*i.width+u*r.height;e.height=Math.min(this.maxHeight,e.height+t+l)}else{const t=n.mirror?0:u*i.width+d*r.height;e.width=Math.min(this.maxWidth,e.width+t+l)}this._calculatePadding(t,s,d,u)}}this._handleMargins(),a?(this.width=this._length=t.width-this._margins.left-this._margins.right,this.height=e.height):(this.width=e.width,this.height=this._length=t.height-this._margins.top-this._margins.bottom)}_calculatePadding(e,t,n,o){const{ticks:{align:s,padding:i},position:r}=this.options,a=0!==this.labelRotation,l="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,d=0;a?l?(u=o*e.width,d=n*t.height):(u=n*e.height,d=o*t.width):"start"===s?d=t.width:"end"===s?u=e.width:"inner"!==s&&(u=e.width/2,d=t.width/2),this.paddingLeft=Math.max((u-r+i)*this.width/(this.width-r),0),this.paddingRight=Math.max((d-c+i)*this.width/(this.width-c),0)}else{let n=t.height/2,o=e.height/2;"start"===s?(n=0,o=e.height):"end"===s&&(n=t.height,o=0),this.paddingTop=n+i,this.paddingBottom=o+i}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){(0,o.Q)(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){let t,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(e),t=0,n=e.length;t<n;t++)(0,o.k)(e[t].label)&&(e.splice(t,1),n--,t--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){const t=this.options.ticks.sampleSize;let n=this.ticks;t<n.length&&(n=Ee(n,t)),this._labelSizes=e=this._computeLabelSizes(n,n.length,this.options.ticks.maxTicksLimit)}return e}_computeLabelSizes(e,t,n){const{ctx:s,_longestTextCache:i}=this,r=[],a=[],l=Math.floor(t/Ce(t,n));let c,u,d,h,p,f,m,g,b,v,y,_=0,x=0;for(c=0;c<t;c+=l){if(h=e[c].label,p=this._resolveTickFontOptions(c),s.font=f=p.string,m=i[f]=i[f]||{data:{},gc:[]},g=p.lineHeight,b=v=0,(0,o.k)(h)||(0,o.b)(h)){if((0,o.b)(h))for(u=0,d=h.length;u<d;++u)y=h[u],(0,o.k)(y)||(0,o.b)(y)||(b=(0,o.V)(s,m.data,m.gc,b,y),v+=g)}else b=(0,o.V)(s,m.data,m.gc,b,h),v=g;r.push(b),a.push(v),_=Math.max(b,_),x=Math.max(v,x)}!function(e,t){(0,o.F)(e,(e=>{const n=e.gc,o=n.length/2;let s;if(o>t){for(s=0;s<o;++s)delete e.data[n[s]];n.splice(0,o)}}))}(i,t);const w=r.indexOf(_),S=a.indexOf(x),k=e=>({width:r[e]||0,height:a[e]||0});return{first:k(0),last:k(t-1),widest:k(w),highest:k(S),widths:r,heights:a}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){this._reversePixels&&(e=1-e);const t=this._startPixel+e*this._length;return(0,o.W)(this._alignToPixels?(0,o.X)(this.chart,t,0):t)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this.ticks||[];if(e>=0&&e<t.length){const n=t[e];return n.$context||(n.$context=function(e,t,n){return(0,o.j)(e,{tick:n,index:t,type:"tick"})}(this.getContext(),e,n))}return this.$context||(this.$context=(n=this.chart.getContext(),this,(0,o.j)(n,{scale:this,type:"scale"})));var n}_tickSize(){const e=this.options.ticks,t=(0,o.t)(this.labelRotation),n=Math.abs(Math.cos(t)),s=Math.abs(Math.sin(t)),i=this._getLabelSizes(),r=e.autoSkipPadding||0,a=i?i.widest.width+r:0,l=i?i.highest.height+r:0;return this.isHorizontal()?l*n>a*s?a/n:l/s:l*s<a*n?l/n:a/s}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this.axis,n=this.chart,s=this.options,{grid:i,position:r,border:a}=s,l=i.offset,c=this.isHorizontal(),u=this.ticks.length+(l?1:0),d=Pe(i),h=[],p=a.setContext(this.getContext()),f=p.display?p.width:0,m=f/2,g=function(e){return(0,o.X)(n,e,f)};let b,v,y,_,x,w,S,k,j,O,C,E;if("top"===r)b=g(this.bottom),w=this.bottom-d,k=b-m,O=g(e.top)+m,E=e.bottom;else if("bottom"===r)b=g(this.top),O=e.top,E=g(e.bottom)-m,w=b+m,k=this.top+d;else if("left"===r)b=g(this.right),x=this.right-d,S=b-m,j=g(e.left)+m,C=e.right;else if("right"===r)b=g(this.left),j=e.left,C=g(e.right)-m,x=b+m,S=this.left+d;else if("x"===t){if("center"===r)b=g((e.top+e.bottom)/2+.5);else if((0,o.i)(r)){const e=Object.keys(r)[0],t=r[e];b=g(this.chart.scales[e].getPixelForValue(t))}O=e.top,E=e.bottom,w=b+m,k=w+d}else if("y"===t){if("center"===r)b=g((e.left+e.right)/2);else if((0,o.i)(r)){const e=Object.keys(r)[0],t=r[e];b=g(this.chart.scales[e].getPixelForValue(t))}x=b-m,S=x-d,j=e.left,C=e.right}const A=(0,o.v)(s.ticks.maxTicksLimit,u),P=Math.max(1,Math.ceil(u/A));for(v=0;v<u;v+=P){const e=this.getContext(v),t=i.setContext(e),s=a.setContext(e),r=t.lineWidth,u=t.color,d=s.dash||[],p=s.dashOffset,f=t.tickWidth,m=t.tickColor,g=t.tickBorderDash||[],b=t.tickBorderDashOffset;y=Ae(this,v,l),void 0!==y&&(_=(0,o.X)(n,y,r),c?x=S=j=C=_:w=k=O=E=_,h.push({tx1:x,ty1:w,tx2:S,ty2:k,x1:j,y1:O,x2:C,y2:E,width:r,color:u,borderDash:d,borderDashOffset:p,tickWidth:f,tickColor:m,tickBorderDash:g,tickBorderDashOffset:b}))}return this._ticksLength=u,this._borderValue=b,h}_computeLabelItems(e){const t=this.axis,n=this.options,{position:s,ticks:i}=n,r=this.isHorizontal(),a=this.ticks,{align:l,crossAlign:c,padding:u,mirror:d}=i,h=Pe(n.grid),p=h+u,f=d?-u:p,m=-(0,o.t)(this.labelRotation),g=[];let b,v,y,_,x,w,S,k,j,O,C,E,A="middle";if("top"===s)w=this.bottom-f,S=this._getXAxisLabelAlignment();else if("bottom"===s)w=this.top+f,S=this._getXAxisLabelAlignment();else if("left"===s){const e=this._getYAxisLabelAlignment(h);S=e.textAlign,x=e.x}else if("right"===s){const e=this._getYAxisLabelAlignment(h);S=e.textAlign,x=e.x}else if("x"===t){if("center"===s)w=(e.top+e.bottom)/2+p;else if((0,o.i)(s)){const e=Object.keys(s)[0],t=s[e];w=this.chart.scales[e].getPixelForValue(t)+p}S=this._getXAxisLabelAlignment()}else if("y"===t){if("center"===s)x=(e.left+e.right)/2-p;else if((0,o.i)(s)){const e=Object.keys(s)[0],t=s[e];x=this.chart.scales[e].getPixelForValue(t)}S=this._getYAxisLabelAlignment(h).textAlign}"y"===t&&("start"===l?A="top":"end"===l&&(A="bottom"));const P=this._getLabelSizes();for(b=0,v=a.length;b<v;++b){y=a[b],_=y.label;const e=i.setContext(this.getContext(b));k=this.getPixelForTick(b)+i.labelOffset,j=this._resolveTickFontOptions(b),O=j.lineHeight,C=(0,o.b)(_)?_.length:1;const t=C/2,n=e.color,l=e.textStrokeColor,u=e.textStrokeWidth;let h,p=S;if(r?(x=k,"inner"===S&&(p=b===v-1?this.options.reverse?"left":"right":0===b?this.options.reverse?"right":"left":"center"),E="top"===s?"near"===c||0!==m?-C*O+O/2:"center"===c?-P.highest.height/2-t*O+O:-P.highest.height+O/2:"near"===c||0!==m?O/2:"center"===c?P.highest.height/2-t*O:P.highest.height-C*O,d&&(E*=-1),0===m||e.showLabelBackdrop||(x+=O/2*Math.sin(m))):(w=k,E=(1-C)*O/2),e.showLabelBackdrop){const t=(0,o.E)(e.backdropPadding),n=P.heights[b],s=P.widths[b];let i=E-t.top,r=0-t.left;switch(A){case"middle":i-=n/2;break;case"bottom":i-=n}switch(S){case"center":r-=s/2;break;case"right":r-=s}h={left:r,top:i,width:s+t.width,height:n+t.height,color:e.backdropColor}}g.push({label:_,font:j,textOffset:E,options:{rotation:m,color:n,strokeColor:l,strokeWidth:u,textAlign:p,textBaseline:A,translation:[x,w],backdrop:h}})}return g}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-(0,o.t)(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align?n="right":"inner"===t.align&&(n="inner"),n}_getYAxisLabelAlignment(e){const{position:t,ticks:{crossAlign:n,mirror:o,padding:s}}=this.options,i=e+s,r=this._getLabelSizes().widest.width;let a,l;return"left"===t?o?(l=this.right+s,"near"===n?a="left":"center"===n?(a="center",l+=r/2):(a="right",l+=r)):(l=this.right-i,"near"===n?a="right":"center"===n?(a="center",l-=r/2):(a="left",l=this.left)):"right"===t?o?(l=this.left+s,"near"===n?a="right":"center"===n?(a="center",l-=r/2):(a="left",l-=r)):(l=this.left+i,"near"===n?a="left":"center"===n?(a="center",l+=r/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const e=this.chart,t=this.options.position;return"left"===t||"right"===t?{top:0,left:this.left,bottom:e.height,right:this.right}:"top"===t||"bottom"===t?{top:this.top,left:0,bottom:this.bottom,right:e.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:o,width:s,height:i}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,o,s,i),e.restore())}getLineWidthForValue(e){const t=this.options.grid;if(!this._isVisible()||!t.display)return 0;const n=this.ticks.findIndex((t=>t.value===e));return n>=0?t.setContext(this.getContext(n)).lineWidth:0}drawGrid(e){const t=this.options.grid,n=this.ctx,o=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(e));let s,i;const r=(e,t,o)=>{o.width&&o.color&&(n.save(),n.lineWidth=o.width,n.strokeStyle=o.color,n.setLineDash(o.borderDash||[]),n.lineDashOffset=o.borderDashOffset,n.beginPath(),n.moveTo(e.x,e.y),n.lineTo(t.x,t.y),n.stroke(),n.restore())};if(t.display)for(s=0,i=o.length;s<i;++s){const e=o[s];t.drawOnChartArea&&r({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),t.drawTicks&&r({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const{chart:e,ctx:t,options:{border:n,grid:s}}=this,i=n.setContext(this.getContext()),r=n.display?i.width:0;if(!r)return;const a=s.setContext(this.getContext(0)).lineWidth,l=this._borderValue;let c,u,d,h;this.isHorizontal()?(c=(0,o.X)(e,this.left,r)-r/2,u=(0,o.X)(e,this.right,a)+a/2,d=h=l):(d=(0,o.X)(e,this.top,r)-r/2,h=(0,o.X)(e,this.bottom,a)+a/2,c=u=l),t.save(),t.lineWidth=i.width,t.strokeStyle=i.color,t.beginPath(),t.moveTo(c,d),t.lineTo(u,h),t.stroke(),t.restore()}drawLabels(e){if(!this.options.ticks.display)return;const t=this.ctx,n=this._computeLabelArea();n&&(0,o.Y)(t,n);const s=this.getLabelItems(e);for(const e of s){const n=e.options,s=e.font,i=e.label,r=e.textOffset;(0,o.Z)(t,i,0,r,s,n)}n&&(0,o.$)(t)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:s}}=this;if(!n.display)return;const i=(0,o.a0)(n.font),r=(0,o.E)(n.padding),a=n.align;let l=i.lineHeight/2;"bottom"===t||"center"===t||(0,o.i)(t)?(l+=r.bottom,(0,o.b)(n.text)&&(l+=i.lineHeight*(n.text.length-1))):l+=r.top;const{titleX:c,titleY:u,maxWidth:d,rotation:h}=function(e,t,n,s){const{top:i,left:r,bottom:a,right:l,chart:c}=e,{chartArea:u,scales:d}=c;let h,p,f,m=0;const g=a-i,b=l-r;if(e.isHorizontal()){if(p=(0,o.a2)(s,r,l),(0,o.i)(n)){const e=Object.keys(n)[0],o=n[e];f=d[e].getPixelForValue(o)+g-t}else f="center"===n?(u.bottom+u.top)/2+g-t:Oe(e,n,t);h=l-r}else{if((0,o.i)(n)){const e=Object.keys(n)[0],o=n[e];p=d[e].getPixelForValue(o)-b+t}else p="center"===n?(u.left+u.right)/2-b+t:Oe(e,n,t);f=(0,o.a2)(s,a,i),m="left"===n?-o.H:o.H}return{titleX:p,titleY:f,maxWidth:h,rotation:m}}(this,l,t,a);(0,o.Z)(e,n.text,0,0,i,{color:n.color,maxWidth:d,rotation:h,textAlign:Me(a,t,s),textBaseline:"middle",translation:[c,u]})}draw(e){this._isVisible()&&(this.drawBackground(),this.drawGrid(e),this.drawBorder(),this.drawTitle(),this.drawLabels(e))}_layers(){const e=this.options,t=e.ticks&&e.ticks.z||0,n=(0,o.v)(e.grid&&e.grid.z,-1),s=(0,o.v)(e.border&&e.border.z,0);return this._isVisible()&&this.draw===Re.prototype.draw?[{z:n,draw:e=>{this.drawBackground(),this.drawGrid(e),this.drawTitle()}},{z:s,draw:()=>{this.drawBorder()}},{z:t,draw:e=>{this.drawLabels(e)}}]:[{z:t,draw:e=>{this.draw(e)}}]}getMatchingVisibleMetas(e){const t=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",o=[];let s,i;for(s=0,i=t.length;s<i;++s){const i=t[s];i[n]!==this.id||e&&i.type!==e||o.push(i)}return o}_resolveTickFontOptions(e){const t=this.options.ticks.setContext(this.getContext(e));return(0,o.a0)(t.font)}_maxDigits(){const e=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/e}}class De{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=Object.getPrototypeOf(e);let n;(function(e){return"id"in e&&"defaults"in e})(t)&&(n=this.register(t));const s=this.items,i=e.id,r=this.scope+"."+i;if(!i)throw new Error("class does not have id: "+e);return i in s||(s[i]=e,function(e,t,n){const s=(0,o.a4)(Object.create(null),[n?o.d.get(n):{},o.d.get(t),e.defaults]);o.d.set(t,s),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const s=n.split("."),i=s.pop(),r=[e].concat(s).join("."),a=t[n].split("."),l=a.pop(),c=a.join(".");o.d.route(r,i,c,l)}))}(t,e.defaultRoutes),e.descriptors&&o.d.describe(t,e.descriptors)}(e,r,n),this.override&&o.d.override(e.id,e.overrides)),r}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,s=this.scope;n in t&&delete t[n],s&&n in o.d[s]&&(delete o.d[s][n],this.override&&delete o.a3[n])}}class Le{constructor(){this.controllers=new De(x,"datasets",!0),this.elements=new De(ke,"elements"),this.plugins=new De(Object,"plugins"),this.scales=new De(Re,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){[...t].forEach((t=>{const s=n||this._getRegistryForType(t);n||s.isForType(t)||s===this.plugins&&t.id?this._exec(e,s,t):(0,o.F)(t,(t=>{const o=n||this._getRegistryForType(t);this._exec(e,o,t)}))}))}_exec(e,t,n){const s=(0,o.a5)(e);(0,o.Q)(n["before"+s],[],n),t[e](n),(0,o.Q)(n["after"+s],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const o=t.get(e);if(void 0===o)throw new Error('"'+e+'" is not a registered '+n+".");return o}}var Fe=new Le;class Ie{constructor(){this._init=[]}notify(e,t,n,o){"beforeInit"===t&&(this._init=this._createDescriptors(e,!0),this._notify(this._init,e,"install"));const s=o?this._descriptors(e).filter(o):this._descriptors(e),i=this._notify(s,e,t,n);return"afterDestroy"===t&&(this._notify(s,e,"stop"),this._notify(this._init,e,"uninstall")),i}_notify(e,t,n,s){s=s||{};for(const i of e){const e=i.plugin,r=e[n],a=[t,s,i.options];if(!1===(0,o.Q)(r,a,e)&&s.cancelable)return!1}return!0}invalidate(){(0,o.k)(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,s=(0,o.v)(n.options&&n.options.plugins,{}),i=function(e){const t={},n=[],o=Object.keys(Fe.plugins.items);for(let e=0;e<o.length;e++)n.push(Fe.getPlugin(o[e]));const s=e.plugins||[];for(let e=0;e<s.length;e++){const o=s[e];-1===n.indexOf(o)&&(n.push(o),t[o.id]=!0)}return{plugins:n,localIds:t}}(n);return!1!==s||t?function(e,{plugins:t,localIds:n},o,s){const i=[],r=e.getContext();for(const a of t){const t=a.id,l=Ne(o[t],s);null!==l&&i.push({plugin:a,options:Be(e.config,{plugin:a,local:n[t]},l,r)})}return i}(e,i,s,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,o=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(o(t,n),e,"stop"),this._notify(o(n,t),e,"start")}}function Ne(e,t){return t||!1!==e?!0===e?{}:e:null}function Be(e,{plugin:t,local:n},o,s){const i=e.pluginScopeKeys(t),r=e.getOptionScopes(o,i);return n&&t.defaults&&r.push(t.defaults),e.createResolver(r,s,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Ve(e,t){const n=o.d.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function $e(e){if("x"===e||"y"===e||"r"===e)return e}function ze(e,...t){if($e(e))return e;for(const o of t){const t=o.axis||("top"===(n=o.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.length>1&&$e(e[0].toLowerCase());if(t)return t}var n;throw new Error(`Cannot determine type of '${e}' axis. Please provide 'axis' or 'position' option.`)}function He(e,t,n){if(n[t+"AxisID"]===e)return{axis:t}}function Ue(e){const t=e.options||(e.options={});t.plugins=(0,o.v)(t.plugins,{}),t.scales=function(e,t){const n=o.a3[e.type]||{scales:{}},s=t.scales||{},i=Ve(e.type,t),r=Object.create(null);return Object.keys(s).forEach((t=>{const a=s[t];if(!(0,o.i)(a))return console.error(`Invalid scale configuration for scale: ${t}`);if(a._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const l=ze(t,a,function(e,t){if(t.data&&t.data.datasets){const n=t.data.datasets.filter((t=>t.xAxisID===e||t.yAxisID===e));if(n.length)return He(e,"x",n[0])||He(e,"y",n[0])}return{}}(t,e),o.d.scales[a.type]),c=function(e,t){return e===t?"_index_":"_value_"}(l,i),u=n.scales||{};r[t]=(0,o.ab)(Object.create(null),[{axis:l},a,u[l],u[c]])})),e.data.datasets.forEach((n=>{const i=n.type||e.type,a=n.indexAxis||Ve(i,t),l=(o.a3[i]||{}).scales||{};Object.keys(l).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,a),i=n[t+"AxisID"]||t;r[i]=r[i]||Object.create(null),(0,o.ab)(r[i],[{axis:t},s[i],l[e]])}))})),Object.keys(r).forEach((e=>{const t=r[e];(0,o.ab)(t,[o.d.scales[t.type],o.d.scale])})),r}(e,t)}function We(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const Ge=new Map,Ye=new Set;function qe(e,t){let n=Ge.get(e);return n||(n=t(),Ge.set(e,n),Ye.add(n)),n}const Ke=(e,t,n)=>{const s=(0,o.f)(t,n);void 0!==s&&e.add(s)};class Je{constructor(e){this._config=function(e){return(e=e||{}).data=We(e.data),Ue(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=We(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),Ue(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return qe(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return qe(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return qe(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return qe(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let o=n.get(e);return o&&!t||(o=new Map,n.set(e,o)),o}getOptionScopes(e,t,n){const{options:s,type:i}=this,r=this._cachedScopes(e,n),a=r.get(t);if(a)return a;const l=new Set;t.forEach((t=>{e&&(l.add(e),t.forEach((t=>Ke(l,e,t)))),t.forEach((e=>Ke(l,s,e))),t.forEach((e=>Ke(l,o.a3[i]||{},e))),t.forEach((e=>Ke(l,o.d,e))),t.forEach((e=>Ke(l,o.a6,e)))}));const c=Array.from(l);return 0===c.length&&c.push(Object.create(null)),Ye.has(t)&&r.set(t,c),c}chartOptionScopes(){const{options:e,type:t}=this;return[e,o.a3[t]||{},o.d.datasets[t]||{},{type:t},o.d,o.a6]}resolveNamedOptions(e,t,n,s=[""]){const i={$shared:!0},{resolver:r,subPrefixes:a}=Xe(this._resolverCache,e,s);let l=r;if(function(e,t){const{isScriptable:n,isIndexable:s}=(0,o.aa)(e);for(const i of t){const t=n(i),r=s(i),a=(r||t)&&e[i];if(t&&((0,o.a7)(a)||Qe(a))||r&&(0,o.b)(a))return!0}return!1}(r,t)){i.$shared=!1,n=(0,o.a7)(n)?n():n;const t=this.createResolver(e,n,a);l=(0,o.a8)(r,n,t)}for(const e of t)i[e]=l[e];return i}createResolver(e,t,n=[""],s){const{resolver:i}=Xe(this._resolverCache,e,n);return(0,o.i)(t)?(0,o.a8)(i,t,void 0,s):i}}function Xe(e,t,n){let s=e.get(t);s||(s=new Map,e.set(t,s));const i=n.join();let r=s.get(i);return r||(r={resolver:(0,o.a9)(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},s.set(i,r)),r}const Qe=e=>(0,o.i)(e)&&Object.getOwnPropertyNames(e).reduce(((t,n)=>t||(0,o.a7)(e[n])),!1),Ze=["top","bottom","left","right","chartArea"];function et(e,t){return"top"===e||"bottom"===e||-1===Ze.indexOf(e)&&"x"===t}function tt(e,t){return function(n,o){return n[e]===o[e]?n[t]-o[t]:n[e]-o[e]}}function nt(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),(0,o.Q)(n&&n.onComplete,[e],t)}function ot(e){const t=e.chart,n=t.options.animation;(0,o.Q)(n&&n.onProgress,[e],t)}function st(e){return(0,o.M)()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const it={},rt=e=>{const t=st(e);return Object.values(it).filter((e=>e.canvas===t)).pop()};function at(e,t,n){const o=Object.keys(e);for(const s of o){const o=+s;if(o>=t){const i=e[s];delete e[s],(n>0||o>t)&&(e[o+n]=i)}}}function lt(e,t,n){return e.options.clip?e[n]:t[n]}class ct{static defaults=o.d;static instances=it;static overrides=o.a3;static registry=Fe;static version="4.4.0";static getChart=rt;static register(...e){Fe.add(...e),ut()}static unregister(...e){Fe.remove(...e),ut()}constructor(e,t){const n=this.config=new Je(t),s=st(e),r=rt(s);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const a=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||Se(s)),this.platform.updateConfig(n);const l=this.platform.acquireContext(s,a.aspectRatio),c=l&&l.canvas,u=c&&c.height,d=c&&c.width;this.id=(0,o.ac)(),this.ctx=l,this.canvas=c,this.width=d,this.height=u,this._options=a,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Ie,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=(0,o.ad)((e=>this.update(e)),a.resizeDelay||0),this._dataChanges=[],it[this.id]=this,l&&c?(i.listen(this,"complete",nt),i.listen(this,"progress",ot),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:s,_aspectRatio:i}=this;return(0,o.k)(e)?t&&i?i:s?n/s:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}get registry(){return Fe}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():(0,o.ae)(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return(0,o.af)(this.canvas,this.ctx),this}stop(){return i.stop(this),this}resize(e,t){i.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this.options,s=this.canvas,i=n.maintainAspectRatio&&this.aspectRatio,r=this.platform.getMaximumSize(s,e,t,i),a=n.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=r.width,this.height=r.height,this._aspectRatio=this.aspectRatio,(0,o.ae)(this,a,!0)&&(this.notifyPlugins("resize",{size:r}),(0,o.Q)(n.onResize,[this,r],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const e=this.options.scales||{};(0,o.F)(e,((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this.options,t=e.scales,n=this.scales,s=Object.keys(n).reduce(((e,t)=>(e[t]=!1,e)),{});let i=[];t&&(i=i.concat(Object.keys(t).map((e=>{const n=t[e],o=ze(e,n),s="r"===o,i="x"===o;return{options:n,dposition:s?"chartArea":i?"bottom":"left",dtype:s?"radialLinear":i?"category":"linear"}})))),(0,o.F)(i,(t=>{const i=t.options,r=i.id,a=ze(r,i),l=(0,o.v)(i.type,t.dtype);void 0!==i.position&&et(i.position,a)===et(t.dposition)||(i.position=t.dposition),s[r]=!0;let c=null;r in n&&n[r].type===l?c=n[r]:(c=new(Fe.getScale(l))({id:r,type:l,ctx:this.ctx,chart:this}),n[c.id]=c),c.init(i,e)})),(0,o.F)(s,((e,t)=>{e||delete n[t]})),(0,o.F)(n,(e=>{ie.configure(this,e,e.options),ie.addBox(this,e)}))}_updateMetasets(){const e=this._metasets,t=this.data.datasets.length,n=e.length;if(e.sort(((e,t)=>e.index-t.index)),n>t){for(let e=t;e<n;++e)this._destroyDatasetMeta(e);e.splice(t,n-t)}this._sortedMetasets=e.slice(0).sort(tt("order","index"))}_removeUnreferencedMetasets(){const{_metasets:e,data:{datasets:t}}=this;e.length>t.length&&delete this._stacks,e.forEach(((e,n)=>{0===t.filter((t=>t===e._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const e=[],t=this.data.datasets;let n,s;for(this._removeUnreferencedMetasets(),n=0,s=t.length;n<s;n++){const s=t[n];let i=this.getDatasetMeta(n);const r=s.type||this.config.type;if(i.type&&i.type!==r&&(this._destroyDatasetMeta(n),i=this.getDatasetMeta(n)),i.type=r,i.indexAxis=s.indexAxis||Ve(r,this.options),i.order=s.order||0,i.index=n,i.label=""+s.label,i.visible=this.isDatasetVisible(n),i.controller)i.controller.updateIndex(n),i.controller.linkScales();else{const t=Fe.getController(r),{datasetElementType:s,dataElementType:a}=o.d.datasets[r];Object.assign(t,{dataElementType:Fe.getElement(a),datasetElementType:s&&Fe.getElement(s)}),i.controller=new t(this,n),e.push(i.controller)}}return this._updateMetasets(),e}_resetElements(){(0,o.F)(this.data.datasets,((e,t)=>{this.getDatasetMeta(t).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this.config;t.update();const n=this._options=t.createResolver(t.chartOptionScopes(),this.getContext()),s=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const i=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let r=0;for(let e=0,t=this.data.datasets.length;e<t;e++){const{controller:t}=this.getDatasetMeta(e),n=!s&&-1===i.indexOf(t);t.buildOrUpdateElements(n),r=Math.max(+t.getMaxOverflow(),r)}r=this._minPadding=n.layout.autoPadding?r:0,this._updateLayout(r),s||(0,o.F)(i,(e=>{e.reset()})),this._updateDatasets(e),this.notifyPlugins("afterUpdate",{mode:e}),this._layers.sort(tt("z","_idx"));const{_active:a,_lastEvent:l}=this;l?this._eventHandler(l,!0):a.length&&this._updateHoverStyles(a,a,!0),this.render()}_updateScales(){(0,o.F)(this.scales,(e=>{ie.removeBox(this,e)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const e=this.options,t=new Set(Object.keys(this._listeners)),n=new Set(e.events);(0,o.ag)(t,n)&&!!this._responsiveListeners===e.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:e}=this,t=this._getUniformDataChanges()||[];for(const{method:n,start:o,count:s}of t)at(e,o,"_removeElements"===n?-s:s)}_getUniformDataChanges(){const e=this._dataChanges;if(!e||!e.length)return;this._dataChanges=[];const t=this.data.datasets.length,n=t=>new Set(e.filter((e=>e[0]===t)).map(((e,t)=>t+","+e.splice(1).join(",")))),s=n(0);for(let e=1;e<t;e++)if(!(0,o.ag)(s,n(e)))return;return Array.from(s).map((e=>e.split(","))).map((e=>({method:e[1],start:+e[2],count:+e[3]})))}_updateLayout(e){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;ie.update(this,this.width,this.height,e);const t=this.chartArea,n=t.width<=0||t.height<=0;this._layers=[],(0,o.F)(this.boxes,(e=>{n&&"chartArea"===e.position||(e.configure&&e.configure(),this._layers.push(...e._layers()))}),this),this._layers.forEach(((e,t)=>{e._idx=t})),this.notifyPlugins("afterLayout")}_updateDatasets(e){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let e=0,t=this.data.datasets.length;e<t;++e)this.getDatasetMeta(e).controller.configure();for(let t=0,n=this.data.datasets.length;t<n;++t)this._updateDataset(t,(0,o.a7)(e)?e({datasetIndex:t}):e);this.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this.getDatasetMeta(e),o={meta:n,index:e,mode:t,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",o)&&(n.controller._update(t),o.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",o))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(i.has(this)?this.attached&&!i.running(this)&&i.start(this):(this.draw(),nt({chart:this})))}draw(){let e;if(this._resizeBeforeDraw){const{width:e,height:t}=this._resizeBeforeDraw;this._resize(e,t),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const t=this._layers;for(e=0;e<t.length&&t[e].z<=0;++e)t[e].draw(this.chartArea);for(this._drawDatasets();e<t.length;++e)t[e].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let o,s;for(o=0,s=t.length;o<s;++o){const s=t[o];e&&!s.visible||n.push(s)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;t>=0;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this.ctx,n=e._clip,s=!n.disabled,i=function(e,t){const{xScale:n,yScale:o}=e;return n&&o?{left:lt(n,t,"left"),right:lt(n,t,"right"),top:lt(o,t,"top"),bottom:lt(o,t,"bottom")}:t}(e,this.chartArea),r={meta:e,index:e.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",r)&&(s&&(0,o.Y)(t,{left:!1===n.left?0:i.left-n.left,right:!1===n.right?this.width:i.right+n.right,top:!1===n.top?0:i.top-n.top,bottom:!1===n.bottom?this.height:i.bottom+n.bottom}),e.controller.draw(),s&&(0,o.$)(t),r.cancelable=!1,this.notifyPlugins("afterDatasetDraw",r))}isPointInArea(e){return(0,o.C)(e,this.chartArea,this._minPadding)}getElementsAtEventForMode(e,t,n,o){const s=Y.modes[t];return"function"==typeof s?s(this,e,n,o):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let o=n.filter((e=>e&&e._dataset===t)).pop();return o||(o={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(o)),o}getContext(){return this.$context||(this.$context=(0,o.j)(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateVisibility(e,t,n){const s=n?"show":"hide",i=this.getDatasetMeta(e),r=i.controller._resolveAnimations(void 0,s);(0,o.h)(t)?(i.data[t].hidden=!n,this.update()):(this.setDatasetVisibility(e,n),r.update(i,{visible:n}),this.update((t=>t.datasetIndex===e?s:void 0)))}hide(e,t){this._updateVisibility(e,t,!1)}show(e,t){this._updateVisibility(e,t,!0)}_destroyDatasetMeta(e){const t=this._metasets[e];t&&t.controller&&t.controller._destroy(),delete this._metasets[e]}_stop(){let e,t;for(this.stop(),i.remove(this),e=0,t=this.data.datasets.length;e<t;++e)this._destroyDatasetMeta(e)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:e,ctx:t}=this;this._stop(),this.config.clearCache(),e&&(this.unbindEvents(),(0,o.af)(e,t),this.platform.releaseContext(t),this.canvas=null,this.ctx=null),delete it[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this._listeners,t=this.platform,n=(n,o)=>{t.addEventListener(this,n,o),e[n]=o},s=(e,t,n)=>{e.offsetX=t,e.offsetY=n,this._eventHandler(e)};(0,o.F)(this.options.events,(e=>n(e,s)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const e=this._responsiveListeners,t=this.platform,n=(n,o)=>{t.addEventListener(this,n,o),e[n]=o},o=(n,o)=>{e[n]&&(t.removeEventListener(this,n,o),delete e[n])},s=(e,t)=>{this.canvas&&this.resize(e,t)};let i;const r=()=>{o("attach",r),this.attached=!0,this.resize(),n("resize",s),n("detach",i)};i=()=>{this.attached=!1,o("resize",s),this._stop(),this._resize(0,0),n("attach",r)},t.isAttached(this.canvas)?r():i()}unbindEvents(){(0,o.F)(this._listeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._listeners={},(0,o.F)(this._responsiveListeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._responsiveListeners=void 0}updateHoverStyle(e,t,n){const o=n?"set":"remove";let s,i,r,a;for("dataset"===t&&(s=this.getDatasetMeta(e[0].datasetIndex),s.controller["_"+o+"DatasetHoverStyle"]()),r=0,a=e.length;r<a;++r){i=e[r];const t=i&&this.getDatasetMeta(i.datasetIndex).controller;t&&t[o+"HoverStyle"](i.element,i.datasetIndex,i.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this._active||[],n=e.map((({datasetIndex:e,index:t})=>{const n=this.getDatasetMeta(e);if(!n)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:n.data[t],index:t}}));!(0,o.ah)(n,t)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,t))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}isPluginEnabled(e){return 1===this._plugins._cache.filter((t=>t.plugin.id===e)).length}_updateHoverStyles(e,t,n){const o=this.options.hover,s=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),i=s(t,e),r=n?e:s(e,t);i.length&&this.updateHoverStyle(i,o.mode,!1),r.length&&o.mode&&this.updateHoverStyle(r,o.mode,!0)}_eventHandler(e,t){const n={event:e,replay:t,cancelable:!0,inChartArea:this.isPointInArea(e)},o=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1===this.notifyPlugins("beforeEvent",n,o))return;const s=this._handleEvent(e,t,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,o),(s||n.changed)&&this.render(),this}_handleEvent(e,t,n){const{_active:s=[],options:i}=this,r=t,a=this._getActiveElements(e,s,n,r),l=(0,o.ai)(e),c=function(e,t,n,o){return n&&"mouseout"!==e.type?o?t:e:null}(e,this._lastEvent,n,l);n&&(this._lastEvent=null,(0,o.Q)(i.onHover,[e,a,this],this),l&&(0,o.Q)(i.onClick,[e,a,this],this));const u=!(0,o.ah)(a,s);return(u||t)&&(this._active=a,this._updateHoverStyles(a,s,t)),this._lastEvent=c,u}_getActiveElements(e,t,n,o){if("mouseout"===e.type)return[];if(!n)return t;const s=this.options.hover;return this.getElementsAtEventForMode(e,s.mode,s,o)}}function ut(){return(0,o.F)(ct.instances,(e=>e._plugins.invalidate()))}function dt(e,t,n,o){return{x:n+e*Math.cos(t),y:o+e*Math.sin(t)}}function ht(e,t,n,s,i,r){const{x:a,y:l,startAngle:c,pixelMargin:u,innerRadius:d}=t,h=Math.max(t.outerRadius+s+n-u,0),p=d>0?d+s+n+u:0;let f=0;const m=i-c;if(s){const e=((d>0?d-s:0)+(h>0?h-s:0))/2;f=(m-(0!==e?m*e/(e+s):m))/2}const g=(m-Math.max(.001,m*h-n/o.P)/h)/2,b=c+g+f,v=i-g-f,{outerStart:y,outerEnd:_,innerStart:x,innerEnd:w}=function(e,t,n,s){const i=(r=e.options.borderRadius,(0,o.ak)(r,["outerStart","outerEnd","innerStart","innerEnd"]));var r;const a=(n-t)/2,l=Math.min(a,s*t/2),c=e=>{const t=(n-Math.min(a,e))*s/2;return(0,o.S)(e,0,Math.min(a,t))};return{outerStart:c(i.outerStart),outerEnd:c(i.outerEnd),innerStart:(0,o.S)(i.innerStart,0,l),innerEnd:(0,o.S)(i.innerEnd,0,l)}}(t,p,h,v-b),S=h-y,k=h-_,j=b+y/S,O=v-_/k,C=p+x,E=p+w,A=b+x/C,P=v-w/E;if(e.beginPath(),r){const t=(j+O)/2;if(e.arc(a,l,h,j,t),e.arc(a,l,h,t,O),_>0){const t=dt(k,O,a,l);e.arc(t.x,t.y,_,O,v+o.H)}const n=dt(E,v,a,l);if(e.lineTo(n.x,n.y),w>0){const t=dt(E,P,a,l);e.arc(t.x,t.y,w,v+o.H,P+Math.PI)}const s=(v-w/p+(b+x/p))/2;if(e.arc(a,l,p,v-w/p,s,!0),e.arc(a,l,p,s,b+x/p,!0),x>0){const t=dt(C,A,a,l);e.arc(t.x,t.y,x,A+Math.PI,b-o.H)}const i=dt(S,b,a,l);if(e.lineTo(i.x,i.y),y>0){const t=dt(S,j,a,l);e.arc(t.x,t.y,y,b-o.H,j)}}else{e.moveTo(a,l);const t=Math.cos(j)*h+a,n=Math.sin(j)*h+l;e.lineTo(t,n);const o=Math.cos(O)*h+a,s=Math.sin(O)*h+l;e.lineTo(o,s)}e.closePath()}class pt extends ke{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const s=this.getProps(["x","y"],n),{angle:i,distance:r}=(0,o.D)(s,{x:e,y:t}),{startAngle:a,endAngle:l,innerRadius:c,outerRadius:u,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=(this.options.spacing+this.options.borderWidth)/2,p=(0,o.v)(d,l-a)>=o.T||(0,o.p)(i,a,l),f=(0,o.aj)(r,c+h,u+h);return p&&f}getCenterPoint(e){const{x:t,y:n,startAngle:o,endAngle:s,innerRadius:i,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],e),{offset:a,spacing:l}=this.options,c=(o+s)/2,u=(i+r+l+a)/2;return{x:t+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const{options:t,circumference:n}=this,s=(t.offset||0)/4,i=(t.spacing||0)/2,r=t.circular;if(this.pixelMargin="inner"===t.borderAlign?.33:0,this.fullCircles=n>o.T?Math.floor(n/o.T):0,0===n||this.innerRadius<0||this.outerRadius<0)return;e.save();const a=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(a)*s,Math.sin(a)*s);const l=s*(1-Math.sin(Math.min(o.P,n||0)));e.fillStyle=t.backgroundColor,e.strokeStyle=t.borderColor,function(e,t,n,s,i){const{fullCircles:r,startAngle:a,circumference:l}=t;let c=t.endAngle;if(r){ht(e,t,n,s,c,i);for(let t=0;t<r;++t)e.fill();isNaN(l)||(c=a+(l%o.T||o.T))}ht(e,t,n,s,c,i),e.fill()}(e,this,l,i,r),function(e,t,n,s,i){const{fullCircles:r,startAngle:a,circumference:l,options:c}=t,{borderWidth:u,borderJoinStyle:d,borderDash:h,borderDashOffset:p}=c,f="inner"===c.borderAlign;if(!u)return;e.setLineDash(h||[]),e.lineDashOffset=p,f?(e.lineWidth=2*u,e.lineJoin=d||"round"):(e.lineWidth=u,e.lineJoin=d||"bevel");let m=t.endAngle;if(r){ht(e,t,n,s,m,i);for(let t=0;t<r;++t)e.stroke();isNaN(l)||(m=a+(l%o.T||o.T))}f&&function(e,t,n){const{startAngle:s,pixelMargin:i,x:r,y:a,outerRadius:l,innerRadius:c}=t;let u=i/l;e.beginPath(),e.arc(r,a,l,s-u,n+u),c>i?(u=i/c,e.arc(r,a,c,n+u,s-u,!0)):e.arc(r,a,i,n+o.H,s-o.H),e.closePath(),e.clip()}(e,t,m),r||(ht(e,t,n,s,m,i),e.stroke())}(e,this,l,i,r),e.restore()}}function ft(e,t,n=t){e.lineCap=(0,o.v)(n.borderCapStyle,t.borderCapStyle),e.setLineDash((0,o.v)(n.borderDash,t.borderDash)),e.lineDashOffset=(0,o.v)(n.borderDashOffset,t.borderDashOffset),e.lineJoin=(0,o.v)(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=(0,o.v)(n.borderWidth,t.borderWidth),e.strokeStyle=(0,o.v)(n.borderColor,t.borderColor)}function mt(e,t,n){e.lineTo(n.x,n.y)}function gt(e,t,n={}){const o=e.length,{start:s=0,end:i=o-1}=n,{start:r,end:a}=t,l=Math.max(s,r),c=Math.min(i,a),u=s<r&&i<r||s>a&&i>a;return{count:o,start:l,loop:t.loop,ilen:c<l&&!u?o+c-l:c-l}}function bt(e,t,n,s){const{points:i,options:r}=t,{count:a,start:l,loop:c,ilen:u}=gt(i,n,s),d=function(e){return e.stepped?o.ar:e.tension||"monotone"===e.cubicInterpolationMode?o.as:mt}(r);let h,p,f,{move:m=!0,reverse:g}=s||{};for(h=0;h<=u;++h)p=i[(l+(g?u-h:h))%a],p.skip||(m?(e.moveTo(p.x,p.y),m=!1):d(e,f,p,g,r.stepped),f=p);return c&&(p=i[(l+(g?u:0))%a],d(e,f,p,g,r.stepped)),!!c}function vt(e,t,n,o){const s=t.points,{count:i,start:r,ilen:a}=gt(s,n,o),{move:l=!0,reverse:c}=o||{};let u,d,h,p,f,m,g=0,b=0;const v=e=>(r+(c?a-e:e))%i,y=()=>{p!==f&&(e.lineTo(g,f),e.lineTo(g,p),e.lineTo(g,m))};for(l&&(d=s[v(0)],e.moveTo(d.x,d.y)),u=0;u<=a;++u){if(d=s[v(u)],d.skip)continue;const t=d.x,n=d.y,o=0|t;o===h?(n<p?p=n:n>f&&(f=n),g=(b*g+t)/++b):(y(),e.lineTo(t,n),h=o,b=0,p=f=n),m=n}y()}function yt(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?bt:vt}const _t="function"==typeof Path2D;class xt extends ke{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};constructor(e){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const s=n.spanGaps?this._loop:this._fullLoop;(0,o.al)(this._points,n,e,s,t),this._pointsUpdated=!0}}set points(e){this._points=e,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=(0,o.am)(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this.options,s=e[t],i=this.points,r=(0,o.an)(this,{property:t,start:s,end:s});if(!r.length)return;const a=[],l=function(e){return e.stepped?o.ao:e.tension||"monotone"===e.cubicInterpolationMode?o.ap:o.aq}(n);let c,u;for(c=0,u=r.length;c<u;++c){const{start:o,end:u}=r[c],d=i[o],h=i[u];if(d===h){a.push(d);continue}const p=l(d,h,Math.abs((s-d[t])/(h[t]-d[t])),n.stepped);p[t]=e[t],a.push(p)}return 1===a.length?a[0]:a}pathSegment(e,t,n){return yt(this)(e,this,t,n)}path(e,t,n){const o=this.segments,s=yt(this);let i=this._loop;t=t||0,n=n||this.points.length-t;for(const r of o)i&=s(e,this,r,{start:t,end:t+n-1});return!!i}draw(e,t,n,o){const s=this.options||{};(this.points||[]).length&&s.borderWidth&&(e.save(),function(e,t,n,o){_t&&!t.options.segment?function(e,t,n,o){let s=t._path;s||(s=t._path=new Path2D,t.path(s,n,o)&&s.closePath()),ft(e,t.options),e.stroke(s)}(e,t,n,o):function(e,t,n,o){const{segments:s,options:i}=t,r=yt(t);for(const a of s)ft(e,i,a.style),e.beginPath(),r(e,t,a,{start:n,end:n+o-1})&&e.closePath(),e.stroke()}(e,t,n,o)}(e,this,n,o),e.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function wt(e,t,n,o){const s=e.options,{[n]:i}=e.getProps([n],o);return Math.abs(t-i)<s.radius+s.hitRadius}class St extends ke{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const o=this.options,{x:s,y:i}=this.getProps(["x","y"],n);return Math.pow(e-s,2)+Math.pow(t-i,2)<Math.pow(o.hitRadius+o.radius,2)}inXRange(e,t){return wt(this,e,"x",t)}inYRange(e,t){return wt(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e,t){const n=this.options;this.skip||n.radius<.1||!(0,o.C)(this,t,this.size(n)/2)||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,(0,o.at)(e,n,this.x,this.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function kt(e,t){const{x:n,y:o,base:s,width:i,height:r}=e.getProps(["x","y","base","width","height"],t);let a,l,c,u,d;return e.horizontal?(d=r/2,a=Math.min(n,s),l=Math.max(n,s),c=o-d,u=o+d):(d=i/2,a=n-d,l=n+d,c=Math.min(o,s),u=Math.max(o,s)),{left:a,top:c,right:l,bottom:u}}function jt(e,t,n,s){return e?0:(0,o.S)(t,n,s)}function Ot(e,t,n,s){const i=null===t,r=null===n,a=e&&!(i&&r)&&kt(e,s);return a&&(i||(0,o.aj)(t,a.left,a.right))&&(r||(0,o.aj)(n,a.top,a.bottom))}function Ct(e,t){e.rect(t.x,t.y,t.w,t.h)}function Et(e,t,n={}){const o=e.x!==n.x?-t:0,s=e.y!==n.y?-t:0,i=(e.x+e.w!==n.x+n.w?t:0)-o,r=(e.y+e.h!==n.y+n.h?t:0)-s;return{x:e.x+o,y:e.y+s,w:e.w+i,h:e.h+r,radius:e.radius}}class At extends ke{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,e&&Object.assign(this,e)}draw(e){const{inflateAmount:t,options:{borderColor:n,backgroundColor:s}}=this,{inner:i,outer:r}=function(e){const t=kt(e),n=t.right-t.left,s=t.bottom-t.top,i=function(e,t,n){const s=e.options.borderWidth,i=e.borderSkipped,r=(0,o.av)(s);return{t:jt(i.top,r.top,0,n),r:jt(i.right,r.right,0,t),b:jt(i.bottom,r.bottom,0,n),l:jt(i.left,r.left,0,t)}}(e,n/2,s/2),r=function(e,t,n){const{enableBorderRadius:s}=e.getProps(["enableBorderRadius"]),i=e.options.borderRadius,r=(0,o.aw)(i),a=Math.min(t,n),l=e.borderSkipped,c=s||(0,o.i)(i);return{topLeft:jt(!c||l.top||l.left,r.topLeft,0,a),topRight:jt(!c||l.top||l.right,r.topRight,0,a),bottomLeft:jt(!c||l.bottom||l.left,r.bottomLeft,0,a),bottomRight:jt(!c||l.bottom||l.right,r.bottomRight,0,a)}}(e,n/2,s/2);return{outer:{x:t.left,y:t.top,w:n,h:s,radius:r},inner:{x:t.left+i.l,y:t.top+i.t,w:n-i.l-i.r,h:s-i.t-i.b,radius:{topLeft:Math.max(0,r.topLeft-Math.max(i.t,i.l)),topRight:Math.max(0,r.topRight-Math.max(i.t,i.r)),bottomLeft:Math.max(0,r.bottomLeft-Math.max(i.b,i.l)),bottomRight:Math.max(0,r.bottomRight-Math.max(i.b,i.r))}}}}(this),a=(l=r.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?o.au:Ct;var l;e.save(),r.w===i.w&&r.h===i.h||(e.beginPath(),a(e,Et(r,t,i)),e.clip(),a(e,Et(i,-t,r)),e.fillStyle=n,e.fill("evenodd")),e.beginPath(),a(e,Et(i,t)),e.fillStyle=s,e.fill(),e.restore()}inRange(e,t,n){return Ot(this,e,t,n)}inXRange(e,t){return Ot(this,e,null,t)}inYRange(e,t){return Ot(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:o,horizontal:s}=this.getProps(["x","y","base","horizontal"],e);return{x:s?(t+o)/2:t,y:s?n:(n+o)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}var Pt=Object.freeze({__proto__:null,ArcElement:pt,BarElement:At,LineElement:xt,PointElement:St});const Tt=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Mt=Tt.map((e=>e.replace("rgb(","rgba(").replace(")",", 0.5)")));function Rt(e){return Tt[e%Tt.length]}function Dt(e){return Mt[e%Mt.length]}function Lt(e){let t;for(t in e)if(e[t].borderColor||e[t].backgroundColor)return!0;return!1}var Ft={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(e,t,n){if(!n.enabled)return;const{data:{datasets:o},options:s}=e.config,{elements:i}=s;if(!n.forceOverride&&(Lt(o)||(r=s)&&(r.borderColor||r.backgroundColor)||i&&Lt(i)))return;var r;const a=function(e){let t=0;return(n,o)=>{const s=e.getDatasetMeta(o).controller;s instanceof M?t=function(e,t){return e.backgroundColor=e.data.map((()=>Rt(t++))),t}(n,t):s instanceof D?t=function(e,t){return e.backgroundColor=e.data.map((()=>Dt(t++))),t}(n,t):s&&(t=function(e,t){return e.borderColor=Rt(t),e.backgroundColor=Dt(t),++t}(n,t))}}(e);o.forEach(a)}};function It(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,writable:!0,value:t})}}function Nt(e){e.data.datasets.forEach((e=>{It(e)}))}var Bt={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Nt(e);const s=e.width;e.data.datasets.forEach(((t,i)=>{const{_data:r,indexAxis:a}=t,l=e.getDatasetMeta(i),c=r||t.data;if("y"===(0,o.a)([a,e.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const u=e.scales[l.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let d,{start:h,count:p}=function(e,t){const n=t.length;let s,i=0;const{iScale:r}=e,{min:a,max:l,minDefined:c,maxDefined:u}=r.getUserBounds();return c&&(i=(0,o.S)((0,o.B)(t,r.axis,a).lo,0,n-1)),s=u?(0,o.S)((0,o.B)(t,r.axis,l).hi+1,i,n)-i:n-i,{start:i,count:s}}(l,c);if(p<=(n.threshold||4*s))It(t);else{switch((0,o.k)(r)&&(t._data=c,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":d=function(e,t,n,o,s){const i=s.samples||o;if(i>=n)return e.slice(t,t+n);const r=[],a=(n-2)/(i-2);let l=0;const c=t+n-1;let u,d,h,p,f,m=t;for(r[l++]=e[m],u=0;u<i-2;u++){let o,s=0,i=0;const c=Math.floor((u+1)*a)+1+t,g=Math.min(Math.floor((u+2)*a)+1,n)+t,b=g-c;for(o=c;o<g;o++)s+=e[o].x,i+=e[o].y;s/=b,i/=b;const v=Math.floor(u*a)+1+t,y=Math.min(Math.floor((u+1)*a)+1,n)+t,{x:_,y:x}=e[m];for(h=p=-1,o=v;o<y;o++)p=.5*Math.abs((_-s)*(e[o].y-x)-(_-e[o].x)*(i-x)),p>h&&(h=p,d=e[o],f=o);r[l++]=d,m=f}return r[l++]=e[c],r}(c,h,p,s,n);break;case"min-max":d=function(e,t,n,s){let i,r,a,l,c,u,d,h,p,f,m=0,g=0;const b=[],v=t+n-1,y=e[t].x,_=e[v].x-y;for(i=t;i<t+n;++i){r=e[i],a=(r.x-y)/_*s,l=r.y;const t=0|a;if(t===c)l<p?(p=l,u=i):l>f&&(f=l,d=i),m=(g*m+r.x)/++g;else{const n=i-1;if(!(0,o.k)(u)&&!(0,o.k)(d)){const t=Math.min(u,d),o=Math.max(u,d);t!==h&&t!==n&&b.push({...e[t],x:m}),o!==h&&o!==n&&b.push({...e[o],x:m})}i>0&&n!==h&&b.push(e[n]),b.push(r),c=t,g=0,p=f=l,u=d=h=i}}return b}(c,h,p,s);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=d}}))},destroy(e){Nt(e)}};function Vt(e,t,n,s){if(s)return;let i=t[e],r=n[e];return"angle"===e&&(i=(0,o.ay)(i),r=(0,o.ay)(r)),{property:e,start:i,end:r}}function $t(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}function zt(e,t,n,o){return e&&t?o(e[n],t[n]):e?e[n]:t?t[n]:0}function Ht(e,t){let n=[],s=!1;return(0,o.b)(e)?(s=!0,n=e):n=function(e,t){const{x:n=null,y:o=null}=e||{},s=t.points,i=[];return t.segments.forEach((({start:e,end:t})=>{t=$t(e,t,s);const r=s[e],a=s[t];null!==o?(i.push({x:r.x,y:o}),i.push({x:a.x,y:o})):null!==n&&(i.push({x:n,y:r.y}),i.push({x:n,y:a.y}))})),i}(e,t),n.length?new xt({points:n,options:{tension:0},_loop:s,_fullLoop:s}):null}function Ut(e){return e&&!1!==e.fill}function Wt(e,t,n){let s=e[t].fill;const i=[t];let r;if(!n)return s;for(;!1!==s&&-1===i.indexOf(s);){if(!(0,o.g)(s))return s;if(r=e[s],!r)return!1;if(r.visible)return s;i.push(s),s=r.fill}return!1}function Gt(e,t,n){const s=function(e){const t=e.options,n=t.fill;let s=(0,o.v)(n&&n.target,n);return void 0===s&&(s=!!t.backgroundColor),!1!==s&&null!==s&&(!0===s?"origin":s)}(e);if((0,o.i)(s))return!isNaN(s.value)&&s;let i=parseFloat(s);return(0,o.g)(i)&&Math.floor(i)===i?function(e,t,n,o){return"-"!==e&&"+"!==e||(n=t+n),!(n===t||n<0||n>=o)&&n}(s[0],t,i,n):["origin","start","end","stack","shape"].indexOf(s)>=0&&s}function Yt(e,t,n){const o=[];for(let s=0;s<n.length;s++){const i=n[s],{first:r,last:a,point:l}=qt(i,t,"x");if(!(!l||r&&a))if(r)o.unshift(l);else if(e.push(l),!a)break}e.push(...o)}function qt(e,t,n){const s=e.interpolate(t,n);if(!s)return{};const i=s[n],r=e.segments,a=e.points;let l=!1,c=!1;for(let e=0;e<r.length;e++){const t=r[e],s=a[t.start][n],u=a[t.end][n];if((0,o.aj)(i,s,u)){l=i===s,c=i===u;break}}return{first:l,last:c,point:s}}class Kt{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:s,y:i,radius:r}=this;return t=t||{start:0,end:o.T},e.arc(s,i,r,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:o}=this,s=e.angle;return{x:t+Math.cos(s)*o,y:n+Math.sin(s)*o,angle:s}}}function Jt(e,t,n){const s=function(e){const{chart:t,fill:n,line:s}=e;if((0,o.g)(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{scale:t,index:n,line:o}=e,s=[],i=o.segments,r=o.points,a=function(e,t){const n=[],o=e.getMatchingVisibleMetas("line");for(let e=0;e<o.length;e++){const s=o[e];if(s.index===t)break;s.hidden||n.unshift(s.dataset)}return n}(t,n);a.push(Ht({x:null,y:t.bottom},o));for(let e=0;e<i.length;e++){const t=i[e];for(let e=t.start;e<=t.end;e++)Yt(s,r[e],a)}return new xt({points:s,options:{}})}(e);if("shape"===n)return!0;const i=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,s=t.options,i=t.getLabels().length,r=s.reverse?t.max:t.min,a=function(e,t,n){let s;return s="start"===e?n:"end"===e?t.options.reverse?t.min:t.max:(0,o.i)(e)?e.value:t.getBaseValue(),s}(n,t,r),l=[];if(s.grid.circular){const e=t.getPointPositionForValue(0,r);return new Kt({x:e.x,y:e.y,radius:t.getDistanceFromCenterForValue(a)})}for(let e=0;e<i;++e)l.push(t.getPointPositionForValue(e,a));return l}(e):function(e){const{scale:t={},fill:n}=e,s=function(e,t){let n=null;return"start"===e?n=t.bottom:"end"===e?n=t.top:(0,o.i)(e)?n=t.getPixelForValue(e.value):t.getBasePixel&&(n=t.getBasePixel()),n}(n,t);if((0,o.g)(s)){const e=t.isHorizontal();return{x:e?s:null,y:e?null:s}}return null}(e)}(e);return i instanceof Kt?i:Ht(i,s)}(t),{line:i,scale:r,axis:a}=t,l=i.options,c=l.fill,u=l.backgroundColor,{above:d=u,below:h=u}=c||{};s&&i.points.length&&((0,o.Y)(e,n),function(e,t){const{line:n,target:o,above:s,below:i,area:r,scale:a}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&i!==s&&(Xt(e,o,r.top),Qt(e,{line:n,target:o,color:s,scale:a,property:l}),e.restore(),e.save(),Xt(e,o,r.bottom)),Qt(e,{line:n,target:o,color:i,scale:a,property:l}),e.restore()}(e,{line:i,target:s,above:d,below:h,area:n,scale:r,axis:a}),(0,o.$)(e))}function Xt(e,t,n){const{segments:o,points:s}=t;let i=!0,r=!1;e.beginPath();for(const a of o){const{start:o,end:l}=a,c=s[o],u=s[$t(o,l,s)];i?(e.moveTo(c.x,c.y),i=!1):(e.lineTo(c.x,n),e.lineTo(c.x,c.y)),r=!!t.pathSegment(e,a,{move:r}),r?e.closePath():e.lineTo(u.x,n)}e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Qt(e,t){const{line:n,target:s,property:i,color:r,scale:a}=t,l=function(e,t,n){const s=e.segments,i=e.points,r=t.points,a=[];for(const e of s){let{start:s,end:l}=e;l=$t(s,l,i);const c=Vt(n,i[s],i[l],e.loop);if(!t.segments){a.push({source:e,target:c,start:i[s],end:i[l]});continue}const u=(0,o.an)(t,c);for(const t of u){const s=Vt(n,r[t.start],r[t.end],t.loop),l=(0,o.ax)(e,i,s);for(const e of l)a.push({source:e,target:t,start:{[n]:zt(c,s,"start",Math.max)},end:{[n]:zt(c,s,"end",Math.min)}})}}return a}(n,s,i);for(const{source:t,target:o,start:c,end:u}of l){const{style:{backgroundColor:l=r}={}}=t,d=!0!==s;e.save(),e.fillStyle=l,Zt(e,a,d&&Vt(i,c,u)),e.beginPath();const h=!!n.pathSegment(e,t);let p;if(d){h?e.closePath():en(e,s,u,i);const t=!!s.pathSegment(e,o,{move:h,reverse:!0});p=h&&t,p||en(e,s,c,i)}e.closePath(),e.fill(p?"evenodd":"nonzero"),e.restore()}}function Zt(e,t,n){const{top:o,bottom:s}=t.chart.chartArea,{property:i,start:r,end:a}=n||{};"x"===i&&(e.beginPath(),e.rect(r,o,a-r,s-o),e.clip())}function en(e,t,n,o){const s=t.interpolate(n,o);s&&e.lineTo(s.x,s.y)}var tn={id:"filler",afterDatasetsUpdate(e,t,n){const o=(e.data.datasets||[]).length,s=[];let i,r,a,l;for(r=0;r<o;++r)i=e.getDatasetMeta(r),a=i.dataset,l=null,a&&a.options&&a instanceof xt&&(l={visible:e.isDatasetVisible(r),index:r,fill:Gt(a,r,o),chart:e,axis:i.controller.options.indexAxis,scale:i.vScale,line:a}),i.$filler=l,s.push(l);for(r=0;r<o;++r)l=s[r],l&&!1!==l.fill&&(l.fill=Wt(s,r,n.propagate))},beforeDraw(e,t,n){const o="beforeDraw"===n.drawTime,s=e.getSortedVisibleDatasetMetas(),i=e.chartArea;for(let t=s.length-1;t>=0;--t){const n=s[t].$filler;n&&(n.line.updateControlPoints(i,n.axis),o&&n.fill&&Jt(e.ctx,n,i))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const o=e.getSortedVisibleDatasetMetas();for(let t=o.length-1;t>=0;--t){const n=o[t].$filler;Ut(n)&&Jt(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const o=t.meta.$filler;Ut(o)&&"beforeDatasetDraw"===n.drawTime&&Jt(e.ctx,o,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const nn=(e,t)=>{let{boxHeight:n=t,boxWidth:o=t}=e;return e.usePointStyle&&(n=Math.min(n,t),o=e.pointStyleWidth||Math.min(o,t)),{boxWidth:o,boxHeight:n,itemHeight:Math.max(t,n)}};class on extends ke{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){this.maxWidth=e,this.maxHeight=t,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const e=this.options.labels||{};let t=(0,o.Q)(e.generateLabels,[this.chart],this)||[];e.filter&&(t=t.filter((t=>e.filter(t,this.chart.data)))),e.sort&&(t=t.sort(((t,n)=>e.sort(t,n,this.chart.data)))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){const{options:e,ctx:t}=this;if(!e.display)return void(this.width=this.height=0);const n=e.labels,s=(0,o.a0)(n.font),i=s.size,r=this._computeTitleHeight(),{boxWidth:a,itemHeight:l}=nn(n,i);let c,u;t.font=s.string,this.isHorizontal()?(c=this.maxWidth,u=this._fitRows(r,i,a,l)+10):(u=this.maxHeight,c=this._fitCols(r,s,a,l)+10),this.width=Math.min(c,e.maxWidth||this.maxWidth),this.height=Math.min(u,e.maxHeight||this.maxHeight)}_fitRows(e,t,n,o){const{ctx:s,maxWidth:i,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=o+r;let u=e;s.textAlign="left",s.textBaseline="middle";let d=-1,h=-c;return this.legendItems.forEach(((e,p)=>{const f=n+t/2+s.measureText(e.text).width;(0===p||l[l.length-1]+f+2*r>i)&&(u+=c,l[l.length-(p>0?0:1)]=0,h+=c,d++),a[p]={left:0,top:h,row:d,width:f,height:o},l[l.length-1]+=f+r})),u}_fitCols(e,t,n,o){const{ctx:s,maxHeight:i,options:{labels:{padding:r}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=i-e;let u=r,d=0,h=0,p=0,f=0;return this.legendItems.forEach(((e,i)=>{const{itemWidth:m,itemHeight:g}=function(e,t,n,o,s){const i=function(e,t,n,o){let s=e.text;return s&&"string"!=typeof s&&(s=s.reduce(((e,t)=>e.length>t.length?e:t))),t+n.size/2+o.measureText(s).width}(o,e,t,n),r=function(e,t,n){let o=e;return"string"!=typeof t.text&&(o=sn(t,n)),o}(s,o,t.lineHeight);return{itemWidth:i,itemHeight:r}}(n,t,s,e,o);i>0&&h+g+2*r>c&&(u+=d+r,l.push({width:d,height:h}),p+=d+r,f++,d=h=0),a[i]={left:p,top:h,col:f,width:m,height:g},d=Math.max(d,m),h+=g+r})),u+=d,l.push({width:d,height:h}),u}adjustHitBoxes(){if(!this.options.display)return;const e=this._computeTitleHeight(),{legendHitBoxes:t,options:{align:n,labels:{padding:s},rtl:i}}=this,r=(0,o.az)(i,this.left,this.width);if(this.isHorizontal()){let i=0,a=(0,o.a2)(n,this.left+s,this.right-this.lineWidths[i]);for(const l of t)i!==l.row&&(i=l.row,a=(0,o.a2)(n,this.left+s,this.right-this.lineWidths[i])),l.top+=this.top+e+s,l.left=r.leftForLtr(r.x(a),l.width),a+=l.width+s}else{let i=0,a=(0,o.a2)(n,this.top+e+s,this.bottom-this.columnSizes[i].height);for(const l of t)l.col!==i&&(i=l.col,a=(0,o.a2)(n,this.top+e+s,this.bottom-this.columnSizes[i].height)),l.top=a,l.left+=this.left+s,l.left=r.leftForLtr(r.x(l.left),l.width),a+=l.height+s}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const e=this.ctx;(0,o.Y)(e,this),this._draw(),(0,o.$)(e)}}_draw(){const{options:e,columnSizes:t,lineWidths:n,ctx:s}=this,{align:i,labels:r}=e,a=o.d.color,l=(0,o.az)(e.rtl,this.left,this.width),c=(0,o.a0)(r.font),{padding:u}=r,d=c.size,h=d/2;let p;this.drawTitle(),s.textAlign=l.textAlign("left"),s.textBaseline="middle",s.lineWidth=.5,s.font=c.string;const{boxWidth:f,boxHeight:m,itemHeight:g}=nn(r,d),b=this.isHorizontal(),v=this._computeTitleHeight();p=b?{x:(0,o.a2)(i,this.left+u,this.right-n[0]),y:this.top+u+v,line:0}:{x:this.left+u,y:(0,o.a2)(i,this.top+v+u,this.bottom-t[0].height),line:0},(0,o.aA)(this.ctx,e.textDirection);const y=g+u;this.legendItems.forEach(((_,x)=>{s.strokeStyle=_.fontColor,s.fillStyle=_.fontColor;const w=s.measureText(_.text).width,S=l.textAlign(_.textAlign||(_.textAlign=r.textAlign)),k=f+h+w;let j=p.x,O=p.y;if(l.setWidth(this.width),b?x>0&&j+k+u>this.right&&(O=p.y+=y,p.line++,j=p.x=(0,o.a2)(i,this.left+u,this.right-n[p.line])):x>0&&O+y>this.bottom&&(j=p.x=j+t[p.line].width+u,p.line++,O=p.y=(0,o.a2)(i,this.top+v+u,this.bottom-t[p.line].height)),function(e,t,n){if(isNaN(f)||f<=0||isNaN(m)||m<0)return;s.save();const i=(0,o.v)(n.lineWidth,1);if(s.fillStyle=(0,o.v)(n.fillStyle,a),s.lineCap=(0,o.v)(n.lineCap,"butt"),s.lineDashOffset=(0,o.v)(n.lineDashOffset,0),s.lineJoin=(0,o.v)(n.lineJoin,"miter"),s.lineWidth=i,s.strokeStyle=(0,o.v)(n.strokeStyle,a),s.setLineDash((0,o.v)(n.lineDash,[])),r.usePointStyle){const a={radius:m*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:i},c=l.xPlus(e,f/2),u=t+h;(0,o.aD)(s,a,c,u,r.pointStyleWidth&&f)}else{const r=t+Math.max((d-m)/2,0),a=l.leftForLtr(e,f),c=(0,o.aw)(n.borderRadius);s.beginPath(),Object.values(c).some((e=>0!==e))?(0,o.au)(s,{x:a,y:r,w:f,h:m,radius:c}):s.rect(a,r,f,m),s.fill(),0!==i&&s.stroke()}s.restore()}(l.x(j),O,_),j=(0,o.aB)(S,j+f+h,b?j+k:this.right,e.rtl),function(e,t,n){(0,o.Z)(s,n.text,e,t+g/2,c,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(j),O,_),b)p.x+=k+u;else if("string"!=typeof _.text){const e=c.lineHeight;p.y+=sn(_,e)+u}else p.y+=y})),(0,o.aC)(this.ctx,e.textDirection)}drawTitle(){const e=this.options,t=e.title,n=(0,o.a0)(t.font),s=(0,o.E)(t.padding);if(!t.display)return;const i=(0,o.az)(e.rtl,this.left,this.width),r=this.ctx,a=t.position,l=n.size/2,c=s.top+l;let u,d=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),u=this.top+c,d=(0,o.a2)(e.align,d,this.right-h);else{const t=this.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);u=c+(0,o.a2)(e.align,this.top,this.bottom-t-e.labels.padding-this._computeTitleHeight())}const p=(0,o.a2)(a,d,d+h);r.textAlign=i.textAlign((0,o.a1)(a)),r.textBaseline="middle",r.strokeStyle=t.color,r.fillStyle=t.color,r.font=n.string,(0,o.Z)(r,t.text,p,u,n)}_computeTitleHeight(){const e=this.options.title,t=(0,o.a0)(e.font),n=(0,o.E)(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){let n,s,i;if((0,o.aj)(e,this.left,this.right)&&(0,o.aj)(t,this.top,this.bottom))for(i=this.legendHitBoxes,n=0;n<i.length;++n)if(s=i[n],(0,o.aj)(e,s.left,s.left+s.width)&&(0,o.aj)(t,s.top,s.top+s.height))return this.legendItems[n];return null}handleEvent(e){const t=this.options;if(!function(e,t){return!("mousemove"!==e&&"mouseout"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,t))return;const n=this._getLegendItemAt(e.x,e.y);if("mousemove"===e.type||"mouseout"===e.type){const r=this._hoveredItem,a=(i=n,null!==(s=r)&&null!==i&&s.datasetIndex===i.datasetIndex&&s.index===i.index);r&&!a&&(0,o.Q)(t.onLeave,[e,r,this],this),this._hoveredItem=n,n&&!a&&(0,o.Q)(t.onHover,[e,n,this],this)}else n&&(0,o.Q)(t.onClick,[e,n,this],this);var s,i}}function sn(e,t){return t*(e.text?e.text.length:0)}var rn={id:"legend",_element:on,start(e,t,n){const o=e.legend=new on({ctx:e.ctx,options:n,chart:e});ie.configure(e,o,n),ie.addBox(e,o)},stop(e){ie.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const o=e.legend;ie.configure(e,o,n),o.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const o=t.datasetIndex,s=n.chart;s.isDatasetVisible(o)?(s.hide(o),t.hidden=!0):(s.show(o),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:s,textAlign:i,color:r,useBorderRadius:a,borderRadius:l}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const c=e.controller.getStyle(n?0:void 0),u=(0,o.E)(c.borderWidth);return{text:t[e.index].label,fillStyle:c.backgroundColor,fontColor:r,hidden:!e.visible,lineCap:c.borderCapStyle,lineDash:c.borderDash,lineDashOffset:c.borderDashOffset,lineJoin:c.borderJoinStyle,lineWidth:(u.width+u.height)/4,strokeStyle:c.borderColor,pointStyle:s||c.pointStyle,rotation:c.rotation,textAlign:i||c.textAlign,borderRadius:a&&(l||c.borderRadius),datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class an extends ke{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=e,this.height=this.bottom=t;const s=(0,o.b)(n.text)?n.text.length:1;this._padding=(0,o.E)(n.padding);const i=s*(0,o.a0)(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=i:this.width=i}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:s,right:i,options:r}=this,a=r.align;let l,c,u,d=0;return this.isHorizontal()?(c=(0,o.a2)(a,n,i),u=t+e,l=i-n):("left"===r.position?(c=n+e,u=(0,o.a2)(a,s,t),d=-.5*o.P):(c=i-e,u=(0,o.a2)(a,t,s),d=.5*o.P),l=s-t),{titleX:c,titleY:u,maxWidth:l,rotation:d}}draw(){const e=this.ctx,t=this.options;if(!t.display)return;const n=(0,o.a0)(t.font),s=n.lineHeight/2+this._padding.top,{titleX:i,titleY:r,maxWidth:a,rotation:l}=this._drawArgs(s);(0,o.Z)(e,t.text,0,0,n,{color:t.color,maxWidth:a,rotation:l,textAlign:(0,o.a1)(t.align),textBaseline:"middle",translation:[i,r]})}}var ln={id:"title",_element:an,start(e,t,n){!function(e,t){const n=new an({ctx:e.ctx,options:t,chart:e});ie.configure(e,n,t),ie.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;ie.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const o=e.titleBlock;ie.configure(e,o,n),o.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const cn=new WeakMap;var un={id:"subtitle",start(e,t,n){const o=new an({ctx:e.ctx,options:n,chart:e});ie.configure(e,o,n),ie.addBox(e,o),cn.set(e,o)},stop(e){ie.removeBox(e,cn.get(e)),cn.delete(e)},beforeUpdate(e,t,n){const o=cn.get(e);ie.configure(e,o,n),o.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const dn={average(e){if(!e.length)return!1;let t,n,o=0,s=0,i=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();o+=e.x,s+=e.y,++i}}return{x:o/i,y:s/i}},nearest(e,t){if(!e.length)return!1;let n,s,i,r=t.x,a=t.y,l=Number.POSITIVE_INFINITY;for(n=0,s=e.length;n<s;++n){const s=e[n].element;if(s&&s.hasValue()){const e=s.getCenterPoint(),n=(0,o.aE)(t,e);n<l&&(l=n,i=s)}}if(i){const e=i.tooltipPosition();r=e.x,a=e.y}return{x:r,y:a}}};function hn(e,t){return t&&((0,o.b)(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function pn(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function fn(e,t){const{element:n,datasetIndex:o,index:s}=t,i=e.getDatasetMeta(o).controller,{label:r,value:a}=i.getLabelAndValue(s);return{chart:e,label:r,parsed:i.getParsed(s),raw:e.data.datasets[o].data[s],formattedValue:a,dataset:i.getDataset(),dataIndex:s,datasetIndex:o,element:n}}function mn(e,t){const n=e.chart.ctx,{body:s,footer:i,title:r}=e,{boxWidth:a,boxHeight:l}=t,c=(0,o.a0)(t.bodyFont),u=(0,o.a0)(t.titleFont),d=(0,o.a0)(t.footerFont),h=r.length,p=i.length,f=s.length,m=(0,o.E)(t.padding);let g=m.height,b=0,v=s.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);v+=e.beforeBody.length+e.afterBody.length,h&&(g+=h*u.lineHeight+(h-1)*t.titleSpacing+t.titleMarginBottom),v&&(g+=f*(t.displayColors?Math.max(l,c.lineHeight):c.lineHeight)+(v-f)*c.lineHeight+(v-1)*t.bodySpacing),p&&(g+=t.footerMarginTop+p*d.lineHeight+(p-1)*t.footerSpacing);let y=0;const _=function(e){b=Math.max(b,n.measureText(e).width+y)};return n.save(),n.font=u.string,(0,o.F)(e.title,_),n.font=c.string,(0,o.F)(e.beforeBody.concat(e.afterBody),_),y=t.displayColors?a+2+t.boxPadding:0,(0,o.F)(s,(e=>{(0,o.F)(e.before,_),(0,o.F)(e.lines,_),(0,o.F)(e.after,_)})),y=0,n.font=d.string,(0,o.F)(e.footer,_),n.restore(),b+=m.width,{width:b,height:g}}function gn(e,t,n,o){const{x:s,width:i}=n,{width:r,chartArea:{left:a,right:l}}=e;let c="center";return"center"===o?c=s<=(a+l)/2?"left":"right":s<=i/2?c="left":s>=r-i/2&&(c="right"),function(e,t,n,o){const{x:s,width:i}=o,r=n.caretSize+n.caretPadding;return"left"===e&&s+i+r>t.width||"right"===e&&s-i-r<0||void 0}(c,e,t,n)&&(c="center"),c}function bn(e,t,n){const o=n.yAlign||t.yAlign||function(e,t){const{y:n,height:o}=t;return n<o/2?"top":n>e.height-o/2?"bottom":"center"}(e,n);return{xAlign:n.xAlign||t.xAlign||gn(e,t,n,o),yAlign:o}}function vn(e,t,n,s){const{caretSize:i,caretPadding:r,cornerRadius:a}=e,{xAlign:l,yAlign:c}=n,u=i+r,{topLeft:d,topRight:h,bottomLeft:p,bottomRight:f}=(0,o.aw)(a);let m=function(e,t){let{x:n,width:o}=e;return"right"===t?n-=o:"center"===t&&(n-=o/2),n}(t,l);const g=function(e,t,n){let{y:o,height:s}=e;return"top"===t?o+=n:o-="bottom"===t?s+n:s/2,o}(t,c,u);return"center"===c?"left"===l?m+=u:"right"===l&&(m-=u):"left"===l?m-=Math.max(d,p)+i:"right"===l&&(m+=Math.max(h,f)+i),{x:(0,o.S)(m,0,s.width-t.width),y:(0,o.S)(g,0,s.height-t.height)}}function yn(e,t,n){const s=(0,o.E)(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-s.right:e.x+s.left}function _n(e){return hn([],pn(e))}function xn(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}const wn={beforeTitle:o.aF,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,o=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(o>0&&t.dataIndex<o)return n[t.dataIndex]}return""},afterTitle:o.aF,beforeBody:o.aF,beforeLabel:o.aF,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return(0,o.k)(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:o.aF,afterBody:o.aF,beforeFooter:o.aF,footer:o.aF,afterFooter:o.aF};function Sn(e,t,n,o){const s=e[t].call(n,o);return void 0===s?wn[t].call(n,o):s}class kn extends ke{static positioners=dn;constructor(e){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=e.chart,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this._cachedAnimations;if(e)return e;const t=this.chart,n=this.options.setContext(this.getContext()),o=n.enabled&&t.options.animation&&n.animations,s=new c(this.chart,o);return o._cacheable&&(this._cachedAnimations=Object.freeze(s)),s}getContext(){return this.$context||(this.$context=(e=this.chart.getContext(),this,t=this._tooltipItems,(0,o.j)(e,{tooltip:this,tooltipItems:t,type:"tooltip"})));var e,t}getTitle(e,t){const{callbacks:n}=t,o=Sn(n,"beforeTitle",this,e),s=Sn(n,"title",this,e),i=Sn(n,"afterTitle",this,e);let r=[];return r=hn(r,pn(o)),r=hn(r,pn(s)),r=hn(r,pn(i)),r}getBeforeBody(e,t){return _n(Sn(t.callbacks,"beforeBody",this,e))}getBody(e,t){const{callbacks:n}=t,s=[];return(0,o.F)(e,(e=>{const t={before:[],lines:[],after:[]},o=xn(n,e);hn(t.before,pn(Sn(o,"beforeLabel",this,e))),hn(t.lines,Sn(o,"label",this,e)),hn(t.after,pn(Sn(o,"afterLabel",this,e))),s.push(t)})),s}getAfterBody(e,t){return _n(Sn(t.callbacks,"afterBody",this,e))}getFooter(e,t){const{callbacks:n}=t,o=Sn(n,"beforeFooter",this,e),s=Sn(n,"footer",this,e),i=Sn(n,"afterFooter",this,e);let r=[];return r=hn(r,pn(o)),r=hn(r,pn(s)),r=hn(r,pn(i)),r}_createItems(e){const t=this._active,n=this.chart.data,s=[],i=[],r=[];let a,l,c=[];for(a=0,l=t.length;a<l;++a)c.push(fn(this.chart,t[a]));return e.filter&&(c=c.filter(((t,o,s)=>e.filter(t,o,s,n)))),e.itemSort&&(c=c.sort(((t,o)=>e.itemSort(t,o,n)))),(0,o.F)(c,(t=>{const n=xn(e.callbacks,t);s.push(Sn(n,"labelColor",this,t)),i.push(Sn(n,"labelPointStyle",this,t)),r.push(Sn(n,"labelTextColor",this,t))})),this.labelColors=s,this.labelPointStyles=i,this.labelTextColors=r,this.dataPoints=c,c}update(e,t){const n=this.options.setContext(this.getContext()),o=this._active;let s,i=[];if(o.length){const e=dn[n.position].call(this,o,this._eventPosition);i=this._createItems(n),this.title=this.getTitle(i,n),this.beforeBody=this.getBeforeBody(i,n),this.body=this.getBody(i,n),this.afterBody=this.getAfterBody(i,n),this.footer=this.getFooter(i,n);const t=this._size=mn(this,n),r=Object.assign({},e,t),a=bn(this.chart,n,r),l=vn(n,r,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,s={opacity:1,x:l.x,y:l.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==this.opacity&&(s={opacity:0});this._tooltipItems=i,this.$context=void 0,s&&this._resolveAnimations().update(this,s),e&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:t})}drawCaret(e,t,n,o){const s=this.getCaretPosition(e,n,o);t.lineTo(s.x1,s.y1),t.lineTo(s.x2,s.y2),t.lineTo(s.x3,s.y3)}getCaretPosition(e,t,n){const{xAlign:s,yAlign:i}=this,{caretSize:r,cornerRadius:a}=n,{topLeft:l,topRight:c,bottomLeft:u,bottomRight:d}=(0,o.aw)(a),{x:h,y:p}=e,{width:f,height:m}=t;let g,b,v,y,_,x;return"center"===i?(_=p+m/2,"left"===s?(g=h,b=g-r,y=_+r,x=_-r):(g=h+f,b=g+r,y=_-r,x=_+r),v=g):(b="left"===s?h+Math.max(l,u)+r:"right"===s?h+f-Math.max(c,d)-r:this.caretX,"top"===i?(y=p,_=y-r,g=b-r,v=b+r):(y=p+m,_=y+r,g=b+r,v=b-r),x=y),{x1:g,x2:b,x3:v,y1:y,y2:_,y3:x}}drawTitle(e,t,n){const s=this.title,i=s.length;let r,a,l;if(i){const c=(0,o.az)(n.rtl,this.x,this.width);for(e.x=yn(this,n.titleAlign,n),t.textAlign=c.textAlign(n.titleAlign),t.textBaseline="middle",r=(0,o.a0)(n.titleFont),a=n.titleSpacing,t.fillStyle=n.titleColor,t.font=r.string,l=0;l<i;++l)t.fillText(s[l],c.x(e.x),e.y+r.lineHeight/2),e.y+=r.lineHeight+a,l+1===i&&(e.y+=n.titleMarginBottom-a)}}_drawColorBox(e,t,n,s,i){const r=this.labelColors[n],a=this.labelPointStyles[n],{boxHeight:l,boxWidth:c}=i,u=(0,o.a0)(i.bodyFont),d=yn(this,"left",i),h=s.x(d),p=l<u.lineHeight?(u.lineHeight-l)/2:0,f=t.y+p;if(i.usePointStyle){const t={radius:Math.min(c,l)/2,pointStyle:a.pointStyle,rotation:a.rotation,borderWidth:1},n=s.leftForLtr(h,c)+c/2,u=f+l/2;e.strokeStyle=i.multiKeyBackground,e.fillStyle=i.multiKeyBackground,(0,o.at)(e,t,n,u),e.strokeStyle=r.borderColor,e.fillStyle=r.backgroundColor,(0,o.at)(e,t,n,u)}else{e.lineWidth=(0,o.i)(r.borderWidth)?Math.max(...Object.values(r.borderWidth)):r.borderWidth||1,e.strokeStyle=r.borderColor,e.setLineDash(r.borderDash||[]),e.lineDashOffset=r.borderDashOffset||0;const t=s.leftForLtr(h,c),n=s.leftForLtr(s.xPlus(h,1),c-2),a=(0,o.aw)(r.borderRadius);Object.values(a).some((e=>0!==e))?(e.beginPath(),e.fillStyle=i.multiKeyBackground,(0,o.au)(e,{x:t,y:f,w:c,h:l,radius:a}),e.fill(),e.stroke(),e.fillStyle=r.backgroundColor,e.beginPath(),(0,o.au)(e,{x:n,y:f+1,w:c-2,h:l-2,radius:a}),e.fill()):(e.fillStyle=i.multiKeyBackground,e.fillRect(t,f,c,l),e.strokeRect(t,f,c,l),e.fillStyle=r.backgroundColor,e.fillRect(n,f+1,c-2,l-2))}e.fillStyle=this.labelTextColors[n]}drawBody(e,t,n){const{body:s}=this,{bodySpacing:i,bodyAlign:r,displayColors:a,boxHeight:l,boxWidth:c,boxPadding:u}=n,d=(0,o.a0)(n.bodyFont);let h=d.lineHeight,p=0;const f=(0,o.az)(n.rtl,this.x,this.width),m=function(n){t.fillText(n,f.x(e.x+p),e.y+h/2),e.y+=h+i},g=f.textAlign(r);let b,v,y,_,x,w,S;for(t.textAlign=r,t.textBaseline="middle",t.font=d.string,e.x=yn(this,g,n),t.fillStyle=n.bodyColor,(0,o.F)(this.beforeBody,m),p=a&&"right"!==g?"center"===r?c/2+u:c+2+u:0,_=0,w=s.length;_<w;++_){for(b=s[_],v=this.labelTextColors[_],t.fillStyle=v,(0,o.F)(b.before,m),y=b.lines,a&&y.length&&(this._drawColorBox(t,e,_,f,n),h=Math.max(d.lineHeight,l)),x=0,S=y.length;x<S;++x)m(y[x]),h=d.lineHeight;(0,o.F)(b.after,m)}p=0,h=d.lineHeight,(0,o.F)(this.afterBody,m),e.y-=i}drawFooter(e,t,n){const s=this.footer,i=s.length;let r,a;if(i){const l=(0,o.az)(n.rtl,this.x,this.width);for(e.x=yn(this,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",r=(0,o.a0)(n.footerFont),t.fillStyle=n.footerColor,t.font=r.string,a=0;a<i;++a)t.fillText(s[a],l.x(e.x),e.y+r.lineHeight/2),e.y+=r.lineHeight+n.footerSpacing}}drawBackground(e,t,n,s){const{xAlign:i,yAlign:r}=this,{x:a,y:l}=e,{width:c,height:u}=n,{topLeft:d,topRight:h,bottomLeft:p,bottomRight:f}=(0,o.aw)(s.cornerRadius);t.fillStyle=s.backgroundColor,t.strokeStyle=s.borderColor,t.lineWidth=s.borderWidth,t.beginPath(),t.moveTo(a+d,l),"top"===r&&this.drawCaret(e,t,n,s),t.lineTo(a+c-h,l),t.quadraticCurveTo(a+c,l,a+c,l+h),"center"===r&&"right"===i&&this.drawCaret(e,t,n,s),t.lineTo(a+c,l+u-f),t.quadraticCurveTo(a+c,l+u,a+c-f,l+u),"bottom"===r&&this.drawCaret(e,t,n,s),t.lineTo(a+p,l+u),t.quadraticCurveTo(a,l+u,a,l+u-p),"center"===r&&"left"===i&&this.drawCaret(e,t,n,s),t.lineTo(a,l+d),t.quadraticCurveTo(a,l,a+d,l),t.closePath(),t.fill(),s.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this.chart,n=this.$animations,o=n&&n.x,s=n&&n.y;if(o||s){const n=dn[e.position].call(this,this._active,this._eventPosition);if(!n)return;const i=this._size=mn(this,e),r=Object.assign({},n,this._size),a=bn(t,e,r),l=vn(e,r,a,t);o._to===l.x&&s._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=i.width,this.height=i.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(e){const t=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(t);const s={width:this.width,height:this.height},i={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const r=(0,o.E)(t.padding),a=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;t.enabled&&a&&(e.save(),e.globalAlpha=n,this.drawBackground(i,e,s,t),(0,o.aA)(e,t.textDirection),i.y+=r.top,this.drawTitle(i,e,t),this.drawBody(i,e,t),this.drawFooter(i,e,t),(0,o.aC)(e,t.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this._active,s=e.map((({datasetIndex:e,index:t})=>{const n=this.chart.getDatasetMeta(e);if(!n)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:n.data[t],index:t}})),i=!(0,o.ah)(n,s),r=this._positionChanged(s,t);(i||r)&&(this._active=s,this._eventPosition=t,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(e,t,n=!0){if(t&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const s=this.options,i=this._active||[],r=this._getActiveElements(e,i,t,n),a=this._positionChanged(r,e),l=t||!(0,o.ah)(r,i)||a;return l&&(this._active=r,(s.enabled||s.external)&&(this._eventPosition={x:e.x,y:e.y},this.update(!0,t))),l}_getActiveElements(e,t,n,o){const s=this.options;if("mouseout"===e.type)return[];if(!o)return t;const i=this.chart.getElementsAtEventForMode(e,s.mode,s,n);return s.reverse&&i.reverse(),i}_positionChanged(e,t){const{caretX:n,caretY:o,options:s}=this,i=dn[s.position].call(this,e,t);return!1!==i&&(n!==i.x||o!==i.y)}}var jn={id:"tooltip",_element:kn,positioners:dn,afterInit(e,t,n){n&&(e.tooltip=new kn({chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip;if(t&&t._willRender()){const n={tooltip:t};if(!1===e.notifyPlugins("beforeTooltipDraw",{...n,cancelable:!0}))return;t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n)}},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n,t.inChartArea)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:wn},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},On=Object.freeze({__proto__:null,Colors:Ft,Decimation:Bt,Filler:tn,Legend:rn,SubTitle:un,Title:ln,Tooltip:jn});function Cn(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}class En extends Re{static id="category";static defaults={ticks:{callback:Cn}};constructor(e){super(e),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(e){const t=this._addedLabels;if(t.length){const e=this.getLabels();for(const{index:n,label:o}of t)e[n]===o&&e.splice(n,1);this._addedLabels=[]}super.init(e)}parse(e,t){if((0,o.k)(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:(0,o.S)(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n,o){const s=e.indexOf(t);return-1===s?((e,t,n,o)=>("string"==typeof t?(n=e.push(t)-1,o.unshift({index:n,label:t})):isNaN(t)&&(n=null),n))(e,t,n,o):s!==e.lastIndexOf(t)?n:s}(n,e,(0,o.v)(t,e),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let{min:n,max:o}=this.getMinMax(!0);"ticks"===this.options.bounds&&(e||(n=0),t||(o=this.getLabels().length-1)),this.min=n,this.max=o}buildTicks(){const e=this.min,t=this.max,n=this.options.offset,o=[];let s=this.getLabels();s=0===e&&t===s.length-1?s:s.slice(e,t+1),this._valueRange=Math.max(s.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=e;n<=t;n++)o.push({value:n});return o}getLabelForValue(e){return Cn.call(this,e)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(e){return"number"!=typeof e&&(e=this.parse(e)),null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){return Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange)}getBasePixel(){return this.bottom}}function An(e,t,{horizontal:n,minRotation:s}){const i=(0,o.t)(s),r=(n?Math.sin(i):Math.cos(i))||.001,a=.75*t*(""+e).length;return Math.min(t/r,a)}class Pn extends Re{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return(0,o.k)(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const{beginAtZero:e}=this.options,{minDefined:t,maxDefined:n}=this.getUserBounds();let{min:s,max:i}=this;const r=e=>s=t?s:e,a=e=>i=n?i:e;if(e){const e=(0,o.s)(s),t=(0,o.s)(i);e<0&&t<0?a(0):e>0&&t>0&&r(0)}if(s===i){let t=0===i?1:Math.abs(.05*i);a(i+t),e||r(s-t)}this.min=s,this.max=i}getTickLimit(){const e=this.options.ticks;let t,{maxTicksLimit:n,stepSize:o}=e;return o?(t=Math.ceil(this.max/o)-Math.floor(this.min/o)+1,t>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${o} would result generating up to ${t} ticks. Limiting to 1000.`),t=1e3)):(t=this.computeTickLimit(),n=n||11),n&&(t=Math.min(n,t)),t}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this.options,t=e.ticks;let n=this.getTickLimit();n=Math.max(2,n);const s=function(e,t){const n=[],{bounds:s,step:i,min:r,max:a,precision:l,count:c,maxTicks:u,maxDigits:d,includeBounds:h}=e,p=i||1,f=u-1,{min:m,max:g}=t,b=!(0,o.k)(r),v=!(0,o.k)(a),y=!(0,o.k)(c),_=(g-m)/(d+1);let x,w,S,k,j=(0,o.aH)((g-m)/f/p)*p;if(j<1e-14&&!b&&!v)return[{value:m},{value:g}];k=Math.ceil(g/j)-Math.floor(m/j),k>f&&(j=(0,o.aH)(k*j/f/p)*p),(0,o.k)(l)||(x=Math.pow(10,l),j=Math.ceil(j*x)/x),"ticks"===s?(w=Math.floor(m/j)*j,S=Math.ceil(g/j)*j):(w=m,S=g),b&&v&&i&&(0,o.aI)((a-r)/i,j/1e3)?(k=Math.round(Math.min((a-r)/j,u)),j=(a-r)/k,w=r,S=a):y?(w=b?r:w,S=v?a:S,k=c-1,j=(S-w)/k):(k=(S-w)/j,k=(0,o.aJ)(k,Math.round(k),j/1e3)?Math.round(k):Math.ceil(k));const O=Math.max((0,o.aK)(j),(0,o.aK)(w));x=Math.pow(10,(0,o.k)(l)?O:l),w=Math.round(w*x)/x,S=Math.round(S*x)/x;let C=0;for(b&&(h&&w!==r?(n.push({value:r}),w<r&&C++,(0,o.aJ)(Math.round((w+C*j)*x)/x,r,An(r,_,e))&&C++):w<r&&C++);C<k;++C){const e=Math.round((w+C*j)*x)/x;if(v&&e>a)break;n.push({value:e})}return v&&h&&S!==a?n.length&&(0,o.aJ)(n[n.length-1].value,a,An(a,_,e))?n[n.length-1].value=a:n.push({value:a}):v&&S!==a||n.push({value:S}),n}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:t.precision,step:t.stepSize,count:t.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:t.minRotation||0,includeBounds:!1!==t.includeBounds},this._range||this);return"ticks"===e.bounds&&(0,o.aG)(s,this,"value"),e.reverse?(s.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),s}configure(){const e=this.ticks;let t=this.min,n=this.max;if(super.configure(),this.options.offset&&e.length){const o=(n-t)/Math.max(e.length-1,1)/2;t-=o,n+=o}this._startValue=t,this._endValue=n,this._valueRange=n-t}getLabelForValue(e){return(0,o.o)(e,this.chart.options.locale,this.options.ticks.format)}}class Tn extends Pn{static id="linear";static defaults={ticks:{callback:o.aL.formatters.numeric}};determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,o.g)(e)?e:0,this.max=(0,o.g)(t)?t:1,this.handleTickRangeOptions()}computeTickLimit(){const e=this.isHorizontal(),t=e?this.width:this.height,n=(0,o.t)(this.options.ticks.minRotation),s=(e?Math.sin(n):Math.cos(n))||.001,i=this._resolveTickFontOptions(0);return Math.ceil(t/Math.min(40,i.lineHeight/s))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}const Mn=e=>Math.floor((0,o.aM)(e)),Rn=(e,t)=>Math.pow(10,Mn(e)+t);function Dn(e){return 1==e/Math.pow(10,Mn(e))}function Ln(e,t,n){const o=Math.pow(10,n),s=Math.floor(e/o);return Math.ceil(t/o)-s}class Fn extends Re{static id="logarithmic";static defaults={ticks:{callback:o.aL.formatters.logarithmic,major:{enabled:!0}}};constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=Pn.prototype.parse.apply(this,[e,t]);if(0!==n)return(0,o.g)(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,o.g)(e)?Math.max(0,e):null,this.max=(0,o.g)(t)?Math.max(0,t):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!(0,o.g)(this._userMin)&&(this.min=e===Rn(this.min,0)?Rn(this.min,-1):Rn(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let n=this.min,o=this.max;const s=t=>n=e?n:t,i=e=>o=t?o:e;n===o&&(n<=0?(s(1),i(10)):(s(Rn(n,-1)),i(Rn(o,1)))),n<=0&&s(Rn(o,-1)),o<=0&&i(Rn(n,1)),this.min=n,this.max=o}buildTicks(){const e=this.options,t=function(e,{min:t,max:n}){t=(0,o.O)(e.min,t);const s=[],i=Mn(t);let r=function(e,t){let n=Mn(t-e);for(;Ln(e,t,n)>10;)n++;for(;Ln(e,t,n)<10;)n--;return Math.min(n,Mn(e))}(t,n),a=r<0?Math.pow(10,Math.abs(r)):1;const l=Math.pow(10,r),c=i>r?Math.pow(10,i):0,u=Math.round((t-c)*a)/a,d=Math.floor((t-c)/l/10)*l*10;let h=Math.floor((u-d)/Math.pow(10,r)),p=(0,o.O)(e.min,Math.round((c+d+h*Math.pow(10,r))*a)/a);for(;p<n;)s.push({value:p,major:Dn(p),significand:h}),h>=10?h=h<15?15:20:h++,h>=20&&(r++,h=2,a=r>=0?1:a),p=Math.round((c+d+h*Math.pow(10,r))*a)/a;const f=(0,o.O)(e.max,p);return s.push({value:f,major:Dn(f),significand:h}),s}({min:this._userMin,max:this._userMax},this);return"ticks"===e.bounds&&(0,o.aG)(t,this,"value"),e.reverse?(t.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),t}getLabelForValue(e){return void 0===e?"0":(0,o.o)(e,this.chart.options.locale,this.options.ticks.format)}configure(){const e=this.min;super.configure(),this._startValue=(0,o.aM)(e),this._valueRange=(0,o.aM)(this.max)-(0,o.aM)(e)}getPixelForValue(e){return void 0!==e&&0!==e||(e=this.min),null===e||isNaN(e)?NaN:this.getPixelForDecimal(e===this.min?0:((0,o.aM)(e)-this._startValue)/this._valueRange)}getValueForPixel(e){const t=this.getDecimalForPixel(e);return Math.pow(10,this._startValue+t*this._valueRange)}}function In(e){const t=e.ticks;if(t.display&&e.display){const e=(0,o.E)(t.backdropPadding);return(0,o.v)(t.font&&t.font.size,o.d.font.size)+e.height}return 0}function Nn(e,t,n,o,s){return e===o||e===s?{start:t-n/2,end:t+n/2}:e<o||e>s?{start:t-n,end:t}:{start:t,end:t+n}}function Bn(e,t,n,o,s){const i=Math.abs(Math.sin(n)),r=Math.abs(Math.cos(n));let a=0,l=0;o.start<t.l?(a=(t.l-o.start)/i,e.l=Math.min(e.l,t.l-a)):o.end>t.r&&(a=(o.end-t.r)/i,e.r=Math.max(e.r,t.r+a)),s.start<t.t?(l=(t.t-s.start)/r,e.t=Math.min(e.t,t.t-l)):s.end>t.b&&(l=(s.end-t.b)/r,e.b=Math.max(e.b,t.b+l))}function Vn(e,t,n){const s=e.drawingArea,{extra:i,additionalAngle:r,padding:a,size:l}=n,c=e.getPointPosition(t,s+i+a,r),u=Math.round((0,o.U)((0,o.ay)(c.angle+o.H))),d=function(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}(c.y,l.h,u),h=function(e){return 0===e||180===e?"center":e<180?"left":"right"}(u),p=(f=c.x,m=l.w,"right"===(g=h)?f-=m:"center"===g&&(f-=m/2),f);var f,m,g;return{visible:!0,x:c.x,y:d,textAlign:h,left:p,top:d,right:p+l.w,bottom:d+l.h}}function $n(e,t){if(!t)return!0;const{left:n,top:s,right:i,bottom:r}=e;return!((0,o.C)({x:n,y:s},t)||(0,o.C)({x:n,y:r},t)||(0,o.C)({x:i,y:s},t)||(0,o.C)({x:i,y:r},t))}function zn(e,t,n){const{left:s,top:i,right:r,bottom:a}=n,{backdropColor:l}=t;if(!(0,o.k)(l)){const n=(0,o.aw)(t.borderRadius),c=(0,o.E)(t.backdropPadding);e.fillStyle=l;const u=s-c.left,d=i-c.top,h=r-s+c.width,p=a-i+c.height;Object.values(n).some((e=>0!==e))?(e.beginPath(),(0,o.au)(e,{x:u,y:d,w:h,h:p,radius:n}),e.fill()):e.fillRect(u,d,h,p)}}function Hn(e,t,n,s){const{ctx:i}=e;if(n)i.arc(e.xCenter,e.yCenter,t,0,o.T);else{let n=e.getPointPosition(0,t);i.moveTo(n.x,n.y);for(let o=1;o<s;o++)n=e.getPointPosition(o,t),i.lineTo(n.x,n.y)}}class Un extends Pn{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:o.aL.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this._padding=(0,o.E)(In(this.options)/2),t=this.width=this.maxWidth-e.width,n=this.height=this.maxHeight-e.height;this.xCenter=Math.floor(this.left+t/2+e.left),this.yCenter=Math.floor(this.top+n/2+e.top),this.drawingArea=Math.floor(Math.min(t,n)/2)}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!1);this.min=(0,o.g)(e)&&!isNaN(e)?e:0,this.max=(0,o.g)(t)&&!isNaN(t)?t:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/In(this.options))}generateTickLabels(e){Pn.prototype.generateTickLabels.call(this,e),this._pointLabels=this.getLabels().map(((e,t)=>{const n=(0,o.Q)(this.options.pointLabels.callback,[e,t],this);return n||0===n?n:""})).filter(((e,t)=>this.chart.getDataVisibility(t)))}fit(){const e=this.options;e.display&&e.pointLabels.display?function(e){const t={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},n=Object.assign({},t),s=[],i=[],r=e._pointLabels.length,a=e.options.pointLabels,l=a.centerPointLabels?o.P/r:0;for(let h=0;h<r;h++){const r=a.setContext(e.getPointLabelContext(h));i[h]=r.padding;const p=e.getPointPosition(h,e.drawingArea+i[h],l),f=(0,o.a0)(r.font),m=(c=e.ctx,u=f,d=e._pointLabels[h],d=(0,o.b)(d)?d:[d],{w:(0,o.aN)(c,u.string,d),h:d.length*u.lineHeight});s[h]=m;const g=(0,o.ay)(e.getIndexAngle(h)+l),b=Math.round((0,o.U)(g));Bn(n,t,g,Nn(b,p.x,m.w,0,180),Nn(b,p.y,m.h,90,270))}var c,u,d;e.setCenterPoint(t.l-n.l,n.r-t.r,t.t-n.t,n.b-t.b),e._pointLabelItems=function(e,t,n){const s=[],i=e._pointLabels.length,r=e.options,{centerPointLabels:a,display:l}=r.pointLabels,c={extra:In(r)/2,additionalAngle:a?o.P/i:0};let u;for(let o=0;o<i;o++){c.padding=n[o],c.size=t[o];const i=Vn(e,o,c);s.push(i),"auto"===l&&(i.visible=$n(i,u),i.visible&&(u=i))}return s}(e,s,i)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(e,t,n,o){this.xCenter+=Math.floor((e-t)/2),this.yCenter+=Math.floor((n-o)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(e,t,n,o))}getIndexAngle(e){const t=o.T/(this._pointLabels.length||1),n=this.options.startAngle||0;return(0,o.ay)(e*t+(0,o.t)(n))}getDistanceFromCenterForValue(e){if((0,o.k)(e))return NaN;const t=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-e)*t:(e-this.min)*t}getValueForDistanceFromCenter(e){if((0,o.k)(e))return NaN;const t=e/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-t:this.min+t}getPointLabelContext(e){const t=this._pointLabels||[];if(e>=0&&e<t.length){const n=t[e];return function(e,t,n){return(0,o.j)(e,{label:n,index:t,type:"pointLabel"})}(this.getContext(),e,n)}}getPointPosition(e,t,n=0){const s=this.getIndexAngle(e)-o.H+n;return{x:Math.cos(s)*t+this.xCenter,y:Math.sin(s)*t+this.yCenter,angle:s}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:o,bottom:s}=this._pointLabelItems[e];return{left:t,top:n,right:o,bottom:s}}drawBackground(){const{backgroundColor:e,grid:{circular:t}}=this.options;if(e){const n=this.ctx;n.save(),n.beginPath(),Hn(this,this.getDistanceFromCenterForValue(this._endValue),t,this._pointLabels.length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const e=this.ctx,t=this.options,{angleLines:n,grid:s,border:i}=t,r=this._pointLabels.length;let a,l,c;if(t.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:s}}=e;for(let i=t-1;i>=0;i--){const t=e._pointLabelItems[i];if(!t.visible)continue;const r=s.setContext(e.getPointLabelContext(i));zn(n,r,t);const a=(0,o.a0)(r.font),{x:l,y:c,textAlign:u}=t;(0,o.Z)(n,e._pointLabels[i],l,c+a.lineHeight/2,a,{color:r.color,textAlign:u,textBaseline:"middle"})}}(this,r),s.display&&this.ticks.forEach(((e,t)=>{if(0!==t){l=this.getDistanceFromCenterForValue(e.value);const n=this.getContext(t),o=s.setContext(n),a=i.setContext(n);!function(e,t,n,o,s){const i=e.ctx,r=t.circular,{color:a,lineWidth:l}=t;!r&&!o||!a||!l||n<0||(i.save(),i.strokeStyle=a,i.lineWidth=l,i.setLineDash(s.dash),i.lineDashOffset=s.dashOffset,i.beginPath(),Hn(e,n,r,o),i.closePath(),i.stroke(),i.restore())}(this,o,l,r,a)}})),n.display){for(e.save(),a=r-1;a>=0;a--){const o=n.setContext(this.getPointLabelContext(a)),{color:s,lineWidth:i}=o;i&&s&&(e.lineWidth=i,e.strokeStyle=s,e.setLineDash(o.borderDash),e.lineDashOffset=o.borderDashOffset,l=this.getDistanceFromCenterForValue(t.ticks.reverse?this.min:this.max),c=this.getPointPosition(a,l),e.beginPath(),e.moveTo(this.xCenter,this.yCenter),e.lineTo(c.x,c.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const e=this.ctx,t=this.options,n=t.ticks;if(!n.display)return;const s=this.getIndexAngle(0);let i,r;e.save(),e.translate(this.xCenter,this.yCenter),e.rotate(s),e.textAlign="center",e.textBaseline="middle",this.ticks.forEach(((s,a)=>{if(0===a&&!t.reverse)return;const l=n.setContext(this.getContext(a)),c=(0,o.a0)(l.font);if(i=this.getDistanceFromCenterForValue(this.ticks[a].value),l.showLabelBackdrop){e.font=c.string,r=e.measureText(s.label).width,e.fillStyle=l.backdropColor;const t=(0,o.E)(l.backdropPadding);e.fillRect(-r/2-t.left,-i-c.size/2-t.top,r+t.width,c.size+t.height)}(0,o.Z)(e,s.label,0,-i,c,{color:l.color,strokeColor:l.textStrokeColor,strokeWidth:l.textStrokeWidth})})),e.restore()}drawTitle(){}}const Wn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Gn=Object.keys(Wn);function Yn(e,t){return e-t}function qn(e,t){if((0,o.k)(t))return null;const n=e._adapter,{parser:s,round:i,isoWeekday:r}=e._parseOpts;let a=t;return"function"==typeof s&&(a=s(a)),(0,o.g)(a)||(a="string"==typeof s?n.parse(a,s):n.parse(a)),null===a?null:(i&&(a="week"!==i||!(0,o.x)(r)&&!0!==r?n.startOf(a,i):n.startOf(a,"isoWeek",r)),+a)}function Kn(e,t,n,o){const s=Gn.length;for(let i=Gn.indexOf(e);i<s-1;++i){const e=Wn[Gn[i]],s=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(s*e.size))<=o)return Gn[i]}return Gn[s-1]}function Jn(e,t,n){if(n){if(n.length){const{lo:s,hi:i}=(0,o.aP)(n,t);e[n[s]>=t?n[s]:n[i]]=!0}}else e[t]=!0}function Xn(e,t,n){const o=[],s={},i=t.length;let r,a;for(r=0;r<i;++r)a=t[r],s[a]=r,o.push({value:a,major:!1});return 0!==i&&n?function(e,t,n,o){const s=e._adapter,i=+s.startOf(t[0].value,o),r=t[t.length-1].value;let a,l;for(a=i;a<=r;a=+s.add(a,1,o))l=n[a],l>=0&&(t[l].major=!0);return t}(e,o,s,n):o}class Qn extends Re{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t={}){const n=e.time||(e.time={}),s=this._adapter=new $._date(e.adapters.date);s.init(t),(0,o.ab)(n.displayFormats,s.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:qn(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this.options,t=this._adapter,n=e.time.unit||"day";let{min:s,max:i,minDefined:r,maxDefined:a}=this.getUserBounds();function l(e){r||isNaN(e.min)||(s=Math.min(s,e.min)),a||isNaN(e.max)||(i=Math.max(i,e.max))}r&&a||(l(this._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(this.getMinMax(!1))),s=(0,o.g)(s)&&!isNaN(s)?s:+t.startOf(Date.now(),n),i=(0,o.g)(i)&&!isNaN(i)?i:+t.endOf(Date.now(),n)+1,this.min=Math.min(s,i-1),this.max=Math.max(s+1,i)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this.options,t=e.time,n=e.ticks,s="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===e.bounds&&s.length&&(this.min=this._userMin||s[0],this.max=this._userMax||s[s.length-1]);const i=this.min,r=this.max,a=(0,o.aO)(s,i,r);return this._unit=t.unit||(n.autoSkip?Kn(t.minUnit,this.min,this.max,this._getLabelCapacity(i)):function(e,t,n,o,s){for(let i=Gn.length-1;i>=Gn.indexOf(n);i--){const n=Gn[i];if(Wn[n].common&&e._adapter.diff(s,o,n)>=t-1)return n}return Gn[n?Gn.indexOf(n):0]}(this,a.length,t.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(e){for(let t=Gn.indexOf(e)+1,n=Gn.length;t<n;++t)if(Wn[Gn[t]].common)return Gn[t]}(this._unit):void 0,this.initOffsets(s),e.reverse&&a.reverse(),Xn(this,a,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((e=>+e.value)))}initOffsets(e=[]){let t,n,s=0,i=0;this.options.offset&&e.length&&(t=this.getDecimalForValue(e[0]),s=1===e.length?1-t:(this.getDecimalForValue(e[1])-t)/2,n=this.getDecimalForValue(e[e.length-1]),i=1===e.length?n:(n-this.getDecimalForValue(e[e.length-2]))/2);const r=e.length<3?.5:.25;s=(0,o.S)(s,0,r),i=(0,o.S)(i,0,r),this._offsets={start:s,end:i,factor:1/(s+1+i)}}_generate(){const e=this._adapter,t=this.min,n=this.max,s=this.options,i=s.time,r=i.unit||Kn(i.minUnit,t,n,this._getLabelCapacity(t)),a=(0,o.v)(s.ticks.stepSize,1),l="week"===r&&i.isoWeekday,c=(0,o.x)(l)||!0===l,u={};let d,h,p=t;if(c&&(p=+e.startOf(p,"isoWeek",l)),p=+e.startOf(p,c?"day":r),e.diff(n,t,r)>1e5*a)throw new Error(t+" and "+n+" are too far apart with stepSize of "+a+" "+r);const f="data"===s.ticks.source&&this.getDataTimestamps();for(d=p,h=0;d<n;d=+e.add(d,a,r),h++)Jn(u,d,f);return d!==n&&"ticks"!==s.bounds&&1!==h||Jn(u,d,f),Object.keys(u).sort(Yn).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}format(e,t){const n=this.options.time.displayFormats,o=this._unit,s=t||n[o];return this._adapter.format(e,s)}_tickFormatFunction(e,t,n,s){const i=this.options,r=i.ticks.callback;if(r)return(0,o.Q)(r,[e,t,n],this);const a=i.time.displayFormats,l=this._unit,c=this._majorUnit,u=l&&a[l],d=c&&a[c],h=n[t],p=c&&d&&h&&h.major;return this._adapter.format(e,s||(p?d:u))}generateTickLabels(e){let t,n,o;for(t=0,n=e.length;t<n;++t)o=e[t],o.label=this._tickFormatFunction(o.value,t,e)}getDecimalForValue(e){return null===e?NaN:(e-this.min)/(this.max-this.min)}getPixelForValue(e){const t=this._offsets,n=this.getDecimalForValue(e);return this.getPixelForDecimal((t.start+n)*t.factor)}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return this.min+n*(this.max-this.min)}_getLabelSize(e){const t=this.options.ticks,n=this.ctx.measureText(e).width,s=(0,o.t)(this.isHorizontal()?t.maxRotation:t.minRotation),i=Math.cos(s),r=Math.sin(s),a=this._resolveTickFontOptions(0).size;return{w:n*i+a*r,h:n*r+a*i}}_getLabelCapacity(e){const t=this.options.time,n=t.displayFormats,o=n[t.unit]||n.millisecond,s=this._tickFormatFunction(e,0,Xn(this,[e],this._majorUnit),o),i=this._getLabelSize(s),r=Math.floor(this.isHorizontal()?this.width/i.w:this.height/i.h)-1;return r>0?r:1}getDataTimestamps(){let e,t,n=this._cache.data||[];if(n.length)return n;const o=this.getMatchingVisibleMetas();if(this._normalized&&o.length)return this._cache.data=o[0].controller.getAllParsedValues(this);for(e=0,t=o.length;e<t;++e)n=n.concat(o[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const e=this._cache.labels||[];let t,n;if(e.length)return e;const o=this.getLabels();for(t=0,n=o.length;t<n;++t)e.push(qn(this,o[t]));return this._cache.labels=this._normalized?e:this.normalize(e)}normalize(e){return(0,o._)(e.sort(Yn))}}function Zn(e,t,n){let s,i,r,a,l=0,c=e.length-1;n?(t>=e[l].pos&&t<=e[c].pos&&({lo:l,hi:c}=(0,o.B)(e,"pos",t)),({pos:s,time:r}=e[l]),({pos:i,time:a}=e[c])):(t>=e[l].time&&t<=e[c].time&&({lo:l,hi:c}=(0,o.B)(e,"time",t)),({time:s,pos:r}=e[l]),({time:i,pos:a}=e[c]));const u=i-s;return u?r+(a-r)*(t-s)/u:r}class eo extends Qn{static id="timeseries";static defaults=Qn.defaults;constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this._getTimestampsForTable(),t=this._table=this.buildLookupTable(e);this._minPos=Zn(t,this.min),this._tableRange=Zn(t,this.max)-this._minPos,super.initOffsets(e)}buildLookupTable(e){const{min:t,max:n}=this,o=[],s=[];let i,r,a,l,c;for(i=0,r=e.length;i<r;++i)l=e[i],l>=t&&l<=n&&o.push(l);if(o.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(i=0,r=o.length;i<r;++i)c=o[i+1],a=o[i-1],l=o[i],Math.round((c+a)/2)!==l&&s.push({time:l,pos:i/(r-1)});return s}_generate(){const e=this.min,t=this.max;let n=super.getDataTimestamps();return n.includes(e)&&n.length||n.splice(0,0,e),n.includes(t)&&1!==n.length||n.push(t),n.sort(((e,t)=>e-t))}_getTimestampsForTable(){let e=this._cache.all||[];if(e.length)return e;const t=this.getDataTimestamps(),n=this.getLabelTimestamps();return e=t.length&&n.length?this.normalize(t.concat(n)):t.length?t:n,e=this._cache.all=e,e}getDecimalForValue(e){return(Zn(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return Zn(this._table,n*this._tableRange+this._minPos,!0)}}var to=Object.freeze({__proto__:null,CategoryScale:En,LinearScale:Tn,LogarithmicScale:Fn,RadialLinearScale:Un,TimeScale:Qn,TimeSeriesScale:eo});const no=[N,Pt,On,to]},"./node_modules/chart.js/dist/chunks/helpers.segment.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{$:()=>Je,A:()=>ae,B:()=>re,C:()=>qe,D:()=>X,E:()=>ut,F:()=>m,G:()=>Gt,H:()=>I,I:()=>It,J:()=>Kt,K:()=>qt,L:()=>me,M:()=>Ft,N:()=>U,O:()=>u,P:()=>M,Q:()=>f,R:()=>pt,S:()=>ne,T:()=>R,U:()=>K,V:()=>ze,W:()=>oe,X:()=>Ue,Y:()=>Ke,Z:()=>tt,_:()=>he,a:()=>ht,a$:()=>pe,a0:()=>dt,a1:()=>be,a2:()=>ve,a3:()=>Le,a4:()=>_,a5:()=>C,a6:()=>Fe,a7:()=>A,a8:()=>gt,a9:()=>mt,aA:()=>nn,aB:()=>ye,aC:()=>on,aD:()=>Ye,aE:()=>Q,aF:()=>s,aG:()=>Y,aH:()=>H,aI:()=>G,aJ:()=>z,aK:()=>J,aL:()=>De,aM:()=>V,aN:()=>He,aO:()=>le,aP:()=>ie,aQ:()=>Oe,aR:()=>Ee,aS:()=>b,aT:()=>y,aU:()=>w,aV:()=>S,aW:()=>j,aX:()=>$e,aY:()=>Mt,aZ:()=>Rt,a_:()=>Vt,aa:()=>bt,ab:()=>x,ac:()=>i,ad:()=>ge,ae:()=>Yt,af:()=>We,ag:()=>P,ah:()=>g,ai:()=>T,aj:()=>se,ak:()=>at,al:()=>Lt,am:()=>cn,an:()=>ln,ao:()=>Xt,ap:()=>Qt,aq:()=>Jt,ar:()=>Xe,as:()=>Qe,at:()=>Ge,au:()=>nt,av:()=>lt,aw:()=>ct,ax:()=>an,ay:()=>ee,az:()=>tn,b:()=>a,b0:()=>it,b1:()=>D,b2:()=>L,b3:()=>F,b4:()=>N,b5:()=>B,b6:()=>Z,c:()=>Ce,d:()=>Ve,e:()=>je,f:()=>O,g:()=>c,h:()=>E,i:()=>l,j:()=>ft,k:()=>r,l:()=>ue,m:()=>h,n:()=>p,o:()=>Me,p:()=>te,q:()=>_e,r:()=>fe,s:()=>$,t:()=>q,u:()=>de,v:()=>d,w:()=>xe,x:()=>W,y:()=>Et,z:()=>Ut});var o=n("./node_modules/@kurkle/color/dist/color.esm.js");function s(){}const i=(()=>{let e=0;return()=>e++})();function r(e){return null==e}function a(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.slice(0,7)&&"Array]"===t.slice(-6)}function l(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}function c(e){return("number"==typeof e||e instanceof Number)&&isFinite(+e)}function u(e,t){return c(e)?e:t}function d(e,t){return void 0===e?t:e}const h=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100:+e/t,p=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function f(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function m(e,t,n,o){let s,i,r;if(a(e))if(i=e.length,o)for(s=i-1;s>=0;s--)t.call(n,e[s],s);else for(s=0;s<i;s++)t.call(n,e[s],s);else if(l(e))for(r=Object.keys(e),i=r.length,s=0;s<i;s++)t.call(n,e[r[s]],r[s])}function g(e,t){let n,o,s,i;if(!e||!t||e.length!==t.length)return!1;for(n=0,o=e.length;n<o;++n)if(s=e[n],i=t[n],s.datasetIndex!==i.datasetIndex||s.index!==i.index)return!1;return!0}function b(e){if(a(e))return e.map(b);if(l(e)){const t=Object.create(null),n=Object.keys(e),o=n.length;let s=0;for(;s<o;++s)t[n[s]]=b(e[n[s]]);return t}return e}function v(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function y(e,t,n,o){if(!v(e))return;const s=t[e],i=n[e];l(s)&&l(i)?_(s,i,o):t[e]=b(i)}function _(e,t,n){const o=a(t)?t:[t],s=o.length;if(!l(e))return e;const i=(n=n||{}).merger||y;let r;for(let t=0;t<s;++t){if(r=o[t],!l(r))continue;const s=Object.keys(r);for(let t=0,o=s.length;t<o;++t)i(s[t],e,r,n)}return e}function x(e,t){return _(e,t,{merger:w})}function w(e,t,n){if(!v(e))return;const o=t[e],s=n[e];l(o)&&l(s)?x(o,s):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=b(s))}function S(e,t,n,o){void 0!==t&&console.warn(e+': "'+n+'" is deprecated. Please use "'+o+'" instead')}const k={"":e=>e,x:e=>e.x,y:e=>e.y};function j(e){const t=e.split("."),n=[];let o="";for(const e of t)o+=e,o.endsWith("\\")?o=o.slice(0,-1)+".":(n.push(o),o="");return n}function O(e,t){const n=k[t]||(k[t]=function(e){const t=j(e);return e=>{for(const n of t){if(""===n)break;e=e&&e[n]}return e}}(t));return n(e)}function C(e){return e.charAt(0).toUpperCase()+e.slice(1)}const E=e=>void 0!==e,A=e=>"function"==typeof e,P=(e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0};function T(e){return"mouseup"===e.type||"click"===e.type||"contextmenu"===e.type}const M=Math.PI,R=2*M,D=R+M,L=Number.POSITIVE_INFINITY,F=M/180,I=M/2,N=M/4,B=2*M/3,V=Math.log10,$=Math.sign;function z(e,t,n){return Math.abs(e-t)<n}function H(e){const t=Math.round(e);e=z(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(V(e))),o=e/n;return(o<=1?1:o<=2?2:o<=5?5:10)*n}function U(e){const t=[],n=Math.sqrt(e);let o;for(o=1;o<n;o++)e%o==0&&(t.push(o),t.push(e/o));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}function W(e){return!isNaN(parseFloat(e))&&isFinite(e)}function G(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}function Y(e,t,n){let o,s,i;for(o=0,s=e.length;o<s;o++)i=e[o][n],isNaN(i)||(t.min=Math.min(t.min,i),t.max=Math.max(t.max,i))}function q(e){return e*(M/180)}function K(e){return e*(180/M)}function J(e){if(!c(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function X(e,t){const n=t.x-e.x,o=t.y-e.y,s=Math.sqrt(n*n+o*o);let i=Math.atan2(o,n);return i<-.5*M&&(i+=R),{angle:i,distance:s}}function Q(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function Z(e,t){return(e-t+D)%R-M}function ee(e){return(e%R+R)%R}function te(e,t,n,o){const s=ee(e),i=ee(t),r=ee(n),a=ee(i-s),l=ee(r-s),c=ee(s-i),u=ee(s-r);return s===i||s===r||o&&i===r||a>l&&c<u}function ne(e,t,n){return Math.max(t,Math.min(n,e))}function oe(e){return ne(e,-32768,32767)}function se(e,t,n,o=1e-6){return e>=Math.min(t,n)-o&&e<=Math.max(t,n)+o}function ie(e,t,n){n=n||(n=>e[n]<t);let o,s=e.length-1,i=0;for(;s-i>1;)o=i+s>>1,n(o)?i=o:s=o;return{lo:i,hi:s}}const re=(e,t,n,o)=>ie(e,n,o?o=>{const s=e[o][t];return s<n||s===n&&e[o+1][t]===n}:o=>e[o][t]<n),ae=(e,t,n)=>ie(e,n,(o=>e[o][t]>=n));function le(e,t,n){let o=0,s=e.length;for(;o<s&&e[o]<t;)o++;for(;s>o&&e[s-1]>n;)s--;return o>0||s<e.length?e.slice(o,s):e}const ce=["push","pop","shift","splice","unshift"];function ue(e,t){e._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),ce.forEach((t=>{const n="_onData"+C(t),o=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value(...t){const s=o.apply(this,t);return e._chartjs.listeners.forEach((e=>{"function"==typeof e[n]&&e[n](...t)})),s}})})))}function de(e,t){const n=e._chartjs;if(!n)return;const o=n.listeners,s=o.indexOf(t);-1!==s&&o.splice(s,1),o.length>0||(ce.forEach((t=>{delete e[t]})),delete e._chartjs)}function he(e){const t=new Set(e);return t.size===e.length?e:Array.from(t)}function pe(e,t,n){return t+" "+e+"px "+n}const fe="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function me(e,t){let n=[],o=!1;return function(...s){n=s,o||(o=!0,fe.call(window,(()=>{o=!1,e.apply(t,n)})))}}function ge(e,t){let n;return function(...o){return t?(clearTimeout(n),n=setTimeout(e,t,o)):e.apply(this,o),t}}const be=e=>"start"===e?"left":"end"===e?"right":"center",ve=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2,ye=(e,t,n,o)=>e===(o?"left":"right")?n:"center"===e?(t+n)/2:t;function _e(e,t,n){const o=t.length;let s=0,i=o;if(e._sorted){const{iScale:r,_parsed:a}=e,l=r.axis,{min:c,max:u,minDefined:d,maxDefined:h}=r.getUserBounds();d&&(s=ne(Math.min(re(a,l,c).lo,n?o:re(t,l,r.getPixelForValue(c)).lo),0,o-1)),i=h?ne(Math.max(re(a,r.axis,u,!0).hi+1,n?0:re(t,l,r.getPixelForValue(u),!0).hi+1),s,o)-s:o-s}return{start:s,count:i}}function xe(e){const{xScale:t,yScale:n,_scaleRanges:o}=e,s={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!o)return e._scaleRanges=s,!0;const i=o.xmin!==t.min||o.xmax!==t.max||o.ymin!==n.min||o.ymax!==n.max;return Object.assign(o,s),i}const we=e=>0===e||1===e,Se=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*R/n),ke=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*R/n)+1,je={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*I),easeOutSine:e=>Math.sin(e*I),easeInOutSine:e=>-.5*(Math.cos(M*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>we(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>we(e)?e:Se(e,.075,.3),easeOutElastic:e=>we(e)?e:ke(e,.075,.3),easeInOutElastic(e){const t=.1125;return we(e)?e:e<.5?.5*Se(2*e,t,.45):.5+.5*ke(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-je.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*je.easeInBounce(2*e):.5*je.easeOutBounce(2*e-1)+.5};function Oe(e){if(e&&"object"==typeof e){const t=e.toString();return"[object CanvasPattern]"===t||"[object CanvasGradient]"===t}return!1}function Ce(e){return Oe(e)?e:new o.Color(e)}function Ee(e){return Oe(e)?e:new o.Color(e).saturate(.5).darken(.1).hexString()}const Ae=["x","y","borderWidth","radius","tension"],Pe=["color","borderColor","backgroundColor"],Te=new Map;function Me(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let o=Te.get(n);return o||(o=new Intl.NumberFormat(e,t),Te.set(n,o)),o}(t,n).format(e)}const Re={values:e=>a(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const o=this.chart.options.locale;let s,i=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(s="scientific"),i=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const r=V(Math.abs(i)),a=isNaN(r)?1:Math.max(Math.min(-1*Math.floor(r),20),0),l={notation:s,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Me(e,o,l)},logarithmic(e,t,n){if(0===e)return"0";const o=n[t].significand||e/Math.pow(10,Math.floor(V(e)));return[1,2,3,5,10,15].includes(o)||t>.8*n.length?Re.numeric.call(this,e,t,n):""}};var De={formatters:Re};const Le=Object.create(null),Fe=Object.create(null);function Ie(e,t){if(!t)return e;const n=t.split(".");for(let t=0,o=n.length;t<o;++t){const o=n[t];e=e[o]||(e[o]=Object.create(null))}return e}function Ne(e,t,n){return"string"==typeof t?_(Ie(e,t),n):_(Ie(e,""),t)}class Be{constructor(e,t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>Ee(t.backgroundColor),this.hoverBorderColor=(e,t)=>Ee(t.borderColor),this.hoverColor=(e,t)=>Ee(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(e),this.apply(t)}set(e,t){return Ne(this,e,t)}get(e){return Ie(this,e)}describe(e,t){return Ne(Fe,e,t)}override(e,t){return Ne(Le,e,t)}route(e,t,n,o){const s=Ie(this,e),i=Ie(this,n),r="_"+t;Object.defineProperties(s,{[r]:{value:s[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[r],t=i[o];return l(e)?Object.assign({},t,e):d(e,t)},set(e){this[r]=e}}})}apply(e){e.forEach((e=>e(this)))}}var Ve=new Be({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(e){e.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),e.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),e.set("animations",{colors:{type:"color",properties:Pe},numbers:{type:"number",properties:Ae}}),e.describe("animations",{_fallback:"animation"}),e.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}})},function(e){e.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(e){e.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:De.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),e.route("scale.ticks","color","","color"),e.route("scale.grid","color","","borderColor"),e.route("scale.border","color","","borderColor"),e.route("scale.title","color","","color"),e.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e&&"dash"!==e}),e.describe("scales",{_fallback:"scale"}),e.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e})}]);function $e(e){return!e||r(e.size)||r(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}function ze(e,t,n,o,s){let i=t[s];return i||(i=t[s]=e.measureText(s).width,n.push(s)),i>o&&(o=i),o}function He(e,t,n,o){let s=(o=o||{}).data=o.data||{},i=o.garbageCollect=o.garbageCollect||[];o.font!==t&&(s=o.data={},i=o.garbageCollect=[],o.font=t),e.save(),e.font=t;let r=0;const l=n.length;let c,u,d,h,p;for(c=0;c<l;c++)if(h=n[c],null==h||a(h)){if(a(h))for(u=0,d=h.length;u<d;u++)p=h[u],null==p||a(p)||(r=ze(e,s,i,r,p))}else r=ze(e,s,i,r,h);e.restore();const f=i.length/2;if(f>n.length){for(c=0;c<f;c++)delete s[i[c]];i.splice(0,f)}return r}function Ue(e,t,n){const o=e.currentDevicePixelRatio,s=0!==n?Math.max(n/2,.5):0;return Math.round((t-s)*o)/o+s}function We(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function Ge(e,t,n,o){Ye(e,t,n,o,null)}function Ye(e,t,n,o,s){let i,r,a,l,c,u,d,h;const p=t.pointStyle,f=t.rotation,m=t.radius;let g=(f||0)*F;if(p&&"object"==typeof p&&(i=p.toString(),"[object HTMLImageElement]"===i||"[object HTMLCanvasElement]"===i))return e.save(),e.translate(n,o),e.rotate(g),e.drawImage(p,-p.width/2,-p.height/2,p.width,p.height),void e.restore();if(!(isNaN(m)||m<=0)){switch(e.beginPath(),p){default:s?e.ellipse(n,o,s/2,m,0,0,R):e.arc(n,o,m,0,R),e.closePath();break;case"triangle":u=s?s/2:m,e.moveTo(n+Math.sin(g)*u,o-Math.cos(g)*m),g+=B,e.lineTo(n+Math.sin(g)*u,o-Math.cos(g)*m),g+=B,e.lineTo(n+Math.sin(g)*u,o-Math.cos(g)*m),e.closePath();break;case"rectRounded":c=.516*m,l=m-c,r=Math.cos(g+N)*l,d=Math.cos(g+N)*(s?s/2-c:l),a=Math.sin(g+N)*l,h=Math.sin(g+N)*(s?s/2-c:l),e.arc(n-d,o-a,c,g-M,g-I),e.arc(n+h,o-r,c,g-I,g),e.arc(n+d,o+a,c,g,g+I),e.arc(n-h,o+r,c,g+I,g+M),e.closePath();break;case"rect":if(!f){l=Math.SQRT1_2*m,u=s?s/2:l,e.rect(n-u,o-l,2*u,2*l);break}g+=N;case"rectRot":d=Math.cos(g)*(s?s/2:m),r=Math.cos(g)*m,a=Math.sin(g)*m,h=Math.sin(g)*(s?s/2:m),e.moveTo(n-d,o-a),e.lineTo(n+h,o-r),e.lineTo(n+d,o+a),e.lineTo(n-h,o+r),e.closePath();break;case"crossRot":g+=N;case"cross":d=Math.cos(g)*(s?s/2:m),r=Math.cos(g)*m,a=Math.sin(g)*m,h=Math.sin(g)*(s?s/2:m),e.moveTo(n-d,o-a),e.lineTo(n+d,o+a),e.moveTo(n+h,o-r),e.lineTo(n-h,o+r);break;case"star":d=Math.cos(g)*(s?s/2:m),r=Math.cos(g)*m,a=Math.sin(g)*m,h=Math.sin(g)*(s?s/2:m),e.moveTo(n-d,o-a),e.lineTo(n+d,o+a),e.moveTo(n+h,o-r),e.lineTo(n-h,o+r),g+=N,d=Math.cos(g)*(s?s/2:m),r=Math.cos(g)*m,a=Math.sin(g)*m,h=Math.sin(g)*(s?s/2:m),e.moveTo(n-d,o-a),e.lineTo(n+d,o+a),e.moveTo(n+h,o-r),e.lineTo(n-h,o+r);break;case"line":r=s?s/2:Math.cos(g)*m,a=Math.sin(g)*m,e.moveTo(n-r,o-a),e.lineTo(n+r,o+a);break;case"dash":e.moveTo(n,o),e.lineTo(n+Math.cos(g)*(s?s/2:m),o+Math.sin(g)*m);break;case!1:e.closePath()}e.fill(),t.borderWidth>0&&e.stroke()}}function qe(e,t,n){return n=n||.5,!t||e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function Ke(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function Je(e){e.restore()}function Xe(e,t,n,o,s){if(!t)return e.lineTo(n.x,n.y);if("middle"===s){const o=(t.x+n.x)/2;e.lineTo(o,t.y),e.lineTo(o,n.y)}else"after"===s!=!!o?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function Qe(e,t,n,o){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(o?t.cp1x:t.cp2x,o?t.cp1y:t.cp2y,o?n.cp2x:n.cp1x,o?n.cp2y:n.cp1y,n.x,n.y)}function Ze(e,t,n,o,s){if(s.strikethrough||s.underline){const i=e.measureText(o),r=t-i.actualBoundingBoxLeft,a=t+i.actualBoundingBoxRight,l=n-i.actualBoundingBoxAscent,c=n+i.actualBoundingBoxDescent,u=s.strikethrough?(l+c)/2:c;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=s.decorationWidth||2,e.moveTo(r,u),e.lineTo(a,u),e.stroke()}}function et(e,t){const n=e.fillStyle;e.fillStyle=t.color,e.fillRect(t.left,t.top,t.width,t.height),e.fillStyle=n}function tt(e,t,n,o,s,i={}){const l=a(t)?t:[t],c=i.strokeWidth>0&&""!==i.strokeColor;let u,d;for(e.save(),e.font=s.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),r(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,i),u=0;u<l.length;++u)d=l[u],i.backdrop&&et(e,i.backdrop),c&&(i.strokeColor&&(e.strokeStyle=i.strokeColor),r(i.strokeWidth)||(e.lineWidth=i.strokeWidth),e.strokeText(d,n,o,i.maxWidth)),e.fillText(d,n,o,i.maxWidth),Ze(e,n,o,d,i),o+=Number(s.lineHeight);e.restore()}function nt(e,t){const{x:n,y:o,w:s,h:i,radius:r}=t;e.arc(n+r.topLeft,o+r.topLeft,r.topLeft,1.5*M,M,!0),e.lineTo(n,o+i-r.bottomLeft),e.arc(n+r.bottomLeft,o+i-r.bottomLeft,r.bottomLeft,M,I,!0),e.lineTo(n+s-r.bottomRight,o+i),e.arc(n+s-r.bottomRight,o+i-r.bottomRight,r.bottomRight,I,0,!0),e.lineTo(n+s,o+r.topRight),e.arc(n+s-r.topRight,o+r.topRight,r.topRight,0,-I,!0),e.lineTo(n+r.topLeft,o)}const ot=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,st=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function it(e,t){const n=(""+e).match(ot);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}const rt=e=>+e||0;function at(e,t){const n={},o=l(t),s=o?Object.keys(t):t,i=l(e)?o?n=>d(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of s)n[e]=rt(i(e));return n}function lt(e){return at(e,{top:"y",right:"x",bottom:"y",left:"x"})}function ct(e){return at(e,["topLeft","topRight","bottomLeft","bottomRight"])}function ut(e){const t=lt(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function dt(e,t){e=e||{},t=t||Ve.font;let n=d(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let o=d(e.style,t.style);o&&!(""+o).match(st)&&(console.warn('Invalid font style specified: "'+o+'"'),o=void 0);const s={family:d(e.family,t.family),lineHeight:it(d(e.lineHeight,t.lineHeight),n),size:n,style:o,weight:d(e.weight,t.weight),string:""};return s.string=$e(s),s}function ht(e,t,n,o){let s,i,r,l=!0;for(s=0,i=e.length;s<i;++s)if(r=e[s],void 0!==r&&(void 0!==t&&"function"==typeof r&&(r=r(t),l=!1),void 0!==n&&a(r)&&(r=r[n%r.length],l=!1),void 0!==r))return o&&!l&&(o.cacheable=!1),r}function pt(e,t,n){const{min:o,max:s}=e,i=p(t,(s-o)/2),r=(e,t)=>n&&0===e?0:e+t;return{min:r(o,-Math.abs(i)),max:r(s,i)}}function ft(e,t){return Object.assign(Object.create(e),t)}function mt(e,t=[""],n,o,s=(()=>e[0])){const i=n||e;void 0===o&&(o=Ot("_fallback",e));const r={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:i,_fallback:o,_getTarget:s,override:n=>mt([n,...e],t,i,o)};return new Proxy(r,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,o)=>_t(n,o,(()=>function(e,t,n,o){let s;for(const i of t)if(s=Ot(vt(i,e),n),void 0!==s)return yt(e,s)?kt(n,o,e,s):s}(o,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>Ct(e).includes(t),ownKeys:e=>Ct(e),set(e,t,n){const o=e._storage||(e._storage=s());return e[t]=o[t]=n,delete e._keys,!0}})}function gt(e,t,n,o){const s={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:bt(e,o),setContext:t=>gt(e,t,n,o),override:s=>gt(e.override(s),t,n,o)};return new Proxy(s,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>_t(e,t,(()=>function(e,t,n){const{_proxy:o,_context:s,_subProxy:i,_descriptors:r}=e;let c=o[t];return A(c)&&r.isScriptable(t)&&(c=function(e,t,n,o){const{_proxy:s,_context:i,_subProxy:r,_stack:a}=n;if(a.has(e))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+e);a.add(e);let l=t(i,r||o);return a.delete(e),yt(e,l)&&(l=kt(s._scopes,s,e,l)),l}(t,c,e,n)),a(c)&&c.length&&(c=function(e,t,n,o){const{_proxy:s,_context:i,_subProxy:r,_descriptors:a}=n;if(void 0!==i.index&&o(e))return t[i.index%t.length];if(l(t[0])){const n=t,o=s._scopes.filter((e=>e!==n));t=[];for(const l of n){const n=kt(o,s,e,l);t.push(gt(n,i,r&&r[e],a))}}return t}(t,c,e,r.isIndexable)),yt(t,c)&&(c=gt(c,s,i&&i[t],r)),c}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,o)=>(e[n]=o,delete t[n],!0)})}function bt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:o=t.indexable,_allKeys:s=t.allKeys}=e;return{allKeys:s,scriptable:n,indexable:o,isScriptable:A(n)?n:()=>n,isIndexable:A(o)?o:()=>o}}const vt=(e,t)=>e?e+C(t):t,yt=(e,t)=>l(t)&&"adapters"!==e&&(null===Object.getPrototypeOf(t)||t.constructor===Object);function _t(e,t,n){if(Object.prototype.hasOwnProperty.call(e,t))return e[t];const o=n();return e[t]=o,o}function xt(e,t,n){return A(e)?e(t,n):e}const wt=(e,t)=>!0===e?t:"string"==typeof e?O(t,e):void 0;function St(e,t,n,o,s){for(const i of t){const t=wt(n,i);if(t){e.add(t);const i=xt(t._fallback,n,s);if(void 0!==i&&i!==n&&i!==o)return i}else if(!1===t&&void 0!==o&&n!==o)return null}return!1}function kt(e,t,n,o){const s=t._rootScopes,i=xt(t._fallback,n,o),r=[...e,...s],c=new Set;c.add(o);let u=jt(c,r,n,i||n,o);return null!==u&&(void 0===i||i===n||(u=jt(c,r,i,u,o),null!==u))&&mt(Array.from(c),[""],s,i,(()=>function(e,t,n){const o=e._getTarget();t in o||(o[t]={});const s=o[t];return a(s)&&l(n)?n:s||{}}(t,n,o)))}function jt(e,t,n,o,s){for(;n;)n=St(e,t,n,o,s);return n}function Ot(e,t){for(const n of t){if(!n)continue;const t=n[e];if(void 0!==t)return t}}function Ct(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}function Et(e,t,n,o){const{iScale:s}=e,{key:i="r"}=this._parsing,r=new Array(o);let a,l,c,u;for(a=0,l=o;a<l;++a)c=a+n,u=t[c],r[a]={r:s.parse(O(u,i),c)};return r}const At=Number.EPSILON||1e-14,Pt=(e,t)=>t<e.length&&!e[t].skip&&e[t],Tt=e=>"x"===e?"y":"x";function Mt(e,t,n,o){const s=e.skip?t:e,i=t,r=n.skip?t:n,a=Q(i,s),l=Q(r,i);let c=a/(a+l),u=l/(a+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=o*c,h=o*u;return{previous:{x:i.x-d*(r.x-s.x),y:i.y-d*(r.y-s.y)},next:{x:i.x+h*(r.x-s.x),y:i.y+h*(r.y-s.y)}}}function Rt(e,t="x"){const n=Tt(t),o=e.length,s=Array(o).fill(0),i=Array(o);let r,a,l,c=Pt(e,0);for(r=0;r<o;++r)if(a=l,l=c,c=Pt(e,r+1),l){if(c){const e=c[t]-l[t];s[r]=0!==e?(c[n]-l[n])/e:0}i[r]=a?c?$(s[r-1])!==$(s[r])?0:(s[r-1]+s[r])/2:s[r-1]:s[r]}!function(e,t,n){const o=e.length;let s,i,r,a,l,c=Pt(e,0);for(let u=0;u<o-1;++u)l=c,c=Pt(e,u+1),l&&c&&(z(t[u],0,At)?n[u]=n[u+1]=0:(s=n[u]/t[u],i=n[u+1]/t[u],a=Math.pow(s,2)+Math.pow(i,2),a<=9||(r=3/Math.sqrt(a),n[u]=s*r*t[u],n[u+1]=i*r*t[u])))}(e,s,i),function(e,t,n="x"){const o=Tt(n),s=e.length;let i,r,a,l=Pt(e,0);for(let c=0;c<s;++c){if(r=a,a=l,l=Pt(e,c+1),!a)continue;const s=a[n],u=a[o];r&&(i=(s-r[n])/3,a[`cp1${n}`]=s-i,a[`cp1${o}`]=u-i*t[c]),l&&(i=(l[n]-s)/3,a[`cp2${n}`]=s+i,a[`cp2${o}`]=u+i*t[c])}}(e,i,t)}function Dt(e,t,n){return Math.max(Math.min(e,n),t)}function Lt(e,t,n,o,s){let i,r,a,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)Rt(e,s);else{let n=o?e[e.length-1]:e[0];for(i=0,r=e.length;i<r;++i)a=e[i],l=Mt(n,a,e[Math.min(i+1,r-(o?0:1))%r],t.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,n=a}t.capBezierPoints&&function(e,t){let n,o,s,i,r,a=qe(e[0],t);for(n=0,o=e.length;n<o;++n)r=i,i=a,a=n<o-1&&qe(e[n+1],t),i&&(s=e[n],r&&(s.cp1x=Dt(s.cp1x,t.left,t.right),s.cp1y=Dt(s.cp1y,t.top,t.bottom)),a&&(s.cp2x=Dt(s.cp2x,t.left,t.right),s.cp2y=Dt(s.cp2y,t.top,t.bottom)))}(e,n)}function Ft(){return"undefined"!=typeof window&&"undefined"!=typeof document}function It(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function Nt(e,t,n){let o;return"string"==typeof e?(o=parseInt(e,10),-1!==e.indexOf("%")&&(o=o/100*t.parentNode[n])):o=e,o}const Bt=e=>e.ownerDocument.defaultView.getComputedStyle(e,null);function Vt(e,t){return Bt(e).getPropertyValue(t)}const $t=["top","right","bottom","left"];function zt(e,t,n){const o={};n=n?"-"+n:"";for(let s=0;s<4;s++){const i=$t[s];o[i]=parseFloat(e[t+"-"+i+n])||0}return o.width=o.left+o.right,o.height=o.top+o.bottom,o}const Ht=(e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot);function Ut(e,t){if("native"in e)return e;const{canvas:n,currentDevicePixelRatio:o}=t,s=Bt(n),i="border-box"===s.boxSizing,r=zt(s,"padding"),a=zt(s,"border","width"),{x:l,y:c,box:u}=function(e,t){const n=e.touches,o=n&&n.length?n[0]:e,{offsetX:s,offsetY:i}=o;let r,a,l=!1;if(Ht(s,i,e.target))r=s,a=i;else{const e=t.getBoundingClientRect();r=o.clientX-e.left,a=o.clientY-e.top,l=!0}return{x:r,y:a,box:l}}(e,n),d=r.left+(u&&a.left),h=r.top+(u&&a.top);let{width:p,height:f}=t;return i&&(p-=r.width+a.width,f-=r.height+a.height),{x:Math.round((l-d)/p*n.width/o),y:Math.round((c-h)/f*n.height/o)}}const Wt=e=>Math.round(10*e)/10;function Gt(e,t,n,o){const s=Bt(e),i=zt(s,"margin"),r=Nt(s.maxWidth,e,"clientWidth")||L,a=Nt(s.maxHeight,e,"clientHeight")||L,l=function(e,t,n){let o,s;if(void 0===t||void 0===n){const i=It(e);if(i){const e=i.getBoundingClientRect(),r=Bt(i),a=zt(r,"border","width"),l=zt(r,"padding");t=e.width-l.width-a.width,n=e.height-l.height-a.height,o=Nt(r.maxWidth,i,"clientWidth"),s=Nt(r.maxHeight,i,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:o||L,maxHeight:s||L}}(e,t,n);let{width:c,height:u}=l;if("content-box"===s.boxSizing){const e=zt(s,"border","width"),t=zt(s,"padding");c-=t.width+e.width,u-=t.height+e.height}return c=Math.max(0,c-i.width),u=Math.max(0,o?c/o:u-i.height),c=Wt(Math.min(c,r,l.maxWidth)),u=Wt(Math.min(u,a,l.maxHeight)),c&&!u&&(u=Wt(c/2)),(void 0!==t||void 0!==n)&&o&&l.height&&u>l.height&&(u=l.height,c=Wt(Math.floor(u*o))),{width:c,height:u}}function Yt(e,t,n){const o=t||1,s=Math.floor(e.height*o),i=Math.floor(e.width*o);e.height=Math.floor(e.height),e.width=Math.floor(e.width);const r=e.canvas;return r.style&&(n||!r.style.height&&!r.style.width)&&(r.style.height=`${e.height}px`,r.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==o||r.height!==s||r.width!==i)&&(e.currentDevicePixelRatio=o,r.height=s,r.width=i,e.ctx.setTransform(o,0,0,o,0,0),!0)}const qt=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function Kt(e,t){const n=Vt(e,t),o=n&&n.match(/^(\d+)(\.\d+)?px$/);return o?+o[1]:void 0}function Jt(e,t,n,o){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function Xt(e,t,n,o){return{x:e.x+n*(t.x-e.x),y:"middle"===o?n<.5?e.y:t.y:"after"===o?n<1?e.y:t.y:n>0?t.y:e.y}}function Qt(e,t,n,o){const s={x:e.cp2x,y:e.cp2y},i={x:t.cp1x,y:t.cp1y},r=Jt(e,s,n),a=Jt(s,i,n),l=Jt(i,t,n),c=Jt(r,a,n),u=Jt(a,l,n);return Jt(c,u,n)}const Zt=function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}},en=function(){return{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}};function tn(e,t,n){return e?Zt(t,n):en()}function nn(e,t){let n,o;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,o=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=o)}function on(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function sn(e){return"angle"===e?{between:te,compare:Z,normalize:ee}:{between:se,compare:(e,t)=>e-t,normalize:e=>e}}function rn({start:e,end:t,count:n,loop:o,style:s}){return{start:e%n,end:t%n,loop:o&&(t-e+1)%n==0,style:s}}function an(e,t,n){if(!n)return[e];const{property:o,start:s,end:i}=n,r=t.length,{compare:a,between:l,normalize:c}=sn(o),{start:u,end:d,loop:h,style:p}=function(e,t,n){const{property:o,start:s,end:i}=n,{between:r,normalize:a}=sn(o),l=t.length;let c,u,{start:d,end:h,loop:p}=e;if(p){for(d+=l,h+=l,c=0,u=l;c<u&&r(a(t[d%l][o]),s,i);++c)d--,h--;d%=l,h%=l}return h<d&&(h+=l),{start:d,end:h,loop:p,style:e.style}}(e,t,n),f=[];let m,g,b,v=!1,y=null;for(let e=u,n=u;e<=d;++e)g=t[e%r],g.skip||(m=c(g[o]),m!==b&&(v=l(m,s,i),null===y&&(v||l(s,b,m)&&0!==a(s,b))&&(y=0===a(m,s)?e:n),null!==y&&(!v||0===a(i,m)||l(i,b,m))&&(f.push(rn({start:y,end:e,loop:h,count:r,style:p})),y=null),n=e,b=m));return null!==y&&f.push(rn({start:y,end:d,loop:h,count:r,style:p})),f}function ln(e,t){const n=[],o=e.segments;for(let s=0;s<o.length;s++){const i=an(o[s],e.points,t);i.length&&n.push(...i)}return n}function cn(e,t){const n=e.points,o=e.options.spanGaps,s=n.length;if(!s)return[];const i=!!e._loop,{start:r,end:a}=function(e,t,n,o){let s=0,i=t-1;if(n&&!o)for(;s<t&&!e[s].skip;)s++;for(;s<t&&e[s].skip;)s++;for(s%=t,n&&(i+=s);i>s&&e[i%t].skip;)i--;return i%=t,{start:s,end:i}}(n,s,i,o);return un(e,!0===o?[{start:r,end:a,loop:i}]:function(e,t,n,o){const s=e.length,i=[];let r,a=t,l=e[t];for(r=t+1;r<=n;++r){const n=e[r%s];n.skip||n.stop?l.skip||(o=!1,i.push({start:t%s,end:(r-1)%s,loop:o}),t=a=n.stop?r:null):(a=r,l.skip&&(t=r)),l=n}return null!==a&&i.push({start:t%s,end:a%s,loop:o}),i}(n,r,a<r?a+s:a,!!e._fullLoop&&0===r&&a===s-1),n,t)}function un(e,t,n,o){return o&&o.setContext&&n?function(e,t,n,o){const s=e._chart.getContext(),i=dn(e.options),{_datasetIndex:r,options:{spanGaps:a}}=e,l=n.length,c=[];let u=i,d=t[0].start,h=d;function p(e,t,o,s){const i=a?-1:1;if(e!==t){for(e+=l;n[e%l].skip;)e-=i;for(;n[t%l].skip;)t+=i;e%l!=t%l&&(c.push({start:e%l,end:t%l,loop:o,style:s}),u=s,d=t%l)}}for(const e of t){d=a?d:e.start;let t,i=n[d%l];for(h=d+1;h<=e.end;h++){const a=n[h%l];t=dn(o.setContext(ft(s,{type:"segment",p0:i,p1:a,p0DataIndex:(h-1)%l,p1DataIndex:h%l,datasetIndex:r}))),hn(t,u)&&p(d,h-1,e.loop,u),i=a,u=t}d<h-1&&p(d,h-1,e.loop,u)}return c}(e,t,n,o):t}function dn(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function hn(e,t){if(!t)return!1;const n=[],o=function(e,t){return Oe(t)?(n.includes(t)||n.push(t),n.indexOf(t)):t};return JSON.stringify(e,o)!==JSON.stringify(t,o)}},"./node_modules/memize/dist/index.js":(e,t,n)=>{"use strict";function o(e,t){var n,o,s=0;function i(){var i,r,a=n,l=arguments.length;e:for(;a;){if(a.args.length===arguments.length){for(r=0;r<l;r++)if(a.args[r]!==arguments[r]){a=a.next;continue e}return a!==n&&(a===o&&(o=a.prev),a.prev.next=a.next,a.next&&(a.next.prev=a.prev),a.next=n,a.prev=null,n.prev=a,n=a),a.val}a=a.next}for(i=new Array(l),r=0;r<l;r++)i[r]=arguments[r];return a={args:i,val:e.apply(null,i)},n?(n.prev=a,a.next=n):o=a,s===t.maxSize?(o=o.prev).next=null:s++,n=a,a.val}return t=t||{},i.clear=function(){n=null,o=null,s=0},i}n.r(t),n.d(t,{default:()=>o})},"./node_modules/vue-chartjs/dist/index.js":(e,t,n)=>{"use strict";n.r(t),n.d(t,{Bar:()=>g,Bubble:()=>w,Chart:()=>f,Doughnut:()=>b,Line:()=>v,Pie:()=>y,PolarArea:()=>_,Radar:()=>x,Scatter:()=>S,createTypedChart:()=>m,getDatasetAtEvent:()=>d,getElementAtEvent:()=>h,getElementsAtEvent:()=>p});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=n("./node_modules/chart.js/dist/chart.js");const i={data:{type:Object,required:!0},options:{type:Object,default:()=>({})},plugins:{type:Array,default:()=>[]},datasetIdKey:{type:String,default:"label"},updateMode:{type:String,default:void 0}},r={type:{type:String,required:!0},...i},a="2"===o.version[0]?(e,t)=>Object.assign(e,{attrs:t}):(e,t)=>Object.assign(e,t);function l(e){return(0,o.isProxy)(e)?(0,o.toRaw)(e):e}function c(e,t){e.labels=t}function u(e,t,n){const o=[];e.datasets=t.map((t=>{const s=e.datasets.find((e=>e[n]===t[n]));return s&&t.data&&!o.includes(s)?(o.push(s),Object.assign(s,t),s):{...t}}))}function d(e,t){return e.getElementsAtEventForMode(t,"dataset",{intersect:!0},!1)}function h(e,t){return e.getElementsAtEventForMode(t,"nearest",{intersect:!0},!1)}function p(e,t){return e.getElementsAtEventForMode(t,"index",{intersect:!0},!1)}const f=(0,o.defineComponent)({props:r,setup(e,t){let{expose:n}=t;const i=(0,o.ref)(null),r=(0,o.shallowRef)(null);return n({chart:r}),(0,o.onMounted)((()=>{if(!i.value)return;const{type:t,data:n,options:a,plugins:l,datasetIdKey:d}=e,h=function(e,t){const n={labels:[],datasets:[]};return c(n,e.labels),u(n,e.datasets,t),n}(n,d),p=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e;return(0,o.isProxy)(t)?new Proxy(e,{}):e}(h,n);r.value=new s.Chart(i.value,{type:t,data:p,options:{...a},plugins:l})})),(0,o.onBeforeUnmount)((()=>{const e=(0,o.toRaw)(r.value);e&&(e.destroy(),r.value=null)})),(0,o.watch)([()=>e.options,()=>e.data],((t,n)=>{let[s,i]=t,[a,d]=n;const h=(0,o.toRaw)(r.value);if(!h)return;let p=!1;if(s){const e=l(s),t=l(a);e&&e!==t&&(function(e,t){const n=e.options;n&&t&&Object.assign(n,t)}(h,e),p=!0)}if(i){const t=l(i.labels),n=l(d.labels),o=l(i.datasets),s=l(d.datasets);t!==n&&(c(h.config.data,t),p=!0),o&&o!==s&&(u(h.config.data,o,e.datasetIdKey),p=!0)}p&&(t=>{t.update(e.updateMode)})(h)}),{deep:!0}),()=>(0,o.h)("canvas",{ref:i})}});function m(e,t){return s.Chart.register(t),(0,o.defineComponent)({props:i,setup(t,n){let{expose:s}=n;const i=(0,o.shallowRef)(null),r=e=>{i.value=e?.chart};return s({chart:i}),()=>(0,o.h)(f,a({ref:r},{type:e,...t}))}})}const g=m("bar",s.BarController),b=m("doughnut",s.DoughnutController),v=m("line",s.LineController),y=m("pie",s.PieController),_=m("polarArea",s.PolarAreaController),x=m("radar",s.RadarController),w=m("bubble",s.BubbleController),S=m("scatter",s.ScatterController)},"./node_modules/vue-router/dist/vue-router.mjs":(e,t,n)=>{"use strict";n.r(t),n.d(t,{NavigationFailureType:()=>B,RouterLink:()=>He,RouterView:()=>Ye,START_LOCATION:()=>I,createMemoryHistory:()=>D,createRouter:()=>dt,createRouterMatcher:()=>Z,createWebHashHistory:()=>L,createWebHistory:()=>R,isNavigationFailure:()=>z,loadRouteLocation:()=>$e,matchedRouteKey:()=>Pe,onBeforeRouteLeave:()=>Ie,onBeforeRouteUpdate:()=>Ne,parseQuery:()=>Ce,routeLocationKey:()=>Re,routerKey:()=>Me,routerViewLocationKey:()=>De,stringifyQuery:()=>Ee,useLink:()=>ze,useRoute:()=>pt,useRouter:()=>ht,viewDepthKey:()=>Te});var o=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),s=n("./node_modules/@vue/devtools-api/lib/esm/index.js");const i="undefined"!=typeof window;function r(e){return e.__esModule||"Module"===e[Symbol.toStringTag]}const a=Object.assign;function l(e,t){const n={};for(const o in t){const s=t[o];n[o]=u(s)?s.map(e):e(s)}return n}const c=()=>{},u=Array.isArray;function d(e){const t=Array.from(arguments).slice(1);console.warn.apply(console,["[Vue Router warn]: "+e].concat(t))}const h=/\/$/,p=e=>e.replace(h,"");function f(e,t,n="/"){let o,s={},i="",r="";const a=t.indexOf("#");let l=t.indexOf("?");return a<l&&a>=0&&(l=-1),l>-1&&(o=t.slice(0,l),i=t.slice(l+1,a>-1?a:t.length),s=e(i)),a>-1&&(o=o||t.slice(0,a),r=t.slice(a,t.length)),o=function(e,t){if(e.startsWith("/"))return e;if(!t.startsWith("/"))return d(`Cannot resolve a relative location without an absolute path. Trying to resolve "${e}" from "${t}". It should look like "/${t}".`),e;if(!e)return t;const n=t.split("/"),o=e.split("/"),s=o[o.length-1];".."!==s&&"."!==s||o.push("");let i,r,a=n.length-1;for(i=0;i<o.length;i++)if(r=o[i],"."!==r){if(".."!==r)break;a>1&&a--}return n.slice(0,a).join("/")+"/"+o.slice(i-(i===o.length?1:0)).join("/")}(null!=o?o:t,n),{fullPath:o+(i&&"?")+i+r,path:o,query:s,hash:r}}function m(e,t){return t&&e.toLowerCase().startsWith(t.toLowerCase())?e.slice(t.length)||"/":e}function g(e,t,n){const o=t.matched.length-1,s=n.matched.length-1;return o>-1&&o===s&&b(t.matched[o],n.matched[s])&&v(t.params,n.params)&&e(t.query)===e(n.query)&&t.hash===n.hash}function b(e,t){return(e.aliasOf||e)===(t.aliasOf||t)}function v(e,t){if(Object.keys(e).length!==Object.keys(t).length)return!1;for(const n in e)if(!y(e[n],t[n]))return!1;return!0}function y(e,t){return u(e)?_(e,t):u(t)?_(t,e):e===t}function _(e,t){return u(t)?e.length===t.length&&e.every(((e,n)=>e===t[n])):1===e.length&&e[0]===t}var x,w;!function(e){e.pop="pop",e.push="push"}(x||(x={})),function(e){e.back="back",e.forward="forward",e.unknown=""}(w||(w={}));const S="";function k(e){if(!e)if(i){const t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^\w+:\/\/[^\/]+/,"")}else e="/";return"/"!==e[0]&&"#"!==e[0]&&(e="/"+e),p(e)}const j=/^[^#]+#/;function O(e,t){return e.replace(j,"#")+t}const C=()=>({left:window.pageXOffset,top:window.pageYOffset});function E(e,t){return(history.state?history.state.position-t:-1)+e}const A=new Map;let P=()=>location.protocol+"//"+location.host;function T(e,t){const{pathname:n,search:o,hash:s}=t,i=e.indexOf("#");if(i>-1){let t=s.includes(e.slice(i))?e.slice(i).length:1,n=s.slice(t);return"/"!==n[0]&&(n="/"+n),m(n,"")}return m(n,e)+o+s}function M(e,t,n,o=!1,s=!1){return{back:e,current:t,forward:n,replaced:o,position:window.history.length,scroll:s?C():null}}function R(e){const t=function(e){const{history:t,location:n}=window,o={value:T(e,n)},s={value:t.state};function i(o,i,r){const a=e.indexOf("#"),l=a>-1?(n.host&&document.querySelector("base")?e:e.slice(a))+o:P()+e+o;try{t[r?"replaceState":"pushState"](i,"",l),s.value=i}catch(e){d("Error with push/replace State",e),n[r?"replace":"assign"](l)}}return s.value||i(o.value,{back:null,current:o.value,forward:null,position:t.length-1,replaced:!0,scroll:null},!0),{location:o,state:s,push:function(e,n){const r=a({},s.value,t.state,{forward:e,scroll:C()});t.state||d("history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\n\nhistory.replaceState(history.state, '', url)\n\nYou can find more information at https://next.router.vuejs.org/guide/migration/#usage-of-history-state."),i(r.current,r,!0),i(e,a({},M(o.value,e,null),{position:r.position+1},n),!1),o.value=e},replace:function(e,n){i(e,a({},t.state,M(s.value.back,e,s.value.forward,!0),n,{position:s.value.position}),!0),o.value=e}}}(e=k(e)),n=function(e,t,n,o){let s=[],i=[],r=null;const l=({state:i})=>{const a=T(e,location),l=n.value,c=t.value;let u=0;if(i){if(n.value=a,t.value=i,r&&r===l)return void(r=null);u=c?i.position-c.position:0}else o(a);s.forEach((e=>{e(n.value,l,{delta:u,type:x.pop,direction:u?u>0?w.forward:w.back:w.unknown})}))};function c(){const{history:e}=window;e.state&&e.replaceState(a({},e.state,{scroll:C()}),"")}return window.addEventListener("popstate",l),window.addEventListener("beforeunload",c,{passive:!0}),{pauseListeners:function(){r=n.value},listen:function(e){s.push(e);const t=()=>{const t=s.indexOf(e);t>-1&&s.splice(t,1)};return i.push(t),t},destroy:function(){for(const e of i)e();i=[],window.removeEventListener("popstate",l),window.removeEventListener("beforeunload",c)}}}(e,t.state,t.location,t.replace),o=a({location:"",base:e,go:function(e,t=!0){t||n.pauseListeners(),history.go(e)},createHref:O.bind(null,e)},t,n);return Object.defineProperty(o,"location",{enumerable:!0,get:()=>t.location.value}),Object.defineProperty(o,"state",{enumerable:!0,get:()=>t.state.value}),o}function D(e=""){let t=[],n=[S],o=0;function s(e){o++,o!==n.length&&n.splice(o),n.push(e)}e=k(e);const i={location:S,state:{},base:e,createHref:O.bind(null,e),replace(e){n.splice(o--,1),s(e)},push(e,t){s(e)},listen:e=>(t.push(e),()=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)}),destroy(){t=[],n=[S],o=0},go(e,s=!0){const i=this.location,r=e<0?w.back:w.forward;o=Math.max(0,Math.min(o+e,n.length-1)),s&&function(e,n,{direction:o,delta:s}){const i={direction:o,delta:s,type:x.pop};for(const o of t)o(e,n,i)}(this.location,i,{direction:r,delta:e})}};return Object.defineProperty(i,"location",{enumerable:!0,get:()=>n[o]}),i}function L(e){return(e=location.host?e||location.pathname+location.search:"").includes("#")||(e+="#"),e.endsWith("#/")||e.endsWith("#")||d(`A hash base must end with a "#":\n"${e}" should be "${e.replace(/#.*$/,"#")}".`),R(e)}function F(e){return"string"==typeof e||"symbol"==typeof e}const I={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},N=Symbol("navigation failure");var B;!function(e){e[e.aborted=4]="aborted",e[e.cancelled=8]="cancelled",e[e.duplicated=16]="duplicated"}(B||(B={}));const V={1:({location:e,currentLocation:t})=>`No match for\n ${JSON.stringify(e)}${t?"\nwhile being at\n"+JSON.stringify(t):""}`,2:({from:e,to:t})=>`Redirected from "${e.fullPath}" to "${function(e){if("string"==typeof e)return e;if("path"in e)return e.path;const t={};for(const n of H)n in e&&(t[n]=e[n]);return JSON.stringify(t,null,2)}(t)}" via a navigation guard.`,4:({from:e,to:t})=>`Navigation aborted from "${e.fullPath}" to "${t.fullPath}" via a navigation guard.`,8:({from:e,to:t})=>`Navigation cancelled from "${e.fullPath}" to "${t.fullPath}" with a new navigation.`,16:({from:e,to:t})=>`Avoided redundant navigation to current location: "${e.fullPath}".`};function $(e,t){return a(new Error(V[e](t)),{type:e,[N]:!0},t)}function z(e,t){return e instanceof Error&&N in e&&(null==t||!!(e.type&t))}const H=["params","query","hash"],U="[^/]+?",W={sensitive:!1,strict:!1,start:!0,end:!0},G=/[.+*?^${}()[\]/\\]/g;function Y(e,t){let n=0;for(;n<e.length&&n<t.length;){const o=t[n]-e[n];if(o)return o;n++}return e.length<t.length?1===e.length&&80===e[0]?-1:1:e.length>t.length?1===t.length&&80===t[0]?1:-1:0}function q(e,t){let n=0;const o=e.score,s=t.score;for(;n<o.length&&n<s.length;){const e=Y(o[n],s[n]);if(e)return e;n++}if(1===Math.abs(s.length-o.length)){if(K(o))return 1;if(K(s))return-1}return s.length-o.length}function K(e){const t=e[e.length-1];return e.length>0&&t[t.length-1]<0}const J={type:0,value:""},X=/[a-zA-Z0-9_]/;function Q(e,t,n){const o=function(e,t){const n=a({},W,t),o=[];let s=n.start?"^":"";const i=[];for(const t of e){const e=t.length?[]:[90];n.strict&&!t.length&&(s+="/");for(let o=0;o<t.length;o++){const r=t[o];let a=40+(n.sensitive?.25:0);if(0===r.type)o||(s+="/"),s+=r.value.replace(G,"\\$&"),a+=40;else if(1===r.type){const{value:e,repeatable:n,optional:l,regexp:c}=r;i.push({name:e,repeatable:n,optional:l});const u=c||U;if(u!==U){a+=10;try{new RegExp(`(${u})`)}catch(t){throw new Error(`Invalid custom RegExp for param "${e}" (${u}): `+t.message)}}let d=n?`((?:${u})(?:/(?:${u}))*)`:`(${u})`;o||(d=l&&t.length<2?`(?:/${d})`:"/"+d),l&&(d+="?"),s+=d,a+=20,l&&(a+=-8),n&&(a+=-20),".*"===u&&(a+=-50)}e.push(a)}o.push(e)}if(n.strict&&n.end){const e=o.length-1;o[e][o[e].length-1]+=.7000000000000001}n.strict||(s+="/?"),n.end?s+="$":n.strict&&(s+="(?:/|$)");const r=new RegExp(s,n.sensitive?"":"i");return{re:r,score:o,keys:i,parse:function(e){const t=e.match(r),n={};if(!t)return null;for(let e=1;e<t.length;e++){const o=t[e]||"",s=i[e-1];n[s.name]=o&&s.repeatable?o.split("/"):o}return n},stringify:function(t){let n="",o=!1;for(const s of e){o&&n.endsWith("/")||(n+="/"),o=!1;for(const e of s)if(0===e.type)n+=e.value;else if(1===e.type){const{value:i,repeatable:r,optional:a}=e,l=i in t?t[i]:"";if(u(l)&&!r)throw new Error(`Provided param "${i}" is an array but it is not repeatable (* or + modifiers)`);const c=u(l)?l.join("/"):l;if(!c){if(!a)throw new Error(`Missing required param "${i}"`);s.length<2&&(n.endsWith("/")?n=n.slice(0,-1):o=!0)}n+=c}}return n||"/"}}}(function(e){if(!e)return[[]];if("/"===e)return[[J]];if(!e.startsWith("/"))throw new Error(`Route paths should start with a "/": "${e}" should be "/${e}".`);function t(e){throw new Error(`ERR (${n})/"${c}": ${e}`)}let n=0,o=n;const s=[];let i;function r(){i&&s.push(i),i=[]}let a,l=0,c="",u="";function d(){c&&(0===n?i.push({type:0,value:c}):1===n||2===n||3===n?(i.length>1&&("*"===a||"+"===a)&&t(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),i.push({type:1,value:c,regexp:u,repeatable:"*"===a||"+"===a,optional:"*"===a||"?"===a})):t("Invalid state to consume buffer"),c="")}function h(){c+=a}for(;l<e.length;)if(a=e[l++],"\\"!==a||2===n)switch(n){case 0:"/"===a?(c&&d(),r()):":"===a?(d(),n=1):h();break;case 4:h(),n=o;break;case 1:"("===a?n=2:X.test(a)?h():(d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--);break;case 2:")"===a?"\\"==u[u.length-1]?u=u.slice(0,-1)+a:n=3:u+=a;break;case 3:d(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--,u="";break;default:t("Unknown state")}else o=n,n=4;return 2===n&&t(`Unfinished custom RegExp for param "${c}"`),d(),r(),s}(e.path),n);{const t=new Set;for(const n of o.keys)t.has(n.name)&&d(`Found duplicated params with name "${n.name}" for path "${e.path}". Only the last one will be available on "$route.params".`),t.add(n.name)}const s=a(o,{record:e,parent:t,children:[],alias:[]});return t&&!s.record.aliasOf==!t.record.aliasOf&&t.children.push(s),s}function Z(e,t){const n=[],o=new Map;function s(e,n,o){const l=!o,u=function(e){return{path:e.path,redirect:e.redirect,name:e.name,meta:e.meta||{},aliasOf:void 0,beforeEnter:e.beforeEnter,props:te(e),children:e.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in e?e.components||null:e.component&&{default:e.component}}}(e);(function(e,t){t&&t.record.name&&!e.name&&!e.path&&d(`The route named "${String(t.record.name)}" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`)})(u,n),u.aliasOf=o&&o.record;const h=se(t,e),p=[u];if("alias"in e){const t="string"==typeof e.alias?[e.alias]:e.alias;for(const e of t)p.push(a({},u,{components:o?o.record.components:u.components,path:e,aliasOf:o?o.record:u}))}let f,m;for(const t of p){const{path:a}=t;if(n&&"/"!==a[0]){const e=n.record.path,o="/"===e[e.length-1]?"":"/";t.path=n.record.path+(a&&o+a)}if("*"===t.path)throw new Error('Catch all routes ("*") must now be defined using a param with a custom regexp.\nSee more at https://next.router.vuejs.org/guide/migration/#removed-star-or-catch-all-routes.');if(f=Q(t,n,h),n&&"/"===a[0]&&ae(f,n),o?(o.alias.push(f),re(o,f)):(m=m||f,m!==f&&m.alias.push(f),l&&e.name&&!ne(f)&&i(e.name)),u.children){const e=u.children;for(let t=0;t<e.length;t++)s(e[t],f,o&&o.children[t])}o=o||f,(f.record.components&&Object.keys(f.record.components).length||f.record.name||f.record.redirect)&&r(f)}return m?()=>{i(m)}:c}function i(e){if(F(e)){const t=o.get(e);t&&(o.delete(e),n.splice(n.indexOf(t),1),t.children.forEach(i),t.alias.forEach(i))}else{const t=n.indexOf(e);t>-1&&(n.splice(t,1),e.record.name&&o.delete(e.record.name),e.children.forEach(i),e.alias.forEach(i))}}function r(e){let t=0;for(;t<n.length&&q(e,n[t])>=0&&(e.record.path!==n[t].record.path||!le(e,n[t]));)t++;n.splice(t,0,e),e.record.name&&!ne(e)&&o.set(e.record.name,e)}return t=se({strict:!1,end:!0,sensitive:!1},t),e.forEach((e=>s(e))),{addRoute:s,resolve:function(e,t){let s,i,r,l={};if("name"in e&&e.name){if(s=o.get(e.name),!s)throw $(1,{location:e});{const t=Object.keys(e.params||{}).filter((e=>!s.keys.find((t=>t.name===e))));t.length&&d(`Discarded invalid param(s) "${t.join('", "')}" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`)}r=s.record.name,l=a(ee(t.params,s.keys.filter((e=>!e.optional)).map((e=>e.name))),e.params&&ee(e.params,s.keys.map((e=>e.name)))),i=s.stringify(l)}else if("path"in e)i=e.path,i.startsWith("/")||d(`The Matcher cannot resolve relative paths but received "${i}". Unless you directly called \`matcher.resolve("${i}")\`, this is probably a bug in vue-router. Please open an issue at https://github.com/vuejs/router/issues/new/choose.`),s=n.find((e=>e.re.test(i))),s&&(l=s.parse(i),r=s.record.name);else{if(s=t.name?o.get(t.name):n.find((e=>e.re.test(t.path))),!s)throw $(1,{location:e,currentLocation:t});r=s.record.name,l=a({},t.params,e.params),i=s.stringify(l)}const c=[];let u=s;for(;u;)c.unshift(u.record),u=u.parent;return{name:r,path:i,params:l,matched:c,meta:oe(c)}},removeRoute:i,getRoutes:function(){return n},getRecordMatcher:function(e){return o.get(e)}}}function ee(e,t){const n={};for(const o of t)o in e&&(n[o]=e[o]);return n}function te(e){const t={},n=e.props||!1;if("component"in e)t.default=n;else for(const o in e.components)t[o]="object"==typeof n?n[o]:n;return t}function ne(e){for(;e;){if(e.record.aliasOf)return!0;e=e.parent}return!1}function oe(e){return e.reduce(((e,t)=>a(e,t.meta)),{})}function se(e,t){const n={};for(const o in e)n[o]=o in t?t[o]:e[o];return n}function ie(e,t){return e.name===t.name&&e.optional===t.optional&&e.repeatable===t.repeatable}function re(e,t){for(const n of e.keys)if(!n.optional&&!t.keys.find(ie.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`);for(const n of t.keys)if(!n.optional&&!e.keys.find(ie.bind(null,n)))return d(`Alias "${t.record.path}" and the original record: "${e.record.path}" must have the exact same param named "${n.name}"`)}function ae(e,t){for(const n of t.keys)if(!e.keys.find(ie.bind(null,n)))return d(`Absolute path "${e.record.path}" must have the exact same param named "${n.name}" as its parent "${t.record.path}".`)}function le(e,t){return t.children.some((t=>t===e||le(e,t)))}const ce=/#/g,ue=/&/g,de=/\//g,he=/=/g,pe=/\?/g,fe=/\+/g,me=/%5B/g,ge=/%5D/g,be=/%5E/g,ve=/%60/g,ye=/%7B/g,_e=/%7C/g,xe=/%7D/g,we=/%20/g;function Se(e){return encodeURI(""+e).replace(_e,"|").replace(me,"[").replace(ge,"]")}function ke(e){return Se(e).replace(fe,"%2B").replace(we,"+").replace(ce,"%23").replace(ue,"%26").replace(ve,"`").replace(ye,"{").replace(xe,"}").replace(be,"^")}function je(e){return null==e?"":function(e){return Se(e).replace(ce,"%23").replace(pe,"%3F")}(e).replace(de,"%2F")}function Oe(e){try{return decodeURIComponent(""+e)}catch(t){d(`Error decoding "${e}". Using original value`)}return""+e}function Ce(e){const t={};if(""===e||"?"===e)return t;const n=("?"===e[0]?e.slice(1):e).split("&");for(let e=0;e<n.length;++e){const o=n[e].replace(fe," "),s=o.indexOf("="),i=Oe(s<0?o:o.slice(0,s)),r=s<0?null:Oe(o.slice(s+1));if(i in t){let e=t[i];u(e)||(e=t[i]=[e]),e.push(r)}else t[i]=r}return t}function Ee(e){let t="";for(let n in e){const o=e[n];(n=ke(n).replace(he,"%3D"),null!=o)?(u(o)?o.map((e=>e&&ke(e))):[o&&ke(o)]).forEach((e=>{void 0!==e&&(t+=(t.length?"&":"")+n,null!=e&&(t+="="+e))})):void 0!==o&&(t+=(t.length?"&":"")+n)}return t}function Ae(e){const t={};for(const n in e){const o=e[n];void 0!==o&&(t[n]=u(o)?o.map((e=>null==e?null:""+e)):null==o?o:""+o)}return t}const Pe=Symbol("router view location matched"),Te=Symbol("router view depth"),Me=Symbol("router"),Re=Symbol("route location"),De=Symbol("router view location");function Le(){let e=[];return{add:function(t){return e.push(t),()=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)}},list:()=>e.slice(),reset:function(){e=[]}}}function Fe(e,t,n){const s=()=>{e[t].delete(n)};(0,o.onUnmounted)(s),(0,o.onDeactivated)(s),(0,o.onActivated)((()=>{e[t].add(n)})),e[t].add(n)}function Ie(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function");const t=(0,o.inject)(Pe,{}).value;t?Fe(t,"leaveGuards",e):d("No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Ne(e){if(!(0,o.getCurrentInstance)())return void d("getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function");const t=(0,o.inject)(Pe,{}).value;t?Fe(t,"updateGuards",e):d("No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?")}function Be(e,t,n,o,s){const i=o&&(o.enterCallbacks[s]=o.enterCallbacks[s]||[]);return()=>new Promise(((r,a)=>{const l=e=>{var l;!1===e?a($(4,{from:n,to:t})):e instanceof Error?a(e):"string"==typeof(l=e)||l&&"object"==typeof l?a($(2,{from:t,to:e})):(i&&o.enterCallbacks[s]===i&&"function"==typeof e&&i.push(e),r())},c=e.call(o&&o.instances[s],t,n,function(e,t,n){let o=0;return function(){1==o++&&d(`The "next" callback was called more than once in one navigation guard when going from "${n.fullPath}" to "${t.fullPath}". It should be called exactly one time in each navigation guard. This will fail in production.`),e._called=!0,1===o&&e.apply(null,arguments)}}(l,t,n));let u=Promise.resolve(c);if(e.length<3&&(u=u.then(l)),e.length>2){const t=`The "next" callback was never called inside of ${e.name?'"'+e.name+'"':""}:\n${e.toString()}\n. If you are returning a value instead of calling "next", make sure to remove the "next" parameter from your function.`;if("object"==typeof c&&"then"in c)u=u.then((e=>l._called?e:(d(t),Promise.reject(new Error("Invalid navigation guard")))));else if(void 0!==c&&!l._called)return d(t),void a(new Error("Invalid navigation guard"))}u.catch((e=>a(e)))}))}function Ve(e,t,n,o){const s=[];for(const a of e){a.components||a.children.length||d(`Record with path "${a.path}" is either missing a "component(s)" or "children" property.`);for(const e in a.components){let l=a.components[e];if(!l||"object"!=typeof l&&"function"!=typeof l)throw d(`Component "${e}" in record with path "${a.path}" is not a valid component. Received "${String(l)}".`),new Error("Invalid route component");if("then"in l){d(`Component "${e}" in record with path "${a.path}" is a Promise instead of a function that returns a Promise. Did you write "import('./MyPage.vue')" instead of "() => import('./MyPage.vue')" ? This will break in production if not fixed.`);const t=l;l=()=>t}else l.__asyncLoader&&!l.__warnedDefineAsync&&(l.__warnedDefineAsync=!0,d(`Component "${e}" in record with path "${a.path}" is defined using "defineAsyncComponent()". Write "() => import('./MyPage.vue')" instead of "defineAsyncComponent(() => import('./MyPage.vue'))".`));if("beforeRouteEnter"===t||a.instances[e])if("object"==typeof(i=l)||"displayName"in i||"props"in i||"__vccOpts"in i){const i=(l.__vccOpts||l)[t];i&&s.push(Be(i,n,o,a,e))}else{let i=l();"catch"in i||(d(`Component "${e}" in record with path "${a.path}" is a function that does not return a Promise. If you were passing a functional component, make sure to add a "displayName" to the component. This will break in production if not fixed.`),i=Promise.resolve(i)),s.push((()=>i.then((s=>{if(!s)return Promise.reject(new Error(`Couldn't resolve component "${e}" at "${a.path}"`));const i=r(s)?s.default:s;a.components[e]=i;const l=(i.__vccOpts||i)[t];return l&&Be(l,n,o,a,e)()}))))}}}var i;return s}function $e(e){return e.matched.every((e=>e.redirect))?Promise.reject(new Error("Cannot load a route that redirects.")):Promise.all(e.matched.map((e=>e.components&&Promise.all(Object.keys(e.components).reduce(((t,n)=>{const o=e.components[n];return"function"!=typeof o||"displayName"in o||t.push(o().then((t=>{if(!t)return Promise.reject(new Error(`Couldn't resolve component "${n}" at "${e.path}". Ensure you passed a function that returns a promise.`));const o=r(t)?t.default:t;e.components[n]=o}))),t}),[]))))).then((()=>e))}function ze(e){const t=(0,o.inject)(Me),n=(0,o.inject)(Re),s=(0,o.computed)((()=>t.resolve((0,o.unref)(e.to)))),r=(0,o.computed)((()=>{const{matched:e}=s.value,{length:t}=e,o=e[t-1],i=n.matched;if(!o||!i.length)return-1;const r=i.findIndex(b.bind(null,o));if(r>-1)return r;const a=Ue(e[t-2]);return t>1&&Ue(o)===a&&i[i.length-1].path!==a?i.findIndex(b.bind(null,e[t-2])):r})),a=(0,o.computed)((()=>r.value>-1&&function(e,t){for(const n in t){const o=t[n],s=e[n];if("string"==typeof o){if(o!==s)return!1}else if(!u(s)||s.length!==o.length||o.some(((e,t)=>e!==s[t])))return!1}return!0}(n.params,s.value.params))),l=(0,o.computed)((()=>r.value>-1&&r.value===n.matched.length-1&&v(n.params,s.value.params)));if(i){const e=(0,o.getCurrentInstance)();if(e){const t={route:s.value,isActive:a.value,isExactActive:l.value};e.__vrl_devtools=e.__vrl_devtools||[],e.__vrl_devtools.push(t),(0,o.watchEffect)((()=>{t.route=s.value,t.isActive=a.value,t.isExactActive=l.value}),{flush:"post"})}}return{route:s,href:(0,o.computed)((()=>s.value.href)),isActive:a,isExactActive:l,navigate:function(n={}){return function(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){const t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}(n)?t[(0,o.unref)(e.replace)?"replace":"push"]((0,o.unref)(e.to)).catch(c):Promise.resolve()}}}const He=(0,o.defineComponent)({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:ze,setup(e,{slots:t}){const n=(0,o.reactive)(ze(e)),{options:s}=(0,o.inject)(Me),i=(0,o.computed)((()=>({[We(e.activeClass,s.linkActiveClass,"router-link-active")]:n.isActive,[We(e.exactActiveClass,s.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive})));return()=>{const s=t.default&&t.default(n);return e.custom?s:(0,o.h)("a",{"aria-current":n.isExactActive?e.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:i.value},s)}}});function Ue(e){return e?e.aliasOf?e.aliasOf.path:e.path:""}const We=(e,t,n)=>null!=e?e:null!=t?t:n;function Ge(e,t){if(!e)return null;const n=e(t);return 1===n.length?n[0]:n}const Ye=(0,o.defineComponent)({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(e,{attrs:t,slots:n}){!function(){const e=(0,o.getCurrentInstance)(),t=e.parent&&e.parent.type.name,n=e.parent&&e.parent.subTree&&e.parent.subTree.type;if(t&&("KeepAlive"===t||t.includes("Transition"))&&"object"==typeof n&&"RouterView"===n.name){const e="KeepAlive"===t?"keep-alive":"transition";d(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\nUse slot props instead:\n\n<router-view v-slot="{ Component }">\n  <${e}>\n    <component :is="Component" />\n  </${e}>\n</router-view>`)}}();const s=(0,o.inject)(De),r=(0,o.computed)((()=>e.route||s.value)),l=(0,o.inject)(Te,0),c=(0,o.computed)((()=>{let e=(0,o.unref)(l);const{matched:t}=r.value;let n;for(;(n=t[e])&&!n.components;)e++;return e})),h=(0,o.computed)((()=>r.value.matched[c.value]));(0,o.provide)(Te,(0,o.computed)((()=>c.value+1))),(0,o.provide)(Pe,h),(0,o.provide)(De,r);const p=(0,o.ref)();return(0,o.watch)((()=>[p.value,h.value,e.name]),(([e,t,n],[o,s,i])=>{t&&(t.instances[n]=e,s&&s!==t&&e&&e===o&&(t.leaveGuards.size||(t.leaveGuards=s.leaveGuards),t.updateGuards.size||(t.updateGuards=s.updateGuards))),!e||!t||s&&b(t,s)&&o||(t.enterCallbacks[n]||[]).forEach((t=>t(e)))}),{flush:"post"}),()=>{const s=r.value,l=e.name,d=h.value,f=d&&d.components[l];if(!f)return Ge(n.default,{Component:f,route:s});const m=d.props[l],g=m?!0===m?s.params:"function"==typeof m?m(s):m:null,b=(0,o.h)(f,a({},g,t,{onVnodeUnmounted:e=>{e.component.isUnmounted&&(d.instances[l]=null)},ref:p}));if(i&&b.ref){const e={depth:c.value,name:d.name,path:d.path,meta:d.meta};(u(b.ref)?b.ref.map((e=>e.i)):[b.ref.i]).forEach((t=>{t.__vrv_devtools=e}))}return Ge(n.default,{Component:b,route:s})||b}}});function qe(e,t){const n=a({},e,{matched:e.matched.map((e=>function(e,t){const n={};for(const o in e)t.includes(o)||(n[o]=e[o]);return n}(e,["instances","children","aliasOf"])))});return{_custom:{type:null,readOnly:!0,display:e.fullPath,tooltip:t,value:n}}}function Ke(e){return{_custom:{display:e}}}let Je=0;function Xe(e,t,n){if(t.__hasDevtools)return;t.__hasDevtools=!0;const i=Je++;(0,s.setupDevtoolsPlugin)({id:"org.vuejs.router"+(i?"."+i:""),label:"Vue Router",packageName:"vue-router",homepage:"https://router.vuejs.org",logo:"https://router.vuejs.org/logo.png",componentStateTypes:["Routing"],app:e},(s=>{"function"!=typeof s.now&&console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),s.on.inspectComponent(((e,n)=>{e.instanceData&&e.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:qe(t.currentRoute.value,"Current Route")})})),s.on.visitComponentTree((({treeNode:e,componentInstance:t})=>{if(t.__vrv_devtools){const n=t.__vrv_devtools;e.tags.push({label:(n.name?`${n.name.toString()}: `:"")+n.path,textColor:0,tooltip:"This component is rendered by &lt;router-view&gt;",backgroundColor:Ze})}u(t.__vrl_devtools)&&(t.__devtoolsApi=s,t.__vrl_devtools.forEach((t=>{let n=ot,o="";t.isExactActive?(n=tt,o="This is exactly active"):t.isActive&&(n=et,o="This link is active"),e.tags.push({label:t.route.path,textColor:0,tooltip:o,backgroundColor:n})})))})),(0,o.watch)(t.currentRoute,(()=>{c(),s.notifyComponentUpdate(),s.sendInspectorTree(l),s.sendInspectorState(l)}));const r="router:navigations:"+i;s.addTimelineLayer({id:r,label:`Router${i?" "+i:""} Navigations`,color:4237508}),t.onError(((e,t)=>{s.addTimelineEvent({layerId:r,event:{title:"Error during Navigation",subtitle:t.fullPath,logType:"error",time:s.now(),data:{error:e},groupId:t.meta.__navigationId}})}));let a=0;t.beforeEach(((e,t)=>{const n={guard:Ke("beforeEach"),from:qe(t,"Current Location during this navigation"),to:qe(e,"Target location")};Object.defineProperty(e.meta,"__navigationId",{value:a++}),s.addTimelineEvent({layerId:r,event:{time:s.now(),title:"Start of navigation",subtitle:e.fullPath,data:n,groupId:e.meta.__navigationId}})})),t.afterEach(((e,t,n)=>{const o={guard:Ke("afterEach")};n?(o.failure={_custom:{type:Error,readOnly:!0,display:n?n.message:"",tooltip:"Navigation Failure",value:n}},o.status=Ke("❌")):o.status=Ke("✅"),o.from=qe(t,"Current Location during this navigation"),o.to=qe(e,"Target location"),s.addTimelineEvent({layerId:r,event:{title:"End of navigation",subtitle:e.fullPath,time:s.now(),data:o,logType:n?"warning":"default",groupId:e.meta.__navigationId}})}));const l="router-inspector:"+i;function c(){if(!d)return;const e=d;let o=n.getRoutes().filter((e=>!e.parent||!e.parent.record.components));o.forEach(ct),e.filter&&(o=o.filter((t=>ut(t,e.filter.toLowerCase())))),o.forEach((e=>lt(e,t.currentRoute.value))),e.rootNodes=o.map(it)}let d;s.addInspector({id:l,label:"Routes"+(i?" "+i:""),icon:"book",treeFilterPlaceholder:"Search routes"}),s.on.getInspectorTree((t=>{d=t,t.app===e&&t.inspectorId===l&&c()})),s.on.getInspectorState((t=>{if(t.app===e&&t.inspectorId===l){const e=n.getRoutes().find((e=>e.record.__vd_id===t.nodeId));e&&(t.state={options:Qe(e)})}})),s.sendInspectorTree(l),s.sendInspectorState(l)}))}function Qe(e){const{record:t}=e,n=[{editable:!1,key:"path",value:t.path}];return null!=t.name&&n.push({editable:!1,key:"name",value:t.name}),n.push({editable:!1,key:"regexp",value:e.re}),e.keys.length&&n.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:e.keys.map((e=>`${e.name}${function(e){return e.optional?e.repeatable?"*":"?":e.repeatable?"+":""}(e)}`)).join(" "),tooltip:"Param keys",value:e.keys}}}),null!=t.redirect&&n.push({editable:!1,key:"redirect",value:t.redirect}),e.alias.length&&n.push({editable:!1,key:"aliases",value:e.alias.map((e=>e.record.path))}),Object.keys(e.record.meta).length&&n.push({editable:!1,key:"meta",value:e.record.meta}),n.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:e.score.map((e=>e.join(", "))).join(" | "),tooltip:"Score used to sort routes",value:e.score}}}),n}const Ze=15485081,et=2450411,tt=8702998,nt=2282478,ot=16486972,st=6710886;function it(e){const t=[],{record:n}=e;null!=n.name&&t.push({label:String(n.name),textColor:0,backgroundColor:nt}),n.aliasOf&&t.push({label:"alias",textColor:0,backgroundColor:ot}),e.__vd_match&&t.push({label:"matches",textColor:0,backgroundColor:Ze}),e.__vd_exactActive&&t.push({label:"exact",textColor:0,backgroundColor:tt}),e.__vd_active&&t.push({label:"active",textColor:0,backgroundColor:et}),n.redirect&&t.push({label:"string"==typeof n.redirect?`redirect: ${n.redirect}`:"redirects",textColor:16777215,backgroundColor:st});let o=n.__vd_id;return null==o&&(o=String(rt++),n.__vd_id=o),{id:o,label:n.path,tags:t,children:e.children.map(it)}}let rt=0;const at=/^\/(.*)\/([a-z]*)$/;function lt(e,t){const n=t.matched.length&&b(t.matched[t.matched.length-1],e.record);e.__vd_exactActive=e.__vd_active=n,n||(e.__vd_active=t.matched.some((t=>b(t,e.record)))),e.children.forEach((e=>lt(e,t)))}function ct(e){e.__vd_match=!1,e.children.forEach(ct)}function ut(e,t){const n=String(e.re).match(at);if(e.__vd_match=!1,!n||n.length<3)return!1;if(new RegExp(n[1].replace(/\$$/,""),n[2]).test(t))return e.children.forEach((e=>ut(e,t))),("/"!==e.record.path||"/"===t)&&(e.__vd_match=e.re.test(t),!0);const o=e.record.path.toLowerCase(),s=Oe(o);return!(t.startsWith("/")||!s.includes(t)&&!o.includes(t))||!(!s.startsWith(t)&&!o.startsWith(t))||!(!e.record.name||!String(e.record.name).includes(t))||e.children.some((e=>ut(e,t)))}function dt(e){const t=Z(e.routes,e),n=e.parseQuery||Ce,s=e.stringifyQuery||Ee,r=e.history;if(!r)throw new Error('Provide the "history" option when calling "createRouter()": https://next.router.vuejs.org/api/#history.');const h=Le(),p=Le(),m=Le(),v=(0,o.shallowRef)(I);let y=I;i&&e.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const _=l.bind(null,(e=>""+e)),w=l.bind(null,je),S=l.bind(null,Oe);function k(e,o){if(o=a({},o||v.value),"string"==typeof e){const s=f(n,e,o.path),i=t.resolve({path:s.path},o),l=r.createHref(s.fullPath);return l.startsWith("//")?d(`Location "${e}" resolved to "${l}". A resolved location cannot start with multiple slashes.`):i.matched.length||d(`No match found for location with path "${e}"`),a(s,i,{params:S(i.params),hash:Oe(s.hash),redirectedFrom:void 0,href:l})}let i;if("path"in e)"params"in e&&!("name"in e)&&Object.keys(e.params).length&&d(`Path "${e.path}" was passed with params but they will be ignored. Use a named route alongside params instead.`),i=a({},e,{path:f(n,e.path,o.path).path});else{const t=a({},e.params);for(const e in t)null==t[e]&&delete t[e];i=a({},e,{params:w(t)}),o.params=w(o.params)}const l=t.resolve(i,o),c=e.hash||"";c&&!c.startsWith("#")&&d(`A \`hash\` should always start with the character "#". Replace "${c}" with "#${c}".`),l.params=_(S(l.params));const u=function(e,t){const n=t.query?e(t.query):"";return t.path+(n&&"?")+n+(t.hash||"")}(s,a({},e,{hash:(h=c,Se(h).replace(ye,"{").replace(xe,"}").replace(be,"^")),path:l.path}));var h;const p=r.createHref(u);return p.startsWith("//")?d(`Location "${e}" resolved to "${p}". A resolved location cannot start with multiple slashes.`):l.matched.length||d(`No match found for location with path "${"path"in e?e.path:e}"`),a({fullPath:u,hash:c,query:s===Ee?Ae(e.query):e.query||{}},l,{redirectedFrom:void 0,href:p})}function j(e){return"string"==typeof e?f(n,e,v.value.path):a({},e)}function O(e,t){if(y!==e)return $(8,{from:t,to:e})}function P(e){return M(e)}function T(e){const t=e.matched[e.matched.length-1];if(t&&t.redirect){const{redirect:n}=t;let o="function"==typeof n?n(e):n;if("string"==typeof o&&(o=o.includes("?")||o.includes("#")?o=j(o):{path:o},o.params={}),!("path"in o)&&!("name"in o))throw d(`Invalid redirect found:\n${JSON.stringify(o,null,2)}\n when navigating to "${e.fullPath}". A redirect must contain a name or path. This will break in production.`),new Error("Invalid redirect");return a({query:e.query,hash:e.hash,params:"path"in o?{}:e.params},o)}}function M(e,t){const n=y=k(e),o=v.value,i=e.state,r=e.force,l=!0===e.replace,c=T(n);if(c)return M(a(j(c),{state:"object"==typeof c?a({},i,c.state):i,force:r,replace:l}),t||n);const u=n;let h;return u.redirectedFrom=t,!r&&g(s,o,n)&&(h=$(16,{to:u,from:o}),q(o,o,!0,!1)),(h?Promise.resolve(h):L(u,o)).catch((e=>z(e)?z(e,2)?e:Y(e):G(e,u,o))).then((e=>{if(e){if(z(e,2))return g(s,k(e.to),u)&&t&&(t._count=t._count?t._count+1:1)>30?(d(`Detected a possibly infinite redirection in a navigation guard when going from "${o.fullPath}" to "${u.fullPath}". Aborting to avoid a Stack Overflow.\n Are you always returning a new location within a navigation guard? That would lead to this error. Only return when redirecting or aborting, that should fix this. This might break in production if not fixed.`),Promise.reject(new Error("Infinite redirect in navigation guard"))):M(a({replace:l},j(e.to),{state:"object"==typeof e.to?a({},i,e.to.state):i,force:r}),t||u)}else e=B(u,o,!0,l,i);return N(u,o,e),e}))}function R(e,t){const n=O(e,t);return n?Promise.reject(n):Promise.resolve()}function D(e){const t=X.values().next().value;return t&&"function"==typeof t.runWithContext?t.runWithContext(e):e()}function L(e,t){let n;const[o,s,i]=function(e,t){const n=[],o=[],s=[],i=Math.max(t.matched.length,e.matched.length);for(let r=0;r<i;r++){const i=t.matched[r];i&&(e.matched.find((e=>b(e,i)))?o.push(i):n.push(i));const a=e.matched[r];a&&(t.matched.find((e=>b(e,a)))||s.push(a))}return[n,o,s]}(e,t);n=Ve(o.reverse(),"beforeRouteLeave",e,t);for(const s of o)s.leaveGuards.forEach((o=>{n.push(Be(o,e,t))}));const r=R.bind(null,e,t);return n.push(r),ee(n).then((()=>{n=[];for(const o of h.list())n.push(Be(o,e,t));return n.push(r),ee(n)})).then((()=>{n=Ve(s,"beforeRouteUpdate",e,t);for(const o of s)o.updateGuards.forEach((o=>{n.push(Be(o,e,t))}));return n.push(r),ee(n)})).then((()=>{n=[];for(const o of i)if(o.beforeEnter)if(u(o.beforeEnter))for(const s of o.beforeEnter)n.push(Be(s,e,t));else n.push(Be(o.beforeEnter,e,t));return n.push(r),ee(n)})).then((()=>(e.matched.forEach((e=>e.enterCallbacks={})),n=Ve(i,"beforeRouteEnter",e,t),n.push(r),ee(n)))).then((()=>{n=[];for(const o of p.list())n.push(Be(o,e,t));return n.push(r),ee(n)})).catch((e=>z(e,8)?e:Promise.reject(e)))}function N(e,t,n){m.list().forEach((o=>D((()=>o(e,t,n)))))}function B(e,t,n,o,s){const l=O(e,t);if(l)return l;const c=t===I,u=i?history.state:{};n&&(o||c?r.replace(e.fullPath,a({scroll:c&&u&&u.scroll},s)):r.push(e.fullPath,s)),v.value=e,q(e,t,n,c),Y()}let V;let H,U=Le(),W=Le();function G(e,t,n){Y(e);const o=W.list();return o.length?o.forEach((o=>o(e,t,n))):(d("uncaught error during route navigation:"),console.error(e)),Promise.reject(e)}function Y(e){return H||(H=!e,V||(V=r.listen(((e,t,n)=>{if(!Q.listening)return;const o=k(e),s=T(o);if(s)return void M(a(s,{replace:!0}),o).catch(c);y=o;const l=v.value;var u,d;i&&(u=E(l.fullPath,n.delta),d=C(),A.set(u,d)),L(o,l).catch((e=>z(e,12)?e:z(e,2)?(M(e.to,o).then((e=>{z(e,20)&&!n.delta&&n.type===x.pop&&r.go(-1,!1)})).catch(c),Promise.reject()):(n.delta&&r.go(-n.delta,!1),G(e,o,l)))).then((e=>{(e=e||B(o,l,!1))&&(n.delta&&!z(e,8)?r.go(-n.delta,!1):n.type===x.pop&&z(e,20)&&r.go(-1,!1)),N(o,l,e)})).catch(c)}))),U.list().forEach((([t,n])=>e?n(e):t())),U.reset()),e}function q(t,n,s,r){const{scrollBehavior:a}=e;if(!i||!a)return Promise.resolve();const l=!s&&function(e){const t=A.get(e);return A.delete(e),t}(E(t.fullPath,0))||(r||!s)&&history.state&&history.state.scroll||null;return(0,o.nextTick)().then((()=>a(t,n,l))).then((e=>e&&function(e){let t;if("el"in e){const n=e.el,o="string"==typeof n&&n.startsWith("#");if(!("string"!=typeof e.el||o&&document.getElementById(e.el.slice(1))))try{const t=document.querySelector(e.el);if(o&&t)return void d(`The selector "${e.el}" should be passed as "el: document.querySelector('${e.el}')" because it starts with "#".`)}catch(t){return void d(`The selector "${e.el}" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`)}const s="string"==typeof n?o?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!s)return void d(`Couldn't find element using selector "${e.el}" returned by scrollBehavior.`);t=function(e,t){const n=document.documentElement.getBoundingClientRect(),o=e.getBoundingClientRect();return{behavior:t.behavior,left:o.left-n.left-(t.left||0),top:o.top-n.top-(t.top||0)}}(s,e)}else t=e;"scrollBehavior"in document.documentElement.style?window.scrollTo(t):window.scrollTo(null!=t.left?t.left:window.pageXOffset,null!=t.top?t.top:window.pageYOffset)}(e))).catch((e=>G(e,t,n)))}const K=e=>r.go(e);let J;const X=new Set,Q={currentRoute:v,listening:!0,addRoute:function(e,n){let o,s;return F(e)?(o=t.getRecordMatcher(e),s=n):s=e,t.addRoute(s,o)},removeRoute:function(e){const n=t.getRecordMatcher(e);n?t.removeRoute(n):d(`Cannot remove non-existent route "${String(e)}"`)},hasRoute:function(e){return!!t.getRecordMatcher(e)},getRoutes:function(){return t.getRoutes().map((e=>e.record))},resolve:k,options:e,push:P,replace:function(e){return P(a(j(e),{replace:!0}))},go:K,back:()=>K(-1),forward:()=>K(1),beforeEach:h.add,beforeResolve:p.add,afterEach:m.add,onError:W.add,isReady:function(){return H&&v.value!==I?Promise.resolve():new Promise(((e,t)=>{U.add([e,t])}))},install(e){const n=this;e.component("RouterLink",He),e.component("RouterView",Ye),e.config.globalProperties.$router=n,Object.defineProperty(e.config.globalProperties,"$route",{enumerable:!0,get:()=>(0,o.unref)(v)}),i&&!J&&v.value===I&&(J=!0,P(r.location).catch((e=>{d("Unexpected error when starting the router:",e)})));const s={};for(const e in I)Object.defineProperty(s,e,{get:()=>v.value[e],enumerable:!0});e.provide(Me,n),e.provide(Re,(0,o.shallowReactive)(s)),e.provide(De,v);const a=e.unmount;X.add(e),e.unmount=function(){X.delete(e),X.size<1&&(y=I,V&&V(),V=null,v.value=I,J=!1,H=!1),a()},i&&Xe(e,n,t)}};function ee(e){return e.reduce(((e,t)=>e.then((()=>D(t)))),Promise.resolve())}return Q}function ht(){return(0,o.inject)(Me)}function pt(){return(0,o.inject)(Re)}}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{"use strict";n.r(o);var e=n("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),t=n("./node_modules/@wordpress/hooks/build-module/index.js"),s=n("./src/App.vue"),i=n("./src/router/index.js"),r=(n("./src/i18n.js"),n("./src/styles/main.scss"),n("./src/mixins/i18n.js")),a=(n("./src/utils/menu-fix.js"),n("./src/store/index.js")),l=(0,e.createApp)({extends:s.default,mixins:[r.default]});l.use(i.default).use(a.default),l.config.devtools=!0,l.mount("#wp-am-vue-app"),window.wpAmVueHooks=(0,t.createHooks)(),wpAmVueHooks.addFilter=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;wpAmVueHooks.hooks.addFilter(e,t,(function(e){return e.push(n),e}),o)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,