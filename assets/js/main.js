/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={604:(t,e,n)=>{var i;!function(){"use strict";var r={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function o(t){return function(t,e){var n,i,s,a,l,c,u,h,d,f=1,p=t.length,g="";for(i=0;i<p;i++)if("string"==typeof t[i])g+=t[i];else if("object"==typeof t[i]){if((a=t[i]).keys)for(n=e[f],s=0;s<a.keys.length;s++){if(null==n)throw new Error(o('[sprintf] Cannot access property "%s" of undefined value "%s"',a.keys[s],a.keys[s-1]));n=n[a.keys[s]]}else n=a.param_no?e[a.param_no]:e[f++];if(r.not_type.test(a.type)&&r.not_primitive.test(a.type)&&n instanceof Function&&(n=n()),r.numeric_arg.test(a.type)&&"number"!=typeof n&&isNaN(n))throw new TypeError(o("[sprintf] expecting number but found %T",n));switch(r.number.test(a.type)&&(h=n>=0),a.type){case"b":n=parseInt(n,10).toString(2);break;case"c":n=String.fromCharCode(parseInt(n,10));break;case"d":case"i":n=parseInt(n,10);break;case"j":n=JSON.stringify(n,null,a.width?parseInt(a.width):0);break;case"e":n=a.precision?parseFloat(n).toExponential(a.precision):parseFloat(n).toExponential();break;case"f":n=a.precision?parseFloat(n).toFixed(a.precision):parseFloat(n);break;case"g":n=a.precision?String(Number(n.toPrecision(a.precision))):parseFloat(n);break;case"o":n=(parseInt(n,10)>>>0).toString(8);break;case"s":n=String(n),n=a.precision?n.substring(0,a.precision):n;break;case"t":n=String(!!n),n=a.precision?n.substring(0,a.precision):n;break;case"T":n=Object.prototype.toString.call(n).slice(8,-1).toLowerCase(),n=a.precision?n.substring(0,a.precision):n;break;case"u":n=parseInt(n,10)>>>0;break;case"v":n=n.valueOf(),n=a.precision?n.substring(0,a.precision):n;break;case"x":n=(parseInt(n,10)>>>0).toString(16);break;case"X":n=(parseInt(n,10)>>>0).toString(16).toUpperCase()}r.json.test(a.type)?g+=n:(!r.number.test(a.type)||h&&!a.sign?d="":(d=h?"+":"-",n=n.toString().replace(r.sign,"")),c=a.pad_char?"0"===a.pad_char?"0":a.pad_char.charAt(1):" ",u=a.width-(d+n).length,l=a.width&&u>0?c.repeat(u):"",g+=a.align?d+n+l:"0"===c?d+l+n:l+d+n)}return g}(function(t){if(a[t])return a[t];for(var e,n=t,i=[],o=0;n;){if(null!==(e=r.text.exec(n)))i.push(e[0]);else if(null!==(e=r.modulo.exec(n)))i.push("%");else{if(null===(e=r.placeholder.exec(n)))throw new SyntaxError("[sprintf] unexpected placeholder");if(e[2]){o|=1;var s=[],l=e[2],c=[];if(null===(c=r.key.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(s.push(c[1]);""!==(l=l.substring(c[0].length));)if(null!==(c=r.key_access.exec(l)))s.push(c[1]);else{if(null===(c=r.index_access.exec(l)))throw new SyntaxError("[sprintf] failed to parse named argument key");s.push(c[1])}e[2]=s}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");i.push({placeholder:e[0],param_no:e[1],keys:e[2],sign:e[3],pad_char:e[4],align:e[5],width:e[6],precision:e[7],type:e[8]})}n=n.substring(e[0].length)}return a[t]=i}(t),arguments)}function s(t,e){return o.apply(null,[t].concat(e||[]))}var a=Object.create(null);e.sprintf=o,e.vsprintf=s,"undefined"!=typeof window&&(window.sprintf=o,window.vsprintf=s,void 0===(i=function(){return{sprintf:o,vsprintf:s}}.call(e,n,e,t))||(t.exports=i))}()},262:(t,e)=>{"use strict";e.A=(t,e)=>{const n=t.__vccOpts||t;for(const[t,i]of e)n[t]=i;return n}}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={exports:{}};return t[i](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t={};function e(t,e){const n=new Set(t.split(","));return e?t=>n.has(t.toLowerCase()):t=>n.has(t)}n.r(t),n.d(t,{hasBrowserEnv:()=>qm,hasStandardBrowserEnv:()=>Gm,hasStandardBrowserWebWorkerEnv:()=>Km,origin:()=>Xm});const i={},r=[],o=()=>{},s=()=>!1,a=t=>111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&(t.charCodeAt(2)>122||t.charCodeAt(2)<97),l=t=>t.startsWith("onUpdate:"),c=Object.assign,u=(t,e)=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)},h=Object.prototype.hasOwnProperty,d=(t,e)=>h.call(t,e),f=Array.isArray,p=t=>"[object Map]"===w(t),g=t=>"[object Set]"===w(t),m=t=>"function"==typeof t,b=t=>"string"==typeof t,y=t=>"symbol"==typeof t,v=t=>null!==t&&"object"==typeof t,_=t=>(v(t)||m(t))&&m(t.then)&&m(t.catch),x=Object.prototype.toString,w=t=>x.call(t),S=t=>w(t).slice(8,-1),O=t=>"[object Object]"===w(t),k=t=>b(t)&&"NaN"!==t&&"-"!==t[0]&&""+parseInt(t,10)===t,E=e(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),A=t=>{const e=Object.create(null);return n=>e[n]||(e[n]=t(n))},P=/-(\w)/g,C=A((t=>t.replace(P,((t,e)=>e?e.toUpperCase():"")))),T=/\B([A-Z])/g,M=A((t=>t.replace(T,"-$1").toLowerCase())),L=A((t=>t.charAt(0).toUpperCase()+t.slice(1))),R=A((t=>t?`on${L(t)}`:"")),D=(t,e)=>!Object.is(t,e),j=(t,...e)=>{for(let n=0;n<t.length;n++)t[n](...e)},I=(t,e,n,i=!1)=>{Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:i,value:n})},F=t=>{const e=parseFloat(t);return isNaN(e)?t:e},N=t=>{const e=b(t)?Number(t):NaN;return isNaN(e)?t:e};let B;const V=()=>B||(B="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==n.g?n.g:{});function z(t){if(f(t)){const e={};for(let n=0;n<t.length;n++){const i=t[n],r=b(i)?W(i):z(i);if(r)for(const t in r)e[t]=r[t]}return e}if(b(t)||v(t))return t}const H=/;(?![^(]*\))/g,U=/:([^]+)/,$=/\/\*[^]*?\*\//g;function W(t){const e={};return t.replace($,"").split(H).forEach((t=>{if(t){const n=t.split(U);n.length>1&&(e[n[0].trim()]=n[1].trim())}})),e}function q(t){let e="";if(b(t))e=t;else if(f(t))for(let n=0;n<t.length;n++){const i=q(t[n]);i&&(e+=i+" ")}else if(v(t))for(const n in t)t[n]&&(e+=n+" ");return e.trim()}const G=e("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");function Y(t){return!!t||""===t}const K=t=>b(t)?t:null==t?"":f(t)||v(t)&&(t.toString===x||!m(t.toString))?JSON.stringify(t,X,2):String(t),X=(t,e)=>e&&e.__v_isRef?X(t,e.value):p(e)?{[`Map(${e.size})`]:[...e.entries()].reduce(((t,[e,n],i)=>(t[J(e,i)+" =>"]=n,t)),{})}:g(e)?{[`Set(${e.size})`]:[...e.values()].map((t=>J(t)))}:y(e)?J(e):!v(e)||f(e)||O(e)?e:String(e),J=(t,e="")=>{var n;return y(t)?`Symbol(${null!=(n=t.description)?n:e})`:t};let Q,Z;class tt{constructor(t=!1){this.detached=t,this._active=!0,this.effects=[],this.cleanups=[],this.parent=Q,!t&&Q&&(this.index=(Q.scopes||(Q.scopes=[])).push(this)-1)}get active(){return this._active}run(t){if(this._active){const e=Q;try{return Q=this,t()}finally{Q=e}}}on(){Q=this}off(){Q=this.parent}stop(t){if(this._active){let e,n;for(e=0,n=this.effects.length;e<n;e++)this.effects[e].stop();for(e=0,n=this.cleanups.length;e<n;e++)this.cleanups[e]();if(this.scopes)for(e=0,n=this.scopes.length;e<n;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!t){const t=this.parent.scopes.pop();t&&t!==this&&(this.parent.scopes[this.index]=t,t.index=this.index)}this.parent=void 0,this._active=!1}}}class et{constructor(t,e,n,i){this.fn=t,this.trigger=e,this.scheduler=n,this.active=!0,this.deps=[],this._dirtyLevel=5,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,function(t,e=Q){e&&e.active&&e.effects.push(t)}(this,i)}get dirty(){if(2===this._dirtyLevel)return!1;if(3===this._dirtyLevel||4===this._dirtyLevel){this._dirtyLevel=1,ct();for(let t=0;t<this._depsLength;t++){const e=this.deps[t];if(e.computed){if(2===e.computed.effect._dirtyLevel)return!0;if(nt(e.computed),this._dirtyLevel>=5)break}}1===this._dirtyLevel&&(this._dirtyLevel=0),ut()}return this._dirtyLevel>=5}set dirty(t){this._dirtyLevel=t?5:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let t=st,e=Z;try{return st=!0,Z=this,this._runnings++,it(this),this.fn()}finally{rt(this),this._runnings--,Z=e,st=t}}stop(){this.active&&(it(this),rt(this),this.onStop&&this.onStop(),this.active=!1)}}function nt(t){return t.value}function it(t){t._trackId++,t._depsLength=0}function rt(t){if(t.deps.length>t._depsLength){for(let e=t._depsLength;e<t.deps.length;e++)ot(t.deps[e],t);t.deps.length=t._depsLength}}function ot(t,e){const n=t.get(e);void 0!==n&&e._trackId!==n&&(t.delete(e),0===t.size&&t.cleanup())}let st=!0,at=0;const lt=[];function ct(){lt.push(st),st=!1}function ut(){const t=lt.pop();st=void 0===t||t}function ht(){at++}function dt(){for(at--;!at&&pt.length;)pt.shift()()}function ft(t,e,n){if(e.get(t)!==t._trackId){e.set(t,t._trackId);const n=t.deps[t._depsLength];n!==e?(n&&ot(n,t),t.deps[t._depsLength++]=e):t._depsLength++}}const pt=[];function gt(t,e,n){ht();for(const n of t.keys()){if(!t.computed&&n.computed&&t.get(n)===n._trackId&&n._runnings>0){n._dirtyLevel=2;continue}let i;n._dirtyLevel<e&&(null!=i?i:i=t.get(n)===n._trackId)&&(n._shouldSchedule||(n._shouldSchedule=0===n._dirtyLevel),n.computed&&2===n._dirtyLevel&&(n._shouldSchedule=!0),n._dirtyLevel=e),n._shouldSchedule&&(null!=i?i:i=t.get(n)===n._trackId)&&(n.trigger(),n._runnings&&!n.allowRecurse||3===n._dirtyLevel||(n._shouldSchedule=!1,n.scheduler&&pt.push(n.scheduler)))}dt()}const mt=(t,e)=>{const n=new Map;return n.cleanup=t,n.computed=e,n},bt=new WeakMap,yt=Symbol(""),vt=Symbol("");function _t(t,e,n){if(st&&Z){let e=bt.get(t);e||bt.set(t,e=new Map);let i=e.get(n);i||e.set(n,i=mt((()=>e.delete(n)))),ft(Z,i)}}function xt(t,e,n,i,r,o){const s=bt.get(t);if(!s)return;let a=[];if("clear"===e)a=[...s.values()];else if("length"===n&&f(t)){const t=Number(i);s.forEach(((e,n)=>{("length"===n||!y(n)&&n>=t)&&a.push(e)}))}else switch(void 0!==n&&a.push(s.get(n)),e){case"add":f(t)?k(n)&&a.push(s.get("length")):(a.push(s.get(yt)),p(t)&&a.push(s.get(vt)));break;case"delete":f(t)||(a.push(s.get(yt)),p(t)&&a.push(s.get(vt)));break;case"set":p(t)&&a.push(s.get(yt))}ht();for(const t of a)t&&gt(t,5);dt()}const wt=e("__proto__,__v_isRef,__isVue"),St=new Set(Object.getOwnPropertyNames(Symbol).filter((t=>"arguments"!==t&&"caller"!==t)).map((t=>Symbol[t])).filter(y)),Ot=kt();function kt(){const t={};return["includes","indexOf","lastIndexOf"].forEach((e=>{t[e]=function(...t){const n=de(this);for(let t=0,e=this.length;t<e;t++)_t(n,0,t+"");const i=n[e](...t);return-1===i||!1===i?n[e](...t.map(de)):i}})),["push","pop","shift","unshift","splice"].forEach((e=>{t[e]=function(...t){ct(),ht();const n=de(this)[e].apply(this,t);return dt(),ut(),n}})),t}function Et(t){y(t)||(t=String(t));const e=de(this);return _t(e,0,t),e.hasOwnProperty(t)}class At{constructor(t=!1,e=!1){this._isReadonly=t,this._isShallow=e}get(t,e,n){const i=this._isReadonly,r=this._isShallow;if("__v_isReactive"===e)return!i;if("__v_isReadonly"===e)return i;if("__v_isShallow"===e)return r;if("__v_raw"===e)return n===(i?r?ie:ne:r?ee:te).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(n)?t:void 0;const o=f(t);if(!i){if(o&&d(Ot,e))return Reflect.get(Ot,e,n);if("hasOwnProperty"===e)return Et}const s=Reflect.get(t,e,n);return(y(e)?St.has(e):wt(e))?s:(i||_t(t,0,e),r?s:ye(s)?o&&k(e)?s:s.value:v(s)?i?se(s):re(s):s)}}class Pt extends At{constructor(t=!1){super(!1,t)}set(t,e,n,i){let r=t[e];if(!this._isShallow){const e=ce(r);if(ue(n)||ce(n)||(r=de(r),n=de(n)),!f(t)&&ye(r)&&!ye(n))return!e&&(r.value=n,!0)}const o=f(t)&&k(e)?Number(e)<t.length:d(t,e),s=Reflect.set(t,e,n,i);return t===de(i)&&(o?D(n,r)&&xt(t,"set",e,n):xt(t,"add",e,n)),s}deleteProperty(t,e){const n=d(t,e),i=(t[e],Reflect.deleteProperty(t,e));return i&&n&&xt(t,"delete",e,void 0),i}has(t,e){const n=Reflect.has(t,e);return y(e)&&St.has(e)||_t(t,0,e),n}ownKeys(t){return _t(t,0,f(t)?"length":yt),Reflect.ownKeys(t)}}class Ct extends At{constructor(t=!1){super(!0,t)}set(t,e){return!0}deleteProperty(t,e){return!0}}const Tt=new Pt,Mt=new Ct,Lt=new Pt(!0),Rt=t=>t,Dt=t=>Reflect.getPrototypeOf(t);function jt(t,e,n=!1,i=!1){const r=de(t=t.__v_raw),o=de(e);n||(D(e,o)&&_t(r,0,e),_t(r,0,o));const{has:s}=Dt(r),a=i?Rt:n?pe:fe;return s.call(r,e)?a(t.get(e)):s.call(r,o)?a(t.get(o)):void(t!==r&&t.get(e))}function It(t,e=!1){const n=this.__v_raw,i=de(n),r=de(t);return e||(D(t,r)&&_t(i,0,t),_t(i,0,r)),t===r?n.has(t):n.has(t)||n.has(r)}function Ft(t,e=!1){return t=t.__v_raw,!e&&_t(de(t),0,yt),Reflect.get(t,"size",t)}function Nt(t){t=de(t);const e=de(this);return Dt(e).has.call(e,t)||(e.add(t),xt(e,"add",t,t)),this}function Bt(t,e){e=de(e);const n=de(this),{has:i,get:r}=Dt(n);let o=i.call(n,t);o||(t=de(t),o=i.call(n,t));const s=r.call(n,t);return n.set(t,e),o?D(e,s)&&xt(n,"set",t,e):xt(n,"add",t,e),this}function Vt(t){const e=de(this),{has:n,get:i}=Dt(e);let r=n.call(e,t);r||(t=de(t),r=n.call(e,t)),i&&i.call(e,t);const o=e.delete(t);return r&&xt(e,"delete",t,void 0),o}function zt(){const t=de(this),e=0!==t.size,n=t.clear();return e&&xt(t,"clear",void 0,void 0),n}function Ht(t,e){return function(n,i){const r=this,o=r.__v_raw,s=de(o),a=e?Rt:t?pe:fe;return!t&&_t(s,0,yt),o.forEach(((t,e)=>n.call(i,a(t),a(e),r)))}}function Ut(t,e,n){return function(...i){const r=this.__v_raw,o=de(r),s=p(o),a="entries"===t||t===Symbol.iterator&&s,l="keys"===t&&s,c=r[t](...i),u=n?Rt:e?pe:fe;return!e&&_t(o,0,l?vt:yt),{next(){const{value:t,done:e}=c.next();return e?{value:t,done:e}:{value:a?[u(t[0]),u(t[1])]:u(t),done:e}},[Symbol.iterator](){return this}}}}function $t(t){return function(...e){return"delete"!==t&&("clear"===t?void 0:this)}}function Wt(){const t={get(t){return jt(this,t)},get size(){return Ft(this)},has:It,add:Nt,set:Bt,delete:Vt,clear:zt,forEach:Ht(!1,!1)},e={get(t){return jt(this,t,!1,!0)},get size(){return Ft(this)},has:It,add:Nt,set:Bt,delete:Vt,clear:zt,forEach:Ht(!1,!0)},n={get(t){return jt(this,t,!0)},get size(){return Ft(this,!0)},has(t){return It.call(this,t,!0)},add:$t("add"),set:$t("set"),delete:$t("delete"),clear:$t("clear"),forEach:Ht(!0,!1)},i={get(t){return jt(this,t,!0,!0)},get size(){return Ft(this,!0)},has(t){return It.call(this,t,!0)},add:$t("add"),set:$t("set"),delete:$t("delete"),clear:$t("clear"),forEach:Ht(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((r=>{t[r]=Ut(r,!1,!1),n[r]=Ut(r,!0,!1),e[r]=Ut(r,!1,!0),i[r]=Ut(r,!0,!0)})),[t,n,e,i]}const[qt,Gt,Yt,Kt]=Wt();function Xt(t,e){const n=e?t?Kt:Yt:t?Gt:qt;return(e,i,r)=>"__v_isReactive"===i?!t:"__v_isReadonly"===i?t:"__v_raw"===i?e:Reflect.get(d(n,i)&&i in e?n:e,i,r)}const Jt={get:Xt(!1,!1)},Qt={get:Xt(!1,!0)},Zt={get:Xt(!0,!1)},te=new WeakMap,ee=new WeakMap,ne=new WeakMap,ie=new WeakMap;function re(t){return ce(t)?t:ae(t,!1,Tt,Jt,te)}function oe(t){return ae(t,!1,Lt,Qt,ee)}function se(t){return ae(t,!0,Mt,Zt,ne)}function ae(t,e,n,i,r){if(!v(t))return t;if(t.__v_raw&&(!e||!t.__v_isReactive))return t;const o=r.get(t);if(o)return o;const s=(a=t).__v_skip||!Object.isExtensible(a)?0:function(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}(S(a));var a;if(0===s)return t;const l=new Proxy(t,2===s?i:n);return r.set(t,l),l}function le(t){return ce(t)?le(t.__v_raw):!(!t||!t.__v_isReactive)}function ce(t){return!(!t||!t.__v_isReadonly)}function ue(t){return!(!t||!t.__v_isShallow)}function he(t){return!!t&&!!t.__v_raw}function de(t){const e=t&&t.__v_raw;return e?de(e):t}const fe=t=>v(t)?re(t):t,pe=t=>v(t)?se(t):t;class ge{constructor(t,e,n,i){this.getter=t,this._setter=e,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new et((()=>t(this._value)),(()=>be(this,3===this.effect._dirtyLevel?3:4))),this.effect.computed=this,this.effect.active=this._cacheable=!i,this.__v_isReadonly=n}get value(){const t=de(this);return t._cacheable&&!t.effect.dirty||!D(t._value,t._value=t.effect.run())||be(t,5),me(t),t.effect._dirtyLevel>=2&&be(t,3),t._value}set value(t){this._setter(t)}get _dirty(){return this.effect.dirty}set _dirty(t){this.effect.dirty=t}}function me(t){var e;st&&Z&&(t=de(t),ft(Z,null!=(e=t.dep)?e:t.dep=mt((()=>t.dep=void 0),t instanceof ge?t:void 0)))}function be(t,e=5,n,i){const r=(t=de(t)).dep;r&&gt(r,e)}function ye(t){return!(!t||!0!==t.__v_isRef)}function ve(t){return xe(t,!1)}function _e(t){return xe(t,!0)}function xe(t,e){return ye(t)?t:new we(t,e)}class we{constructor(t,e){this.__v_isShallow=e,this.dep=void 0,this.__v_isRef=!0,this._rawValue=e?t:de(t),this._value=e?t:fe(t)}get value(){return me(this),this._value}set value(t){const e=this.__v_isShallow||ue(t)||ce(t);t=e?t:de(t),D(t,this._rawValue)&&(this._rawValue,this._rawValue=t,this._value=e?t:fe(t),be(this,5))}}function Se(t){return ye(t)?t.value:t}const Oe={get:(t,e,n)=>Se(Reflect.get(t,e,n)),set:(t,e,n,i)=>{const r=t[e];return ye(r)&&!ye(n)?(r.value=n,!0):Reflect.set(t,e,n,i)}};function ke(t){return le(t)?t:new Proxy(t,Oe)}function Ee(t,e,n,i){try{return i?t(...i):t()}catch(t){Pe(t,e,n)}}function Ae(t,e,n,i){if(m(t)){const r=Ee(t,e,n,i);return r&&_(r)&&r.catch((t=>{Pe(t,e,n)})),r}if(f(t)){const r=[];for(let o=0;o<t.length;o++)r.push(Ae(t[o],e,n,i));return r}}function Pe(t,e,n,i=!0){if(e&&e.vnode,e){let i=e.parent;const r=e.proxy,o=`https://vuejs.org/error-reference/#runtime-${n}`;for(;i;){const e=i.ec;if(e)for(let n=0;n<e.length;n++)if(!1===e[n](t,r,o))return;i=i.parent}const s=e.appContext.config.errorHandler;if(s)return ct(),Ee(s,null,10,[t,r,o]),void ut()}!function(t,e,n,i=!0){console.error(t)}(t,0,0,i)}let Ce=!1,Te=!1;const Me=[];let Le=0;const Re=[];let De=null,je=0;const Ie=Promise.resolve();let Fe=null;function Ne(t){const e=Fe||Ie;return t?e.then(this?t.bind(this):t):e}function Be(t){Me.length&&Me.includes(t,Ce&&t.allowRecurse?Le+1:Le)||(null==t.id?Me.push(t):Me.splice(function(t){let e=Le+1,n=Me.length;for(;e<n;){const i=e+n>>>1,r=Me[i],o=Ue(r);o<t||o===t&&r.pre?e=i+1:n=i}return e}(t.id),0,t),Ve())}function Ve(){Ce||Te||(Te=!0,Fe=Ie.then(We))}function ze(t,e,n=(Ce?Le+1:0)){for(;n<Me.length;n++){const e=Me[n];if(e&&e.pre){if(t&&e.id!==t.uid)continue;Me.splice(n,1),n--,e()}}}function He(t){if(Re.length){const t=[...new Set(Re)].sort(((t,e)=>Ue(t)-Ue(e)));if(Re.length=0,De)return void De.push(...t);for(De=t,je=0;je<De.length;je++){const t=De[je];!1!==t.active&&t()}De=null,je=0}}const Ue=t=>null==t.id?1/0:t.id,$e=(t,e)=>{const n=Ue(t)-Ue(e);if(0===n){if(t.pre&&!e.pre)return-1;if(e.pre&&!t.pre)return 1}return n};function We(t){Te=!1,Ce=!0,Me.sort($e);try{for(Le=0;Le<Me.length;Le++){const t=Me[Le];t&&!1!==t.active&&Ee(t,null,14)}}finally{Le=0,Me.length=0,He(),Ce=!1,Fe=null,(Me.length||Re.length)&&We(t)}}let qe,Ge=[],Ye=!1;function Ke(t,...e){qe?qe.emit(t,...e):Ye||Ge.push({event:t,args:e})}function Xe(t,e){var n,i;qe=t,qe?(qe.enabled=!0,Ge.forEach((({event:t,args:e})=>qe.emit(t,...e))),Ge=[]):"undefined"!=typeof window&&window.HTMLElement&&!(null==(i=null==(n=window.navigator)?void 0:n.userAgent)?void 0:i.includes("jsdom"))?((e.__VUE_DEVTOOLS_HOOK_REPLAY__=e.__VUE_DEVTOOLS_HOOK_REPLAY__||[]).push((t=>{Xe(t,e)})),setTimeout((()=>{qe||(e.__VUE_DEVTOOLS_HOOK_REPLAY__=null,Ye=!0,Ge=[])}),3e3)):(Ye=!0,Ge=[])}const Je=en("component:added"),Qe=en("component:updated"),Ze=en("component:removed"),tn=t=>{qe&&"function"==typeof qe.cleanupBuffer&&!qe.cleanupBuffer(t)&&Ze(t)};function en(t){return e=>{Ke(t,e.appContext.app,e.uid,e.parent?e.parent.uid:void 0,e)}}function nn(t,e,...n){if(t.isUnmounted)return;const r=t.vnode.props||i;let o=n;const s=e.startsWith("update:"),a=s&&e.slice(7);if(a&&a in r){const t=`${"modelValue"===a?"model":a}Modifiers`,{number:e,trim:s}=r[t]||i;s&&(o=n.map((t=>b(t)?t.trim():t))),e&&(o=n.map(F))}let l;__VUE_PROD_DEVTOOLS__&&function(t,e,n){Ke("component:emit",t.appContext.app,t,e,n)}(t,e,o);let c=r[l=R(e)]||r[l=R(C(e))];!c&&s&&(c=r[l=R(M(e))]),c&&Ae(c,t,6,o);const u=r[l+"Once"];if(u){if(t.emitted){if(t.emitted[l])return}else t.emitted={};t.emitted[l]=!0,Ae(u,t,6,o)}}function rn(t,e,n=!1){const i=e.emitsCache,r=i.get(t);if(void 0!==r)return r;const o=t.emits;let s={},a=!1;if(__VUE_OPTIONS_API__&&!m(t)){const i=t=>{const n=rn(t,e,!0);n&&(a=!0,c(s,n))};!n&&e.mixins.length&&e.mixins.forEach(i),t.extends&&i(t.extends),t.mixins&&t.mixins.forEach(i)}return o||a?(f(o)?o.forEach((t=>s[t]=null)):c(s,o),v(t)&&i.set(t,s),s):(v(t)&&i.set(t,null),null)}function on(t,e){return!(!t||!a(e))&&(e=e.slice(2).replace(/Once$/,""),d(t,e[0].toLowerCase()+e.slice(1))||d(t,M(e))||d(t,e))}let sn=null,an=null;function ln(t){const e=sn;return sn=t,an=t&&t.type.__scopeId||null,e}function cn(t){an=t}function un(){an=null}function hn(t,e=sn,n){if(!e)return t;if(t._n)return t;const i=(...n)=>{i._d&&ur(-1);const r=ln(e);let o;try{o=t(...n)}finally{ln(r),i._d&&ur(1)}return __VUE_PROD_DEVTOOLS__&&Qe(e),o};return i._n=!0,i._c=!0,i._d=!0,i}function dn(t){const{type:e,vnode:n,proxy:i,withProxy:r,propsOptions:[o],slots:s,attrs:a,emit:c,render:u,renderCache:h,props:d,data:f,setupState:p,ctx:g,inheritAttrs:m}=t,b=ln(t);let y,v;try{if(4&n.shapeFlag){const t=r||i,e=t;y=Sr(u.call(e,t,h,d,p,f,g)),v=a}else{const t=e;y=Sr(t.length>1?t(d,{attrs:a,slots:s,emit:c}):t(d,null)),v=e.props?a:fn(a)}}catch(e){sr.length=0,Pe(e,t,1),y=vr(rr)}let _=y;if(v&&!1!==m){const t=Object.keys(v),{shapeFlag:e}=_;t.length&&7&e&&(o&&t.some(l)&&(v=pn(v,o)),_=_r(_,v,!1,!0))}return n.dirs&&(_=_r(_,null,!1,!0),_.dirs=_.dirs?_.dirs.concat(n.dirs):n.dirs),n.transition&&(_.transition=n.transition),y=_,ln(b),y}const fn=t=>{let e;for(const n in t)("class"===n||"style"===n||a(n))&&((e||(e={}))[n]=t[n]);return e},pn=(t,e)=>{const n={};for(const i in t)l(i)&&i.slice(9)in e||(n[i]=t[i]);return n};function gn(t,e,n){const i=Object.keys(e);if(i.length!==Object.keys(t).length)return!0;for(let r=0;r<i.length;r++){const o=i[r];if(e[o]!==t[o]&&!on(n,o))return!0}return!1}const mn="components";function bn(t,e){return function(t,e,n=!0,i=!1){const r=sn||Cr;if(r){const n=r.type;if(t===mn){const t=function(t,e=!0){return m(t)?t.displayName||t.name:t.name||e&&t.__name}(n,!1);if(t&&(t===e||t===C(e)||t===L(C(e))))return n}const o=vn(r[t]||n[t],e)||vn(r.appContext[t],e);return!o&&i?n:o}}(mn,t,!0,e)||t}const yn=Symbol.for("v-ndc");function vn(t,e){return t&&(t[e]||t[C(e)]||t[L(C(e))])}function _n(t,e,n=Cr,i=!1){if(n){const r=n[t]||(n[t]=[]),o=e.__weh||(e.__weh=(...i)=>{ct();const r=Rr(n),o=Ae(e,n,t,i);return r(),ut(),o});return i?r.unshift(o):r.push(o),o}}const xn=t=>(e,n=Cr)=>{Nr&&"sp"!==t||_n(t,((...t)=>e(...t)),n)},wn=xn("bm"),Sn=xn("m"),On=xn("bu"),kn=xn("u"),En=xn("bum"),An=xn("um"),Pn=xn("sp"),Cn=xn("rtg"),Tn=xn("rtc");function Mn(t,e=Cr){_n("ec",t,e)}function Ln(t,e,n,i){const r=t.dirs,o=e&&e.dirs;for(let s=0;s<r.length;s++){const a=r[s];o&&(a.oldValue=o[s].value);let l=a.dir[i];l&&(ct(),Ae(l,n,8,[t.el,a,t,e]),ut())}}function Rn(t,e,n,i){let r;const o=n&&n[i];if(f(t)||b(t)){r=new Array(t.length);for(let n=0,i=t.length;n<i;n++)r[n]=e(t[n],n,void 0,o&&o[n])}else if("number"==typeof t){r=new Array(t);for(let n=0;n<t;n++)r[n]=e(n+1,n,void 0,o&&o[n])}else if(v(t))if(t[Symbol.iterator])r=Array.from(t,((t,n)=>e(t,n,void 0,o&&o[n])));else{const n=Object.keys(t);r=new Array(n.length);for(let i=0,s=n.length;i<s;i++){const s=n[i];r[i]=e(t[s],s,i,o&&o[i])}}else r=[];return n&&(n[i]=r),r}function Dn(t,e){return m(t)?(()=>c({name:t.name},e,{setup:t}))():t}const jn=t=>!!t.type.__asyncLoader;function In(t,e,n={},i,r){if(sn.isCE||sn.parent&&jn(sn.parent)&&sn.parent.isCE)return"default"!==e&&(n.name=e),vr("slot",n,i&&i());let o=t[e];o&&o._c&&(o._d=!1),lr();const s=o&&Fn(o(n)),a=fr(nr,{key:n.key||s&&s.key||`_${e}`},s||(i?i():[]),s&&1===t._?64:-2);return!r&&a.scopeId&&(a.slotScopeIds=[a.scopeId+"-s"]),o&&o._c&&(o._d=!0),a}function Fn(t){return t.some((t=>!pr(t)||t.type!==rr&&!(t.type===nr&&!Fn(t.children))))?t:null}const Nn=t=>t?jr(t)?Hr(t):Nn(t.parent):null,Bn=c(Object.create(null),{$:t=>t,$el:t=>t.vnode.el,$data:t=>t.data,$props:t=>t.props,$attrs:t=>t.attrs,$slots:t=>t.slots,$refs:t=>t.refs,$parent:t=>Nn(t.parent),$root:t=>Nn(t.root),$emit:t=>t.emit,$options:t=>__VUE_OPTIONS_API__?qn(t):t.type,$forceUpdate:t=>t.f||(t.f=()=>{t.effect.dirty=!0,Be(t.update)}),$nextTick:t=>t.n||(t.n=Ne.bind(t.proxy)),$watch:t=>__VUE_OPTIONS_API__?Ii.bind(t):o}),Vn=(t,e)=>t!==i&&!t.__isScriptSetup&&d(t,e),zn={get({_:t},e){if("__v_skip"===e)return!0;const{ctx:n,setupState:r,data:o,props:s,accessCache:a,type:l,appContext:c}=t;let u;if("$"!==e[0]){const l=a[e];if(void 0!==l)switch(l){case 1:return r[e];case 2:return o[e];case 4:return n[e];case 3:return s[e]}else{if(Vn(r,e))return a[e]=1,r[e];if(o!==i&&d(o,e))return a[e]=2,o[e];if((u=t.propsOptions[0])&&d(u,e))return a[e]=3,s[e];if(n!==i&&d(n,e))return a[e]=4,n[e];__VUE_OPTIONS_API__&&!Un||(a[e]=0)}}const h=Bn[e];let f,p;return h?("$attrs"===e&&_t(t.attrs,0,""),h(t)):(f=l.__cssModules)&&(f=f[e])?f:n!==i&&d(n,e)?(a[e]=4,n[e]):(p=c.config.globalProperties,d(p,e)?p[e]:void 0)},set({_:t},e,n){const{data:r,setupState:o,ctx:s}=t;return Vn(o,e)?(o[e]=n,!0):r!==i&&d(r,e)?(r[e]=n,!0):!(d(t.props,e)||"$"===e[0]&&e.slice(1)in t||(s[e]=n,0))},has({_:{data:t,setupState:e,accessCache:n,ctx:r,appContext:o,propsOptions:s}},a){let l;return!!n[a]||t!==i&&d(t,a)||Vn(e,a)||(l=s[0])&&d(l,a)||d(r,a)||d(Bn,a)||d(o.config.globalProperties,a)},defineProperty(t,e,n){return null!=n.get?t._.accessCache[e]=0:d(n,"value")&&this.set(t,e,n.value,null),Reflect.defineProperty(t,e,n)}};function Hn(t){return f(t)?t.reduce(((t,e)=>(t[e]=null,t)),{}):t}let Un=!0;function $n(t,e,n){Ae(f(t)?t.map((t=>t.bind(e.proxy))):t.bind(e.proxy),e,n)}function Wn(t,e,n,i){const r=i.includes(".")?Fi(n,i):()=>n[i];if(b(t)){const n=e[t];m(n)&&Di(r,n)}else if(m(t))Di(r,t.bind(n));else if(v(t))if(f(t))t.forEach((t=>Wn(t,e,n,i)));else{const i=m(t.handler)?t.handler.bind(n):e[t.handler];m(i)&&Di(r,i,t)}}function qn(t){const e=t.type,{mixins:n,extends:i}=e,{mixins:r,optionsCache:o,config:{optionMergeStrategies:s}}=t.appContext,a=o.get(e);let l;return a?l=a:r.length||n||i?(l={},r.length&&r.forEach((t=>Gn(l,t,s,!0))),Gn(l,e,s)):l=e,v(e)&&o.set(e,l),l}function Gn(t,e,n,i=!1){const{mixins:r,extends:o}=e;o&&Gn(t,o,n,!0),r&&r.forEach((e=>Gn(t,e,n,!0)));for(const r in e)if(i&&"expose"===r);else{const i=Yn[r]||n&&n[r];t[r]=i?i(t[r],e[r]):e[r]}return t}const Yn={data:Kn,props:Zn,emits:Zn,methods:Qn,computed:Qn,beforeCreate:Jn,created:Jn,beforeMount:Jn,mounted:Jn,beforeUpdate:Jn,updated:Jn,beforeDestroy:Jn,beforeUnmount:Jn,destroyed:Jn,unmounted:Jn,activated:Jn,deactivated:Jn,errorCaptured:Jn,serverPrefetch:Jn,components:Qn,directives:Qn,watch:function(t,e){if(!t)return e;if(!e)return t;const n=c(Object.create(null),t);for(const i in e)n[i]=Jn(t[i],e[i]);return n},provide:Kn,inject:function(t,e){return Qn(Xn(t),Xn(e))}};function Kn(t,e){return e?t?function(){return c(m(t)?t.call(this,this):t,m(e)?e.call(this,this):e)}:e:t}function Xn(t){if(f(t)){const e={};for(let n=0;n<t.length;n++)e[t[n]]=t[n];return e}return t}function Jn(t,e){return t?[...new Set([].concat(t,e))]:e}function Qn(t,e){return t?c(Object.create(null),t,e):e}function Zn(t,e){return t?f(t)&&f(e)?[...new Set([...t,...e])]:c(Object.create(null),Hn(t),Hn(null!=e?e:{})):e}function ti(){return{app:null,config:{isNativeTag:s,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let ei=0;function ni(t,e){return function(n,i=null){m(n)||(n=c({},n)),null==i||v(i)||(i=null);const r=ti(),o=new WeakSet;let s=!1;const a=r.app={_uid:ei++,_component:n,_props:i,_container:null,_context:r,_instance:null,version:Wr,get config(){return r.config},set config(t){},use:(t,...e)=>(o.has(t)||(t&&m(t.install)?(o.add(t),t.install(a,...e)):m(t)&&(o.add(t),t(a,...e))),a),mixin:t=>(__VUE_OPTIONS_API__&&(r.mixins.includes(t)||r.mixins.push(t)),a),component:(t,e)=>e?(r.components[t]=e,a):r.components[t],directive:(t,e)=>e?(r.directives[t]=e,a):r.directives[t],mount(o,l,c){if(!s){const u=vr(n,i);return u.appContext=r,!0===c?c="svg":!1===c&&(c=void 0),l&&e?e(u,o):t(u,o,c),s=!0,a._container=o,o.__vue_app__=a,__VUE_PROD_DEVTOOLS__&&(a._instance=u.component,function(t,e){Ke("app:init",t,e,{Fragment:nr,Text:ir,Comment:rr,Static:or})}(a,Wr)),Hr(u.component)}},unmount(){s&&(t(null,a._container),__VUE_PROD_DEVTOOLS__&&(a._instance=null,function(t){Ke("app:unmount",t)}(a)),delete a._container.__vue_app__)},provide:(t,e)=>(r.provides[t]=e,a),runWithContext(t){const e=ii;ii=a;try{return t()}finally{ii=e}}};return a}}let ii=null;function ri(t,e){if(Cr){let n=Cr.provides;const i=Cr.parent&&Cr.parent.provides;i===n&&(n=Cr.provides=Object.create(i)),n[t]=e}}function oi(t,e,n=!1){const i=Cr||sn;if(i||ii){const r=i?null==i.parent?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides:ii._context.provides;if(r&&t in r)return r[t];if(arguments.length>1)return n&&m(e)?e.call(i&&i.proxy):e}}const si={},ai=()=>Object.create(si),li=t=>Object.getPrototypeOf(t)===si;function ci(t,e,n,r){const[o,s]=t.propsOptions;let a,l=!1;if(e)for(let i in e){if(E(i))continue;const c=e[i];let u;o&&d(o,u=C(i))?s&&s.includes(u)?(a||(a={}))[u]=c:n[u]=c:on(t.emitsOptions,i)||i in r&&c===r[i]||(r[i]=c,l=!0)}if(s){const e=de(n),r=a||i;for(let i=0;i<s.length;i++){const a=s[i];n[a]=ui(o,e,a,r[a],t,!d(r,a))}}return l}function ui(t,e,n,i,r,o){const s=t[n];if(null!=s){const t=d(s,"default");if(t&&void 0===i){const t=s.default;if(s.type!==Function&&!s.skipFactory&&m(t)){const{propsDefaults:o}=r;if(n in o)i=o[n];else{const s=Rr(r);i=o[n]=t.call(null,e),s()}}else i=t}s[0]&&(o&&!t?i=!1:!s[1]||""!==i&&i!==M(n)||(i=!0))}return i}function hi(t,e,n=!1){const o=e.propsCache,s=o.get(t);if(s)return s;const a=t.props,l={},u=[];let h=!1;if(__VUE_OPTIONS_API__&&!m(t)){const i=t=>{h=!0;const[n,i]=hi(t,e,!0);c(l,n),i&&u.push(...i)};!n&&e.mixins.length&&e.mixins.forEach(i),t.extends&&i(t.extends),t.mixins&&t.mixins.forEach(i)}if(!a&&!h)return v(t)&&o.set(t,r),r;if(f(a))for(let t=0;t<a.length;t++){const e=C(a[t]);di(e)&&(l[e]=i)}else if(a)for(const t in a){const e=C(t);if(di(e)){const n=a[t],i=l[e]=f(n)||m(n)?{type:n}:c({},n);if(i){const t=gi(Boolean,i.type),n=gi(String,i.type);i[0]=t>-1,i[1]=n<0||t<n,(t>-1||d(i,"default"))&&u.push(e)}}}const p=[l,u];return v(t)&&o.set(t,p),p}function di(t){return"$"!==t[0]&&!E(t)}function fi(t){return null===t?"null":"function"==typeof t?t.name||"":"object"==typeof t&&t.constructor&&t.constructor.name||""}function pi(t,e){return fi(t)===fi(e)}function gi(t,e){return f(e)?e.findIndex((e=>pi(e,t))):m(e)&&pi(e,t)?0:-1}const mi=t=>"_"===t[0]||"$stable"===t,bi=t=>f(t)?t.map(Sr):[Sr(t)],yi=(t,e,n)=>{if(e._n)return e;const i=hn(((...t)=>bi(e(...t))),n);return i._c=!1,i},vi=(t,e,n)=>{const i=t._ctx;for(const n in t){if(mi(n))continue;const r=t[n];if(m(r))e[n]=yi(0,r,i);else if(null!=r){const t=bi(r);e[n]=()=>t}}},_i=(t,e)=>{const n=bi(e);t.slots.default=()=>n},xi=(t,e)=>{const n=t.slots=ai();if(32&t.vnode.shapeFlag){const t=e._;t?(c(n,e),I(n,"_",t,!0)):vi(e,n)}else e&&_i(t,e)},wi=(t,e,n)=>{const{vnode:r,slots:o}=t;let s=!0,a=i;if(32&r.shapeFlag){const t=e._;t?n&&1===t?s=!1:(c(o,e),n||1!==t||delete o._):(s=!e.$stable,vi(e,o)),a=e}else e&&(_i(t,e),a={default:1});if(s)for(const t in o)mi(t)||null!=a[t]||delete o[t]};function Si(t,e,n,r,o=!1){if(f(t))return void t.forEach(((t,i)=>Si(t,e&&(f(e)?e[i]:e),n,r,o)));if(jn(r)&&!o)return;const s=4&r.shapeFlag?Hr(r.component):r.el,a=o?null:s,{i:l,r:c}=t,h=e&&e.r,p=l.refs===i?l.refs={}:l.refs,g=l.setupState;if(null!=h&&h!==c&&(b(h)?(p[h]=null,d(g,h)&&(g[h]=null)):ye(h)&&(h.value=null)),m(c))Ee(c,l,12,[a,p]);else{const e=b(c),i=ye(c);if(e||i){const r=()=>{if(t.f){const n=e?d(g,c)?g[c]:p[c]:c.value;o?f(n)&&u(n,s):f(n)?n.includes(s)||n.push(s):e?(p[c]=[s],d(g,c)&&(g[c]=p[c])):(c.value=[s],t.k&&(p[t.k]=c.value))}else e?(p[c]=a,d(g,c)&&(g[c]=a)):i&&(c.value=a,t.k&&(p[t.k]=a))};a?(r.id=-1,Oi(r,n)):r()}}}const Oi=function(t,e){var n;e&&e.pendingBranch?f(t)?e.effects.push(...t):e.effects.push(t):(f(n=t)?Re.push(...n):De&&De.includes(n,n.allowRecurse?je+1:je)||Re.push(n),Ve())};function ki(t,e){"boolean"!=typeof __VUE_OPTIONS_API__&&(V().__VUE_OPTIONS_API__=!0),"boolean"!=typeof __VUE_PROD_DEVTOOLS__&&(V().__VUE_PROD_DEVTOOLS__=!1),"boolean"!=typeof __VUE_PROD_HYDRATION_MISMATCH_DETAILS__&&(V().__VUE_PROD_HYDRATION_MISMATCH_DETAILS__=!1);const n=V();n.__VUE__=!0,__VUE_PROD_DEVTOOLS__&&Xe(n.__VUE_DEVTOOLS_GLOBAL_HOOK__,n);const{insert:s,remove:a,patchProp:l,createElement:c,createText:u,createComment:h,setText:f,setElementText:p,parentNode:g,nextSibling:m,setScopeId:b=o,insertStaticContent:y}=t,v=(t,e,n,i=null,r=null,o=null,s=void 0,a=null,l=!!e.dynamicChildren)=>{if(t===e)return;t&&!gr(t,e)&&(i=J(t),q(t,r,o,!0),t=null),-2===e.patchFlag&&(l=!1,e.dynamicChildren=null);const{type:c,ref:u,shapeFlag:h}=e;switch(c){case ir:x(t,e,n,i);break;case rr:w(t,e,n,i);break;case or:null==t&&S(e,n,i,s);break;case nr:D(t,e,n,i,r,o,s,a,l);break;default:1&h?O(t,e,n,i,r,o,s,a,l):6&h?I(t,e,n,i,r,o,s,a,l):(64&h||128&h)&&c.process(t,e,n,i,r,o,s,a,l,nt)}null!=u&&r&&Si(u,t&&t.ref,o,e||t,!e)},x=(t,e,n,i)=>{if(null==t)s(e.el=u(e.children),n,i);else{const n=e.el=t.el;e.children!==t.children&&f(n,e.children)}},w=(t,e,n,i)=>{null==t?s(e.el=h(e.children||""),n,i):e.el=t.el},S=(t,e,n,i)=>{[t.el,t.anchor]=y(t.children,e,n,i,t.el,t.anchor)},O=(t,e,n,i,r,o,s,a,l)=>{"svg"===e.type?s="svg":"math"===e.type&&(s="mathml"),null==t?k(e,n,i,r,o,s,a,l):T(t,e,r,o,s,a,l)},k=(t,e,n,i,r,o,a,u)=>{let h,d;const{props:f,shapeFlag:g,transition:m,dirs:b}=t;if(h=t.el=c(t.type,o,f&&f.is,f),8&g?p(h,t.children):16&g&&P(t.children,h,null,i,r,Ei(t,o),a,u),b&&Ln(t,null,i,"created"),A(h,t,t.scopeId,a,i),f){for(const e in f)"value"===e||E(e)||l(h,e,null,f[e],o,t.children,i,r,X);"value"in f&&l(h,"value",null,f.value,o),(d=f.onVnodeBeforeMount)&&Er(d,i,t)}__VUE_PROD_DEVTOOLS__&&(Object.defineProperty(h,"__vnode",{value:t,enumerable:!1}),Object.defineProperty(h,"__vueParentComponent",{value:i,enumerable:!1})),b&&Ln(t,null,i,"beforeMount");const y=function(t,e){return(!t||t&&!t.pendingBranch)&&e&&!e.persisted}(r,m);y&&m.beforeEnter(h),s(h,e,n),((d=f&&f.onVnodeMounted)||y||b)&&Oi((()=>{d&&Er(d,i,t),y&&m.enter(h),b&&Ln(t,null,i,"mounted")}),r)},A=(t,e,n,i,r)=>{if(n&&b(t,n),i)for(let e=0;e<i.length;e++)b(t,i[e]);if(r&&e===r.subTree){const e=r.vnode;A(t,e,e.scopeId,e.slotScopeIds,r.parent)}},P=(t,e,n,i,r,o,s,a,l=0)=>{for(let c=l;c<t.length;c++){const l=t[c]=a?Or(t[c]):Sr(t[c]);v(null,l,e,n,i,r,o,s,a)}},T=(t,e,n,r,o,s,a)=>{const c=e.el=t.el;let{patchFlag:u,dynamicChildren:h,dirs:d}=e;u|=16&t.patchFlag;const f=t.props||i,g=e.props||i;let m;if(n&&Ai(n,!1),(m=g.onVnodeBeforeUpdate)&&Er(m,n,e,t),d&&Ln(e,t,n,"beforeUpdate"),n&&Ai(n,!0),h?L(t.dynamicChildren,h,c,n,r,Ei(e,o),s):a||H(t,e,c,null,n,r,Ei(e,o),s,!1),u>0){if(16&u)R(c,e,f,g,n,r,o);else if(2&u&&f.class!==g.class&&l(c,"class",null,g.class,o),4&u&&l(c,"style",f.style,g.style,o),8&u){const i=e.dynamicProps;for(let e=0;e<i.length;e++){const s=i[e],a=f[s],u=g[s];u===a&&"value"!==s||l(c,s,a,u,o,t.children,n,r,X)}}1&u&&t.children!==e.children&&p(c,e.children)}else a||null!=h||R(c,e,f,g,n,r,o);((m=g.onVnodeUpdated)||d)&&Oi((()=>{m&&Er(m,n,e,t),d&&Ln(e,t,n,"updated")}),r)},L=(t,e,n,i,r,o,s)=>{for(let a=0;a<e.length;a++){const l=t[a],c=e[a],u=l.el&&(l.type===nr||!gr(l,c)||70&l.shapeFlag)?g(l.el):n;v(l,c,u,null,i,r,o,s,!0)}},R=(t,e,n,r,o,s,a)=>{if(n!==r){if(n!==i)for(const i in n)E(i)||i in r||l(t,i,n[i],null,a,e.children,o,s,X);for(const i in r){if(E(i))continue;const c=r[i],u=n[i];c!==u&&"value"!==i&&l(t,i,u,c,a,e.children,o,s,X)}"value"in r&&l(t,"value",n.value,r.value,a)}},D=(t,e,n,i,r,o,a,l,c)=>{const h=e.el=t?t.el:u(""),d=e.anchor=t?t.anchor:u("");let{patchFlag:f,dynamicChildren:p,slotScopeIds:g}=e;g&&(l=l?l.concat(g):g),null==t?(s(h,n,i),s(d,n,i),P(e.children||[],n,d,r,o,a,l,c)):f>0&&64&f&&p&&t.dynamicChildren?(L(t.dynamicChildren,p,n,r,o,a,l),(null!=e.key||r&&e===r.subTree)&&Pi(t,e,!0)):H(t,e,n,d,r,o,a,l,c)},I=(t,e,n,i,r,o,s,a,l)=>{e.slotScopeIds=a,null==t?512&e.shapeFlag?r.ctx.activate(e,n,i,s,l):F(e,n,i,r,o,s,l):N(t,e,l)},F=(t,e,n,r,o,s,a)=>{const l=t.component=function(t,e,n){const r=t.type,o=(e?e.appContext:t.appContext)||Ar,s={uid:Pr++,vnode:t,type:r,parent:e,appContext:o,root:null,next:null,subTree:null,effect:null,update:null,scope:new tt(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(o.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:hi(r,o),emitsOptions:rn(r,o),emit:null,emitted:null,propsDefaults:i,inheritAttrs:r.inheritAttrs,ctx:i,data:i,props:i,attrs:i,slots:i,refs:i,setupState:i,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return s.ctx={_:s},s.root=e?e.root:s,s.emit=nn.bind(null,s),t.ce&&t.ce(s),s}(t,r,o);if(Bi(t)&&(l.ctx.renderer=nt),function(t,e=!1){e&&Lr(e);const{props:n,children:i}=t.vnode,r=jr(t);!function(t,e,n,i=!1){const r={},o=ai();t.propsDefaults=Object.create(null),ci(t,e,r,o);for(const e in t.propsOptions[0])e in r||(r[e]=void 0);n?t.props=i?r:oe(r):t.type.props?t.props=r:t.props=o,t.attrs=o}(t,n,r,e),xi(t,i);const o=r?function(t,e){const n=t.type;t.accessCache=Object.create(null),t.proxy=new Proxy(t.ctx,zn);const{setup:i}=n;if(i){const n=t.setupContext=i.length>1?function(t){const e=e=>{t.exposed=e||{}};return{attrs:new Proxy(t.attrs,zr),slots:t.slots,emit:t.emit,expose:e}}(t):null,r=Rr(t);ct();const o=Ee(i,t,0,[t.props,n]);if(ut(),r(),_(o)){if(o.then(Dr,Dr),e)return o.then((n=>{Br(t,n,e)})).catch((e=>{Pe(e,t,0)}));t.asyncDep=o}else Br(t,o,e)}else Vr(t,e)}(t,e):void 0;e&&Lr(!1)}(l),l.asyncDep){if(o&&o.registerDep(l,B,a),!t.el){const t=l.subTree=vr(rr);w(null,t,e,n)}}else B(l,t,e,n,o,s,a)},N=(t,e,n)=>{const i=e.component=t.component;if(function(t,e,n){const{props:i,children:r,component:o}=t,{props:s,children:a,patchFlag:l}=e,c=o.emitsOptions;if(e.dirs||e.transition)return!0;if(!(n&&l>=0))return!(!r&&!a||a&&a.$stable)||i!==s&&(i?!s||gn(i,s,c):!!s);if(1024&l)return!0;if(16&l)return i?gn(i,s,c):!!s;if(8&l){const t=e.dynamicProps;for(let e=0;e<t.length;e++){const n=t[e];if(s[n]!==i[n]&&!on(c,n))return!0}}return!1}(t,e,n)){if(i.asyncDep&&!i.asyncResolved)return void z(i,e,n);i.next=e,function(t){const e=Me.indexOf(t);e>Le&&Me.splice(e,1)}(i.update),i.effect.dirty=!0,i.update()}else e.el=t.el,i.vnode=e},B=(t,e,n,i,r,s,a)=>{const l=()=>{if(t.isMounted){let{next:e,bu:n,u:i,parent:o,vnode:c}=t;{const n=Ci(t);if(n)return e&&(e.el=c.el,z(t,e,a)),void n.asyncDep.then((()=>{t.isUnmounted||l()}))}let u,h=e;Ai(t,!1),e?(e.el=c.el,z(t,e,a)):e=c,n&&j(n),(u=e.props&&e.props.onVnodeBeforeUpdate)&&Er(u,o,e,c),Ai(t,!0);const d=dn(t),f=t.subTree;t.subTree=d,v(f,d,g(f.el),J(f),t,r,s),e.el=d.el,null===h&&function({vnode:t,parent:e},n){for(;e;){const i=e.subTree;if(i.suspense&&i.suspense.activeBranch===t&&(i.el=t.el),i!==t)break;(t=e.vnode).el=n,e=e.parent}}(t,d.el),i&&Oi(i,r),(u=e.props&&e.props.onVnodeUpdated)&&Oi((()=>Er(u,o,e,c)),r),__VUE_PROD_DEVTOOLS__&&Qe(t)}else{let o;const{el:a,props:l}=e,{bm:c,m:u,parent:h}=t,d=jn(e);if(Ai(t,!1),c&&j(c),!d&&(o=l&&l.onVnodeBeforeMount)&&Er(o,h,e),Ai(t,!0),a&&rt){const n=()=>{t.subTree=dn(t),rt(a,t.subTree,t,r,null)};d?e.type.__asyncLoader().then((()=>!t.isUnmounted&&n())):n()}else{const o=t.subTree=dn(t);v(null,o,n,i,t,r,s),e.el=o.el}if(u&&Oi(u,r),!d&&(o=l&&l.onVnodeMounted)){const t=e;Oi((()=>Er(o,h,t)),r)}(256&e.shapeFlag||h&&jn(h.vnode)&&256&h.vnode.shapeFlag)&&t.a&&Oi(t.a,r),t.isMounted=!0,__VUE_PROD_DEVTOOLS__&&Je(t),e=n=i=null}},c=t.effect=new et(l,o,(()=>Be(u)),t.scope),u=t.update=()=>{c.dirty&&c.run()};u.id=t.uid,Ai(t,!0),u()},z=(t,e,n)=>{e.component=t;const i=t.vnode.props;t.vnode=e,t.next=null,function(t,e,n,i){const{props:r,attrs:o,vnode:{patchFlag:s}}=t,a=de(r),[l]=t.propsOptions;let c=!1;if(!(i||s>0)||16&s){let i;ci(t,e,r,o)&&(c=!0);for(const o in a)e&&(d(e,o)||(i=M(o))!==o&&d(e,i))||(l?!n||void 0===n[o]&&void 0===n[i]||(r[o]=ui(l,a,o,void 0,t,!0)):delete r[o]);if(o!==a)for(const t in o)e&&d(e,t)||(delete o[t],c=!0)}else if(8&s){const n=t.vnode.dynamicProps;for(let i=0;i<n.length;i++){let s=n[i];if(on(t.emitsOptions,s))continue;const u=e[s];if(l)if(d(o,s))u!==o[s]&&(o[s]=u,c=!0);else{const e=C(s);r[e]=ui(l,a,e,u,t,!1)}else u!==o[s]&&(o[s]=u,c=!0)}}c&&xt(t.attrs,"set","")}(t,e.props,i,n),wi(t,e.children,n),ct(),ze(t),ut()},H=(t,e,n,i,r,o,s,a,l=!1)=>{const c=t&&t.children,u=t?t.shapeFlag:0,h=e.children,{patchFlag:d,shapeFlag:f}=e;if(d>0){if(128&d)return void $(c,h,n,i,r,o,s,a,l);if(256&d)return void U(c,h,n,i,r,o,s,a,l)}8&f?(16&u&&X(c,r,o),h!==c&&p(n,h)):16&u?16&f?$(c,h,n,i,r,o,s,a,l):X(c,r,o,!0):(8&u&&p(n,""),16&f&&P(h,n,i,r,o,s,a,l))},U=(t,e,n,i,o,s,a,l,c)=>{e=e||r;const u=(t=t||r).length,h=e.length,d=Math.min(u,h);let f;for(f=0;f<d;f++){const i=e[f]=c?Or(e[f]):Sr(e[f]);v(t[f],i,n,null,o,s,a,l,c)}u>h?X(t,o,s,!0,!1,d):P(e,n,i,o,s,a,l,c,d)},$=(t,e,n,i,o,s,a,l,c)=>{let u=0;const h=e.length;let d=t.length-1,f=h-1;for(;u<=d&&u<=f;){const i=t[u],r=e[u]=c?Or(e[u]):Sr(e[u]);if(!gr(i,r))break;v(i,r,n,null,o,s,a,l,c),u++}for(;u<=d&&u<=f;){const i=t[d],r=e[f]=c?Or(e[f]):Sr(e[f]);if(!gr(i,r))break;v(i,r,n,null,o,s,a,l,c),d--,f--}if(u>d){if(u<=f){const t=f+1,r=t<h?e[t].el:i;for(;u<=f;)v(null,e[u]=c?Or(e[u]):Sr(e[u]),n,r,o,s,a,l,c),u++}}else if(u>f)for(;u<=d;)q(t[u],o,s,!0),u++;else{const p=u,g=u,m=new Map;for(u=g;u<=f;u++){const t=e[u]=c?Or(e[u]):Sr(e[u]);null!=t.key&&m.set(t.key,u)}let b,y=0;const _=f-g+1;let x=!1,w=0;const S=new Array(_);for(u=0;u<_;u++)S[u]=0;for(u=p;u<=d;u++){const i=t[u];if(y>=_){q(i,o,s,!0);continue}let r;if(null!=i.key)r=m.get(i.key);else for(b=g;b<=f;b++)if(0===S[b-g]&&gr(i,e[b])){r=b;break}void 0===r?q(i,o,s,!0):(S[r-g]=u+1,r>=w?w=r:x=!0,v(i,e[r],n,null,o,s,a,l,c),y++)}const O=x?function(t){const e=t.slice(),n=[0];let i,r,o,s,a;const l=t.length;for(i=0;i<l;i++){const l=t[i];if(0!==l){if(r=n[n.length-1],t[r]<l){e[i]=r,n.push(i);continue}for(o=0,s=n.length-1;o<s;)a=o+s>>1,t[n[a]]<l?o=a+1:s=a;l<t[n[o]]&&(o>0&&(e[i]=n[o-1]),n[o]=i)}}for(o=n.length,s=n[o-1];o-- >0;)n[o]=s,s=e[s];return n}(S):r;for(b=O.length-1,u=_-1;u>=0;u--){const t=g+u,r=e[t],d=t+1<h?e[t+1].el:i;0===S[u]?v(null,r,n,d,o,s,a,l,c):x&&(b<0||u!==O[b]?W(r,n,d,2):b--)}}},W=(t,e,n,i,r=null)=>{const{el:o,type:a,transition:l,children:c,shapeFlag:u}=t;if(6&u)W(t.component.subTree,e,n,i);else if(128&u)t.suspense.move(e,n,i);else if(64&u)a.move(t,e,n,nt);else if(a!==nr)if(a!==or)if(2!==i&&1&u&&l)if(0===i)l.beforeEnter(o),s(o,e,n),Oi((()=>l.enter(o)),r);else{const{leave:t,delayLeave:i,afterLeave:r}=l,a=()=>s(o,e,n),c=()=>{t(o,(()=>{a(),r&&r()}))};i?i(o,a,c):c()}else s(o,e,n);else(({el:t,anchor:e},n,i)=>{let r;for(;t&&t!==e;)r=m(t),s(t,n,i),t=r;s(e,n,i)})(t,e,n);else{s(o,e,n);for(let t=0;t<c.length;t++)W(c[t],e,n,i);s(t.anchor,e,n)}},q=(t,e,n,i=!1,r=!1)=>{const{type:o,props:s,ref:a,children:l,dynamicChildren:c,shapeFlag:u,patchFlag:h,dirs:d,memoIndex:f}=t;if(null!=a&&Si(a,null,n,t,!0),null!=f&&(e.renderCache[f]=void 0),256&u)return void e.ctx.deactivate(t);const p=1&u&&d,g=!jn(t);let m;if(g&&(m=s&&s.onVnodeBeforeUnmount)&&Er(m,e,t),6&u)K(t.component,n,i);else{if(128&u)return void t.suspense.unmount(n,i);p&&Ln(t,null,e,"beforeUnmount"),64&u?t.type.remove(t,e,n,r,nt,i):c&&(o!==nr||h>0&&64&h)?X(c,e,n,!1,!0):(o===nr&&384&h||!r&&16&u)&&X(l,e,n),i&&G(t)}(g&&(m=s&&s.onVnodeUnmounted)||p)&&Oi((()=>{m&&Er(m,e,t),p&&Ln(t,null,e,"unmounted")}),n)},G=t=>{const{type:e,el:n,anchor:i,transition:r}=t;if(e===nr)return void Y(n,i);if(e===or)return void(({el:t,anchor:e})=>{let n;for(;t&&t!==e;)n=m(t),a(t),t=n;a(e)})(t);const o=()=>{a(n),r&&!r.persisted&&r.afterLeave&&r.afterLeave()};if(1&t.shapeFlag&&r&&!r.persisted){const{leave:e,delayLeave:i}=r,s=()=>e(n,o);i?i(t.el,o,s):s()}else o()},Y=(t,e)=>{let n;for(;t!==e;)n=m(t),a(t),t=n;a(e)},K=(t,e,n)=>{const{bum:i,scope:r,update:o,subTree:s,um:a,m:l,a:c}=t;Ti(l),Ti(c),i&&j(i),r.stop(),o&&(o.active=!1,q(s,t,e,n)),a&&Oi(a,e),Oi((()=>{t.isUnmounted=!0}),e),e&&e.pendingBranch&&!e.isUnmounted&&t.asyncDep&&!t.asyncResolved&&t.suspenseId===e.pendingId&&(e.deps--,0===e.deps&&e.resolve()),__VUE_PROD_DEVTOOLS__&&tn(t)},X=(t,e,n,i=!1,r=!1,o=0)=>{for(let s=o;s<t.length;s++)q(t[s],e,n,i,r)},J=t=>6&t.shapeFlag?J(t.component.subTree):128&t.shapeFlag?t.suspense.next():m(t.anchor||t.el);let Q=!1;const Z=(t,e,n)=>{null==t?e._vnode&&q(e._vnode,null,null,!0):v(e._vnode||null,t,e,null,null,null,n),Q||(Q=!0,ze(),He(),Q=!1),e._vnode=t},nt={p:v,um:q,m:W,r:G,mt:F,mc:P,pc:H,pbc:L,n:J,o:t};let it,rt;return e&&([it,rt]=e(nt)),{render:Z,hydrate:it,createApp:ni(Z,it)}}function Ei({type:t,props:e},n){return"svg"===n&&"foreignObject"===t||"mathml"===n&&"annotation-xml"===t&&e&&e.encoding&&e.encoding.includes("html")?void 0:n}function Ai({effect:t,update:e},n){t.allowRecurse=e.allowRecurse=n}function Pi(t,e,n=!1){const i=t.children,r=e.children;if(f(i)&&f(r))for(let t=0;t<i.length;t++){const e=i[t];let o=r[t];1&o.shapeFlag&&!o.dynamicChildren&&((o.patchFlag<=0||32===o.patchFlag)&&(o=r[t]=Or(r[t]),o.el=e.el),n||-2===o.patchFlag||Pi(e,o)),o.type===ir&&(o.el=e.el)}}function Ci(t){const e=t.subTree.component;if(e)return e.asyncDep&&!e.asyncResolved?e:Ci(e)}function Ti(t){if(t)for(let e=0;e<t.length;e++)t[e].active=!1}const Mi=Symbol.for("v-scx"),Li=()=>oi(Mi),Ri={};function Di(t,e,n){return ji(t,e,n)}function ji(t,e,{immediate:n,deep:r,flush:s,once:a,onTrack:l,onTrigger:c}=i){if(e&&a){const t=e;e=(...e)=>{t(...e),E()}}const h=Cr,d=t=>!0===r?t:Ni(t,!1===r?1:void 0);let p,g,b=!1,y=!1;if(ye(t)?(p=()=>t.value,b=ue(t)):le(t)?(p=()=>d(t),b=!0):f(t)?(y=!0,b=t.some((t=>le(t)||ue(t))),p=()=>t.map((t=>ye(t)?t.value:le(t)?d(t):m(t)?Ee(t,h,2):void 0))):p=m(t)?e?()=>Ee(t,h,2):()=>(g&&g(),Ae(t,h,3,[_])):o,e&&r){const t=p;p=()=>Ni(t())}let v,_=t=>{g=O.onStop=()=>{Ee(t,h,4),g=O.onStop=void 0}};if(Nr){if(_=o,e?n&&Ae(e,h,3,[p(),y?[]:void 0,_]):p(),"sync"!==s)return o;{const t=Li();v=t.__watcherHandles||(t.__watcherHandles=[])}}let x=y?new Array(t.length).fill(Ri):Ri;const w=()=>{if(O.active&&O.dirty)if(e){const t=O.run();(r||b||(y?t.some(((t,e)=>D(t,x[e]))):D(t,x)))&&(g&&g(),Ae(e,h,3,[t,x===Ri?void 0:y&&x[0]===Ri?[]:x,_]),x=t)}else O.run()};let S;w.allowRecurse=!!e,"sync"===s?S=w:"post"===s?S=()=>Oi(w,h&&h.suspense):(w.pre=!0,h&&(w.id=h.uid),S=()=>Be(w));const O=new et(p,o,S),k=Q,E=()=>{O.stop(),k&&u(k.effects,O)};return e?n?w():x=O.run():"post"===s?Oi(O.run.bind(O),h&&h.suspense):O.run(),v&&v.push(E),E}function Ii(t,e,n){const i=this.proxy,r=b(t)?t.includes(".")?Fi(i,t):()=>i[t]:t.bind(i,i);let o;m(e)?o=e:(o=e.handler,n=e);const s=Rr(this),a=ji(r,o.bind(i),n);return s(),a}function Fi(t,e){const n=e.split(".");return()=>{let e=t;for(let t=0;t<n.length&&e;t++)e=e[n[t]];return e}}function Ni(t,e=1/0,n){if(e<=0||!v(t)||t.__v_skip)return t;if((n=n||new Set).has(t))return t;if(n.add(t),e--,ye(t))Ni(t.value,e,n);else if(f(t))for(let i=0;i<t.length;i++)Ni(t[i],e,n);else if(g(t)||p(t))t.forEach((t=>{Ni(t,e,n)}));else if(O(t)){for(const i in t)Ni(t[i],e,n);for(const i of Object.getOwnPropertySymbols(t))Object.prototype.propertyIsEnumerable.call(t,i)&&Ni(t[i],e,n)}return t}const Bi=t=>t.type.__isKeepAlive;function Vi(t,e){Hi(t,"a",e)}function zi(t,e){Hi(t,"da",e)}function Hi(t,e,n=Cr){const i=t.__wdc||(t.__wdc=()=>{let e=n;for(;e;){if(e.isDeactivated)return;e=e.parent}return t()});if(_n(e,i,n),n){let t=n.parent;for(;t&&t.parent;)Bi(t.parent.vnode)&&Ui(i,e,n,t),t=t.parent}}function Ui(t,e,n,i){const r=_n(e,t,i,!0);An((()=>{u(i[e],r)}),n)}RegExp,RegExp;const $i=Symbol("_leaveCb"),Wi=Symbol("_enterCb");const qi=[Function,Array],Gi={mode:String,appear:Boolean,persisted:Boolean,onBeforeEnter:qi,onEnter:qi,onAfterEnter:qi,onEnterCancelled:qi,onBeforeLeave:qi,onLeave:qi,onAfterLeave:qi,onLeaveCancelled:qi,onBeforeAppear:qi,onAppear:qi,onAfterAppear:qi,onAppearCancelled:qi},Yi=t=>{const e=t.subTree;return e.component?Yi(e.component):e},Ki={name:"BaseTransition",props:Gi,setup(t,{slots:e}){const n=Tr(),i=function(){const t={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Sn((()=>{t.isMounted=!0})),En((()=>{t.isUnmounting=!0})),t}();return()=>{const r=e.default&&er(e.default(),!0);if(!r||!r.length)return;let o=r[0];if(r.length>1){let t=!1;for(const e of r)if(e.type!==rr){o=e,t=!0;break}}const s=de(t),{mode:a}=s;if(i.isLeaving)return Qi(o);const l=Zi(o);if(!l)return Qi(o);let c=Ji(l,s,i,n,(t=>c=t));tr(l,c);const u=n.subTree,h=u&&Zi(u);if(h&&h.type!==rr&&!gr(l,h)&&Yi(n).type!==rr){const t=Ji(h,s,i,n);if(tr(h,t),"out-in"===a&&l.type!==rr)return i.isLeaving=!0,t.afterLeave=()=>{i.isLeaving=!1,!1!==n.update.active&&(n.effect.dirty=!0,n.update())},Qi(o);"in-out"===a&&l.type!==rr&&(t.delayLeave=(t,e,n)=>{Xi(i,h)[String(h.key)]=h,t[$i]=()=>{e(),t[$i]=void 0,delete c.delayedLeave},c.delayedLeave=n})}return o}}};function Xi(t,e){const{leavingVNodes:n}=t;let i=n.get(e.type);return i||(i=Object.create(null),n.set(e.type,i)),i}function Ji(t,e,n,i,r){const{appear:o,mode:s,persisted:a=!1,onBeforeEnter:l,onEnter:c,onAfterEnter:u,onEnterCancelled:h,onBeforeLeave:d,onLeave:p,onAfterLeave:g,onLeaveCancelled:m,onBeforeAppear:b,onAppear:y,onAfterAppear:v,onAppearCancelled:_}=e,x=String(t.key),w=Xi(n,t),S=(t,e)=>{t&&Ae(t,i,9,e)},O=(t,e)=>{const n=e[1];S(t,e),f(t)?t.every((t=>t.length<=1))&&n():t.length<=1&&n()},k={mode:s,persisted:a,beforeEnter(e){let i=l;if(!n.isMounted){if(!o)return;i=b||l}e[$i]&&e[$i](!0);const r=w[x];r&&gr(t,r)&&r.el[$i]&&r.el[$i](),S(i,[e])},enter(t){let e=c,i=u,r=h;if(!n.isMounted){if(!o)return;e=y||c,i=v||u,r=_||h}let s=!1;const a=t[Wi]=e=>{s||(s=!0,S(e?r:i,[t]),k.delayedLeave&&k.delayedLeave(),t[Wi]=void 0)};e?O(e,[t,a]):a()},leave(e,i){const r=String(t.key);if(e[Wi]&&e[Wi](!0),n.isUnmounting)return i();S(d,[e]);let o=!1;const s=e[$i]=n=>{o||(o=!0,i(),S(n?m:g,[e]),e[$i]=void 0,w[r]===t&&delete w[r])};w[r]=t,p?O(p,[e,s]):s()},clone(t){const o=Ji(t,e,n,i,r);return r&&r(o),o}};return k}function Qi(t){if(Bi(t))return(t=_r(t)).children=null,t}function Zi(t){if(!Bi(t))return t;const{shapeFlag:e,children:n}=t;if(n){if(16&e)return n[0];if(32&e&&m(n.default))return n.default()}}function tr(t,e){6&t.shapeFlag&&t.component?tr(t.component.subTree,e):128&t.shapeFlag?(t.ssContent.transition=e.clone(t.ssContent),t.ssFallback.transition=e.clone(t.ssFallback)):t.transition=e}function er(t,e=!1,n){let i=[],r=0;for(let o=0;o<t.length;o++){let s=t[o];const a=null==n?s.key:String(n)+String(null!=s.key?s.key:o);s.type===nr?(128&s.patchFlag&&r++,i=i.concat(er(s.children,e,a))):(e||s.type!==rr)&&i.push(null!=a?_r(s,{key:a}):s)}if(r>1)for(let t=0;t<i.length;t++)i[t].patchFlag=-2;return i}const nr=Symbol.for("v-fgt"),ir=Symbol.for("v-txt"),rr=Symbol.for("v-cmt"),or=Symbol.for("v-stc"),sr=[];let ar=null;function lr(t=!1){sr.push(ar=t?null:[])}let cr=1;function ur(t){cr+=t}function hr(t){return t.dynamicChildren=cr>0?ar||r:null,sr.pop(),ar=sr[sr.length-1]||null,cr>0&&ar&&ar.push(t),t}function dr(t,e,n,i,r,o){return hr(yr(t,e,n,i,r,o,!0))}function fr(t,e,n,i,r){return hr(vr(t,e,n,i,r,!0))}function pr(t){return!!t&&!0===t.__v_isVNode}function gr(t,e){return t.type===e.type&&t.key===e.key}const mr=({key:t})=>null!=t?t:null,br=({ref:t,ref_key:e,ref_for:n})=>("number"==typeof t&&(t=""+t),null!=t?b(t)||ye(t)||m(t)?{i:sn,r:t,k:e,f:!!n}:t:null);function yr(t,e=null,n=null,i=0,r=null,o=(t===nr?0:1),s=!1,a=!1){const l={__v_isVNode:!0,__v_skip:!0,type:t,props:e,key:e&&mr(e),ref:e&&br(e),scopeId:an,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:o,patchFlag:i,dynamicProps:r,dynamicChildren:null,appContext:null,ctx:sn};return a?(kr(l,n),128&o&&t.normalize(l)):n&&(l.shapeFlag|=b(n)?8:16),cr>0&&!s&&ar&&(l.patchFlag>0||6&o)&&32!==l.patchFlag&&ar.push(l),l}const vr=function(t,e=null,n=null,i=0,r=null,o=!1){if(t&&t!==yn||(t=rr),pr(t)){const i=_r(t,e,!0);return n&&kr(i,n),cr>0&&!o&&ar&&(6&i.shapeFlag?ar[ar.indexOf(t)]=i:ar.push(i)),i.patchFlag=-2,i}if(s=t,m(s)&&"__vccOpts"in s&&(t=t.__vccOpts),e){e=function(t){return t?he(t)||li(t)?c({},t):t:null}(e);let{class:t,style:n}=e;t&&!b(t)&&(e.class=q(t)),v(n)&&(he(n)&&!f(n)&&(n=c({},n)),e.style=z(n))}var s;return yr(t,e,n,i,r,b(t)?1:(t=>t.__isSuspense)(t)?128:(t=>t.__isTeleport)(t)?64:v(t)?4:m(t)?2:0,o,!0)};function _r(t,e,n=!1,i=!1){const{props:r,ref:o,patchFlag:s,children:l,transition:c}=t,u=e?function(...t){const e={};for(let n=0;n<t.length;n++){const i=t[n];for(const t in i)if("class"===t)e.class!==i.class&&(e.class=q([e.class,i.class]));else if("style"===t)e.style=z([e.style,i.style]);else if(a(t)){const n=e[t],r=i[t];!r||n===r||f(n)&&n.includes(r)||(e[t]=n?[].concat(n,r):r)}else""!==t&&(e[t]=i[t])}return e}(r||{},e):r,h={__v_isVNode:!0,__v_skip:!0,type:t.type,props:u,key:u&&mr(u),ref:e&&e.ref?n&&o?f(o)?o.concat(br(e)):[o,br(e)]:br(e):o,scopeId:t.scopeId,slotScopeIds:t.slotScopeIds,children:l,target:t.target,targetAnchor:t.targetAnchor,staticCount:t.staticCount,shapeFlag:t.shapeFlag,patchFlag:e&&t.type!==nr?-1===s?16:16|s:s,dynamicProps:t.dynamicProps,dynamicChildren:t.dynamicChildren,appContext:t.appContext,dirs:t.dirs,transition:c,component:t.component,suspense:t.suspense,ssContent:t.ssContent&&_r(t.ssContent),ssFallback:t.ssFallback&&_r(t.ssFallback),el:t.el,anchor:t.anchor,ctx:t.ctx,ce:t.ce};return c&&i&&tr(h,c.clone(h)),h}function xr(t=" ",e=0){return vr(ir,null,t,e)}function wr(t="",e=!1){return e?(lr(),fr(rr,null,t)):vr(rr,null,t)}function Sr(t){return null==t||"boolean"==typeof t?vr(rr):f(t)?vr(nr,null,t.slice()):"object"==typeof t?Or(t):vr(ir,null,String(t))}function Or(t){return null===t.el&&-1!==t.patchFlag||t.memo?t:_r(t)}function kr(t,e){let n=0;const{shapeFlag:i}=t;if(null==e)e=null;else if(f(e))n=16;else if("object"==typeof e){if(65&i){const n=e.default;return void(n&&(n._c&&(n._d=!1),kr(t,n()),n._c&&(n._d=!0)))}{n=32;const i=e._;i||li(e)?3===i&&sn&&(1===sn.slots._?e._=1:(e._=2,t.patchFlag|=1024)):e._ctx=sn}}else m(e)?(e={default:e,_ctx:sn},n=32):(e=String(e),64&i?(n=16,e=[xr(e)]):n=8);t.children=e,t.shapeFlag|=n}function Er(t,e,n,i=null){Ae(t,e,7,[n,i])}const Ar=ti();let Pr=0;let Cr=null;const Tr=()=>Cr||sn;let Mr,Lr;{const t=V(),e=(e,n)=>{let i;return(i=t[e])||(i=t[e]=[]),i.push(n),t=>{i.length>1?i.forEach((e=>e(t))):i[0](t)}};Mr=e("__VUE_INSTANCE_SETTERS__",(t=>Cr=t)),Lr=e("__VUE_SSR_SETTERS__",(t=>Nr=t))}const Rr=t=>{const e=Cr;return Mr(t),t.scope.on(),()=>{t.scope.off(),Mr(e)}},Dr=()=>{Cr&&Cr.scope.off(),Mr(null)};function jr(t){return 4&t.vnode.shapeFlag}let Ir,Fr,Nr=!1;function Br(t,e,n){m(e)?t.type.__ssrInlineRender?t.ssrRender=e:t.render=e:v(e)&&(__VUE_PROD_DEVTOOLS__&&(t.devtoolsRawSetupState=e),t.setupState=ke(e)),Vr(t,n)}function Vr(t,e,n){const i=t.type;if(!t.render){if(!e&&Ir&&!i.render){const e=i.template||qn(t).template;if(e){const{isCustomElement:n,compilerOptions:r}=t.appContext.config,{delimiters:o,compilerOptions:s}=i,a=c(c({isCustomElement:n,delimiters:o},r),s);i.render=Ir(e,a)}}t.render=i.render||o,Fr&&Fr(t)}if(__VUE_OPTIONS_API__){const e=Rr(t);ct();try{!function(t){const e=qn(t),n=t.proxy,i=t.ctx;Un=!1,e.beforeCreate&&$n(e.beforeCreate,t,"bc");const{data:r,computed:s,methods:a,watch:l,provide:c,inject:u,created:h,beforeMount:d,mounted:p,beforeUpdate:g,updated:b,activated:y,deactivated:_,beforeDestroy:x,beforeUnmount:w,destroyed:S,unmounted:O,render:k,renderTracked:E,renderTriggered:A,errorCaptured:P,serverPrefetch:C,expose:T,inheritAttrs:M,components:L,directives:R,filters:D}=e;if(u&&function(t,e,n=o){f(t)&&(t=Xn(t));for(const n in t){const i=t[n];let r;r=v(i)?"default"in i?oi(i.from||n,i.default,!0):oi(i.from||n):oi(i),ye(r)?Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:()=>r.value,set:t=>r.value=t}):e[n]=r}}(u,i,null),a)for(const t in a){const e=a[t];m(e)&&(i[t]=e.bind(n))}if(r){const e=r.call(n,n);v(e)&&(t.data=re(e))}if(Un=!0,s)for(const t in s){const e=s[t],r=m(e)?e.bind(n,n):m(e.get)?e.get.bind(n,n):o,a=!m(e)&&m(e.set)?e.set.bind(n):o,l=Ur({get:r,set:a});Object.defineProperty(i,t,{enumerable:!0,configurable:!0,get:()=>l.value,set:t=>l.value=t})}if(l)for(const t in l)Wn(l[t],i,n,t);if(c){const t=m(c)?c.call(n):c;Reflect.ownKeys(t).forEach((e=>{ri(e,t[e])}))}function j(t,e){f(e)?e.forEach((e=>t(e.bind(n)))):e&&t(e.bind(n))}if(h&&$n(h,t,"c"),j(wn,d),j(Sn,p),j(On,g),j(kn,b),j(Vi,y),j(zi,_),j(Mn,P),j(Tn,E),j(Cn,A),j(En,w),j(An,O),j(Pn,C),f(T))if(T.length){const e=t.exposed||(t.exposed={});T.forEach((t=>{Object.defineProperty(e,t,{get:()=>n[t],set:e=>n[t]=e})}))}else t.exposed||(t.exposed={});k&&t.render===o&&(t.render=k),null!=M&&(t.inheritAttrs=M),L&&(t.components=L),R&&(t.directives=R)}(t)}finally{ut(),e()}}}const zr={get:(t,e)=>(_t(t,0,""),t[e])};function Hr(t){return t.exposed?t.exposeProxy||(t.exposeProxy=new Proxy(ke((e=t.exposed,Object.isExtensible(e)&&I(e,"__v_skip",!0),e)),{get:(e,n)=>n in e?e[n]:n in Bn?Bn[n](t):void 0,has:(t,e)=>e in t||e in Bn})):t.proxy;var e}const Ur=(t,e)=>function(t,e,n=!1){let i,r;const s=m(t);return s?(i=t,r=o):(i=t.get,r=t.set),new ge(i,r,s||!r,n)}(t,0,Nr);function $r(t,e,n){const i=arguments.length;return 2===i?v(e)&&!f(e)?pr(e)?vr(t,null,[e]):vr(t,e):vr(t,null,e):(i>3?n=Array.prototype.slice.call(arguments,2):3===i&&pr(n)&&(n=[n]),vr(t,e,n))}const Wr="3.4.29",qr="undefined"!=typeof document?document:null,Gr=qr&&qr.createElement("template"),Yr={insert:(t,e,n)=>{e.insertBefore(t,n||null)},remove:t=>{const e=t.parentNode;e&&e.removeChild(t)},createElement:(t,e,n,i)=>{const r="svg"===e?qr.createElementNS("http://www.w3.org/2000/svg",t):"mathml"===e?qr.createElementNS("http://www.w3.org/1998/Math/MathML",t):n?qr.createElement(t,{is:n}):qr.createElement(t);return"select"===t&&i&&null!=i.multiple&&r.setAttribute("multiple",i.multiple),r},createText:t=>qr.createTextNode(t),createComment:t=>qr.createComment(t),setText:(t,e)=>{t.nodeValue=e},setElementText:(t,e)=>{t.textContent=e},parentNode:t=>t.parentNode,nextSibling:t=>t.nextSibling,querySelector:t=>qr.querySelector(t),setScopeId(t,e){t.setAttribute(e,"")},insertStaticContent(t,e,n,i,r,o){const s=n?n.previousSibling:e.lastChild;if(r&&(r===o||r.nextSibling))for(;e.insertBefore(r.cloneNode(!0),n),r!==o&&(r=r.nextSibling););else{Gr.innerHTML="svg"===i?`<svg>${t}</svg>`:"mathml"===i?`<math>${t}</math>`:t;const r=Gr.content;if("svg"===i||"mathml"===i){const t=r.firstChild;for(;t.firstChild;)r.appendChild(t.firstChild);r.removeChild(t)}e.insertBefore(r,n)}return[s?s.nextSibling:e.firstChild,n?n.previousSibling:e.lastChild]}},Kr="transition",Xr="animation",Jr=Symbol("_vtc"),Qr=(t,{slots:e})=>$r(Ki,function(t){const e={};for(const n in t)n in Zr||(e[n]=t[n]);if(!1===t.css)return e;const{name:n="v",type:i,duration:r,enterFromClass:o=`${n}-enter-from`,enterActiveClass:s=`${n}-enter-active`,enterToClass:a=`${n}-enter-to`,appearFromClass:l=o,appearActiveClass:u=s,appearToClass:h=a,leaveFromClass:d=`${n}-leave-from`,leaveActiveClass:f=`${n}-leave-active`,leaveToClass:p=`${n}-leave-to`}=t,g=function(t){if(null==t)return null;if(v(t))return[no(t.enter),no(t.leave)];{const e=no(t);return[e,e]}}(r),m=g&&g[0],b=g&&g[1],{onBeforeEnter:y,onEnter:_,onEnterCancelled:x,onLeave:w,onLeaveCancelled:S,onBeforeAppear:O=y,onAppear:k=_,onAppearCancelled:E=x}=e,A=(t,e,n)=>{ro(t,e?h:a),ro(t,e?u:s),n&&n()},P=(t,e)=>{t._isLeaving=!1,ro(t,d),ro(t,p),ro(t,f),e&&e()},C=t=>(e,n)=>{const r=t?k:_,s=()=>A(e,t,n);to(r,[e,s]),oo((()=>{ro(e,t?l:o),io(e,t?h:a),eo(r)||ao(e,i,m,s)}))};return c(e,{onBeforeEnter(t){to(y,[t]),io(t,o),io(t,s)},onBeforeAppear(t){to(O,[t]),io(t,l),io(t,u)},onEnter:C(!1),onAppear:C(!0),onLeave(t,e){t._isLeaving=!0;const n=()=>P(t,e);io(t,d),io(t,f),document.body.offsetHeight,oo((()=>{t._isLeaving&&(ro(t,d),io(t,p),eo(w)||ao(t,i,b,n))})),to(w,[t,n])},onEnterCancelled(t){A(t,!1),to(x,[t])},onAppearCancelled(t){A(t,!0),to(E,[t])},onLeaveCancelled(t){P(t),to(S,[t])}})}(t),e);Qr.displayName="Transition";const Zr={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},to=(Qr.props=c({},Gi,Zr),(t,e=[])=>{f(t)?t.forEach((t=>t(...e))):t&&t(...e)}),eo=t=>!!t&&(f(t)?t.some((t=>t.length>1)):t.length>1);function no(t){return N(t)}function io(t,e){e.split(/\s+/).forEach((e=>e&&t.classList.add(e))),(t[Jr]||(t[Jr]=new Set)).add(e)}function ro(t,e){e.split(/\s+/).forEach((e=>e&&t.classList.remove(e)));const n=t[Jr];n&&(n.delete(e),n.size||(t[Jr]=void 0))}function oo(t){requestAnimationFrame((()=>{requestAnimationFrame(t)}))}let so=0;function ao(t,e,n,i){const r=t._endId=++so,o=()=>{r===t._endId&&i()};if(n)return setTimeout(o,n);const{type:s,timeout:a,propCount:l}=function(t,e){const n=window.getComputedStyle(t),i=t=>(n[t]||"").split(", "),r=i(`${Kr}Delay`),o=i(`${Kr}Duration`),s=lo(r,o),a=i(`${Xr}Delay`),l=i(`${Xr}Duration`),c=lo(a,l);let u=null,h=0,d=0;return e===Kr?s>0&&(u=Kr,h=s,d=o.length):e===Xr?c>0&&(u=Xr,h=c,d=l.length):(h=Math.max(s,c),u=h>0?s>c?Kr:Xr:null,d=u?u===Kr?o.length:l.length:0),{type:u,timeout:h,propCount:d,hasTransform:u===Kr&&/\b(transform|all)(,|$)/.test(i(`${Kr}Property`).toString())}}(t,e);if(!s)return i();const c=s+"end";let u=0;const h=()=>{t.removeEventListener(c,d),o()},d=e=>{e.target===t&&++u>=l&&h()};setTimeout((()=>{u<l&&h()}),a+1),t.addEventListener(c,d)}function lo(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max(...e.map(((e,n)=>co(e)+co(t[n]))))}function co(t){return"auto"===t?0:1e3*Number(t.slice(0,-1).replace(",","."))}const uo=Symbol("_vod"),ho=Symbol("_vsh"),fo=Symbol(""),po=/(^|;)\s*display\s*:/,go=/\s*!important$/;function mo(t,e,n){if(f(n))n.forEach((n=>mo(t,e,n)));else if(null==n&&(n=""),e.startsWith("--"))t.setProperty(e,n);else{const i=function(t,e){const n=yo[e];if(n)return n;let i=C(e);if("filter"!==i&&i in t)return yo[e]=i;i=L(i);for(let n=0;n<bo.length;n++){const r=bo[n]+i;if(r in t)return yo[e]=r}return e}(t,e);go.test(n)?t.setProperty(M(i),n.replace(go,""),"important"):t[i]=n}}const bo=["Webkit","Moz","ms"],yo={},vo="http://www.w3.org/1999/xlink";function _o(t,e,n,i,r,o=G(e)){i&&e.startsWith("xlink:")?null==n?t.removeAttributeNS(vo,e.slice(6,e.length)):t.setAttributeNS(vo,e,n):null==n||o&&!Y(n)?t.removeAttribute(e):t.setAttribute(e,o?"":String(n))}const xo=Symbol("_vei");const wo=/(?:Once|Passive|Capture)$/;let So=0;const Oo=Promise.resolve(),ko=()=>So||(Oo.then((()=>So=0)),So=Date.now()),Eo=t=>111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)>96&&t.charCodeAt(2)<123;"undefined"!=typeof HTMLElement&&HTMLElement,Symbol("_moveCb"),Symbol("_enterCb"),Symbol("_assign");const Ao=["ctrl","shift","alt","meta"],Po={stop:t=>t.stopPropagation(),prevent:t=>t.preventDefault(),self:t=>t.target!==t.currentTarget,ctrl:t=>!t.ctrlKey,shift:t=>!t.shiftKey,alt:t=>!t.altKey,meta:t=>!t.metaKey,left:t=>"button"in t&&0!==t.button,middle:t=>"button"in t&&1!==t.button,right:t=>"button"in t&&2!==t.button,exact:(t,e)=>Ao.some((n=>t[`${n}Key`]&&!e.includes(n)))},Co=(t,e)=>{const n=t._withMods||(t._withMods={}),i=e.join(".");return n[i]||(n[i]=(n,...i)=>{for(let t=0;t<e.length;t++){const i=Po[e[t]];if(i&&i(n,e))return}return t(n,...i)})},To=c({patchProp:(t,e,n,i,r,o,s,c,u)=>{const h="svg"===r;"class"===e?function(t,e,n){const i=t[Jr];i&&(e=(e?[e,...i]:[...i]).join(" ")),null==e?t.removeAttribute("class"):n?t.setAttribute("class",e):t.className=e}(t,i,h):"style"===e?function(t,e,n){const i=t.style,r=b(n);let o=!1;if(n&&!r){if(e)if(b(e))for(const t of e.split(";")){const e=t.slice(0,t.indexOf(":")).trim();null==n[e]&&mo(i,e,"")}else for(const t in e)null==n[t]&&mo(i,t,"");for(const t in n)"display"===t&&(o=!0),mo(i,t,n[t])}else if(r){if(e!==n){const t=i[fo];t&&(n+=";"+t),i.cssText=n,o=po.test(n)}}else e&&t.removeAttribute("style");uo in t&&(t[uo]=o?i.display:"",t[ho]&&(i.display="none"))}(t,n,i):a(e)?l(e)||function(t,e,n,i,r=null){const o=t[xo]||(t[xo]={}),s=o[e];if(i&&s)s.value=i;else{const[n,a]=function(t){let e;if(wo.test(t)){let n;for(e={};n=t.match(wo);)t=t.slice(0,t.length-n[0].length),e[n[0].toLowerCase()]=!0}return[":"===t[2]?t.slice(3):M(t.slice(2)),e]}(e);if(i){const s=o[e]=function(t,e){const n=t=>{if(t._vts){if(t._vts<=n.attached)return}else t._vts=Date.now();Ae(function(t,e){if(f(e)){const n=t.stopImmediatePropagation;return t.stopImmediatePropagation=()=>{n.call(t),t._stopped=!0},e.map((t=>e=>!e._stopped&&t&&t(e)))}return e}(t,n.value),e,5,[t])};return n.value=t,n.attached=ko(),n}(i,r);!function(t,e,n,i){t.addEventListener(e,n,i)}(t,n,s,a)}else s&&(function(t,e,n,i){t.removeEventListener(e,n,i)}(t,n,s,a),o[e]=void 0)}}(t,e,0,i,s):("."===e[0]?(e=e.slice(1),1):"^"===e[0]?(e=e.slice(1),0):function(t,e,n,i){if(i)return"innerHTML"===e||"textContent"===e||!!(e in t&&Eo(e)&&m(n));if("spellcheck"===e||"draggable"===e||"translate"===e)return!1;if("form"===e)return!1;if("list"===e&&"INPUT"===t.tagName)return!1;if("type"===e&&"TEXTAREA"===t.tagName)return!1;if("width"===e||"height"===e){const e=t.tagName;if("IMG"===e||"VIDEO"===e||"CANVAS"===e||"SOURCE"===e)return!1}return(!Eo(e)||!b(n))&&e in t}(t,e,i,h))?(function(t,e,n,i,r,o,s){if("innerHTML"===e||"textContent"===e)return i&&s(i,r,o),void(t[e]=null==n?"":n);const a=t.tagName;if("value"===e&&"PROGRESS"!==a&&!a.includes("-")){const i="OPTION"===a?t.getAttribute("value")||"":t.value,r=null==n?"":String(n);return i===r&&"_value"in t||(t.value=r),null==n&&t.removeAttribute(e),void(t._value=n)}let l=!1;if(""===n||null==n){const i=typeof t[e];"boolean"===i?n=Y(n):null==n&&"string"===i?(n="",l=!0):"number"===i&&(n=0,l=!0)}try{t[e]=n}catch(t){}l&&t.removeAttribute(e)}(t,e,i,o,s,c,u),"value"!==e&&"checked"!==e&&"selected"!==e||_o(t,e,i,h,0,"value"!==e)):("true-value"===e?t._trueValue=i:"false-value"===e&&(t._falseValue=i),_o(t,e,i,h))}},Yr);let Mo;const Lo=function(t){return"string"!=typeof t||""===t?(console.error("The namespace must be a non-empty string."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(t)||(console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes."),!1)},Ro=function(t){return"string"!=typeof t||""===t?(console.error("The hook name must be a non-empty string."),!1):/^__/.test(t)?(console.error("The hook name cannot begin with `__`."),!1):!!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(t)||(console.error("The hook name can only contain numbers, letters, dashes, periods and underscores."),!1)},Do=function(t,e){return function(n,i,r,o=10){const s=t[e];if(!Ro(n))return;if(!Lo(i))return;if("function"!=typeof r)return void console.error("The hook callback must be a function.");if("number"!=typeof o)return void console.error("If specified, the hook priority must be a number.");const a={callback:r,priority:o,namespace:i};if(s[n]){const t=s[n].handlers;let e;for(e=t.length;e>0&&!(o>=t[e-1].priority);e--);e===t.length?t[e]=a:t.splice(e,0,a),s.__current.forEach((t=>{t.name===n&&t.currentIndex>=e&&t.currentIndex++}))}else s[n]={handlers:[a],runs:0};"hookAdded"!==n&&t.doAction("hookAdded",n,i,r,o)}},jo=function(t,e,n=!1){return function(i,r){const o=t[e];if(!Ro(i))return;if(!n&&!Lo(r))return;if(!o[i])return 0;let s=0;if(n)s=o[i].handlers.length,o[i]={runs:o[i].runs,handlers:[]};else{const t=o[i].handlers;for(let e=t.length-1;e>=0;e--)t[e].namespace===r&&(t.splice(e,1),s++,o.__current.forEach((t=>{t.name===i&&t.currentIndex>=e&&t.currentIndex--})))}return"hookRemoved"!==i&&t.doAction("hookRemoved",i,r),s}},Io=function(t,e){return function(n,i){const r=t[e];return void 0!==i?n in r&&r[n].handlers.some((t=>t.namespace===i)):n in r}},Fo=function(t,e,n=!1){return function(i,...r){const o=t[e];o[i]||(o[i]={handlers:[],runs:0}),o[i].runs++;const s=o[i].handlers;if(!s||!s.length)return n?r[0]:void 0;const a={name:i,currentIndex:0};for(o.__current.push(a);a.currentIndex<s.length;){const t=s[a.currentIndex].callback.apply(null,r);n&&(r[0]=t),a.currentIndex++}return o.__current.pop(),n?r[0]:void 0}},No=function(t,e){return function(){var n;const i=t[e];return null!==(n=i.__current[i.__current.length-1]?.name)&&void 0!==n?n:null}},Bo=function(t,e){return function(n){const i=t[e];return void 0===n?void 0!==i.__current[0]:!!i.__current[0]&&n===i.__current[0].name}},Vo=function(t,e){return function(n){const i=t[e];if(Ro(n))return i[n]&&i[n].runs?i[n].runs:0}};class zo{constructor(){this.actions=Object.create(null),this.actions.__current=[],this.filters=Object.create(null),this.filters.__current=[],this.addAction=Do(this,"actions"),this.addFilter=Do(this,"filters"),this.removeAction=jo(this,"actions"),this.removeFilter=jo(this,"filters"),this.hasAction=Io(this,"actions"),this.hasFilter=Io(this,"filters"),this.removeAllActions=jo(this,"actions",!0),this.removeAllFilters=jo(this,"filters",!0),this.doAction=Fo(this,"actions"),this.applyFilters=Fo(this,"filters",!0),this.currentAction=No(this,"actions"),this.currentFilter=No(this,"filters"),this.doingAction=Bo(this,"actions"),this.doingFilter=Bo(this,"filters"),this.didAction=Vo(this,"actions"),this.didFilter=Vo(this,"filters")}}const Ho=function(){return new zo},Uo=Ho(),{addAction:$o,addFilter:Wo,removeAction:qo,removeFilter:Go,hasAction:Yo,hasFilter:Ko,removeAllActions:Xo,removeAllFilters:Jo,doAction:Qo,applyFilters:Zo,currentAction:ts,currentFilter:es,doingAction:ns,doingFilter:is,didAction:rs,didFilter:os,actions:ss,filters:as}=Uo;var ls={id:"wp-am-vue-app"},cs={key:0,class:"wp-am-notice-bar"},us={class:"wp-am-notice-bar-container"},hs=["innerHTML"],ds={class:"main-content"},fs={class:"wp-am-header"},ps={id:"wp-am-vue-app-tabs"},gs={class:"tab-item"},ms={class:"tab-item"},bs={class:"tab-item"};const ys={name:"Tabs",components:{},data:function(){return{}}};var vs=n(262);const _s=(0,vs.A)(ys,[["render",function(t,e,n,i,r,o){var s=bn("router-link");return lr(),dr("div",ps,[yr("div",gs,[vr(s,{to:"/"},{default:hn((function(){return[xr(" Settings ")]})),_:1})]),yr("div",ms,[vr(s,{to:"/table"},{default:hn((function(){return[xr(" Table ")]})),_:1})]),yr("div",bs,[vr(s,{to:"/graph"},{default:hn((function(){return[xr(" Graph ")]})),_:1})])])}]]);function xs(){var t=jQuery,e=t("#toplevel_page_wp-am-vue-app"),n=window.location.href,i=n.substr(n.indexOf("admin.php"));t("ul.wp-submenu li",e).removeClass("current"),e.on("click","a",(function(){var n=t(this);t("ul.wp-submenu li",e).removeClass("current"),n.hasClass("wp-has-submenu")?t("li.wp-first-item",e).addClass("current"):n.parents("li").addClass("current")})),t("ul.wp-submenu a",e).each((function(e,n){t(n).attr("href").substring(t(n).attr("href").indexOf("/admin.php")+1)===i&&t(n).parent().addClass("current")}))}xs();const ws={name:"App",components:{Tabs:_s},data:function(){return{proUpgradeLink:"https://example.com/upgrade",showNotice:!0}},computed:{noticeMessage:function(){return sprintf('You’re using WP Am Lite. To unlock more features, consider <a href="%s">upgrading to Pro</a>.',this.proUpgradeLink)}},created:function(){var t=localStorage.getItem("wpAmNoticeDismissed");t&&Date.now()-t<864e5&&(this.showNotice=!1)},methods:{dismissNotice:function(){this.showNotice=!1,localStorage.setItem("wpAmNoticeDismissed",Date.now())}},watch:{$route:function(){xs()}}},Ss=(0,vs.A)(ws,[["render",function(t,e,n,i,r,o){var s=bn("tabs"),a=bn("router-view");return lr(),dr("div",ls,[r.showNotice?(lr(),dr("div",cs,[yr("div",us,[yr("span",{class:"wp-am-notice-bar-message",innerHTML:o.noticeMessage},null,8,hs),yr("button",{type:"button",class:"dismiss",title:"Dismiss this message.",onClick:e[0]||(e[0]=function(){return o.dismissNotice&&o.dismissNotice.apply(o,arguments)})})])])):wr("v-if",!0),yr("div",ds,[yr("div",fs,[yr("h1",null,K(t.__("WP AM Vue App","wp-am-vue-app")),1),yr("p",null,K(t.__("Vue JS based admin page")),1)]),vr(s),vr(a)])])}]]);function Os(){return"undefined"!=typeof navigator&&"undefined"!=typeof window?window:"undefined"!=typeof globalThis?globalThis:{}}const ks="function"==typeof Proxy,Es="devtools-plugin:setup";let As,Ps;class Cs{constructor(t,e){this.target=null,this.targetQueue=[],this.onQueue=[],this.plugin=t,this.hook=e;const n={};if(t.settings)for(const e in t.settings){const i=t.settings[e];n[e]=i.defaultValue}const i=`__vue-devtools-plugin-settings__${t.id}`;let r=Object.assign({},n);try{const t=localStorage.getItem(i),e=JSON.parse(t);Object.assign(r,e)}catch(t){}this.fallbacks={getSettings:()=>r,setSettings(t){try{localStorage.setItem(i,JSON.stringify(t))}catch(t){}r=t},now:()=>{return void 0!==As||("undefined"!=typeof window&&window.performance?(As=!0,Ps=window.performance):"undefined"!=typeof globalThis&&(null===(t=globalThis.perf_hooks)||void 0===t?void 0:t.performance)?(As=!0,Ps=globalThis.perf_hooks.performance):As=!1),As?Ps.now():Date.now();var t}},e&&e.on("plugin:settings:set",((t,e)=>{t===this.plugin.id&&this.fallbacks.setSettings(e)})),this.proxiedOn=new Proxy({},{get:(t,e)=>this.target?this.target.on[e]:(...t)=>{this.onQueue.push({method:e,args:t})}}),this.proxiedTarget=new Proxy({},{get:(t,e)=>this.target?this.target[e]:"on"===e?this.proxiedOn:Object.keys(this.fallbacks).includes(e)?(...t)=>(this.targetQueue.push({method:e,args:t,resolve:()=>{}}),this.fallbacks[e](...t)):(...t)=>new Promise((n=>{this.targetQueue.push({method:e,args:t,resolve:n})}))})}async setRealTarget(t){this.target=t;for(const t of this.onQueue)this.target.on[t.method](...t.args);for(const t of this.targetQueue)t.resolve(await this.target[t.method](...t.args))}}function Ts(t,e){const n=t,i=Os(),r=Os().__VUE_DEVTOOLS_GLOBAL_HOOK__,o=ks&&n.enableEarlyProxy;if(!r||!i.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__&&o){const t=o?new Cs(n,r):null;(i.__VUE_DEVTOOLS_PLUGINS__=i.__VUE_DEVTOOLS_PLUGINS__||[]).push({pluginDescriptor:n,setupFn:e,proxy:t}),t&&e(t.proxiedTarget)}else r.emit(Es,t,e)}const Ms="undefined"!=typeof document;const Ls=Object.assign;function Rs(t,e){const n={};for(const i in e){const r=e[i];n[i]=js(r)?r.map(t):t(r)}return n}const Ds=()=>{},js=Array.isArray,Is=/#/g,Fs=/&/g,Ns=/\//g,Bs=/=/g,Vs=/\?/g,zs=/\+/g,Hs=/%5B/g,Us=/%5D/g,$s=/%5E/g,Ws=/%60/g,qs=/%7B/g,Gs=/%7C/g,Ys=/%7D/g,Ks=/%20/g;function Xs(t){return encodeURI(""+t).replace(Gs,"|").replace(Hs,"[").replace(Us,"]")}function Js(t){return Xs(t).replace(zs,"%2B").replace(Ks,"+").replace(Is,"%23").replace(Fs,"%26").replace(Ws,"`").replace(qs,"{").replace(Ys,"}").replace($s,"^")}function Qs(t){return null==t?"":function(t){return Xs(t).replace(Is,"%23").replace(Vs,"%3F")}(t).replace(Ns,"%2F")}function Zs(t){try{return decodeURIComponent(""+t)}catch(t){}return""+t}const ta=/\/$/,ea=t=>t.replace(ta,"");function na(t,e,n="/"){let i,r={},o="",s="";const a=e.indexOf("#");let l=e.indexOf("?");return a<l&&a>=0&&(l=-1),l>-1&&(i=e.slice(0,l),o=e.slice(l+1,a>-1?a:e.length),r=t(o)),a>-1&&(i=i||e.slice(0,a),s=e.slice(a,e.length)),i=function(t,e){if(t.startsWith("/"))return t;if(!t)return e;const n=e.split("/"),i=t.split("/"),r=i[i.length-1];".."!==r&&"."!==r||i.push("");let o,s,a=n.length-1;for(o=0;o<i.length;o++)if(s=i[o],"."!==s){if(".."!==s)break;a>1&&a--}return n.slice(0,a).join("/")+"/"+i.slice(o).join("/")}(null!=i?i:e,n),{fullPath:i+(o&&"?")+o+s,path:i,query:r,hash:Zs(s)}}function ia(t,e){return e&&t.toLowerCase().startsWith(e.toLowerCase())?t.slice(e.length)||"/":t}function ra(t,e){return(t.aliasOf||t)===(e.aliasOf||e)}function oa(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(const n in t)if(!sa(t[n],e[n]))return!1;return!0}function sa(t,e){return js(t)?aa(t,e):js(e)?aa(e,t):t===e}function aa(t,e){return js(e)?t.length===e.length&&t.every(((t,n)=>t===e[n])):1===t.length&&t[0]===e}var la,ca;!function(t){t.pop="pop",t.push="push"}(la||(la={})),function(t){t.back="back",t.forward="forward",t.unknown=""}(ca||(ca={}));const ua=/^[^#]+#/;function ha(t,e){return t.replace(ua,"#")+e}const da=()=>({left:window.scrollX,top:window.scrollY});function fa(t,e){return(history.state?history.state.position-e:-1)+t}const pa=new Map;let ga=()=>location.protocol+"//"+location.host;function ma(t,e){const{pathname:n,search:i,hash:r}=e,o=t.indexOf("#");if(o>-1){let e=r.includes(t.slice(o))?t.slice(o).length:1,n=r.slice(e);return"/"!==n[0]&&(n="/"+n),ia(n,"")}return ia(n,t)+i+r}function ba(t,e,n,i=!1,r=!1){return{back:t,current:e,forward:n,replaced:i,position:window.history.length,scroll:r?da():null}}function ya(t){return"string"==typeof t||t&&"object"==typeof t}function va(t){return"string"==typeof t||"symbol"==typeof t}const _a={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},xa=Symbol("");var wa;function Sa(t,e){return Ls(new Error,{type:t,[xa]:!0},e)}function Oa(t,e){return t instanceof Error&&xa in t&&(null==e||!!(t.type&e))}!function(t){t[t.aborted=4]="aborted",t[t.cancelled=8]="cancelled",t[t.duplicated=16]="duplicated"}(wa||(wa={}));const ka="[^/]+?",Ea={sensitive:!1,strict:!1,start:!0,end:!0},Aa=/[.+*?^${}()[\]/\\]/g;function Pa(t,e){let n=0;for(;n<t.length&&n<e.length;){const i=e[n]-t[n];if(i)return i;n++}return t.length<e.length?1===t.length&&80===t[0]?-1:1:t.length>e.length?1===e.length&&80===e[0]?1:-1:0}function Ca(t,e){let n=0;const i=t.score,r=e.score;for(;n<i.length&&n<r.length;){const t=Pa(i[n],r[n]);if(t)return t;n++}if(1===Math.abs(r.length-i.length)){if(Ta(i))return 1;if(Ta(r))return-1}return r.length-i.length}function Ta(t){const e=t[t.length-1];return t.length>0&&e[e.length-1]<0}const Ma={type:0,value:""},La=/[a-zA-Z0-9_]/;function Ra(t,e,n){const i=function(t,e){const n=Ls({},Ea,e),i=[];let r=n.start?"^":"";const o=[];for(const e of t){const t=e.length?[]:[90];n.strict&&!e.length&&(r+="/");for(let i=0;i<e.length;i++){const s=e[i];let a=40+(n.sensitive?.25:0);if(0===s.type)i||(r+="/"),r+=s.value.replace(Aa,"\\$&"),a+=40;else if(1===s.type){const{value:t,repeatable:n,optional:l,regexp:c}=s;o.push({name:t,repeatable:n,optional:l});const u=c||ka;if(u!==ka){a+=10;try{new RegExp(`(${u})`)}catch(e){throw new Error(`Invalid custom RegExp for param "${t}" (${u}): `+e.message)}}let h=n?`((?:${u})(?:/(?:${u}))*)`:`(${u})`;i||(h=l&&e.length<2?`(?:/${h})`:"/"+h),l&&(h+="?"),r+=h,a+=20,l&&(a+=-8),n&&(a+=-20),".*"===u&&(a+=-50)}t.push(a)}i.push(t)}if(n.strict&&n.end){const t=i.length-1;i[t][i[t].length-1]+=.7000000000000001}n.strict||(r+="/?"),n.end?r+="$":n.strict&&(r+="(?:/|$)");const s=new RegExp(r,n.sensitive?"":"i");return{re:s,score:i,keys:o,parse:function(t){const e=t.match(s),n={};if(!e)return null;for(let t=1;t<e.length;t++){const i=e[t]||"",r=o[t-1];n[r.name]=i&&r.repeatable?i.split("/"):i}return n},stringify:function(e){let n="",i=!1;for(const r of t){i&&n.endsWith("/")||(n+="/"),i=!1;for(const t of r)if(0===t.type)n+=t.value;else if(1===t.type){const{value:o,repeatable:s,optional:a}=t,l=o in e?e[o]:"";if(js(l)&&!s)throw new Error(`Provided param "${o}" is an array but it is not repeatable (* or + modifiers)`);const c=js(l)?l.join("/"):l;if(!c){if(!a)throw new Error(`Missing required param "${o}"`);r.length<2&&(n.endsWith("/")?n=n.slice(0,-1):i=!0)}n+=c}}return n||"/"}}}(function(t){if(!t)return[[]];if("/"===t)return[[Ma]];if(!t.startsWith("/"))throw new Error(`Invalid path "${t}"`);function e(t){throw new Error(`ERR (${n})/"${c}": ${t}`)}let n=0,i=n;const r=[];let o;function s(){o&&r.push(o),o=[]}let a,l=0,c="",u="";function h(){c&&(0===n?o.push({type:0,value:c}):1===n||2===n||3===n?(o.length>1&&("*"===a||"+"===a)&&e(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),o.push({type:1,value:c,regexp:u,repeatable:"*"===a||"+"===a,optional:"*"===a||"?"===a})):e("Invalid state to consume buffer"),c="")}function d(){c+=a}for(;l<t.length;)if(a=t[l++],"\\"!==a||2===n)switch(n){case 0:"/"===a?(c&&h(),s()):":"===a?(h(),n=1):d();break;case 4:d(),n=i;break;case 1:"("===a?n=2:La.test(a)?d():(h(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--);break;case 2:")"===a?"\\"==u[u.length-1]?u=u.slice(0,-1)+a:n=3:u+=a;break;case 3:h(),n=0,"*"!==a&&"?"!==a&&"+"!==a&&l--,u="";break;default:e("Unknown state")}else i=n,n=4;return 2===n&&e(`Unfinished custom RegExp for param "${c}"`),h(),s(),r}(t.path),n),r=Ls(i,{record:t,parent:e,children:[],alias:[]});return e&&!r.record.aliasOf==!e.record.aliasOf&&e.children.push(r),r}function Da(t,e){const n={};for(const i of e)i in t&&(n[i]=t[i]);return n}function ja(t){const e={},n=t.props||!1;if("component"in t)e.default=n;else for(const i in t.components)e[i]="object"==typeof n?n[i]:n;return e}function Ia(t){for(;t;){if(t.record.aliasOf)return!0;t=t.parent}return!1}function Fa(t){return t.reduce(((t,e)=>Ls(t,e.meta)),{})}function Na(t,e){const n={};for(const i in t)n[i]=i in e?e[i]:t[i];return n}function Ba({record:t}){return!!(t.name||t.components&&Object.keys(t.components).length||t.redirect)}function Va(t){const e={};if(""===t||"?"===t)return e;const n=("?"===t[0]?t.slice(1):t).split("&");for(let t=0;t<n.length;++t){const i=n[t].replace(zs," "),r=i.indexOf("="),o=Zs(r<0?i:i.slice(0,r)),s=r<0?null:Zs(i.slice(r+1));if(o in e){let t=e[o];js(t)||(t=e[o]=[t]),t.push(s)}else e[o]=s}return e}function za(t){let e="";for(let n in t){const i=t[n];(n=Js(n).replace(Bs,"%3D"),null!=i)?(js(i)?i.map((t=>t&&Js(t))):[i&&Js(i)]).forEach((t=>{void 0!==t&&(e+=(e.length?"&":"")+n,null!=t&&(e+="="+t))})):void 0!==i&&(e+=(e.length?"&":"")+n)}return e}function Ha(t){const e={};for(const n in t){const i=t[n];void 0!==i&&(e[n]=js(i)?i.map((t=>null==t?null:""+t)):null==i?i:""+i)}return e}const Ua=Symbol(""),$a=Symbol(""),Wa=Symbol(""),qa=Symbol(""),Ga=Symbol("");function Ya(){let t=[];return{add:function(e){return t.push(e),()=>{const n=t.indexOf(e);n>-1&&t.splice(n,1)}},list:()=>t.slice(),reset:function(){t=[]}}}function Ka(t,e,n,i,r,o=(t=>t())){const s=i&&(i.enterCallbacks[r]=i.enterCallbacks[r]||[]);return()=>new Promise(((a,l)=>{const c=t=>{!1===t?l(Sa(4,{from:n,to:e})):t instanceof Error?l(t):ya(t)?l(Sa(2,{from:e,to:t})):(s&&i.enterCallbacks[r]===s&&"function"==typeof t&&s.push(t),a())},u=o((()=>t.call(i&&i.instances[r],e,n,c)));let h=Promise.resolve(u);t.length<3&&(h=h.then(c)),h.catch((t=>l(t)))}))}function Xa(t,e,n,i,r=(t=>t())){const o=[];for(const a of t)for(const t in a.components){let l=a.components[t];if("beforeRouteEnter"===e||a.instances[t])if("object"==typeof(s=l)||"displayName"in s||"props"in s||"__vccOpts"in s){const s=(l.__vccOpts||l)[e];s&&o.push(Ka(s,n,i,a,t,r))}else{let s=l();o.push((()=>s.then((o=>{if(!o)return Promise.reject(new Error(`Couldn't resolve component "${t}" at "${a.path}"`));const s=(l=o).__esModule||"Module"===l[Symbol.toStringTag]?o.default:o;var l;a.components[t]=s;const c=(s.__vccOpts||s)[e];return c&&Ka(c,n,i,a,t,r)()}))))}}var s;return o}function Ja(t){const e=oi(Wa),n=oi(qa),i=Ur((()=>{const n=Se(t.to);return e.resolve(n)})),r=Ur((()=>{const{matched:t}=i.value,{length:e}=t,r=t[e-1],o=n.matched;if(!r||!o.length)return-1;const s=o.findIndex(ra.bind(null,r));if(s>-1)return s;const a=Za(t[e-2]);return e>1&&Za(r)===a&&o[o.length-1].path!==a?o.findIndex(ra.bind(null,t[e-2])):s})),o=Ur((()=>r.value>-1&&function(t,e){for(const n in e){const i=e[n],r=t[n];if("string"==typeof i){if(i!==r)return!1}else if(!js(r)||r.length!==i.length||i.some(((t,e)=>t!==r[e])))return!1}return!0}(n.params,i.value.params))),s=Ur((()=>r.value>-1&&r.value===n.matched.length-1&&oa(n.params,i.value.params)));if(__VUE_PROD_DEVTOOLS__&&Ms){const e=Tr();if(e){const n={route:i.value,isActive:o.value,isExactActive:s.value,error:null};e.__vrl_devtools=e.__vrl_devtools||[],e.__vrl_devtools.push(n),ji((()=>{n.route=i.value,n.isActive=o.value,n.isExactActive=s.value,n.error=ya(Se(t.to))?null:'Invalid "to" value'}),null,{flush:"post"})}}return{route:i,href:Ur((()=>i.value.href)),isActive:o,isExactActive:s,navigate:function(n={}){return function(t){if(!(t.metaKey||t.altKey||t.ctrlKey||t.shiftKey||t.defaultPrevented||void 0!==t.button&&0!==t.button)){if(t.currentTarget&&t.currentTarget.getAttribute){const e=t.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return t.preventDefault&&t.preventDefault(),!0}}(n)?e[Se(t.replace)?"replace":"push"](Se(t.to)).catch(Ds):Promise.resolve()}}}const Qa=Dn({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:Ja,setup(t,{slots:e}){const n=re(Ja(t)),{options:i}=oi(Wa),r=Ur((()=>({[tl(t.activeClass,i.linkActiveClass,"router-link-active")]:n.isActive,[tl(t.exactActiveClass,i.linkExactActiveClass,"router-link-exact-active")]:n.isExactActive})));return()=>{const i=e.default&&e.default(n);return t.custom?i:$r("a",{"aria-current":n.isExactActive?t.ariaCurrentValue:null,href:n.href,onClick:n.navigate,class:r.value},i)}}});function Za(t){return t?t.aliasOf?t.aliasOf.path:t.path:""}const tl=(t,e,n)=>null!=t?t:null!=e?e:n,el=Dn({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(t,{attrs:e,slots:n}){const i=oi(Ga),r=Ur((()=>t.route||i.value)),o=oi($a,0),s=Ur((()=>{let t=Se(o);const{matched:e}=r.value;let n;for(;(n=e[t])&&!n.components;)t++;return t})),a=Ur((()=>r.value.matched[s.value]));ri($a,Ur((()=>s.value+1))),ri(Ua,a),ri(Ga,r);const l=ve();return Di((()=>[l.value,a.value,t.name]),(([t,e,n],[i,r,o])=>{e&&(e.instances[n]=t,r&&r!==e&&t&&t===i&&(e.leaveGuards.size||(e.leaveGuards=r.leaveGuards),e.updateGuards.size||(e.updateGuards=r.updateGuards))),!t||!e||r&&ra(e,r)&&i||(e.enterCallbacks[n]||[]).forEach((e=>e(t)))}),{flush:"post"}),()=>{const i=r.value,o=t.name,c=a.value,u=c&&c.components[o];if(!u)return nl(n.default,{Component:u,route:i});const h=c.props[o],d=h?!0===h?i.params:"function"==typeof h?h(i):h:null,f=$r(u,Ls({},d,e,{onVnodeUnmounted:t=>{t.component.isUnmounted&&(c.instances[o]=null)},ref:l}));if(__VUE_PROD_DEVTOOLS__&&Ms&&f.ref){const t={depth:s.value,name:c.name,path:c.path,meta:c.meta};(js(f.ref)?f.ref.map((t=>t.i)):[f.ref.i]).forEach((e=>{e.__vrv_devtools=t}))}return nl(n.default,{Component:f,route:i})||f}}});function nl(t,e){if(!t)return null;const n=t(e);return 1===n.length?n[0]:n}const il=el;function rl(t,e){const n=Ls({},t,{matched:t.matched.map((t=>function(t,e){const n={};for(const i in t)e.includes(i)||(n[i]=t[i]);return n}(t,["instances","children","aliasOf"])))});return{_custom:{type:null,readOnly:!0,display:t.fullPath,tooltip:e,value:n}}}function ol(t){return{_custom:{display:t}}}let sl=0;function al(t,e,n){if(e.__hasDevtools)return;e.__hasDevtools=!0;const i=sl++;Ts({id:"org.vuejs.router"+(i?"."+i:""),label:"Vue Router",packageName:"vue-router",homepage:"https://router.vuejs.org",logo:"https://router.vuejs.org/logo.png",componentStateTypes:["Routing"],app:t},(r=>{"function"!=typeof r.now&&console.warn("[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html."),r.on.inspectComponent(((t,n)=>{t.instanceData&&t.instanceData.state.push({type:"Routing",key:"$route",editable:!1,value:rl(e.currentRoute.value,"Current Route")})})),r.on.visitComponentTree((({treeNode:t,componentInstance:e})=>{if(e.__vrv_devtools){const n=e.__vrv_devtools;t.tags.push({label:(n.name?`${n.name.toString()}: `:"")+n.path,textColor:0,tooltip:"This component is rendered by &lt;router-view&gt;",backgroundColor:cl})}js(e.__vrl_devtools)&&(e.__devtoolsApi=r,e.__vrl_devtools.forEach((e=>{let n=e.route.path,i=fl,r="",o=0;e.error?(n=e.error,i=gl,o=ml):e.isExactActive?(i=hl,r="This is exactly active"):e.isActive&&(i=ul,r="This link is active"),t.tags.push({label:n,textColor:o,tooltip:r,backgroundColor:i})})))})),Di(e.currentRoute,(()=>{l(),r.notifyComponentUpdate(),r.sendInspectorTree(a),r.sendInspectorState(a)}));const o="router:navigations:"+i;r.addTimelineLayer({id:o,label:`Router${i?" "+i:""} Navigations`,color:4237508}),e.onError(((t,e)=>{r.addTimelineEvent({layerId:o,event:{title:"Error during Navigation",subtitle:e.fullPath,logType:"error",time:r.now(),data:{error:t},groupId:e.meta.__navigationId}})}));let s=0;e.beforeEach(((t,e)=>{const n={guard:ol("beforeEach"),from:rl(e,"Current Location during this navigation"),to:rl(t,"Target location")};Object.defineProperty(t.meta,"__navigationId",{value:s++}),r.addTimelineEvent({layerId:o,event:{time:r.now(),title:"Start of navigation",subtitle:t.fullPath,data:n,groupId:t.meta.__navigationId}})})),e.afterEach(((t,e,n)=>{const i={guard:ol("afterEach")};n?(i.failure={_custom:{type:Error,readOnly:!0,display:n?n.message:"",tooltip:"Navigation Failure",value:n}},i.status=ol("❌")):i.status=ol("✅"),i.from=rl(e,"Current Location during this navigation"),i.to=rl(t,"Target location"),r.addTimelineEvent({layerId:o,event:{title:"End of navigation",subtitle:t.fullPath,time:r.now(),data:i,logType:n?"warning":"default",groupId:t.meta.__navigationId}})}));const a="router-inspector:"+i;function l(){if(!c)return;const t=c;let i=n.getRoutes().filter((t=>!t.parent||!t.parent.record.components));i.forEach(xl),t.filter&&(i=i.filter((e=>wl(e,t.filter.toLowerCase())))),i.forEach((t=>_l(t,e.currentRoute.value))),t.rootNodes=i.map(bl)}let c;r.addInspector({id:a,label:"Routes"+(i?" "+i:""),icon:"book",treeFilterPlaceholder:"Search routes"}),r.on.getInspectorTree((e=>{c=e,e.app===t&&e.inspectorId===a&&l()})),r.on.getInspectorState((e=>{if(e.app===t&&e.inspectorId===a){const t=n.getRoutes().find((t=>t.record.__vd_id===e.nodeId));t&&(e.state={options:ll(t)})}})),r.sendInspectorTree(a),r.sendInspectorState(a)}))}function ll(t){const{record:e}=t,n=[{editable:!1,key:"path",value:e.path}];return null!=e.name&&n.push({editable:!1,key:"name",value:e.name}),n.push({editable:!1,key:"regexp",value:t.re}),t.keys.length&&n.push({editable:!1,key:"keys",value:{_custom:{type:null,readOnly:!0,display:t.keys.map((t=>`${t.name}${function(t){return t.optional?t.repeatable?"*":"?":t.repeatable?"+":""}(t)}`)).join(" "),tooltip:"Param keys",value:t.keys}}}),null!=e.redirect&&n.push({editable:!1,key:"redirect",value:e.redirect}),t.alias.length&&n.push({editable:!1,key:"aliases",value:t.alias.map((t=>t.record.path))}),Object.keys(t.record.meta).length&&n.push({editable:!1,key:"meta",value:t.record.meta}),n.push({key:"score",editable:!1,value:{_custom:{type:null,readOnly:!0,display:t.score.map((t=>t.join(", "))).join(" | "),tooltip:"Score used to sort routes",value:t.score}}}),n}const cl=15485081,ul=2450411,hl=8702998,dl=2282478,fl=16486972,pl=6710886,gl=16704226,ml=12131356;function bl(t){const e=[],{record:n}=t;null!=n.name&&e.push({label:String(n.name),textColor:0,backgroundColor:dl}),n.aliasOf&&e.push({label:"alias",textColor:0,backgroundColor:fl}),t.__vd_match&&e.push({label:"matches",textColor:0,backgroundColor:cl}),t.__vd_exactActive&&e.push({label:"exact",textColor:0,backgroundColor:hl}),t.__vd_active&&e.push({label:"active",textColor:0,backgroundColor:ul}),n.redirect&&e.push({label:"string"==typeof n.redirect?`redirect: ${n.redirect}`:"redirects",textColor:16777215,backgroundColor:pl});let i=n.__vd_id;return null==i&&(i=String(yl++),n.__vd_id=i),{id:i,label:n.path,tags:e,children:t.children.map(bl)}}let yl=0;const vl=/^\/(.*)\/([a-z]*)$/;function _l(t,e){const n=e.matched.length&&ra(e.matched[e.matched.length-1],t.record);t.__vd_exactActive=t.__vd_active=n,n||(t.__vd_active=e.matched.some((e=>ra(e,t.record)))),t.children.forEach((t=>_l(t,e)))}function xl(t){t.__vd_match=!1,t.children.forEach(xl)}function wl(t,e){const n=String(t.re).match(vl);if(t.__vd_match=!1,!n||n.length<3)return!1;if(new RegExp(n[1].replace(/\$$/,""),n[2]).test(e))return t.children.forEach((t=>wl(t,e))),("/"!==t.record.path||"/"===e)&&(t.__vd_match=t.re.test(e),!0);const i=t.record.path.toLowerCase(),r=Zs(i);return!(e.startsWith("/")||!r.includes(e)&&!i.includes(e))||!(!r.startsWith(e)&&!i.startsWith(e))||!(!t.record.name||!String(t.record.name).includes(e))||t.children.some((t=>wl(t,e)))}var Sl={class:"table-page"},Ol=yr("h4",null,"Table Page",-1);function kl(t,e){Object.keys(t).forEach((function(n){return e(t[n],n)}))}function El(t){return null!==t&&"object"==typeof t}function Al(t,e,n){return e.indexOf(t)<0&&(n&&n.prepend?e.unshift(t):e.push(t)),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}function Pl(t,e){t._actions=Object.create(null),t._mutations=Object.create(null),t._wrappedGetters=Object.create(null),t._modulesNamespaceMap=Object.create(null);var n=t.state;Tl(t,n,[],t._modules.root,!0),Cl(t,n,e)}function Cl(t,e,n){var i=t._state,r=t._scope;t.getters={},t._makeLocalGettersCache=Object.create(null);var o=t._wrappedGetters,s={},a={},l=new tt(!0);l.run((function(){kl(o,(function(e,n){s[n]=function(t,e){return function(){return t(e)}}(e,t),a[n]=Ur((function(){return s[n]()})),Object.defineProperty(t.getters,n,{get:function(){return a[n].value},enumerable:!0})}))})),t._state=re({data:e}),t._scope=l,t.strict&&function(t){Di((function(){return t._state.data}),(function(){}),{deep:!0,flush:"sync"})}(t),i&&n&&t._withCommit((function(){i.data=null})),r&&r.stop()}function Tl(t,e,n,i,r){var o=!n.length,s=t._modules.getNamespace(n);if(i.namespaced&&(t._modulesNamespaceMap[s],t._modulesNamespaceMap[s]=i),!o&&!r){var a=Ll(e,n.slice(0,-1)),l=n[n.length-1];t._withCommit((function(){a[l]=i.state}))}var c=i.context=function(t,e,n){var i=""===e,r={dispatch:i?t.dispatch:function(n,i,r){var o=Rl(n,i,r),s=o.payload,a=o.options,l=o.type;return a&&a.root||(l=e+l),t.dispatch(l,s)},commit:i?t.commit:function(n,i,r){var o=Rl(n,i,r),s=o.payload,a=o.options,l=o.type;a&&a.root||(l=e+l),t.commit(l,s,a)}};return Object.defineProperties(r,{getters:{get:i?function(){return t.getters}:function(){return Ml(t,e)}},state:{get:function(){return Ll(t.state,n)}}}),r}(t,s,n);i.forEachMutation((function(e,n){!function(t,e,n,i){(t._mutations[e]||(t._mutations[e]=[])).push((function(e){n.call(t,i.state,e)}))}(t,s+n,e,c)})),i.forEachAction((function(e,n){var i=e.root?n:s+n,r=e.handler||e;!function(t,e,n,i){(t._actions[e]||(t._actions[e]=[])).push((function(e){var r,o=n.call(t,{dispatch:i.dispatch,commit:i.commit,getters:i.getters,state:i.state,rootGetters:t.getters,rootState:t.state},e);return(r=o)&&"function"==typeof r.then||(o=Promise.resolve(o)),t._devtoolHook?o.catch((function(e){throw t._devtoolHook.emit("vuex:error",e),e})):o}))}(t,i,r,c)})),i.forEachGetter((function(e,n){!function(t,e,n,i){t._wrappedGetters[e]||(t._wrappedGetters[e]=function(t){return n(i.state,i.getters,t.state,t.getters)})}(t,s+n,e,c)})),i.forEachChild((function(i,o){Tl(t,e,n.concat(o),i,r)}))}function Ml(t,e){if(!t._makeLocalGettersCache[e]){var n={},i=e.length;Object.keys(t.getters).forEach((function(r){if(r.slice(0,i)===e){var o=r.slice(i);Object.defineProperty(n,o,{get:function(){return t.getters[r]},enumerable:!0})}})),t._makeLocalGettersCache[e]=n}return t._makeLocalGettersCache[e]}function Ll(t,e){return e.reduce((function(t,e){return t[e]}),t)}function Rl(t,e,n){return El(t)&&t.type&&(n=e,e=t,t=t.type),{type:t,payload:e,options:n}}var Dl="vuex:mutations",jl="vuex:actions",Il="vuex",Fl=0;function Nl(t,e){Ts({id:"org.vuejs.vuex",app:t,label:"Vuex",homepage:"https://next.vuex.vuejs.org/",logo:"https://vuejs.org/images/icons/favicon-96x96.png",packageName:"vuex",componentStateTypes:["vuex bindings"]},(function(n){n.addTimelineLayer({id:Dl,label:"Vuex Mutations",color:Bl}),n.addTimelineLayer({id:jl,label:"Vuex Actions",color:Bl}),n.addInspector({id:Il,label:"Vuex",icon:"storage",treeFilterPlaceholder:"Filter stores..."}),n.on.getInspectorTree((function(n){if(n.app===t&&n.inspectorId===Il)if(n.filter){var i=[];Ul(i,e._modules.root,n.filter,""),n.rootNodes=i}else n.rootNodes=[Hl(e._modules.root,"")]})),n.on.getInspectorState((function(n){if(n.app===t&&n.inspectorId===Il){var i=n.nodeId;Ml(e,i),n.state=function(t,e,n){e="root"===n?e:e[n];var i=Object.keys(e),r={state:Object.keys(t.state).map((function(e){return{key:e,editable:!0,value:t.state[e]}}))};if(i.length){var o=function(t){var e={};return Object.keys(t).forEach((function(n){var i=n.split("/");if(i.length>1){var r=e,o=i.pop();i.forEach((function(t){r[t]||(r[t]={_custom:{value:{},display:t,tooltip:"Module",abstract:!0}}),r=r[t]._custom.value})),r[o]=$l((function(){return t[n]}))}else e[n]=$l((function(){return t[n]}))})),e}(e);r.getters=Object.keys(o).map((function(t){return{key:t.endsWith("/")?zl(t):t,editable:!1,value:$l((function(){return o[t]}))}}))}return r}(function(t,e){var n=e.split("/").filter((function(t){return t}));return n.reduce((function(t,i,r){var o=t[i];if(!o)throw new Error('Missing module "'+i+'" for path "'+e+'".');return r===n.length-1?o:o._children}),"root"===e?t:t.root._children)}(e._modules,i),"root"===i?e.getters:e._makeLocalGettersCache,i)}})),n.on.editInspectorState((function(n){if(n.app===t&&n.inspectorId===Il){var i=n.nodeId,r=n.path;"root"!==i&&(r=i.split("/").filter(Boolean).concat(r)),e._withCommit((function(){n.set(e._state.data,r,n.state.value)}))}})),e.subscribe((function(t,e){var i={};t.payload&&(i.payload=t.payload),i.state=e,n.notifyComponentUpdate(),n.sendInspectorTree(Il),n.sendInspectorState(Il),n.addTimelineEvent({layerId:Dl,event:{time:Date.now(),title:t.type,data:i}})})),e.subscribeAction({before:function(t,e){var i={};t.payload&&(i.payload=t.payload),t._id=Fl++,t._time=Date.now(),i.state=e,n.addTimelineEvent({layerId:jl,event:{time:t._time,title:t.type,groupId:t._id,subtitle:"start",data:i}})},after:function(t,e){var i={},r=Date.now()-t._time;i.duration={_custom:{type:"duration",display:r+"ms",tooltip:"Action duration",value:r}},t.payload&&(i.payload=t.payload),i.state=e,n.addTimelineEvent({layerId:jl,event:{time:Date.now(),title:t.type,groupId:t._id,subtitle:"end",data:i}})}})}))}var Bl=8702998,Vl={label:"namespaced",textColor:16777215,backgroundColor:6710886};function zl(t){return t&&"root"!==t?t.split("/").slice(-2,-1)[0]:"Root"}function Hl(t,e){return{id:e||"root",label:zl(e),tags:t.namespaced?[Vl]:[],children:Object.keys(t._children).map((function(n){return Hl(t._children[n],e+n+"/")}))}}function Ul(t,e,n,i){i.includes(n)&&t.push({id:i||"root",label:i.endsWith("/")?i.slice(0,i.length-1):i||"Root",tags:e.namespaced?[Vl]:[]}),Object.keys(e._children).forEach((function(r){Ul(t,e._children[r],n,i+r+"/")}))}function $l(t){try{return t()}catch(t){return t}}var Wl=function(t,e){this.runtime=e,this._children=Object.create(null),this._rawModule=t;var n=t.state;this.state=("function"==typeof n?n():n)||{}},ql={namespaced:{configurable:!0}};ql.namespaced.get=function(){return!!this._rawModule.namespaced},Wl.prototype.addChild=function(t,e){this._children[t]=e},Wl.prototype.removeChild=function(t){delete this._children[t]},Wl.prototype.getChild=function(t){return this._children[t]},Wl.prototype.hasChild=function(t){return t in this._children},Wl.prototype.update=function(t){this._rawModule.namespaced=t.namespaced,t.actions&&(this._rawModule.actions=t.actions),t.mutations&&(this._rawModule.mutations=t.mutations),t.getters&&(this._rawModule.getters=t.getters)},Wl.prototype.forEachChild=function(t){kl(this._children,t)},Wl.prototype.forEachGetter=function(t){this._rawModule.getters&&kl(this._rawModule.getters,t)},Wl.prototype.forEachAction=function(t){this._rawModule.actions&&kl(this._rawModule.actions,t)},Wl.prototype.forEachMutation=function(t){this._rawModule.mutations&&kl(this._rawModule.mutations,t)},Object.defineProperties(Wl.prototype,ql);var Gl=function(t){this.register([],t,!1)};function Yl(t,e,n){if(e.update(n),n.modules)for(var i in n.modules){if(!e.getChild(i))return;Yl(t.concat(i),e.getChild(i),n.modules[i])}}Gl.prototype.get=function(t){return t.reduce((function(t,e){return t.getChild(e)}),this.root)},Gl.prototype.getNamespace=function(t){var e=this.root;return t.reduce((function(t,n){return t+((e=e.getChild(n)).namespaced?n+"/":"")}),"")},Gl.prototype.update=function(t){Yl([],this.root,t)},Gl.prototype.register=function(t,e,n){var i=this;void 0===n&&(n=!0);var r=new Wl(e,n);0===t.length?this.root=r:this.get(t.slice(0,-1)).addChild(t[t.length-1],r),e.modules&&kl(e.modules,(function(e,r){i.register(t.concat(r),e,n)}))},Gl.prototype.unregister=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1],i=e.getChild(n);i&&i.runtime&&e.removeChild(n)},Gl.prototype.isRegistered=function(t){var e=this.get(t.slice(0,-1)),n=t[t.length-1];return!!e&&e.hasChild(n)};var Kl=function(t){var e=this;void 0===t&&(t={});var n=t.plugins;void 0===n&&(n=[]);var i=t.strict;void 0===i&&(i=!1);var r=t.devtools;this._committing=!1,this._actions=Object.create(null),this._actionSubscribers=[],this._mutations=Object.create(null),this._wrappedGetters=Object.create(null),this._modules=new Gl(t),this._modulesNamespaceMap=Object.create(null),this._subscribers=[],this._makeLocalGettersCache=Object.create(null),this._scope=null,this._devtools=r;var o=this,s=this.dispatch,a=this.commit;this.dispatch=function(t,e){return s.call(o,t,e)},this.commit=function(t,e,n){return a.call(o,t,e,n)},this.strict=i;var l=this._modules.root.state;Tl(this,l,[],this._modules.root),Cl(this,l),n.forEach((function(t){return t(e)}))},Xl={state:{configurable:!0}};Kl.prototype.install=function(t,e){t.provide(e||"store",this),t.config.globalProperties.$store=this,(void 0!==this._devtools?this._devtools:__VUE_PROD_DEVTOOLS__)&&Nl(t,this)},Xl.state.get=function(){return this._state.data},Xl.state.set=function(t){},Kl.prototype.commit=function(t,e,n){var i=this,r=Rl(t,e,n),o=r.type,s=r.payload,a=(r.options,{type:o,payload:s}),l=this._mutations[o];l&&(this._withCommit((function(){l.forEach((function(t){t(s)}))})),this._subscribers.slice().forEach((function(t){return t(a,i.state)})))},Kl.prototype.dispatch=function(t,e){var n=this,i=Rl(t,e),r=i.type,o=i.payload,s={type:r,payload:o},a=this._actions[r];if(a){try{this._actionSubscribers.slice().filter((function(t){return t.before})).forEach((function(t){return t.before(s,n.state)}))}catch(t){}var l=a.length>1?Promise.all(a.map((function(t){return t(o)}))):a[0](o);return new Promise((function(t,e){l.then((function(e){try{n._actionSubscribers.filter((function(t){return t.after})).forEach((function(t){return t.after(s,n.state)}))}catch(t){}t(e)}),(function(t){try{n._actionSubscribers.filter((function(t){return t.error})).forEach((function(e){return e.error(s,n.state,t)}))}catch(t){}e(t)}))}))}},Kl.prototype.subscribe=function(t,e){return Al(t,this._subscribers,e)},Kl.prototype.subscribeAction=function(t,e){return Al("function"==typeof t?{before:t}:t,this._actionSubscribers,e)},Kl.prototype.watch=function(t,e,n){var i=this;return Di((function(){return t(i.state,i.getters)}),e,Object.assign({},n))},Kl.prototype.replaceState=function(t){var e=this;this._withCommit((function(){e._state.data=t}))},Kl.prototype.registerModule=function(t,e,n){void 0===n&&(n={}),"string"==typeof t&&(t=[t]),this._modules.register(t,e),Tl(this,this.state,t,this._modules.get(t),n.preserveState),Cl(this,this.state)},Kl.prototype.unregisterModule=function(t){var e=this;"string"==typeof t&&(t=[t]),this._modules.unregister(t),this._withCommit((function(){delete Ll(e.state,t.slice(0,-1))[t[t.length-1]]})),Pl(this)},Kl.prototype.hasModule=function(t){return"string"==typeof t&&(t=[t]),this._modules.isRegistered(t)},Kl.prototype.hotUpdate=function(t){this._modules.update(t),Pl(this,!0)},Kl.prototype._withCommit=function(t){var e=this._committing;this._committing=!0,t(),this._committing=e},Object.defineProperties(Kl.prototype,Xl),tc((function(t,e){var n={};return Zl(e).forEach((function(e){var i=e.key,r=e.val;n[i]=function(){var e=this.$store.state,n=this.$store.getters;if(t){var i=ec(this.$store,0,t);if(!i)return;e=i.context.state,n=i.context.getters}return"function"==typeof r?r.call(this,e,n):e[r]},n[i].vuex=!0})),n})),tc((function(t,e){var n={};return Zl(e).forEach((function(e){var i=e.key,r=e.val;n[i]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var i=this.$store.commit;if(t){var o=ec(this.$store,0,t);if(!o)return;i=o.context.commit}return"function"==typeof r?r.apply(this,[i].concat(e)):i.apply(this.$store,[r].concat(e))}})),n}));var Jl=tc((function(t,e){var n={};return Zl(e).forEach((function(e){var i=e.key,r=e.val;r=t+r,n[i]=function(){if(!t||ec(this.$store,0,t))return this.$store.getters[r]},n[i].vuex=!0})),n})),Ql=tc((function(t,e){var n={};return Zl(e).forEach((function(e){var i=e.key,r=e.val;n[i]=function(){for(var e=[],n=arguments.length;n--;)e[n]=arguments[n];var i=this.$store.dispatch;if(t){var o=ec(this.$store,0,t);if(!o)return;i=o.context.dispatch}return"function"==typeof r?r.apply(this,[i].concat(e)):i.apply(this.$store,[r].concat(e))}})),n}));function Zl(t){return function(t){return Array.isArray(t)||El(t)}(t)?Array.isArray(t)?t.map((function(t){return{key:t,val:t}})):Object.keys(t).map((function(e){return{key:e,val:t[e]}})):[]}function tc(t){return function(e,n){return"string"!=typeof e?(n=e,e=""):"/"!==e.charAt(e.length-1)&&(e+="/"),t(e,n)}}function ec(t,e,n){return t._modulesNamespaceMap[n]}var nc={class:"table-responsive"},ic={key:1,class:"base-table"},rc=["innerHTML"],oc={key:1};const sc={name:"SkeletonText",props:{width:{type:String,required:!1,default:"100%"}},computed:{skeletonWidthStyle:function(){return{width:this.width}}}},ac={name:"TableLoading",components:{SkeletonText:(0,vs.A)(sc,[["render",function(t,e,n,i,r,o){return lr(),dr("div",{class:"skeleton skeleton-text",style:z(o.skeletonWidthStyle)},null,4)}],["__scopeId","data-v-3ee24822"]])}};function lc(t){return lc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},lc(t)}function cc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function uc(t,e,n){return(e=function(t){var e=function(t,e){if("object"!=lc(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!=lc(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==lc(e)?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const hc={name:"BaseTable",components:{TableLoading:(0,vs.A)(ac,[["render",function(t,e,n,i,r,o){var s=bn("SkeletonText");return lr(),dr("table",null,[yr("thead",null,[yr("tr",null,[yr("th",null,[vr(s,{width:"100px"})]),yr("th",null,[vr(s,{width:"100px"})]),yr("th",null,[vr(s,{width:"100px"})]),yr("th",null,[vr(s,{width:"100px"})]),yr("th",null,[vr(s,{width:"100px"})])])]),yr("tbody",null,[(lr(),dr(nr,null,Rn(5,(function(t,e){return yr("tr",{key:e,style:{"margin-top":"50px"}},[yr("td",null,[vr(s,{width:"100px"})]),yr("td",null,[vr(s,{width:"100px"})]),yr("td",null,[vr(s,{width:"100px"})]),yr("td",null,[vr(s,{width:"100px"})]),yr("td",null,[vr(s,{width:"100px"})])])})),64))])])}],["__scopeId","data-v-a0ba0642"]])},props:{headers:{type:Array,required:!0},rows:{type:Array,required:!0},loading:{type:Boolean,required:!1,default:!1},htmlColumns:{type:Array,required:!1,default:function(){return[]}}},computed:function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?cc(Object(n),!0).forEach((function(e){uc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):cc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}({},Jl(["settings"])),methods:{isHtml:function(t){return this.htmlColumns.includes(t)}}};function dc(t){return dc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},dc(t)}function fc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function pc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?fc(Object(n),!0).forEach((function(e){gc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):fc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function gc(t,e,n){return(e=function(t){var e=function(t,e){if("object"!=dc(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!=dc(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==dc(e)?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const mc={name:"Table",components:{BaseTable:(0,vs.A)(hc,[["render",function(t,e,n,i,r,o){var s=bn("TableLoading");return lr(),dr("div",nc,[n.loading?(lr(),fr(s,{key:0})):wr("v-if",!0),n.loading?wr("v-if",!0):(lr(),dr("table",ic,[yr("thead",null,[yr("tr",null,[(lr(!0),dr(nr,null,Rn(n.headers,(function(t){return lr(),dr("th",{key:t},K(t),1)})),128))])]),yr("tbody",null,[(lr(!0),dr(nr,null,Rn(n.rows,(function(t){return lr(),dr("tr",{key:t.id},[(lr(!0),dr(nr,null,Rn(n.headers,(function(e){return lr(),dr("td",{key:e},[o.isHtml(null==e?void 0:e.toLowerCase())?(lr(),dr("div",{key:0,innerHTML:null==t?void 0:t[null==e?void 0:e.toLowerCase()]},null,8,rc)):(lr(),dr("span",oc,K(null==t?void 0:t[null==e?void 0:e.toLowerCase()]),1))])})),128))])})),128))])]))])}],["__scopeId","data-v-e4c0f1bc"]])},computed:pc({},Jl({tableHeaders:"getTableHeaders",tableRows:"getTableRows",settings:"settings"})),watch:{settings:{handler:function(){this.getTableData()},immediate:!0}},methods:pc({},Ql(["getTableData"]))},bc=(0,vs.A)(mc,[["render",function(t,e,n,i,r,o){var s=bn("BaseTable");return lr(),dr("div",Sl,[Ol,vr(s,{headers:t.tableHeaders,rows:t.tableRows},null,8,["headers","rows"])])}]]);var yc=function(t){return cn("data-v-6fbf9142"),t=t(),un(),t},vc={class:"settings-page"},_c=yc((function(){return yr("h4",null,"Settings",-1)})),xc={class:"form-group"},wc=yc((function(){return yr("label",{for:"row"},"Number of Row",-1)})),Sc={class:"form-group"},Oc=yc((function(){return yr("label",{for:"readable"},"Readable Date",-1)})),kc={class:"form-group"},Ec=yc((function(){return yr("label",null,"Emails (1-5):",-1)})),Ac={class:"email-group"},Pc=["onClick"];const Cc={name:"Button"},Tc=(0,vs.A)(Cc,[["render",function(t,e,n,i,r,o){return lr(),dr("button",null,[In(t.$slots,"default",{},void 0,!0),wr(" slot button content ")])}],["__scopeId","data-v-3f70e246"]]);var Mc={class:"input-area"},Lc=["id","name","type","value","placeholder","onchange","min","max"],Rc={key:1},Dc=["checked","onchange"],jc=function(t){return cn("data-v-392e2529"),t=t(),un(),t}((function(){return yr("span",{class:"toggle-switch"},null,-1)}));const Ic={name:"BaseInput",props:{name:{type:String,required:!0},type:{type:String,required:!1,default:"text"},value:{type:[String,Number,Array],required:!1,default:""},placeholder:{type:String,required:!1,default:""},required:{type:Boolean,required:!1,default:!1},onChange:{type:Function,required:!1,default:function(){}},min:{type:Number,required:!1},max:{type:Number,required:!1}},computed:{isDefaultInput:function(){return["text","number","email","search","url"].includes(this.type)},isCheckbox:function(){return"switch"===this.type||"checkbox"===this.type},isChecked:function(){return 1===parseInt(this.value)}},methods:{onChangeInput:function(t){this.isCheckbox?this.onChange({key:this.name,value:t.target.checked?1:0}):this.onChange({key:this.name,value:t.target.value})}}};function Fc(t){return Fc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fc(t)}function Nc(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=Array(e);n<e;n++)i[n]=t[n];return i}function Bc(){Bc=function(){return e};var t,e={},n=Object.prototype,i=n.hasOwnProperty,r=Object.defineProperty||function(t,e,n){t[e]=n.value},o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,i){var o=e&&e.prototype instanceof b?e:b,s=Object.create(o.prototype),a=new T(i||[]);return r(s,"_invoke",{value:E(t,n,a)}),s}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",g="completed",m={};function b(){}function y(){}function v(){}var _={};c(_,s,(function(){return this}));var x=Object.getPrototypeOf,w=x&&x(x(M([])));w&&w!==n&&i.call(w,s)&&(_=w);var S=v.prototype=b.prototype=Object.create(_);function O(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function k(t,e){function n(r,o,s,a){var l=h(t[r],t,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Fc(u)&&i.call(u,"__await")?e.resolve(u.__await).then((function(t){n("next",t,s,a)}),(function(t){n("throw",t,s,a)})):e.resolve(u).then((function(t){c.value=t,s(c)}),(function(t){return n("throw",t,s,a)}))}a(l.arg)}var o;r(this,"_invoke",{value:function(t,i){function r(){return new e((function(e,r){n(t,i,e,r)}))}return o=o?o.then(r,r):r()}})}function E(e,n,i){var r=d;return function(o,s){if(r===p)throw Error("Generator is already running");if(r===g){if("throw"===o)throw s;return{value:t,done:!0}}for(i.method=o,i.arg=s;;){var a=i.delegate;if(a){var l=A(a,i);if(l){if(l===m)continue;return l}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(r===d)throw r=g,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);r=p;var c=h(e,n,i);if("normal"===c.type){if(r=i.done?g:f,c.arg===m)continue;return{value:c.arg,done:i.done}}"throw"===c.type&&(r=g,i.method="throw",i.arg=c.arg)}}}function A(e,n){var i=n.method,r=e.iterator[i];if(r===t)return n.delegate=null,"throw"===i&&e.iterator.return&&(n.method="return",n.arg=t,A(e,n),"throw"===n.method)||"return"!==i&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+i+"' method")),m;var o=h(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,m;var s=o.arg;return s?s.done?(n[e.resultName]=s.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):s:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function M(e){if(e||""===e){var n=e[s];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(i.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=t,n.done=!0,n};return o.next=o}}throw new TypeError(Fc(e)+" is not iterable")}return y.prototype=v,r(S,"constructor",{value:v,configurable:!0}),r(v,"constructor",{value:y,configurable:!0}),y.displayName=c(v,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c(t,l,"GeneratorFunction")),t.prototype=Object.create(S),t},e.awrap=function(t){return{__await:t}},O(k.prototype),c(k.prototype,a,(function(){return this})),e.AsyncIterator=k,e.async=function(t,n,i,r,o){void 0===o&&(o=Promise);var s=new k(u(t,n,i,r),o);return e.isGeneratorFunction(n)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},O(S),c(S,l,"Generator"),c(S,s,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var i in e)n.push(i);return n.reverse(),function t(){for(;n.length;){var i=n.pop();if(i in e)return t.value=i,t.done=!1,t}return t.done=!0,t}},e.values=M,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(i,r){return a.type="throw",a.arg=e,n.next=i,r&&(n.method="next",n.arg=t),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return r("end");if(s.tryLoc<=this.prev){var l=i.call(s,"catchLoc"),c=i.call(s,"finallyLoc");if(l&&c){if(this.prev<s.catchLoc)return r(s.catchLoc,!0);if(this.prev<s.finallyLoc)return r(s.finallyLoc)}else if(l){if(this.prev<s.catchLoc)return r(s.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return r(s.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var i=n.completion;if("throw"===i.type){var r=i.arg;C(n)}return r}}throw Error("illegal catch attempt")},delegateYield:function(e,n,i){return this.delegate={iterator:M(e),resultName:n,nextLoc:i},"next"===this.method&&(this.arg=t),m}},e}function Vc(t,e,n,i,r,o,s){try{var a=t[o](s),l=a.value}catch(t){return void n(t)}a.done?e(l):Promise.resolve(l).then(i,r)}function zc(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Hc(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?zc(Object(n),!0).forEach((function(e){Uc(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):zc(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Uc(t,e,n){return(e=function(t){var e=function(t,e){if("object"!=Fc(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!=Fc(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==Fc(e)?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const $c={name:"Settings",components:{Button:Tc,BaseInput:(0,vs.A)(Ic,[["render",function(t,e,n,i,r,o){return lr(),dr("div",Mc,[wr(" Handle input component for general inputs like, text, number, email "),o.isDefaultInput?(lr(),dr("input",{key:0,id:n.name,class:"input-main",name:n.name,type:n.type,value:n.value,placeholder:n.placeholder,onchange:o.onChangeInput,min:n.min,max:n.max},null,8,Lc)):wr("v-if",!0),wr(" Handle input component for switch type input "),o.isCheckbox?(lr(),dr("label",Rc,[yr("input",{type:"checkbox",checked:o.isChecked,onchange:o.onChangeInput},null,8,Dc),jc,yr("span",null,K(o.isChecked?"On":"Off"),1)])):wr("v-if",!0)])}],["__scopeId","data-v-392e2529"]])},data:function(){return{wpAmVue,rownumber:"rownumber",numrows:5,checkboxName:"toggleSwitch",checkboxType:"checkbox",checkboxValue:1,checkboxPlaceholder:"Toggle Switch",emails:[],showMessage:!1,message:"",messageType:"success"}},computed:Hc(Hc({},Jl(["isSaving","settings"])),{},{isCheckbox:function(){return"checkbox"===this.checkboxType}}),watch:{settings:function(){this.populateFormFields()}},mounted:function(){this.getSettings()},methods:Hc(Hc({},Ql(["storeSettings","getSettings"])),{},{onSubmit:function(t){var e,n=this;return(e=Bc().mark((function e(){var i;return Bc().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t.preventDefault(),!n.emails.some((function(t){return""===t.trim()}))){e.next=6;break}return n.messageType="error",n.message="Email fields cannot be empty.",n.showMessage=!0,e.abrupt("return");case 6:return i={rows:parseInt(n.numrows),readable:n.checkboxValue,emails:n.emails.map((function(t){return t}))},e.prev=7,e.next=10,n.storeSettings(i);case 10:n.messageType="success",n.message="Settings saved successfully!",n.showMessage=!0,n.populateFormFields(),e.next=21;break;case 16:e.prev=16,e.t0=e.catch(7),n.messageType="error",n.message="Failed to save settings.",n.showMessage=!0;case 21:setTimeout((function(){n.showMessage=!1}),5e3);case 22:case"end":return e.stop()}}),e,null,[[7,16]])})),function(){var t=this,n=arguments;return new Promise((function(i,r){var o=e.apply(t,n);function s(t){Vc(o,i,r,s,a,"next",t)}function a(t){Vc(o,i,r,s,a,"throw",t)}s(void 0)}))})()},onNumRowsChange:function(t){this.numrows=t.value},onCheckboxChange:function(t){this.checkboxValue=t.value},onEmailChange:function(t,e){this.emails[t]=e.value},removeEmail:function(t){this.emails=this.emails.filter((function(e,n){return n!==t}))},addEmail:function(){var t;this.emails.length<5&&(this.emails=[].concat(function(t){if(Array.isArray(t))return Nc(t)}(t=this.emails)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return Nc(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Nc(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[""]))},populateFormFields:function(){this.numrows=this.settings.rows||5,this.checkboxValue=this.settings.readable?1:0,this.emails=this.settings.emails||[this.wpAmVue.user.email]}})},Wc=(0,vs.A)($c,[["render",function(t,e,n,i,r,o){var s=bn("BaseInput"),a=bn("Button");return lr(),dr("div",vc,[_c,yr("form",{method:"post",onSubmit:e[1]||(e[1]=Co((function(){return o.onSubmit&&o.onSubmit.apply(o,arguments)}),["prevent"]))},[yr("div",xc,[wc,vr(s,{name:r.rownumber,type:"number",value:r.numrows,min:1,max:5,"on-change":o.onNumRowsChange},null,8,["name","value","on-change"])]),yr("div",Sc,[Oc,o.isCheckbox?(lr(),fr(s,{key:0,name:r.checkboxName,type:r.checkboxType,value:r.checkboxValue,placeholder:r.checkboxPlaceholder,"on-change":o.onCheckboxChange},null,8,["name","type","value","placeholder","on-change"])):wr("v-if",!0)]),yr("div",kc,[Ec,yr("div",Ac,[(lr(!0),dr(nr,null,Rn(r.emails,(function(t,e){return lr(),dr("div",{key:e,class:"email-input"},[vr(s,{name:"email["+e+"]",type:"email",value:t,required:"",placeholder:"email@example.com","on-change":function(t){return o.onEmailChange(e,t)}},null,8,["name","value","on-change"]),r.emails.length>1?(lr(),dr("button",{key:0,class:"remove-button",onClick:Co((function(t){return o.removeEmail(e)}),["prevent"])},"Remove",8,Pc)):wr("v-if",!0)])})),128))]),r.emails.length<5?(lr(),dr("button",{key:0,class:"add-button",onClick:e[0]||(e[0]=Co((function(){return o.addEmail&&o.addEmail.apply(o,arguments)}),["prevent"]))},"Add Email")):wr("v-if",!0)]),vr(a,{type:"submit"},{default:hn((function(){return[xr("Save")]})),_:1}),r.showMessage?(lr(),dr("div",{key:0,class:q(["message",r.messageType])},K(r.message),3)):wr("v-if",!0)],32)])}],["__scopeId","data-v-6fbf9142"]]);var qc={class:"graph-page"},Gc=yr("h4",null,"Graph Page",-1);function Yc(t){return t+.5|0}const Kc=(t,e,n)=>Math.max(Math.min(t,n),e);function Xc(t){return Kc(Yc(2.55*t),0,255)}function Jc(t){return Kc(Yc(255*t),0,255)}function Qc(t){return Kc(Yc(t/2.55)/100,0,1)}function Zc(t){return Kc(Yc(100*t),0,100)}const tu={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},eu=[..."0123456789ABCDEF"],nu=t=>eu[15&t],iu=t=>eu[(240&t)>>4]+eu[15&t],ru=t=>(240&t)>>4==(15&t);const ou=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function su(t,e,n){const i=e*Math.min(n,1-n),r=(e,r=(e+t/30)%12)=>n-i*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function au(t,e,n){const i=(i,r=(i+t/60)%6)=>n-n*e*Math.max(Math.min(r,4-r,1),0);return[i(5),i(3),i(1)]}function lu(t,e,n){const i=su(t,1,.5);let r;for(e+n>1&&(r=1/(e+n),e*=r,n*=r),r=0;r<3;r++)i[r]*=1-e-n,i[r]+=e;return i}function cu(t){const e=t.r/255,n=t.g/255,i=t.b/255,r=Math.max(e,n,i),o=Math.min(e,n,i),s=(r+o)/2;let a,l,c;return r!==o&&(c=r-o,l=s>.5?c/(2-r-o):c/(r+o),a=function(t,e,n,i,r){return t===r?(e-n)/i+(e<n?6:0):e===r?(n-t)/i+2:(t-e)/i+4}(e,n,i,c,r),a=60*a+.5),[0|a,l||0,s]}function uu(t,e,n,i){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,i)).map(Jc)}function hu(t,e,n){return uu(su,t,e,n)}function du(t){return(t%360+360)%360}const fu={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},pu={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let gu;const mu=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,bu=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,yu=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function vu(t,e,n){if(t){let i=cu(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*n,0===e?360:1)),i=hu(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function _u(t,e){return t?Object.assign(e||{},t):t}function xu(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=Jc(t[3]))):(e=_u(t,{r:0,g:0,b:0,a:1})).a=Jc(e.a),e}function wu(t){return"r"===t.charAt(0)?function(t){const e=mu.exec(t);let n,i,r,o=255;if(e){if(e[7]!==n){const t=+e[7];o=e[8]?Xc(t):Kc(255*t,0,255)}return n=+e[1],i=+e[3],r=+e[5],n=255&(e[2]?Xc(n):Kc(n,0,255)),i=255&(e[4]?Xc(i):Kc(i,0,255)),r=255&(e[6]?Xc(r):Kc(r,0,255)),{r:n,g:i,b:r,a:o}}}(t):function(t){const e=ou.exec(t);let n,i=255;if(!e)return;e[5]!==n&&(i=e[6]?Xc(+e[5]):Jc(+e[5]));const r=du(+e[2]),o=+e[3]/100,s=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return uu(lu,t,e,n)}(r,o,s):"hsv"===e[1]?function(t,e,n){return uu(au,t,e,n)}(r,o,s):hu(r,o,s),{r:n[0],g:n[1],b:n[2],a:i}}(t)}class Su{constructor(t){if(t instanceof Su)return t;const e=typeof t;let n;var i,r,o;"object"===e?n=xu(t):"string"===e&&(o=(i=t).length,"#"===i[0]&&(4===o||5===o?r={r:255&17*tu[i[1]],g:255&17*tu[i[2]],b:255&17*tu[i[3]],a:5===o?17*tu[i[4]]:255}:7!==o&&9!==o||(r={r:tu[i[1]]<<4|tu[i[2]],g:tu[i[3]]<<4|tu[i[4]],b:tu[i[5]]<<4|tu[i[6]],a:9===o?tu[i[7]]<<4|tu[i[8]]:255})),n=r||function(t){gu||(gu=function(){const t={},e=Object.keys(pu),n=Object.keys(fu);let i,r,o,s,a;for(i=0;i<e.length;i++){for(s=a=e[i],r=0;r<n.length;r++)o=n[r],a=a.replace(o,fu[o]);o=parseInt(pu[s],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),gu.transparent=[0,0,0,0]);const e=gu[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||wu(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=_u(this._rgb);return t&&(t.a=Qc(t.a)),t}set rgb(t){this._rgb=xu(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${Qc(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>ru(t.r)&&ru(t.g)&&ru(t.b)&&ru(t.a))(t)?nu:iu,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=cu(t),n=e[0],i=Zc(e[1]),r=Zc(e[2]);return t.a<255?`hsla(${n}, ${i}%, ${r}%, ${Qc(t.a)})`:`hsl(${n}, ${i}%, ${r}%)`}(this._rgb):void 0}mix(t,e){if(t){const n=this.rgb,i=t.rgb;let r;const o=e===r?.5:e,s=2*o-1,a=n.a-i.a,l=((s*a==-1?s:(s+a)/(1+s*a))+1)/2;r=1-l,n.r=255&l*n.r+r*i.r+.5,n.g=255&l*n.g+r*i.g+.5,n.b=255&l*n.b+r*i.b+.5,n.a=o*n.a+(1-o)*i.a,this.rgb=n}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,n){const i=yu(Qc(t.r)),r=yu(Qc(t.g)),o=yu(Qc(t.b));return{r:Jc(bu(i+n*(yu(Qc(e.r))-i))),g:Jc(bu(r+n*(yu(Qc(e.g))-r))),b:Jc(bu(o+n*(yu(Qc(e.b))-o))),a:t.a+n*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new Su(this.rgb)}alpha(t){return this._rgb.a=Jc(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=Yc(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return vu(this._rgb,2,t),this}darken(t){return vu(this._rgb,2,-t),this}saturate(t){return vu(this._rgb,1,t),this}desaturate(t){return vu(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=cu(t);n[0]=du(n[0]+e),n=hu(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function Ou(){}const ku=(()=>{let t=0;return()=>t++})();function Eu(t){return null==t}function Au(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function Pu(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function Cu(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function Tu(t,e){return Cu(t)?t:e}function Mu(t,e){return void 0===t?e:t}function Lu(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function Ru(t,e,n,i){let r,o,s;if(Au(t))if(o=t.length,i)for(r=o-1;r>=0;r--)e.call(n,t[r],r);else for(r=0;r<o;r++)e.call(n,t[r],r);else if(Pu(t))for(s=Object.keys(t),o=s.length,r=0;r<o;r++)e.call(n,t[s[r]],s[r])}function Du(t,e){let n,i,r,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],o=e[n],r.datasetIndex!==o.datasetIndex||r.index!==o.index)return!1;return!0}function ju(t){if(Au(t))return t.map(ju);if(Pu(t)){const e=Object.create(null),n=Object.keys(t),i=n.length;let r=0;for(;r<i;++r)e[n[r]]=ju(t[n[r]]);return e}return t}function Iu(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function Fu(t,e,n,i){if(!Iu(t))return;const r=e[t],o=n[t];Pu(r)&&Pu(o)?Nu(r,o,i):e[t]=ju(o)}function Nu(t,e,n){const i=Au(e)?e:[e],r=i.length;if(!Pu(t))return t;const o=(n=n||{}).merger||Fu;let s;for(let e=0;e<r;++e){if(s=i[e],!Pu(s))continue;const r=Object.keys(s);for(let e=0,i=r.length;e<i;++e)o(r[e],t,s,n)}return t}function Bu(t,e){return Nu(t,e,{merger:Vu})}function Vu(t,e,n){if(!Iu(t))return;const i=e[t],r=n[t];Pu(i)&&Pu(r)?Bu(i,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=ju(r))}const zu={"":t=>t,x:t=>t.x,y:t=>t.y};function Hu(t,e){const n=zu[e]||(zu[e]=function(t){const e=function(t){const e=t.split("."),n=[];let i="";for(const t of e)i+=t,i.endsWith("\\")?i=i.slice(0,-1)+".":(n.push(i),i="");return n}(t);return t=>{for(const n of e){if(""===n)break;t=t&&t[n]}return t}}(e));return n(t)}function Uu(t){return t.charAt(0).toUpperCase()+t.slice(1)}const $u=t=>void 0!==t,Wu=t=>"function"==typeof t,qu=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},Gu=Math.PI,Yu=2*Gu,Ku=Number.POSITIVE_INFINITY,Xu=Gu/180,Ju=Gu/2,Qu=Gu/4,Zu=2*Gu/3,th=Math.log10,eh=Math.sign;function nh(t,e,n){return Math.abs(t-e)<n}function ih(t){const e=Math.round(t);t=nh(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(th(t))),i=t/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n}function rh(t){return!isNaN(parseFloat(t))&&isFinite(t)}function oh(t){return t*(Gu/180)}function sh(t){if(!Cu(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function ah(t){return(t%Yu+Yu)%Yu}function lh(t,e,n){return Math.max(e,Math.min(n,t))}function ch(t,e,n,i=1e-6){return t>=Math.min(e,n)-i&&t<=Math.max(e,n)+i}function uh(t,e,n){n=n||(n=>t[n]<e);let i,r=t.length-1,o=0;for(;r-o>1;)i=o+r>>1,n(i)?o=i:r=i;return{lo:o,hi:r}}const hh=(t,e,n,i)=>uh(t,n,i?i=>{const r=t[i][e];return r<n||r===n&&t[i+1][e]===n}:i=>t[i][e]<n),dh=(t,e,n)=>uh(t,n,(i=>t[i][e]>=n)),fh=["push","pop","shift","splice","unshift"];function ph(t,e){const n=t._chartjs;if(!n)return;const i=n.listeners,r=i.indexOf(e);-1!==r&&i.splice(r,1),i.length>0||(fh.forEach((e=>{delete t[e]})),delete t._chartjs)}const gh="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function mh(t,e){let n=[],i=!1;return function(...r){n=r,i||(i=!0,gh.call(window,(()=>{i=!1,t.apply(e,n)})))}}const bh=t=>"start"===t?"left":"end"===t?"right":"center",yh=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2,vh=t=>0===t||1===t,_h=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*Yu/n),xh=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*Yu/n)+1,wh={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*Ju),easeOutSine:t=>Math.sin(t*Ju),easeInOutSine:t=>-.5*(Math.cos(Gu*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>vh(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>vh(t)?t:_h(t,.075,.3),easeOutElastic:t=>vh(t)?t:xh(t,.075,.3),easeInOutElastic(t){const e=.1125;return vh(t)?t:t<.5?.5*_h(2*t,e,.45):.5+.5*xh(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-wh.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*wh.easeInBounce(2*t):.5*wh.easeOutBounce(2*t-1)+.5};function Sh(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Oh(t){return Sh(t)?t:new Su(t)}function kh(t){return Sh(t)?t:new Su(t).saturate(.5).darken(.1).hexString()}const Eh=["x","y","borderWidth","radius","tension"],Ah=["color","borderColor","backgroundColor"],Ph=new Map;function Ch(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let i=Ph.get(n);return i||(i=new Intl.NumberFormat(t,e),Ph.set(n,i)),i}(e,n).format(t)}const Th={values:t=>Au(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const i=this.chart.options.locale;let r,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const s=th(Math.abs(o)),a=isNaN(s)?1:Math.max(Math.min(-1*Math.floor(s),20),0),l={notation:r,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),Ch(t,i,l)},logarithmic(t,e,n){if(0===t)return"0";const i=n[e].significand||t/Math.pow(10,Math.floor(th(t)));return[1,2,3,5,10,15].includes(i)||e>.8*n.length?Th.numeric.call(this,t,e,n):""}};var Mh={formatters:Th};const Lh=Object.create(null),Rh=Object.create(null);function Dh(t,e){if(!e)return t;const n=e.split(".");for(let e=0,i=n.length;e<i;++e){const i=n[e];t=t[i]||(t[i]=Object.create(null))}return t}function jh(t,e,n){return"string"==typeof e?Nu(Dh(t,e),n):Nu(Dh(t,""),e)}class Ih{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>kh(e.backgroundColor),this.hoverBorderColor=(t,e)=>kh(e.borderColor),this.hoverColor=(t,e)=>kh(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return jh(this,t,e)}get(t){return Dh(this,t)}describe(t,e){return jh(Rh,t,e)}override(t,e){return jh(Lh,t,e)}route(t,e,n,i){const r=Dh(this,t),o=Dh(this,n),s="_"+e;Object.defineProperties(r,{[s]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[s],e=o[i];return Pu(t)?Object.assign({},e,t):Mu(t,e)},set(t){this[s]=t}}})}apply(t){t.forEach((t=>t(this)))}}var Fh=new Ih({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:Ah},numbers:{type:"number",properties:Eh}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Mh.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Nh(t,e,n,i,r){let o=e[r];return o||(o=e[r]=t.measureText(r).width,n.push(r)),o>i&&(i=o),i}function Bh(t,e,n){const i=t.currentDevicePixelRatio,r=0!==n?Math.max(n/2,.5):0;return Math.round((e-r)*i)/i+r}function Vh(t,e){(e||t)&&((e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore())}function zh(t,e,n,i){Hh(t,e,n,i,null)}function Hh(t,e,n,i,r){let o,s,a,l,c,u,h,d;const f=e.pointStyle,p=e.rotation,g=e.radius;let m=(p||0)*Xu;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(n,i),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(g)||g<=0)){switch(t.beginPath(),f){default:r?t.ellipse(n,i,r/2,g,0,0,Yu):t.arc(n,i,g,0,Yu),t.closePath();break;case"triangle":u=r?r/2:g,t.moveTo(n+Math.sin(m)*u,i-Math.cos(m)*g),m+=Zu,t.lineTo(n+Math.sin(m)*u,i-Math.cos(m)*g),m+=Zu,t.lineTo(n+Math.sin(m)*u,i-Math.cos(m)*g),t.closePath();break;case"rectRounded":c=.516*g,l=g-c,s=Math.cos(m+Qu)*l,h=Math.cos(m+Qu)*(r?r/2-c:l),a=Math.sin(m+Qu)*l,d=Math.sin(m+Qu)*(r?r/2-c:l),t.arc(n-h,i-a,c,m-Gu,m-Ju),t.arc(n+d,i-s,c,m-Ju,m),t.arc(n+h,i+a,c,m,m+Ju),t.arc(n-d,i+s,c,m+Ju,m+Gu),t.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,u=r?r/2:l,t.rect(n-u,i-l,2*u,2*l);break}m+=Qu;case"rectRot":h=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(n-h,i-a),t.lineTo(n+d,i-s),t.lineTo(n+h,i+a),t.lineTo(n-d,i+s),t.closePath();break;case"crossRot":m+=Qu;case"cross":h=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(n-h,i-a),t.lineTo(n+h,i+a),t.moveTo(n+d,i-s),t.lineTo(n-d,i+s);break;case"star":h=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(n-h,i-a),t.lineTo(n+h,i+a),t.moveTo(n+d,i-s),t.lineTo(n-d,i+s),m+=Qu,h=Math.cos(m)*(r?r/2:g),s=Math.cos(m)*g,a=Math.sin(m)*g,d=Math.sin(m)*(r?r/2:g),t.moveTo(n-h,i-a),t.lineTo(n+h,i+a),t.moveTo(n+d,i-s),t.lineTo(n-d,i+s);break;case"line":s=r?r/2:Math.cos(m)*g,a=Math.sin(m)*g,t.moveTo(n-s,i-a),t.lineTo(n+s,i+a);break;case"dash":t.moveTo(n,i),t.lineTo(n+Math.cos(m)*(r?r/2:g),i+Math.sin(m)*g);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function Uh(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function $h(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Wh(t){t.restore()}function qh(t,e,n,i,r){if(r.strikethrough||r.underline){const o=t.measureText(i),s=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=r.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(s,u),t.lineTo(a,u),t.stroke()}}function Gh(t,e){const n=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=n}function Yh(t,e,n,i,r,o={}){const s=Au(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),Eu(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<s.length;++l)c=s[l],o.backdrop&&Gh(t,o.backdrop),a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),Eu(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,n,i,o.maxWidth)),t.fillText(c,n,i,o.maxWidth),qh(t,n,i,c,o),i+=Number(r.lineHeight);t.restore()}function Kh(t,e){const{x:n,y:i,w:r,h:o,radius:s}=e;t.arc(n+s.topLeft,i+s.topLeft,s.topLeft,1.5*Gu,Gu,!0),t.lineTo(n,i+o-s.bottomLeft),t.arc(n+s.bottomLeft,i+o-s.bottomLeft,s.bottomLeft,Gu,Ju,!0),t.lineTo(n+r-s.bottomRight,i+o),t.arc(n+r-s.bottomRight,i+o-s.bottomRight,s.bottomRight,Ju,0,!0),t.lineTo(n+r,i+s.topRight),t.arc(n+r-s.topRight,i+s.topRight,s.topRight,0,-Ju,!0),t.lineTo(n+s.topLeft,i)}const Xh=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,Jh=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function Qh(t,e){const n=(""+t).match(Xh);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}const Zh=t=>+t||0;function td(t,e){const n={},i=Pu(e),r=i?Object.keys(e):e,o=Pu(t)?i?n=>Mu(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of r)n[t]=Zh(o(t));return n}function ed(t){return td(t,{top:"y",right:"x",bottom:"y",left:"x"})}function nd(t){return td(t,["topLeft","topRight","bottomLeft","bottomRight"])}function id(t){const e=ed(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function rd(t,e){t=t||{},e=e||Fh.font;let n=Mu(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let i=Mu(t.style,e.style);i&&!(""+i).match(Jh)&&(console.warn('Invalid font style specified: "'+i+'"'),i=void 0);const r={family:Mu(t.family,e.family),lineHeight:Qh(Mu(t.lineHeight,e.lineHeight),n),size:n,style:i,weight:Mu(t.weight,e.weight),string:""};return r.string=function(t){return!t||Eu(t.size)||Eu(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function od(t,e,n,i){let r,o,s,a=!0;for(r=0,o=t.length;r<o;++r)if(s=t[r],void 0!==s&&(void 0!==e&&"function"==typeof s&&(s=s(e),a=!1),void 0!==n&&Au(s)&&(s=s[n%s.length],a=!1),void 0!==s))return i&&!a&&(i.cacheable=!1),s}function sd(t,e){return Object.assign(Object.create(t),e)}function ad(t,e=[""],n,i,r=(()=>t[0])){const o=n||t;void 0===i&&(i=yd("_fallback",t));const s={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:i,_getTarget:r,override:n=>ad([n,...t],e,o,i)};return new Proxy(s,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,i)=>dd(n,i,(()=>function(t,e,n,i){let r;for(const o of e)if(r=yd(ud(o,t),n),void 0!==r)return hd(t,r)?md(n,i,t,r):r}(i,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>vd(t).includes(e),ownKeys:t=>vd(t),set(t,e,n){const i=t._storage||(t._storage=r());return t[e]=i[e]=n,delete t._keys,!0}})}function ld(t,e,n,i){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:cd(t,i),setContext:e=>ld(t,e,n,i),override:r=>ld(t.override(r),e,n,i)};return new Proxy(r,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>dd(t,e,(()=>function(t,e,n){const{_proxy:i,_context:r,_subProxy:o,_descriptors:s}=t;let a=i[e];return Wu(a)&&s.isScriptable(e)&&(a=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:s,_stack:a}=n;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);a.add(t);let l=e(o,s||i);return a.delete(t),hd(t,l)&&(l=md(r._scopes,r,t,l)),l}(e,a,t,n)),Au(a)&&a.length&&(a=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:s,_descriptors:a}=n;if(void 0!==o.index&&i(t))return e[o.index%e.length];if(Pu(e[0])){const n=e,i=r._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=md(i,r,t,l);e.push(ld(n,o,s&&s[t],a))}}return e}(e,a,t,s.isIndexable)),hd(e,a)&&(a=ld(a,r,o&&o[e],s)),a}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,i)=>(t[n]=i,delete e[n],!0)})}function cd(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:i=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:n,indexable:i,isScriptable:Wu(n)?n:()=>n,isIndexable:Wu(i)?i:()=>i}}const ud=(t,e)=>t?t+Uu(e):e,hd=(t,e)=>Pu(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function dd(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e)||"constructor"===e)return t[e];const i=n();return t[e]=i,i}function fd(t,e,n){return Wu(t)?t(e,n):t}const pd=(t,e)=>!0===t?e:"string"==typeof t?Hu(e,t):void 0;function gd(t,e,n,i,r){for(const o of e){const e=pd(n,o);if(e){t.add(e);const o=fd(e._fallback,n,r);if(void 0!==o&&o!==n&&o!==i)return o}else if(!1===e&&void 0!==i&&n!==i)return null}return!1}function md(t,e,n,i){const r=e._rootScopes,o=fd(e._fallback,n,i),s=[...t,...r],a=new Set;a.add(i);let l=bd(a,s,n,o||n,i);return null!==l&&(void 0===o||o===n||(l=bd(a,s,o,l,i),null!==l))&&ad(Array.from(a),[""],r,o,(()=>function(t,e,n){const i=t._getTarget();e in i||(i[e]={});const r=i[e];return Au(r)&&Pu(n)?n:r||{}}(e,n,i)))}function bd(t,e,n,i,r){for(;n;)n=gd(t,e,n,i,r);return n}function yd(t,e){for(const n of e){if(!n)continue;const e=n[t];if(void 0!==e)return e}}function vd(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function _d(){return"undefined"!=typeof window&&"undefined"!=typeof document}function xd(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function wd(t,e,n){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}Number.EPSILON;const Sd=t=>t.ownerDocument.defaultView.getComputedStyle(t,null),Od=["top","right","bottom","left"];function kd(t,e,n){const i={};n=n?"-"+n:"";for(let r=0;r<4;r++){const o=Od[r];i[o]=parseFloat(t[e+"-"+o+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}const Ed=(t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot);function Ad(t,e){if("native"in t)return t;const{canvas:n,currentDevicePixelRatio:i}=e,r=Sd(n),o="border-box"===r.boxSizing,s=kd(r,"padding"),a=kd(r,"border","width"),{x:l,y:c,box:u}=function(t,e){const n=t.touches,i=n&&n.length?n[0]:t,{offsetX:r,offsetY:o}=i;let s,a,l=!1;if(Ed(r,o,t.target))s=r,a=o;else{const t=e.getBoundingClientRect();s=i.clientX-t.left,a=i.clientY-t.top,l=!0}return{x:s,y:a,box:l}}(t,n),h=s.left+(u&&a.left),d=s.top+(u&&a.top);let{width:f,height:p}=e;return o&&(f-=s.width+a.width,p-=s.height+a.height),{x:Math.round((l-h)/f*n.width/i),y:Math.round((c-d)/p*n.height/i)}}const Pd=t=>Math.round(10*t)/10;function Cd(t,e,n){const i=e||1,r=Math.floor(t.height*i),o=Math.floor(t.width*i);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const s=t.canvas;return s.style&&(n||!s.style.height&&!s.style.width)&&(s.style.height=`${t.height}px`,s.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||s.height!==r||s.width!==o)&&(t.currentDevicePixelRatio=i,s.height=r,s.width=o,t.ctx.setTransform(i,0,0,i,0,0),!0)}const Td=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};_d()&&(window.addEventListener("test",null,e),window.removeEventListener("test",null,e))}catch(t){}return t}();function Md(t,e){const n=function(t,e){return Sd(t).getPropertyValue(e)}(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function Ld(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function Rd(t,e){let n,i;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)}function Dd(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}class jd{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,i){const r=e.listeners[i],o=e.duration;r.forEach((i=>i({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=gh.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const r=n.items;let o,s=r.length-1,a=!1;for(;s>=0;--s)o=r[s],o._active?(o._total>n.duration&&(n.duration=o._total),o.tick(t),a=!0):(r[s]=r[r.length-1],r.pop());a&&(i.draw(),this._notify(i,n,t,"progress")),r.length||(n.running=!1,this._notify(i,n,t,"complete"),n.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var Id=new jd;const Fd="transparent",Nd={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const i=Oh(t||Fd),r=i.valid&&Oh(e||Fd);return r&&r.valid?r.mix(i,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class Bd{constructor(t,e,n,i){const r=e[n];i=od([t.to,i,r,t.from]);const o=od([t.from,r,i]);this._active=!0,this._fn=t.fn||Nd[t.type||typeof o],this._easing=wh[t.easing]||wh.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=i,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const i=this._target[this._prop],r=n-this._start,o=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=od([t.to,e,i,t.from]),this._from=od([t.from,i,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,i=this._prop,r=this._from,o=this._loop,s=this._to;let a;if(this._active=r!==s&&(o||e<n),!this._active)return this._target[i]=s,void this._notify(!0);e<0?this._target[i]=r:(a=e/n%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[i]=this._fn(r,s,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}class Vd{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!Pu(t))return;const e=Object.keys(Fh.animation),n=this._properties;Object.getOwnPropertyNames(t).forEach((i=>{const r=t[i];if(!Pu(r))return;const o={};for(const t of e)o[t]=r[t];(Au(r.properties)&&r.properties||[i]).forEach((t=>{t!==i&&n.has(t)||n.set(t,o)}))}))}_animateOptions(t,e){const n=e.options,i=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!i)return[];const r=this._createAnimations(i,n);return n.$shared&&function(t,e){const n=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const r=t[i[e]];r&&r.active()&&n.push(r.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),r}_createAnimations(t,e){const n=this._properties,i=[],r=t.$animations||(t.$animations={}),o=Object.keys(e),s=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){i.push(...this._animateOptions(t,e));continue}const c=e[l];let u=r[l];const h=n.get(l);if(u){if(h&&u.active()){u.update(h,c,s);continue}u.cancel()}h&&h.duration?(r[l]=u=new Bd(h,t,l,c),i.push(u)):t[l]=c}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(Id.add(this._chart,n),!0):void 0}}function zd(t,e){const n=t&&t.options||{},i=n.reverse,r=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:i?o:r,end:i?r:o}}function Hd(t,e){const n=[],i=t._getSortedDatasetMetas(e);let r,o;for(r=0,o=i.length;r<o;++r)n.push(i[r].index);return n}function Ud(t,e,n,i={}){const r=t.keys,o="single"===i.mode;let s,a,l,c;if(null!==e){for(s=0,a=r.length;s<a;++s){if(l=+r[s],l===n){if(i.all)continue;break}c=t.values[l],Cu(c)&&(o||0===e||eh(e)===eh(c))&&(e+=c)}return e}}function $d(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function Wd(t,e,n){const i=t[e]||(t[e]={});return i[n]||(i[n]={})}function qd(t,e,n,i){for(const r of e.getMatchingVisibleMetas(i).reverse()){const e=t[r.index];if(n&&e>0||!n&&e<0)return r.index}return null}function Gd(t,e){const{chart:n,_cachedMeta:i}=t,r=n._stacks||(n._stacks={}),{iScale:o,vScale:s,index:a}=i,l=o.axis,c=s.axis,u=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,s,i),h=e.length;let d;for(let t=0;t<h;++t){const n=e[t],{[l]:o,[c]:h}=n;d=(n._stacks||(n._stacks={}))[c]=Wd(r,u,o),d[a]=h,d._top=qd(d,s,!0,i.type),d._bottom=qd(d,s,!1,i.type),(d._visualValues||(d._visualValues={}))[a]=h}}function Yd(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function Kd(t,e){const n=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][n])return;delete e[i][n],void 0!==e[i]._visualValues&&void 0!==e[i]._visualValues[n]&&delete e[i]._visualValues[n]}}}const Xd=t=>"reset"===t||"none"===t,Jd=(t,e)=>e?t:Object.assign({},t);class Qd{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=$d(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&Kd(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),i=(t,e,n,i)=>"x"===t?e:"r"===t?i:n,r=e.xAxisID=Mu(n.xAxisID,Yd(t,"x")),o=e.yAxisID=Mu(n.yAxisID,Yd(t,"y")),s=e.rAxisID=Mu(n.rAxisID,Yd(t,"r")),a=e.indexAxis,l=e.iAxisID=i(a,r,o,s),c=e.vAxisID=i(a,o,r,s);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(s),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ph(this._data,this),t._stacked&&Kd(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(Pu(e)){const t=this._cachedMeta;this._data=function(t,e){const{iScale:n,vScale:i}=e,r="x"===n.axis?"x":"y",o="x"===i.axis?"x":"y",s=Object.keys(t),a=new Array(s.length);let l,c,u;for(l=0,c=s.length;l<c;++l)u=s[l],a[l]={[r]:u,[o]:t[u]};return a}(e,t)}else if(n!==e){if(n){ph(n,this);const t=this._cachedMeta;Kd(t),t._parsed=[]}e&&Object.isExtensible(e)&&((i=e)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),fh.forEach((t=>{const e="_onData"+Uu(t),n=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const r=n.apply(this,t);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),r}})})))),this._syncList=[],this._data=e}var i}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const r=e._stacked;e._stacked=$d(e.vScale,e),e.stack!==n.stack&&(i=!0,Kd(e),e.stack=n.stack),this._resyncElements(t),(i||r!==e._stacked)&&Gd(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:i}=this,{iScale:r,_stacked:o}=n,s=r.axis;let a,l,c,u=0===t&&e===i.length||n._sorted,h=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,c=i;else{c=Au(i[t])?this.parseArrayData(n,i,t,e):Pu(i[t])?this.parseObjectData(n,i,t,e):this.parsePrimitiveData(n,i,t,e);const r=()=>null===l[s]||h&&l[s]<h[s];for(a=0;a<e;++a)n._parsed[a+t]=l=c[a],u&&(r()&&(u=!1),h=l);n._sorted=u}o&&Gd(this,c)}parsePrimitiveData(t,e,n,i){const{iScale:r,vScale:o}=t,s=r.axis,a=o.axis,l=r.getLabels(),c=r===o,u=new Array(i);let h,d,f;for(h=0,d=i;h<d;++h)f=h+n,u[h]={[s]:c||r.parse(l[f],f),[a]:o.parse(e[f],f)};return u}parseArrayData(t,e,n,i){const{xScale:r,yScale:o}=t,s=new Array(i);let a,l,c,u;for(a=0,l=i;a<l;++a)c=a+n,u=e[c],s[a]={x:r.parse(u[0],c),y:o.parse(u[1],c)};return s}parseObjectData(t,e,n,i){const{xScale:r,yScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l=new Array(i);let c,u,h,d;for(c=0,u=i;c<u;++c)h=c+n,d=e[h],l[c]={x:r.parse(Hu(d,s),h),y:o.parse(Hu(d,a),h)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const i=this.chart,r=this._cachedMeta,o=e[t.axis];return Ud({keys:Hd(i,!0),values:e._stacks[t.axis]._visualValues},o,r.index,{mode:n})}updateRangeFromParsed(t,e,n,i){const r=n[e.axis];let o=null===r?NaN:r;const s=i&&n._stacks[e.axis];i&&s&&(i.values=s,o=Ud(i,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this._cachedMeta,i=n._parsed,r=n._sorted&&t===n.iScale,o=i.length,s=this._getOtherScale(t),a=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:Hd(n,!0),values:null})(e,n,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:u}=function(t){const{min:e,max:n,minDefined:i,maxDefined:r}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:r?n:Number.POSITIVE_INFINITY}}(s);let h,d;function f(){d=i[h];const e=d[s.axis];return!Cu(d[t.axis])||c>e||u<e}for(h=0;h<o&&(f()||(this.updateRangeFromParsed(l,t,d,a),!r));++h);if(r)for(h=o-1;h>=0;--h)if(!f()){this.updateRangeFromParsed(l,t,d,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i][t.axis],Cu(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,i=e.vScale,r=this.getParsed(t);return{label:n?""+n.getLabelForValue(r[n.axis]):"",value:i?""+i.getLabelForValue(r[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,i,r;return Pu(t)?(e=t.top,n=t.right,i=t.bottom,r=t.left):e=n=i=r=t,{top:e,right:n,bottom:i,left:r,disabled:!1===t}}(Mu(this.options.clip,function(t,e,n){if(!1===n)return!1;const i=zd(t,n),r=zd(e,n);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,i=n.data||[],r=e.chartArea,o=[],s=this._drawStart||0,a=this._drawCount||i.length-s,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,r,s,a),c=s;c<s+a;++c){const e=i[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,r))}for(c=0;c<o.length;++c)o[c].draw(t,r)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const i=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,n){return sd(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=i.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return sd(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=i,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=n,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const i="active"===e,r=this._cachedDataOpts,o=t+"-"+e,s=r[o],a=this.enableOptionSharing&&$u(n);if(s)return Jd(s,a);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),u=i?[`${t}Hover`,"hover",t,""]:[t,""],h=l.getOptionScopes(this.getDataset(),c),d=Object.keys(Fh.elements[t]),f=l.resolveNamedOptions(h,d,(()=>this.getContext(n,i,e)),u);return f.$shared&&(f.$shared=a,r[o]=Object.freeze(Jd(f,a))),f}_resolveAnimations(t,e,n){const i=this.chart,r=this._cachedDataOpts,o=`animation-${e}`,s=r[o];if(s)return s;let a;if(!1!==i.options.animation){const i=this.chart.config,r=i.datasetAnimationScopeKeys(this._type,e),o=i.getOptionScopes(this.getDataset(),r);a=i.createResolver(o,this.getContext(t,n,e))}const l=new Vd(i,a&&a.animations);return a&&a._cacheable&&(r[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Xd(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const n=this.resolveDataElementOptions(t,e),i=this._sharedOptions,r=this.getSharedOptions(n),o=this.includeOptions(e,r)||r!==i;return this.updateSharedOptions(r,e,n),{sharedOptions:r,includeOptions:o}}updateElement(t,e,n,i){Xd(i)?Object.assign(t,n):this._resolveAnimations(e,i).update(t,n)}updateSharedOptions(t,e,n){t&&!Xd(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,i){t.active=i;const r=this.getStyle(e,i);this._resolveAnimations(e,n,i).update(t,{options:!i&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const i=n.length,r=e.length,o=Math.min(r,i);o&&this.parse(0,o),r>i?this._insertElements(i,r-i,t):r<i&&this._removeElements(r,i-r)}_insertElements(t,e,n=!0){const i=this._cachedMeta,r=i.data,o=t+e;let s;const a=t=>{for(t.length+=e,s=t.length-1;s>=o;s--)t[s]=t[s-e]};for(a(r),s=t;s<o;++s)r[s]=new this.dataElementType;this._parsing&&a(i._parsed),this.parse(t,e),n&&this.updateElements(r,t,e,"reset")}updateElements(t,e,n,i){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(t,e);n._stacked&&Kd(n,i)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,i]=t;this[e](n,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Zd(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let i=[];for(let e=0,r=n.length;e<r;e++)i=i.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=function(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let i,r,o,s,a=e._length;const l=()=>{32767!==o&&-32768!==o&&($u(s)&&(a=Math.min(a,Math.abs(o-s)||a)),s=o)};for(i=0,r=n.length;i<r;++i)o=e.getPixelForValue(n[i]),l();for(s=void 0,i=0,r=e.ticks.length;i<r;++i)o=e.getPixelForTick(i),l();return a}function tf(t,e,n,i){return Au(t)?function(t,e,n,i){const r=n.parse(t[0],i),o=n.parse(t[1],i),s=Math.min(r,o),a=Math.max(r,o);let l=s,c=a;Math.abs(s)>Math.abs(a)&&(l=a,c=s),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:r,end:o,min:s,max:a}}(t,e,n,i):e[n.axis]=n.parse(t,i),e}function ef(t,e,n,i){const r=t.iScale,o=t.vScale,s=r.getLabels(),a=r===o,l=[];let c,u,h,d;for(c=n,u=n+i;c<u;++c)d=e[c],h={},h[r.axis]=a||r.parse(s[c],c),l.push(tf(d,h,o,c));return l}function nf(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function rf(t,e,n,i){let r=e.borderSkipped;const o={};if(!r)return void(t.borderSkipped=o);if(!0===r)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:s,end:a,reverse:l,top:c,bottom:u}=function(t){let e,n,i,r,o;return t.horizontal?(e=t.base>t.x,n="left",i="right"):(e=t.base<t.y,n="bottom",i="top"),e?(r="end",o="start"):(r="start",o="end"),{start:n,end:i,reverse:e,top:r,bottom:o}}(t);"middle"===r&&n&&(t.enableBorderRadius=!0,(n._top||0)===i?r=c:(n._bottom||0)===i?r=u:(o[of(u,s,a,l)]=!0,r=c)),o[of(r,s,a,l)]=!0,t.borderSkipped=o}function of(t,e,n,i){var r,o,s;return i?(s=n,t=sf(t=(r=t)===(o=e)?s:r===s?o:r,n,e)):t=sf(t,e,n),t}function sf(t,e,n){return"start"===t?e:"end"===t?n:t}function af(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}class lf extends Qd{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,n,i){return ef(t,e,n,i)}parseArrayData(t,e,n,i){return ef(t,e,n,i)}parseObjectData(t,e,n,i){const{iScale:r,vScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l="x"===r.axis?s:a,c="x"===o.axis?s:a,u=[];let h,d,f,p;for(h=n,d=n+i;h<d;++h)p=e[h],f={},f[r.axis]=r.parse(Hu(p,l),h),u.push(tf(Hu(p,c),f,o,h));return u}updateRangeFromParsed(t,e,n,i){super.updateRangeFromParsed(t,e,n,i);const r=n._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:i}=e,r=this.getParsed(t),o=r._custom,s=nf(o)?"["+o.start+", "+o.end+"]":""+i.getLabelForValue(r[i.axis]);return{label:""+n.getLabelForValue(r[n.axis]),value:s}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,i){const r="reset"===i,{index:o,_cachedMeta:{vScale:s}}=this,a=s.getBasePixel(),l=s.isHorizontal(),c=this._getRuler(),{sharedOptions:u,includeOptions:h}=this._getSharedOptions(e,i);for(let d=e;d<e+n;d++){const e=this.getParsed(d),n=r||Eu(e[s.axis])?{base:a,head:a}:this._calculateBarValuePixels(d),f=this._calculateBarIndexPixels(d,c),p=(e._stacks||{})[s.axis],g={horizontal:l,base:n.base,enableBorderRadius:!p||nf(e._custom)||o===p._top||o===p._bottom,x:l?n.head:f.center,y:l?f.center:n.head,height:l?f.size:Math.abs(n.size),width:l?Math.abs(n.size):f.size};h&&(g.options=u||this.resolveDataElementOptions(d,t[d].active?"active":i));const m=g.options||t[d].options;rf(g,m,p,o),af(g,m,c.ratio),this.updateElement(t[d],d,g,i)}}_getStacks(t,e){const{iScale:n}=this._cachedMeta,i=n.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),r=n.options.stacked,o=[],s=t=>{const n=t.controller.getParsed(e),i=n&&n[t.vScale.axis];if(Eu(i)||isNaN(i))return!0};for(const n of i)if((void 0===e||!s(n))&&((!1===r||-1===o.indexOf(n.stack)||void 0===r&&void 0===n.stack)&&o.push(n.stack),n.index===t))break;return o.length||o.push(void 0),o}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const i=this._getStacks(t,n),r=void 0!==e?i.indexOf(e):-1;return-1===r?i.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,i=[];let r,o;for(r=0,o=e.data.length;r<o;++r)i.push(n.getPixelForValue(this.getParsed(r)[n.axis],r));const s=t.barThickness;return{min:s||Zd(e),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n,index:i},options:{base:r,minBarLength:o}}=this,s=r||0,a=this.getParsed(t),l=a._custom,c=nf(l);let u,h,d=a[e.axis],f=0,p=n?this.applyStack(e,a,n):d;p!==d&&(f=p-d,p=d),c&&(d=l.barStart,p=l.barEnd-l.barStart,0!==d&&eh(d)!==eh(l.barEnd)&&(f=0),f+=d);const g=Eu(r)||c?f:r;let m=e.getPixelForValue(g);if(u=this.chart.getDataVisibility(t)?e.getPixelForValue(f+p):m,h=u-m,Math.abs(h)<o){h=function(t,e,n){return 0!==t?eh(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(h,e,s)*o,d===s&&(m-=h/2);const t=e.getPixelForDecimal(0),r=e.getPixelForDecimal(1),l=Math.min(t,r),f=Math.max(t,r);m=Math.max(Math.min(m,f),l),u=m+h,n&&!c&&(a._stacks[e.axis]._visualValues[i]=e.getValueForPixel(u)-e.getValueForPixel(m))}if(m===e.getPixelForValue(s)){const t=eh(h)*e.getLineWidthForValue(s)/2;m+=t,h-=t}return{size:h,base:m,head:u,center:u+h/2}}_calculateBarIndexPixels(t,e){const n=e.scale,i=this.options,r=i.skipNull,o=Mu(i.maxBarThickness,1/0);let s,a;if(e.grouped){const n=r?this._getStackCount(t):e.stackCount,l="flex"===i.barThickness?function(t,e,n,i){const r=e.pixels,o=r[t];let s=t>0?r[t-1]:null,a=t<r.length-1?r[t+1]:null;const l=n.categoryPercentage;null===s&&(s=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-s);const c=o-(o-Math.min(s,a))/2*l;return{chunk:Math.abs(a-s)/2*l/i,ratio:n.barPercentage,start:c}}(t,e,i,n):function(t,e,n,i){const r=n.barThickness;let o,s;return Eu(r)?(o=e.min*n.categoryPercentage,s=n.barPercentage):(o=r*i,s=1),{chunk:o/i,ratio:s,start:e.pixels[t]-o/2}}(t,e,i,n),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);s=l.start+l.chunk*c+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else s=n.getPixelForValue(this.getParsed(t)[n.axis],t),a=Math.min(o,e.min*e.ratio);return{base:s-a/2,head:s+a/2,center:s,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,i=n.length;let r=0;for(;r<i;++r)null===this.getParsed(r)[e.axis]||n[r].hidden||n[r].draw(this._ctx)}}function cf(t,e,n,i){const{controller:r,data:o,_sorted:s}=t,a=r._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&s&&o.length){const t=a._reversePixels?dh:hh;if(!i)return t(o,e,n);if(r._sharedOptions){const i=o[0],r="function"==typeof i.getRange&&i.getRange(e);if(r){const i=t(o,e,n-r),s=t(o,e,n+r);return{lo:i.lo,hi:s.hi}}}}return{lo:0,hi:o.length-1}}function uf(t,e,n,i,r){const o=t.getSortedVisibleDatasetMetas(),s=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:a}=o[t],{lo:l,hi:c}=cf(o[t],e,s,r);for(let t=l;t<=c;++t){const e=a[t];e.skip||i(e,n,t)}}}function hf(t,e,n,i,r){const o=[];return r||t.isPointInArea(e)?(uf(t,n,e,(function(n,s,a){(r||Uh(n,t.chartArea,0))&&n.inRange(e.x,e.y,i)&&o.push({element:n,datasetIndex:s,index:a})}),!0),o):o}function df(t,e,n,i,r,o){return o||t.isPointInArea(e)?"r"!==n||i?function(t,e,n,i,r,o){let s=[];const a=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){const r=e?Math.abs(t.x-i.x):0,o=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}(n);let l=Number.POSITIVE_INFINITY;return uf(t,n,e,(function(n,c,u){const h=n.inRange(e.x,e.y,r);if(i&&!h)return;const d=n.getCenterPoint(r);if(!o&&!t.isPointInArea(d)&&!h)return;const f=a(e,d);f<l?(s=[{element:n,datasetIndex:c,index:u}],l=f):f===l&&s.push({element:n,datasetIndex:c,index:u})})),s}(t,e,n,i,r,o):function(t,e,n,i){let r=[];return uf(t,n,e,(function(t,n,o){const{startAngle:s,endAngle:a}=t.getProps(["startAngle","endAngle"],i),{angle:l}=function(t,e){const n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i);let o=Math.atan2(i,n);return o<-.5*Gu&&(o+=Yu),{angle:o,distance:r}}(t,{x:e.x,y:e.y});(function(t,e,n,i){const r=ah(t),o=ah(e),s=ah(n),a=ah(o-r),l=ah(s-r),c=ah(r-o),u=ah(r-s);return r===o||r===s||i&&o===s||a>l&&c<u})(l,s,a)&&r.push({element:t,datasetIndex:n,index:o})})),r}(t,e,n,r):[]}function ff(t,e,n,i,r){const o=[],s="x"===n?"inXRange":"inYRange";let a=!1;return uf(t,n,e,((t,i,l)=>{t[s](e[n],r)&&(o.push({element:t,datasetIndex:i,index:l}),a=a||t.inRange(e.x,e.y,r))})),i&&!a?[]:o}var pf={evaluateInteractionItems:uf,modes:{index(t,e,n,i){const r=Ad(e,t),o=n.axis||"x",s=n.includeInvisible||!1,a=n.intersect?hf(t,r,o,i,s):df(t,r,o,!1,i,s),l=[];return a.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=a[0].index,n=t.data[e];n&&!n.skip&&l.push({element:n,datasetIndex:t.index,index:e})})),l):[]},dataset(t,e,n,i){const r=Ad(e,t),o=n.axis||"xy",s=n.includeInvisible||!1;let a=n.intersect?hf(t,r,o,i,s):df(t,r,o,!1,i,s);if(a.length>0){const e=a[0].datasetIndex,n=t.getDatasetMeta(e).data;a=[];for(let t=0;t<n.length;++t)a.push({element:n[t],datasetIndex:e,index:t})}return a},point:(t,e,n,i)=>hf(t,Ad(e,t),n.axis||"xy",i,n.includeInvisible||!1),nearest(t,e,n,i){const r=Ad(e,t),o=n.axis||"xy",s=n.includeInvisible||!1;return df(t,r,o,n.intersect,i,s)},x:(t,e,n,i)=>ff(t,Ad(e,t),"x",n.intersect,i),y:(t,e,n,i)=>ff(t,Ad(e,t),"y",n.intersect,i)}};const gf=["left","top","right","bottom"];function mf(t,e){return t.filter((t=>t.pos===e))}function bf(t,e){return t.filter((t=>-1===gf.indexOf(t.pos)&&t.box.axis===e))}function yf(t,e){return t.sort(((t,n)=>{const i=e?n:t,r=e?t:n;return i.weight===r.weight?i.index-r.index:i.weight-r.weight}))}function vf(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function _f(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function xf(t,e,n,i){const{pos:r,box:o}=n,s=t.maxPadding;if(!Pu(r)){n.size&&(t[r]-=n.size);const e=i[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[r]+=n.size}o.getPadding&&_f(s,o.getPadding());const a=Math.max(0,e.outerWidth-vf(s,t,"left","right")),l=Math.max(0,e.outerHeight-vf(s,t,"top","bottom")),c=a!==t.w,u=l!==t.h;return t.w=a,t.h=l,n.horizontal?{same:c,other:u}:{same:u,other:c}}function wf(t,e){const n=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],n[t])})),i}(t?["left","right"]:["top","bottom"])}function Sf(t,e,n,i){const r=[];let o,s,a,l,c,u;for(o=0,s=t.length,c=0;o<s;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,wf(a.horizontal,e));const{same:s,other:h}=xf(e,n,a,i);c|=s&&r.length,u=u||h,l.fullSize||r.push(a)}return c&&Sf(r,e,n,i)||u}function Of(t,e,n,i,r){t.top=n,t.left=e,t.right=e+i,t.bottom=n+r,t.width=i,t.height=r}function kf(t,e,n,i){const r=n.padding;let{x:o,y:s}=e;for(const a of t){const t=a.box,l=i[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/l.weight||1;if(a.horizontal){const i=e.w*c,o=l.size||t.height;$u(l.start)&&(s=l.start),t.fullSize?Of(t,r.left,s,n.outerWidth-r.right-r.left,o):Of(t,e.left+l.placed,s,i,o),l.start=s,l.placed+=i,s=t.bottom}else{const i=e.h*c,s=l.size||t.width;$u(l.start)&&(o=l.start),t.fullSize?Of(t,o,r.top,s,n.outerHeight-r.bottom-r.top):Of(t,o,e.top+l.placed,s,i),l.start=o,l.placed+=i,o=t.right}}e.x=o,e.y=s}var Ef={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,i){if(!t)return;const r=id(t.options.layout.padding),o=Math.max(e-r.width,0),s=Math.max(n-r.height,0),a=function(t){const e=function(t){const e=[];let n,i,r,o,s,a;for(n=0,i=(t||[]).length;n<i;++n)r=t[n],({position:o,options:{stack:s,stackWeight:a=1}}=r),e.push({index:n,box:r,pos:o,horizontal:r.isHorizontal(),weight:r.weight,stack:s&&o+s,stackWeight:a});return e}(t),n=yf(e.filter((t=>t.box.fullSize)),!0),i=yf(mf(e,"left"),!0),r=yf(mf(e,"right")),o=yf(mf(e,"top"),!0),s=yf(mf(e,"bottom")),a=bf(e,"x"),l=bf(e,"y");return{fullSize:n,leftAndTop:i.concat(o),rightAndBottom:r.concat(l).concat(s).concat(a),chartArea:mf(e,"chartArea"),vertical:i.concat(r).concat(l),horizontal:o.concat(s).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;Ru(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,h=Object.freeze({outerWidth:e,outerHeight:n,padding:r,availableWidth:o,availableHeight:s,vBoxMaxWidth:o/2/u,hBoxMaxHeight:s/2}),d=Object.assign({},r);_f(d,id(i));const f=Object.assign({maxPadding:d,w:o,h:s,x:r.left,y:r.top},r),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:i,stackWeight:r}=n;if(!t||!gf.includes(i))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:r}=e;let o,s,a;for(o=0,s=t.length;o<s;++o){a=t[o];const{fullSize:s}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*i:s&&e.availableWidth,a.height=r):(a.width=i,a.height=c?c*r:s&&e.availableHeight)}return n}(l.concat(c),h);Sf(a.fullSize,f,h,p),Sf(l,f,h,p),Sf(c,f,h,p)&&Sf(l,f,h,p),function(t){const e=t.maxPadding;function n(n){const i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(f),kf(a.leftAndTop,f,h,p),f.x+=f.w,f.y+=f.h,kf(a.rightAndBottom,f,h,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},Ru(a.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Af{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,i){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):n)}}isAttached(t){return!0}updateConfig(t){}}class Pf extends Af{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Cf="$chartjs",Tf={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Mf=t=>null===t||""===t,Lf=!!Td&&{passive:!0};function Rf(t,e,n){t&&t.canvas&&t.canvas.removeEventListener(e,n,Lf)}function Df(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function jf(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Df(n.addedNodes,i),e=e&&!Df(n.removedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}function If(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||Df(n.removedNodes,i),e=e&&!Df(n.addedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}const Ff=new Map;let Nf=0;function Bf(){const t=window.devicePixelRatio;t!==Nf&&(Nf=t,Ff.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function Vf(t,e,n){const i=t.canvas,r=i&&xd(i);if(!r)return;const o=mh(((t,e)=>{const i=r.clientWidth;n(t,e),i<r.clientWidth&&n()}),window),s=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,i=e.contentRect.height;0===n&&0===i||o(n,i)}));return s.observe(r),function(t,e){Ff.size||window.addEventListener("resize",Bf),Ff.set(t,e)}(t,o),s}function zf(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Ff.delete(t),Ff.size||window.removeEventListener("resize",Bf)}(t)}function Hf(t,e,n){const i=t.canvas,r=mh((e=>{null!==t.ctx&&n(function(t,e){const n=Tf[t.type]||t.type,{x:i,y:r}=Ad(t,e);return{type:n,chart:e,native:t,x:void 0!==i?i:null,y:void 0!==r?r:null}}(e,t))}),t);return function(t,e,n){t&&t.addEventListener(e,n,Lf)}(i,e,r),r}class Uf extends Af{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t[Cf]={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",Mf(r)){const e=Md(t,"width");void 0!==e&&(t.width=e)}if(Mf(i))if(""===t.style.height)t.height=t.width/(e||2);else{const e=Md(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e[Cf])return!1;const n=e[Cf].initial;["height","width"].forEach((t=>{const i=n[t];Eu(i)?e.removeAttribute(t):e.setAttribute(t,i)}));const i=n.style||{};return Object.keys(i).forEach((t=>{e.style[t]=i[t]})),e.width=e.width,delete e[Cf],!0}addEventListener(t,e,n){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),r={attach:jf,detach:If,resize:Vf}[e]||Hf;i[e]=r(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),i=n[e];i&&(({attach:zf,detach:zf,resize:zf}[e]||Rf)(t,e,i),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,i){return function(t,e,n,i){const r=Sd(t),o=kd(r,"margin"),s=wd(r.maxWidth,t,"clientWidth")||Ku,a=wd(r.maxHeight,t,"clientHeight")||Ku,l=function(t,e,n){let i,r;if(void 0===e||void 0===n){const o=t&&xd(t);if(o){const t=o.getBoundingClientRect(),s=Sd(o),a=kd(s,"border","width"),l=kd(s,"padding");e=t.width-l.width-a.width,n=t.height-l.height-a.height,i=wd(s.maxWidth,o,"clientWidth"),r=wd(s.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:i||Ku,maxHeight:r||Ku}}(t,e,n);let{width:c,height:u}=l;if("content-box"===r.boxSizing){const t=kd(r,"border","width"),e=kd(r,"padding");c-=e.width+t.width,u-=e.height+t.height}return c=Math.max(0,c-o.width),u=Math.max(0,i?c/i:u-o.height),c=Pd(Math.min(c,s,l.maxWidth)),u=Pd(Math.min(u,a,l.maxHeight)),c&&!u&&(u=Pd(c/2)),(void 0!==e||void 0!==n)&&i&&l.height&&u>l.height&&(u=l.height,c=Pd(Math.floor(u*i))),{width:c,height:u}}(t,e,n,i)}isAttached(t){const e=t&&xd(t);return!(!e||!e.isConnected)}}class $f{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return rh(this.x)&&rh(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const i={};return t.forEach((t=>{i[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),i}}function Wf(t,e,n,i,r){const o=Mu(i,0),s=Math.min(Mu(r,t.length),t.length);let a,l,c,u=0;for(n=Math.ceil(n),r&&(a=r-i,n=a/Math.floor(a/n)),c=o;c<0;)u++,c=Math.round(o+u*n);for(l=Math.max(o,0);l<s;l++)l===c&&(e.push(t[l]),u++,c=Math.round(o+u*n))}const qf=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n,Gf=(t,e)=>Math.min(e||t,t);function Yf(t,e){const n=[],i=t.length/e,r=t.length;let o=0;for(;o<r;o+=i)n.push(t[Math.floor(o)]);return n}function Kf(t,e,n){const i=t.ticks.length,r=Math.min(e,i-1),o=t._startPixel,s=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(r);if(!(n&&(l=1===i?Math.max(c-o,s-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(r-1))/2,c+=r<e?l:-l,c<o-a||c>s+a)))return c}function Xf(t){return t.drawTicks?t.tickLength:0}function Jf(t,e){if(!t.display)return 0;const n=rd(t.font,e),i=id(t.padding);return(Au(t.text)?t.text.length:1)*n.lineHeight+i.height}function Qf(t,e,n){let i=bh(t);return(n&&"right"!==e||!n&&"right"===e)&&(i=(t=>"left"===t?"right":"right"===t?"left":t)(i)),i}class Zf extends $f{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:i}=this;return t=Tu(t,Number.POSITIVE_INFINITY),e=Tu(e,Number.NEGATIVE_INFINITY),n=Tu(n,Number.POSITIVE_INFINITY),i=Tu(i,Number.NEGATIVE_INFINITY),{min:Tu(t,n),max:Tu(e,i),minDefined:Cu(t),maxDefined:Cu(e)}}getMinMax(t){let e,{min:n,max:i,minDefined:r,maxDefined:o}=this.getUserBounds();if(r&&o)return{min:n,max:i};const s=this.getMatchingVisibleMetas();for(let a=0,l=s.length;a<l;++a)e=s[a].controller.getMinMax(this,t),r||(n=Math.min(n,e.min)),o||(i=Math.max(i,e.max));return n=o&&n>i?i:n,i=r&&n>i?n:i,{min:Tu(n,Tu(i,n)),max:Tu(i,Tu(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){Lu(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:i,grace:r,ticks:o}=this.options,s=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,n){const{min:i,max:r}=t,o=(l=(r-i)/2,"string"==typeof(a=e)&&a.endsWith("%")?parseFloat(a)/100*l:+a),s=(t,e)=>n&&0===t?0:t+e;var a,l;return{min:s(i,-Math.abs(o)),max:s(r,o)}}(this,r,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=s<this.ticks.length;this._convertTicksToLabels(a?Yf(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const n=t.options.ticks,i=function(t){const e=t.options.offset,n=t._tickSize(),i=t._length/n+(e?0:1),r=t._maxLength/n;return Math.floor(Math.min(i,r))}(t),r=Math.min(n.maxTicksLimit||i,i),o=n.major.enabled?function(t){const e=[];let n,i;for(n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(e):[],s=o.length,a=o[0],l=o[s-1],c=[];if(s>r)return function(t,e,n,i){let r,o=0,s=n[0];for(i=Math.ceil(i),r=0;r<t.length;r++)r===s&&(e.push(t[r]),o++,s=n[o*i])}(e,c,o,s/r),c;const u=function(t,e,n){const i=function(t){const e=t.length;let n,i;if(e<2)return!1;for(i=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==i)return!1;return i}(t),r=e.length/n;if(!i)return Math.max(r,1);const o=function(t){const e=[],n=Math.sqrt(t);let i;for(i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(i);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>r)return e}return Math.max(r,1)}(o,e,r);if(s>0){let t,n;const i=s>1?Math.round((l-a)/(s-1)):null;for(Wf(e,c,u,Eu(i)?0:a-i,a),t=0,n=s-1;t<n;t++)Wf(e,c,u,o[t],o[t+1]);return Wf(e,c,u,l,Eu(i)?e.length:l+i),c}return Wf(e,c,u),c}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){Lu(this.options.afterUpdate,[this])}beforeSetDimensions(){Lu(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){Lu(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),Lu(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){Lu(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,i,r;for(n=0,i=t.length;n<i;n++)r=t[n],r.label=Lu(e.callback,[r.value,n,t],this)}afterTickToLabelConversion(){Lu(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){Lu(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=Gf(this.ticks.length,t.ticks.maxTicksLimit),i=e.minRotation||0,r=e.maxRotation;let o,s,a,l=i;if(!this._isVisible()||!e.display||i>=r||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const c=this._getLabelSizes(),u=c.widest.width,h=c.highest.height,d=lh(this.chart.width-u,0,this.maxWidth);o=t.offset?this.maxWidth/n:d/(n-1),u+6>o&&(o=d/(n-(t.offset?.5:1)),s=this.maxHeight-Xf(t.grid)-e.padding-Jf(t.title,this.chart.options.font),a=Math.sqrt(u*u+h*h),l=Math.min(Math.asin(lh((c.highest.height+6)/o,-1,1)),Math.asin(lh(s/a,-1,1))-Math.asin(lh(h/a,-1,1)))*(180/Gu),l=Math.max(i,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){Lu(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){Lu(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:i,grid:r}}=this,o=this._isVisible(),s=this.isHorizontal();if(o){const o=Jf(i,e.options.font);if(s?(t.width=this.maxWidth,t.height=Xf(r)+o):(t.height=this.maxHeight,t.width=Xf(r)+o),n.display&&this.ticks.length){const{first:e,last:i,widest:r,highest:o}=this._getLabelSizes(),a=2*n.padding,l=oh(this.labelRotation),c=Math.cos(l),u=Math.sin(l);if(s){const e=n.mirror?0:u*r.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=n.mirror?0:c*r.width+u*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,i,u,c)}}this._handleMargins(),s?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,i){const{ticks:{align:r,padding:o},position:s}=this.options,a=0!==this.labelRotation,l="top"!==s&&"x"===this.axis;if(this.isHorizontal()){const s=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,h=0;a?l?(u=i*t.width,h=n*e.height):(u=n*t.height,h=i*e.width):"start"===r?h=e.width:"end"===r?u=t.width:"inner"!==r&&(u=t.width/2,h=e.width/2),this.paddingLeft=Math.max((u-s+o)*this.width/(this.width-s),0),this.paddingRight=Math.max((h-c+o)*this.width/(this.width-c),0)}else{let n=e.height/2,i=t.height/2;"start"===r?(n=0,i=t.height):"end"===r&&(n=e.height,i=0),this.paddingTop=n+o,this.paddingBottom=i+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){Lu(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)Eu(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=Yf(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,n){const{ctx:i,_longestTextCache:r}=this,o=[],s=[],a=Math.floor(e/Gf(e,n));let l,c,u,h,d,f,p,g,m,b,y,v=0,_=0;for(l=0;l<e;l+=a){if(h=t[l].label,d=this._resolveTickFontOptions(l),i.font=f=d.string,p=r[f]=r[f]||{data:{},gc:[]},g=d.lineHeight,m=b=0,Eu(h)||Au(h)){if(Au(h))for(c=0,u=h.length;c<u;++c)y=h[c],Eu(y)||Au(y)||(m=Nh(i,p.data,p.gc,m,y),b+=g)}else m=Nh(i,p.data,p.gc,m,h),b=g;o.push(m),s.push(b),v=Math.max(m,v),_=Math.max(b,_)}!function(t,e){Ru(t,(t=>{const n=t.gc,i=n.length/2;let r;if(i>e){for(r=0;r<i;++r)delete t.data[n[r]];n.splice(0,i)}}))}(r,e);const x=o.indexOf(v),w=s.indexOf(_),S=t=>({width:o[t]||0,height:s[t]||0});return{first:S(0),last:S(e-1),widest:S(x),highest:S(w),widths:o,heights:s}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return lh(this._alignToPixels?Bh(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return sd(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=sd(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=oh(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,s=r?r.widest.width+o:0,a=r?r.highest.height+o:0;return this.isHorizontal()?a*n>s*i?s/n:a/i:a*i<s*n?a/n:s/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,i=this.options,{grid:r,position:o,border:s}=i,a=r.offset,l=this.isHorizontal(),c=this.ticks.length+(a?1:0),u=Xf(r),h=[],d=s.setContext(this.getContext()),f=d.display?d.width:0,p=f/2,g=function(t){return Bh(n,t,f)};let m,b,y,v,_,x,w,S,O,k,E,A;if("top"===o)m=g(this.bottom),x=this.bottom-u,S=m-p,k=g(t.top)+p,A=t.bottom;else if("bottom"===o)m=g(this.top),k=t.top,A=g(t.bottom)-p,x=m+p,S=this.top+u;else if("left"===o)m=g(this.right),_=this.right-u,w=m-p,O=g(t.left)+p,E=t.right;else if("right"===o)m=g(this.left),O=t.left,E=g(t.right)-p,_=m+p,w=this.left+u;else if("x"===e){if("center"===o)m=g((t.top+t.bottom)/2+.5);else if(Pu(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}k=t.top,A=t.bottom,x=m+p,S=x+u}else if("y"===e){if("center"===o)m=g((t.left+t.right)/2);else if(Pu(o)){const t=Object.keys(o)[0],e=o[t];m=g(this.chart.scales[t].getPixelForValue(e))}_=m-p,w=_-u,O=t.left,E=t.right}const P=Mu(i.ticks.maxTicksLimit,c),C=Math.max(1,Math.ceil(c/P));for(b=0;b<c;b+=C){const t=this.getContext(b),e=r.setContext(t),i=s.setContext(t),o=e.lineWidth,c=e.color,u=i.dash||[],d=i.dashOffset,f=e.tickWidth,p=e.tickColor,g=e.tickBorderDash||[],m=e.tickBorderDashOffset;y=Kf(this,b,a),void 0!==y&&(v=Bh(n,y,o),l?_=w=O=E=v:x=S=k=A=v,h.push({tx1:_,ty1:x,tx2:w,ty2:S,x1:O,y1:k,x2:E,y2:A,width:o,color:c,borderDash:u,borderDashOffset:d,tickWidth:f,tickColor:p,tickBorderDash:g,tickBorderDashOffset:m}))}return this._ticksLength=c,this._borderValue=m,h}_computeLabelItems(t){const e=this.axis,n=this.options,{position:i,ticks:r}=n,o=this.isHorizontal(),s=this.ticks,{align:a,crossAlign:l,padding:c,mirror:u}=r,h=Xf(n.grid),d=h+c,f=u?-c:d,p=-oh(this.labelRotation),g=[];let m,b,y,v,_,x,w,S,O,k,E,A,P="middle";if("top"===i)x=this.bottom-f,w=this._getXAxisLabelAlignment();else if("bottom"===i)x=this.top+f,w=this._getXAxisLabelAlignment();else if("left"===i){const t=this._getYAxisLabelAlignment(h);w=t.textAlign,_=t.x}else if("right"===i){const t=this._getYAxisLabelAlignment(h);w=t.textAlign,_=t.x}else if("x"===e){if("center"===i)x=(t.top+t.bottom)/2+d;else if(Pu(i)){const t=Object.keys(i)[0],e=i[t];x=this.chart.scales[t].getPixelForValue(e)+d}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===i)_=(t.left+t.right)/2-d;else if(Pu(i)){const t=Object.keys(i)[0],e=i[t];_=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(h).textAlign}"y"===e&&("start"===a?P="top":"end"===a&&(P="bottom"));const C=this._getLabelSizes();for(m=0,b=s.length;m<b;++m){y=s[m],v=y.label;const t=r.setContext(this.getContext(m));S=this.getPixelForTick(m)+r.labelOffset,O=this._resolveTickFontOptions(m),k=O.lineHeight,E=Au(v)?v.length:1;const e=E/2,n=t.color,a=t.textStrokeColor,c=t.textStrokeWidth;let h,d=w;if(o?(_=S,"inner"===w&&(d=m===b-1?this.options.reverse?"left":"right":0===m?this.options.reverse?"right":"left":"center"),A="top"===i?"near"===l||0!==p?-E*k+k/2:"center"===l?-C.highest.height/2-e*k+k:-C.highest.height+k/2:"near"===l||0!==p?k/2:"center"===l?C.highest.height/2-e*k:C.highest.height-E*k,u&&(A*=-1),0===p||t.showLabelBackdrop||(_+=k/2*Math.sin(p))):(x=S,A=(1-E)*k/2),t.showLabelBackdrop){const e=id(t.backdropPadding),n=C.heights[m],i=C.widths[m];let r=A-e.top,o=0-e.left;switch(P){case"middle":r-=n/2;break;case"bottom":r-=n}switch(w){case"center":o-=i/2;break;case"right":o-=i;break;case"inner":m===b-1?o-=i:m>0&&(o-=i/2)}h={left:o,top:r,width:i+e.width,height:n+e.height,color:t.backdropColor}}g.push({label:v,font:O,textOffset:A,options:{rotation:p,color:n,strokeColor:a,strokeWidth:c,textAlign:d,textBaseline:P,translation:[_,x],backdrop:h}})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-oh(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align?n="right":"inner"===e.align&&(n="inner"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:i,padding:r}}=this.options,o=t+r,s=this._getLabelSizes().widest.width;let a,l;return"left"===e?i?(l=this.right+r,"near"===n?a="left":"center"===n?(a="center",l+=s/2):(a="right",l+=s)):(l=this.right-o,"near"===n?a="right":"center"===n?(a="center",l-=s/2):(a="left",l=this.left)):"right"===e?i?(l=this.left+r,"near"===n?a="right":"center"===n?(a="center",l-=s/2):(a="left",l-=s)):(l=this.left+o,"near"===n?a="left":"center"===n?(a="center",l+=s/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:i,width:r,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,i,r,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,o;const s=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(r=0,o=i.length;r<o;++r){const t=i[r];e.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:n,grid:i}}=this,r=n.setContext(this.getContext()),o=n.display?r.width:0;if(!o)return;const s=i.setContext(this.getContext(0)).lineWidth,a=this._borderValue;let l,c,u,h;this.isHorizontal()?(l=Bh(t,this.left,o)-o/2,c=Bh(t,this.right,s)+s/2,u=h=a):(u=Bh(t,this.top,o)-o/2,h=Bh(t,this.bottom,s)+s/2,l=c=a),e.save(),e.lineWidth=r.width,e.strokeStyle=r.color,e.beginPath(),e.moveTo(l,u),e.lineTo(c,h),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&$h(e,n);const i=this.getLabelItems(t);for(const t of i){const n=t.options,i=t.font;Yh(e,t.label,0,t.textOffset,i,n)}n&&Wh(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:i}}=this;if(!n.display)return;const r=rd(n.font),o=id(n.padding),s=n.align;let a=r.lineHeight/2;"bottom"===e||"center"===e||Pu(e)?(a+=o.bottom,Au(n.text)&&(a+=r.lineHeight*(n.text.length-1))):a+=o.top;const{titleX:l,titleY:c,maxWidth:u,rotation:h}=function(t,e,n,i){const{top:r,left:o,bottom:s,right:a,chart:l}=t,{chartArea:c,scales:u}=l;let h,d,f,p=0;const g=s-r,m=a-o;if(t.isHorizontal()){if(d=yh(i,o,a),Pu(n)){const t=Object.keys(n)[0],i=n[t];f=u[t].getPixelForValue(i)+g-e}else f="center"===n?(c.bottom+c.top)/2+g-e:qf(t,n,e);h=a-o}else{if(Pu(n)){const t=Object.keys(n)[0],i=n[t];d=u[t].getPixelForValue(i)-m+e}else d="center"===n?(c.left+c.right)/2-m+e:qf(t,n,e);f=yh(i,s,r),p="left"===n?-Ju:Ju}return{titleX:d,titleY:f,maxWidth:h,rotation:p}}(this,a,e,s);Yh(t,n.text,0,0,r,{color:n.color,maxWidth:u,rotation:h,textAlign:Qf(s,e,i),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=Mu(t.grid&&t.grid.z,-1),i=Mu(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Zf.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:i,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let r,o;for(r=0,o=e.length;r<o;++r){const o=e[r];o[n]!==this.id||t&&o.type!==t||i.push(o)}return i}_resolveTickFontOptions(t){return rd(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class tp{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const i=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in i||(i[r]=t,function(t,e,n){const i=Nu(Object.create(null),[n?Fh.get(n):{},Fh.get(e),t.defaults]);Fh.set(e,i),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const i=n.split("."),r=i.pop(),o=[t].concat(i).join("."),s=e[n].split("."),a=s.pop(),l=s.join(".");Fh.route(o,r,l,a)}))}(e,t.defaultRoutes),t.descriptors&&Fh.describe(e,t.descriptors)}(t,o,n),this.override&&Fh.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,i=this.scope;n in e&&delete e[n],i&&n in Fh[i]&&(delete Fh[i][n],this.override&&delete Lh[n])}}class ep{constructor(){this.controllers=new tp(Qd,"datasets",!0),this.elements=new tp($f,"elements"),this.plugins=new tp(Object,"plugins"),this.scales=new tp(Zf,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const i=n||this._getRegistryForType(e);n||i.isForType(e)||i===this.plugins&&e.id?this._exec(t,i,e):Ru(e,(e=>{const i=n||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,n){const i=Uu(t);Lu(n["before"+i],[],n),e[t](n),Lu(n["after"+i],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+n+".");return i}}var np=new ep;class ip{constructor(){this._init=[]}notify(t,e,n,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=i?this._descriptors(t).filter(i):this._descriptors(t),o=this._notify(r,t,e,n);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,n,i){i=i||{};for(const r of t){const t=r.plugin;if(!1===Lu(t[n],[e,i,r.options],t)&&i.cancelable)return!1}return!0}invalidate(){Eu(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,i=Mu(n.options&&n.options.plugins,{}),r=function(t){const e={},n=[],i=Object.keys(np.plugins.items);for(let t=0;t<i.length;t++)n.push(np.getPlugin(i[t]));const r=t.plugins||[];for(let t=0;t<r.length;t++){const i=r[t];-1===n.indexOf(i)&&(n.push(i),e[i.id]=!0)}return{plugins:n,localIds:e}}(n);return!1!==i||e?function(t,{plugins:e,localIds:n},i,r){const o=[],s=t.getContext();for(const a of e){const e=a.id,l=rp(i[e],r);null!==l&&o.push({plugin:a,options:op(t.config,{plugin:a,local:n[e]},l,s)})}return o}(t,r,i,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,n),t,"stop"),this._notify(i(n,e),t,"start")}}function rp(t,e){return e||!1!==t?!0===t?{}:t:null}function op(t,{plugin:e,local:n},i,r){const o=t.pluginScopeKeys(e),s=t.getOptionScopes(i,o);return n&&e.defaults&&s.push(e.defaults),t.createResolver(s,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function sp(t,e){const n=Fh.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function ap(t){if("x"===t||"y"===t||"r"===t)return t}function lp(t,...e){if(ap(t))return t;for(const i of e){const e=i.axis||("top"===(n=i.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.length>1&&ap(t[0].toLowerCase());if(e)return e}var n;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function cp(t,e,n){if(n[e+"AxisID"]===t)return{axis:e}}function up(t){const e=t.options||(t.options={});e.plugins=Mu(e.plugins,{}),e.scales=function(t,e){const n=Lh[t.type]||{scales:{}},i=e.scales||{},r=sp(t.type,e),o=Object.create(null);return Object.keys(i).forEach((e=>{const s=i[e];if(!Pu(s))return console.error(`Invalid scale configuration for scale: ${e}`);if(s._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const a=lp(e,s,function(t,e){if(e.data&&e.data.datasets){const n=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(n.length)return cp(t,"x",n[0])||cp(t,"y",n[0])}return{}}(e,t),Fh.scales[s.type]),l=function(t,e){return t===e?"_index_":"_value_"}(a,r),c=n.scales||{};o[e]=Bu(Object.create(null),[{axis:a},s,c[a],c[l]])})),t.data.datasets.forEach((n=>{const r=n.type||t.type,s=n.indexAxis||sp(r,e),a=(Lh[r]||{}).scales||{};Object.keys(a).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,s),r=n[e+"AxisID"]||e;o[r]=o[r]||Object.create(null),Bu(o[r],[{axis:e},i[r],a[t]])}))})),Object.keys(o).forEach((t=>{const e=o[t];Bu(e,[Fh.scales[e.type],Fh.scale])})),o}(t,e)}function hp(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const dp=new Map,fp=new Set;function pp(t,e){let n=dp.get(t);return n||(n=e(),dp.set(t,n),fp.add(n)),n}const gp=(t,e,n)=>{const i=Hu(e,n);void 0!==i&&t.add(i)};class mp{constructor(t){this._config=function(t){return(t=t||{}).data=hp(t.data),up(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=hp(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),up(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return pp(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return pp(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return pp(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return pp(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let i=n.get(t);return i&&!e||(i=new Map,n.set(t,i)),i}getOptionScopes(t,e,n){const{options:i,type:r}=this,o=this._cachedScopes(t,n),s=o.get(e);if(s)return s;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>gp(a,t,e)))),e.forEach((t=>gp(a,i,t))),e.forEach((t=>gp(a,Lh[r]||{},t))),e.forEach((t=>gp(a,Fh,t))),e.forEach((t=>gp(a,Rh,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),fp.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,Lh[e]||{},Fh.datasets[e]||{},{type:e},Fh,Rh]}resolveNamedOptions(t,e,n,i=[""]){const r={$shared:!0},{resolver:o,subPrefixes:s}=bp(this._resolverCache,t,i);let a=o;(function(t,e){const{isScriptable:n,isIndexable:i}=cd(t);for(const r of e){const e=n(r),o=i(r),s=(o||e)&&t[r];if(e&&(Wu(s)||yp(s))||o&&Au(s))return!0}return!1})(o,e)&&(r.$shared=!1,a=ld(o,n=Wu(n)?n():n,this.createResolver(t,n,s)));for(const t of e)r[t]=a[t];return r}createResolver(t,e,n=[""],i){const{resolver:r}=bp(this._resolverCache,t,n);return Pu(e)?ld(r,e,void 0,i):r}}function bp(t,e,n){let i=t.get(e);i||(i=new Map,t.set(e,i));const r=n.join();let o=i.get(r);return o||(o={resolver:ad(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},i.set(r,o)),o}const yp=t=>Pu(t)&&Object.getOwnPropertyNames(t).some((e=>Wu(t[e]))),vp=["top","bottom","left","right","chartArea"];function _p(t,e){return"top"===t||"bottom"===t||-1===vp.indexOf(t)&&"x"===e}function xp(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}function wp(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),Lu(n&&n.onComplete,[t],e)}function Sp(t){const e=t.chart,n=e.options.animation;Lu(n&&n.onProgress,[t],e)}function Op(t){return _d()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const kp={},Ep=t=>{const e=Op(t);return Object.values(kp).filter((t=>t.canvas===e)).pop()};function Ap(t,e,n){const i=Object.keys(t);for(const r of i){const i=+r;if(i>=e){const o=t[r];delete t[r],(n>0||i>e)&&(t[i+n]=o)}}}function Pp(t,e,n){return t.options.clip?t[n]:e[n]}class Cp{static defaults=Fh;static instances=kp;static overrides=Lh;static registry=np;static version="4.4.3";static getChart=Ep;static register(...t){np.add(...t),Tp()}static unregister(...t){np.remove(...t),Tp()}constructor(t,e){const n=this.config=new mp(e),i=Op(t),r=Ep(i);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas with ID '"+r.canvas.id+"' can be reused.");const o=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||function(t){return!_d()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Pf:Uf}(i)),this.platform.updateConfig(n);const s=this.platform.acquireContext(i,o.aspectRatio),a=s&&s.canvas,l=a&&a.height,c=a&&a.width;this.id=ku(),this.ctx=s,this.canvas=a,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new ip,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(...i){return e?(clearTimeout(n),n=setTimeout(t,e,i)):t.apply(this,i),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],kp[this.id]=this,s&&a?(Id.listen(this,"complete",wp),Id.listen(this,"progress",Sp),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:i,_aspectRatio:r}=this;return Eu(t)?e&&r?r:i?n/i:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return np}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():Cd(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return Vh(this.canvas,this.ctx),this}stop(){return Id.stop(this),this}resize(t,e){Id.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,i=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(i,t,e,r),s=n.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,Cd(this,s,!0)&&(this.notifyPlugins("resize",{size:o}),Lu(n.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){Ru(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,i=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const n=e[t],i=lp(t,n),r="r"===i,o="x"===i;return{options:n,dposition:r?"chartArea":o?"bottom":"left",dtype:r?"radialLinear":o?"category":"linear"}})))),Ru(r,(e=>{const r=e.options,o=r.id,s=lp(o,r),a=Mu(r.type,e.dtype);void 0!==r.position&&_p(r.position,s)===_p(e.dposition)||(r.position=e.dposition),i[o]=!0;let l=null;o in n&&n[o].type===a?l=n[o]:(l=new(np.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),n[l.id]=l),l.init(r,t)})),Ru(i,((t,e)=>{t||delete n[e]})),Ru(n,(t=>{Ef.configure(this,t,t.options),Ef.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(xp("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=e.length;n<i;n++){const i=e[n];let r=this.getDatasetMeta(n);const o=i.type||this.config.type;if(r.type&&r.type!==o&&(this._destroyDatasetMeta(n),r=this.getDatasetMeta(n)),r.type=o,r.indexAxis=i.indexAxis||sp(o,this.options),r.order=i.order||0,r.index=n,r.label=""+i.label,r.visible=this.isDatasetVisible(n),r.controller)r.controller.updateIndex(n),r.controller.linkScales();else{const e=np.getController(o),{datasetElementType:i,dataElementType:s}=Fh.datasets[o];Object.assign(e,{dataElementType:np.getElement(s),datasetElementType:i&&np.getElement(i)}),r.controller=new e(this,n),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){Ru(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!i&&-1===r.indexOf(e);e.buildOrUpdateElements(n),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),i||Ru(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(xp("z","_idx"));const{_active:s,_lastEvent:a}=this;a?this._eventHandler(a,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){Ru(this.scales,(t=>{Ef.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);qu(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:i,count:r}of e)Ap(t,i,"_removeElements"===n?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),i=n(0);for(let t=1;t<e;t++)if(!qu(i,n(t)))return;return Array.from(i).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Ef.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],Ru(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,Wu(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),i={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(Id.has(this)?this.attached&&!Id.running(this)&&Id.start(this):(this.draw(),wp({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let i,r;for(i=0,r=e.length;i<r;++i){const r=e[i];t&&!r.visible||n.push(r)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n=t._clip,i=!n.disabled,r=function(t,e){const{xScale:n,yScale:i}=t;return n&&i?{left:Pp(n,e,"left"),right:Pp(n,e,"right"),top:Pp(i,e,"top"),bottom:Pp(i,e,"bottom")}:e}(t,this.chartArea),o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(i&&$h(e,{left:!1===n.left?0:r.left-n.left,right:!1===n.right?this.width:r.right+n.right,top:!1===n.top?0:r.top-n.top,bottom:!1===n.bottom?this.height:r.bottom+n.bottom}),t.controller.draw(),i&&Wh(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(t){return Uh(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,n,i){const r=pf.modes[e];return"function"==typeof r?r(this,t,n,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let i=n.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=sd(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const i=n?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,i);$u(e)?(r.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),o.update(r,{visible:n}),this.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),Id.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),Vh(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete kp[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};Ru(this.options.events,(t=>n(t,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(n,i)=>{t[n]&&(e.removeEventListener(this,n,i),delete t[n])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const s=()=>{i("attach",s),this.attached=!0,this.resize(),n("resize",r),n("detach",o)};o=()=>{this.attached=!1,i("resize",r),this._stop(),this._resize(0,0),n("attach",s)},e.isAttached(this.canvas)?s():o()}unbindEvents(){Ru(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},Ru(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const i=n?"set":"remove";let r,o,s,a;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+i+"DatasetHoverStyle"]()),s=0,a=t.length;s<a;++s){o=t[s];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[i+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!Du(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,n){const i=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=r(e,t),s=n?t:r(t,e);o.length&&this.updateHoverStyle(o,i.mode,!1),s.length&&i.mode&&this.updateHoverStyle(s,i.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const r=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(r||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:i=[],options:r}=this,o=e,s=this._getActiveElements(t,i,n,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,n,i){return n&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,n,a);n&&(this._lastEvent=null,Lu(r.onHover,[t,s,this],this),a&&Lu(r.onClick,[t,s,this],this));const c=!Du(s,i);return(c||e)&&(this._active=s,this._updateHoverStyles(s,i,e)),this._lastEvent=l,c}_getActiveElements(t,e,n,i){if("mouseout"===t.type)return[];if(!n)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,i)}}function Tp(){return Ru(Cp.instances,(t=>t._plugins.invalidate()))}function Mp(t,e){const{x:n,y:i,base:r,width:o,height:s}=t.getProps(["x","y","base","width","height"],e);let a,l,c,u,h;return t.horizontal?(h=s/2,a=Math.min(n,r),l=Math.max(n,r),c=i-h,u=i+h):(h=o/2,a=n-h,l=n+h,c=Math.min(i,r),u=Math.max(i,r)),{left:a,top:c,right:l,bottom:u}}function Lp(t,e,n,i){return t?0:lh(e,n,i)}function Rp(t,e,n,i){const r=null===e,o=null===n,s=t&&!(r&&o)&&Mp(t,i);return s&&(r||ch(e,s.left,s.right))&&(o||ch(n,s.top,s.bottom))}function Dp(t,e){t.rect(e.x,e.y,e.w,e.h)}function jp(t,e,n={}){const i=t.x!==n.x?-e:0,r=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-i,s=(t.y+t.h!==n.y+n.h?e:0)-r;return{x:t.x+i,y:t.y+r,w:t.w+o,h:t.h+s,radius:t.radius}}class Ip extends $f{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:i}}=this,{inner:r,outer:o}=function(t){const e=Mp(t),n=e.right-e.left,i=e.bottom-e.top,r=function(t,e,n){const i=t.options.borderWidth,r=t.borderSkipped,o=ed(i);return{t:Lp(r.top,o.top,0,n),r:Lp(r.right,o.right,0,e),b:Lp(r.bottom,o.bottom,0,n),l:Lp(r.left,o.left,0,e)}}(t,n/2,i/2),o=function(t,e,n){const{enableBorderRadius:i}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,o=nd(r),s=Math.min(e,n),a=t.borderSkipped,l=i||Pu(r);return{topLeft:Lp(!l||a.top||a.left,o.topLeft,0,s),topRight:Lp(!l||a.top||a.right,o.topRight,0,s),bottomLeft:Lp(!l||a.bottom||a.left,o.bottomLeft,0,s),bottomRight:Lp(!l||a.bottom||a.right,o.bottomRight,0,s)}}(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i,radius:o},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,o.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(r.b,r.r))}}}}(this),s=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?Kh:Dp;var a;t.save(),o.w===r.w&&o.h===r.h||(t.beginPath(),s(t,jp(o,e,r)),t.clip(),s(t,jp(r,-e,o)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),s(t,jp(r,e)),t.fillStyle=i,t.fill(),t.restore()}inRange(t,e,n){return Rp(this,t,e,n)}inXRange(t,e){return Rp(this,t,null,e)}inYRange(t,e){return Rp(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:i,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+i)/2:e,y:r?n:(n+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}const Fp=(t,e)=>{let{boxHeight:n=e,boxWidth:i=e}=t;return t.usePointStyle&&(n=Math.min(n,e),i=t.pointStyleWidth||Math.min(i,e)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(e,n)}};class Np extends $f{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=Lu(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,i=rd(n.font),r=i.size,o=this._computeTitleHeight(),{boxWidth:s,itemHeight:a}=Fp(n,r);let l,c;e.font=i.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,r,s,a)+10):(c=this.maxHeight,l=this._fitCols(o,i,s,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,i){const{ctx:r,maxWidth:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=i+s;let u=t;r.textAlign="left",r.textBaseline="middle";let h=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=n+e/2+r.measureText(t.text).width;(0===f||l[l.length-1]+p+2*s>o)&&(u+=c,l[l.length-(f>0?0:1)]=0,d+=c,h++),a[f]={left:0,top:d,row:h,width:p,height:i},l[l.length-1]+=p+s})),u}_fitCols(t,e,n,i){const{ctx:r,maxHeight:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let u=s,h=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:g,itemHeight:m}=function(t,e,n,i,r){const o=function(t,e,n,i){let r=t.text;return r&&"string"!=typeof r&&(r=r.reduce(((t,e)=>t.length>e.length?t:e))),e+n.size/2+i.measureText(r).width}(i,t,e,n),s=function(t,e,n){let i=t;return"string"!=typeof e.text&&(i=Bp(e,n)),i}(r,i,e.lineHeight);return{itemWidth:o,itemHeight:s}}(n,e,r,t,i);o>0&&d+m+2*s>c&&(u+=h+s,l.push({width:h,height:d}),f+=h+s,p++,h=d=0),a[o]={left:f,top:d,col:p,width:g,height:m},h=Math.max(h,g),d+=m+s})),u+=h,l.push({width:h,height:d}),u}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:i},rtl:r}}=this,o=Ld(r,this.left,this.width);if(this.isHorizontal()){let r=0,s=yh(n,this.left+i,this.right-this.lineWidths[r]);for(const a of e)r!==a.row&&(r=a.row,s=yh(n,this.left+i,this.right-this.lineWidths[r])),a.top+=this.top+t+i,a.left=o.leftForLtr(o.x(s),a.width),s+=a.width+i}else{let r=0,s=yh(n,this.top+t+i,this.bottom-this.columnSizes[r].height);for(const a of e)a.col!==r&&(r=a.col,s=yh(n,this.top+t+i,this.bottom-this.columnSizes[r].height)),a.top=s,a.left+=this.left+i,a.left=o.leftForLtr(o.x(a.left),a.width),s+=a.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;$h(t,this),this._draw(),Wh(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:i}=this,{align:r,labels:o}=t,s=Fh.color,a=Ld(t.rtl,this.left,this.width),l=rd(o.font),{padding:c}=o,u=l.size,h=u/2;let d;this.drawTitle(),i.textAlign=a.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=l.string;const{boxWidth:f,boxHeight:p,itemHeight:g}=Fp(o,u),m=this.isHorizontal(),b=this._computeTitleHeight();d=m?{x:yh(r,this.left+c,this.right-n[0]),y:this.top+c+b,line:0}:{x:this.left+c,y:yh(r,this.top+b+c,this.bottom-e[0].height),line:0},Rd(this.ctx,t.textDirection);const y=g+c;this.legendItems.forEach(((v,_)=>{i.strokeStyle=v.fontColor,i.fillStyle=v.fontColor;const x=i.measureText(v.text).width,w=a.textAlign(v.textAlign||(v.textAlign=o.textAlign)),S=f+h+x;let O=d.x,k=d.y;if(a.setWidth(this.width),m?_>0&&O+S+c>this.right&&(k=d.y+=y,d.line++,O=d.x=yh(r,this.left+c,this.right-n[d.line])):_>0&&k+y>this.bottom&&(O=d.x=O+e[d.line].width+c,d.line++,k=d.y=yh(r,this.top+b+c,this.bottom-e[d.line].height)),function(t,e,n){if(isNaN(f)||f<=0||isNaN(p)||p<0)return;i.save();const r=Mu(n.lineWidth,1);if(i.fillStyle=Mu(n.fillStyle,s),i.lineCap=Mu(n.lineCap,"butt"),i.lineDashOffset=Mu(n.lineDashOffset,0),i.lineJoin=Mu(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=Mu(n.strokeStyle,s),i.setLineDash(Mu(n.lineDash,[])),o.usePointStyle){const s={radius:p*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},l=a.xPlus(t,f/2);Hh(i,s,l,e+h,o.pointStyleWidth&&f)}else{const o=e+Math.max((u-p)/2,0),s=a.leftForLtr(t,f),l=nd(n.borderRadius);i.beginPath(),Object.values(l).some((t=>0!==t))?Kh(i,{x:s,y:o,w:f,h:p,radius:l}):i.rect(s,o,f,p),i.fill(),0!==r&&i.stroke()}i.restore()}(a.x(O),k,v),O=((t,e,n,i)=>t===(i?"left":"right")?n:"center"===t?(e+n)/2:e)(w,O+f+h,m?O+S:this.right,t.rtl),function(t,e,n){Yh(i,n.text,t,e+g/2,l,{strikethrough:n.hidden,textAlign:a.textAlign(n.textAlign)})}(a.x(O),k,v),m)d.x+=S+c;else if("string"!=typeof v.text){const t=l.lineHeight;d.y+=Bp(v,t)+c}else d.y+=y})),Dd(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=rd(e.font),i=id(e.padding);if(!e.display)return;const r=Ld(t.rtl,this.left,this.width),o=this.ctx,s=e.position,a=n.size/2,l=i.top+a;let c,u=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),c=this.top+l,u=yh(t.align,u,this.right-h);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+yh(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=yh(s,u,u+h);o.textAlign=r.textAlign(bh(s)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=n.string,Yh(o,e.text,d,c,n)}_computeTitleHeight(){const t=this.options.title,e=rd(t.font),n=id(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,i,r;if(ch(t,this.left,this.right)&&ch(e,this.top,this.bottom))for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(i=r[n],ch(t,i.left,i.left+i.width)&&ch(e,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const o=this._hoveredItem,s=(r=n,null!==(i=o)&&null!==r&&i.datasetIndex===r.datasetIndex&&i.index===r.index);o&&!s&&Lu(e.onLeave,[t,o,this],this),this._hoveredItem=n,n&&!s&&Lu(e.onHover,[t,n,this],this)}else n&&Lu(e.onClick,[t,n,this],this);var i,r}}function Bp(t,e){return e*(t.text?t.text.length:0)}var Vp={id:"legend",_element:Np,start(t,e,n){const i=t.legend=new Np({ctx:t.ctx,options:n,chart:t});Ef.configure(t,i,n),Ef.addBox(t,i)},stop(t){Ef.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const i=t.legend;Ef.configure(t,i,n),i.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const i=e.datasetIndex,r=n.chart;r.isDatasetVisible(i)?(r.hide(i),e.hidden=!0):(r.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:r,color:o,useBorderRadius:s,borderRadius:a}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const l=t.controller.getStyle(n?0:void 0),c=id(l.borderWidth);return{text:e[t.index].label,fillStyle:l.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:l.borderCapStyle,lineDash:l.borderDash,lineDashOffset:l.borderDashOffset,lineJoin:l.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:l.borderColor,pointStyle:i||l.pointStyle,rotation:l.rotation,textAlign:r||l.textAlign,borderRadius:s&&(a||l.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class zp extends $f{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const i=Au(n.text)?n.text.length:1;this._padding=id(n.padding);const r=i*rd(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:i,right:r,options:o}=this,s=o.align;let a,l,c,u=0;return this.isHorizontal()?(l=yh(s,n,r),c=e+t,a=r-n):("left"===o.position?(l=n+t,c=yh(s,i,e),u=-.5*Gu):(l=r-t,c=yh(s,e,i),u=.5*Gu),a=i-e),{titleX:l,titleY:c,maxWidth:a,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=rd(e.font),i=n.lineHeight/2+this._padding.top,{titleX:r,titleY:o,maxWidth:s,rotation:a}=this._drawArgs(i);Yh(t,e.text,0,0,n,{color:e.color,maxWidth:s,rotation:a,textAlign:bh(e.align),textBaseline:"middle",translation:[r,o]})}}var Hp={id:"title",_element:zp,start(t,e,n){!function(t,e){const n=new zp({ctx:t.ctx,options:e,chart:t});Ef.configure(t,n,e),Ef.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;Ef.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const i=t.titleBlock;Ef.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};new WeakMap;const Up={average(t){if(!t.length)return!1;let e,n,i=new Set,r=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();i.add(t.x),r+=t.y,++o}}return{x:[...i].reduce(((t,e)=>t+e))/i.size,y:r/o}},nearest(t,e){if(!t.length)return!1;let n,i,r,o=e.x,s=e.y,a=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){const i=t[n].element;if(i&&i.hasValue()){const t=(l=e,c=i.getCenterPoint(),Math.sqrt(Math.pow(c.x-l.x,2)+Math.pow(c.y-l.y,2)));t<a&&(a=t,r=i)}}var l,c;if(r){const t=r.tooltipPosition();o=t.x,s=t.y}return{x:o,y:s}}};function $p(t,e){return e&&(Au(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Wp(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function qp(t,e){const{element:n,datasetIndex:i,index:r}=e,o=t.getDatasetMeta(i).controller,{label:s,value:a}=o.getLabelAndValue(r);return{chart:t,label:s,parsed:o.getParsed(r),raw:t.data.datasets[i].data[r],formattedValue:a,dataset:o.getDataset(),dataIndex:r,datasetIndex:i,element:n}}function Gp(t,e){const n=t.chart.ctx,{body:i,footer:r,title:o}=t,{boxWidth:s,boxHeight:a}=e,l=rd(e.bodyFont),c=rd(e.titleFont),u=rd(e.footerFont),h=o.length,d=r.length,f=i.length,p=id(e.padding);let g=p.height,m=0,b=i.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,h&&(g+=h*c.lineHeight+(h-1)*e.titleSpacing+e.titleMarginBottom),b&&(g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing),d&&(g+=e.footerMarginTop+d*u.lineHeight+(d-1)*e.footerSpacing);let y=0;const v=function(t){m=Math.max(m,n.measureText(t).width+y)};return n.save(),n.font=c.string,Ru(t.title,v),n.font=l.string,Ru(t.beforeBody.concat(t.afterBody),v),y=e.displayColors?s+2+e.boxPadding:0,Ru(i,(t=>{Ru(t.before,v),Ru(t.lines,v),Ru(t.after,v)})),y=0,n.font=u.string,Ru(t.footer,v),n.restore(),m+=p.width,{width:m,height:g}}function Yp(t,e,n,i){const{x:r,width:o}=n,{width:s,chartArea:{left:a,right:l}}=t;let c="center";return"center"===i?c=r<=(a+l)/2?"left":"right":r<=o/2?c="left":r>=s-o/2&&(c="right"),function(t,e,n,i){const{x:r,width:o}=i,s=n.caretSize+n.caretPadding;return"left"===t&&r+o+s>e.width||"right"===t&&r-o-s<0||void 0}(c,t,e,n)&&(c="center"),c}function Kp(t,e,n){const i=n.yAlign||e.yAlign||function(t,e){const{y:n,height:i}=e;return n<i/2?"top":n>t.height-i/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||Yp(t,e,n,i),yAlign:i}}function Xp(t,e,n,i){const{caretSize:r,caretPadding:o,cornerRadius:s}=t,{xAlign:a,yAlign:l}=n,c=r+o,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=nd(s);let p=function(t,e){let{x:n,width:i}=t;return"right"===e?n-=i:"center"===e&&(n-=i/2),n}(e,a);const g=function(t,e,n){let{y:i,height:r}=t;return"top"===e?i+=n:i-="bottom"===e?r+n:r/2,i}(e,l,c);return"center"===l?"left"===a?p+=c:"right"===a&&(p-=c):"left"===a?p-=Math.max(u,d)+r:"right"===a&&(p+=Math.max(h,f)+r),{x:lh(p,0,i.width-e.width),y:lh(g,0,i.height-e.height)}}function Jp(t,e,n){const i=id(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function Qp(t){return $p([],Wp(t))}function Zp(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}const tg={beforeTitle:Ou,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return n[e.dataIndex]}return""},afterTitle:Ou,beforeBody:Ou,beforeLabel:Ou,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return Eu(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:Ou,afterBody:Ou,beforeFooter:Ou,footer:Ou,afterFooter:Ou};function eg(t,e,n,i){const r=t[e].call(n,i);return void 0===r?tg[e].call(n,i):r}class ng extends $f{static positioners=Up;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),i=n.enabled&&e.options.animation&&n.animations,r=new Vd(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=sd(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"}))}getTitle(t,e){const{callbacks:n}=e,i=eg(n,"beforeTitle",this,t),r=eg(n,"title",this,t),o=eg(n,"afterTitle",this,t);let s=[];return s=$p(s,Wp(i)),s=$p(s,Wp(r)),s=$p(s,Wp(o)),s}getBeforeBody(t,e){return Qp(eg(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:n}=e,i=[];return Ru(t,(t=>{const e={before:[],lines:[],after:[]},r=Zp(n,t);$p(e.before,Wp(eg(r,"beforeLabel",this,t))),$p(e.lines,eg(r,"label",this,t)),$p(e.after,Wp(eg(r,"afterLabel",this,t))),i.push(e)})),i}getAfterBody(t,e){return Qp(eg(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:n}=e,i=eg(n,"beforeFooter",this,t),r=eg(n,"footer",this,t),o=eg(n,"afterFooter",this,t);let s=[];return s=$p(s,Wp(i)),s=$p(s,Wp(r)),s=$p(s,Wp(o)),s}_createItems(t){const e=this._active,n=this.chart.data,i=[],r=[],o=[];let s,a,l=[];for(s=0,a=e.length;s<a;++s)l.push(qp(this.chart,e[s]));return t.filter&&(l=l.filter(((e,i,r)=>t.filter(e,i,r,n)))),t.itemSort&&(l=l.sort(((e,i)=>t.itemSort(e,i,n)))),Ru(l,(e=>{const n=Zp(t.callbacks,e);i.push(eg(n,"labelColor",this,e)),r.push(eg(n,"labelPointStyle",this,e)),o.push(eg(n,"labelTextColor",this,e))})),this.labelColors=i,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const n=this.options.setContext(this.getContext()),i=this._active;let r,o=[];if(i.length){const t=Up[n.position].call(this,i,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);const e=this._size=Gp(this,n),s=Object.assign({},t,e),a=Kp(this.chart,n,s),l=Xp(n,s,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,i){const r=this.getCaretPosition(t,n,i);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,n){const{xAlign:i,yAlign:r}=this,{caretSize:o,cornerRadius:s}=n,{topLeft:a,topRight:l,bottomLeft:c,bottomRight:u}=nd(s),{x:h,y:d}=t,{width:f,height:p}=e;let g,m,b,y,v,_;return"center"===r?(v=d+p/2,"left"===i?(g=h,m=g-o,y=v+o,_=v-o):(g=h+f,m=g+o,y=v-o,_=v+o),b=g):(m="left"===i?h+Math.max(a,c)+o:"right"===i?h+f-Math.max(l,u)-o:this.caretX,"top"===r?(y=d,v=y-o,g=m-o,b=m+o):(y=d+p,v=y+o,g=m+o,b=m-o),_=y),{x1:g,x2:m,x3:b,y1:y,y2:v,y3:_}}drawTitle(t,e,n){const i=this.title,r=i.length;let o,s,a;if(r){const l=Ld(n.rtl,this.x,this.width);for(t.x=Jp(this,n.titleAlign,n),e.textAlign=l.textAlign(n.titleAlign),e.textBaseline="middle",o=rd(n.titleFont),s=n.titleSpacing,e.fillStyle=n.titleColor,e.font=o.string,a=0;a<r;++a)e.fillText(i[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+s,a+1===r&&(t.y+=n.titleMarginBottom-s)}}_drawColorBox(t,e,n,i,r){const o=this.labelColors[n],s=this.labelPointStyles[n],{boxHeight:a,boxWidth:l}=r,c=rd(r.bodyFont),u=Jp(this,"left",r),h=i.x(u),d=a<c.lineHeight?(c.lineHeight-a)/2:0,f=e.y+d;if(r.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=i.leftForLtr(h,l)+l/2,c=f+a/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,zh(t,e,n,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,zh(t,e,n,c)}else{t.lineWidth=Pu(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=i.leftForLtr(h,l),n=i.leftForLtr(i.xPlus(h,1),l-2),s=nd(o.borderRadius);Object.values(s).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,Kh(t,{x:e,y:f,w:l,h:a,radius:s}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),Kh(t,{x:n,y:f+1,w:l-2,h:a-2,radius:s}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,f,l,a),t.strokeRect(e,f,l,a),t.fillStyle=o.backgroundColor,t.fillRect(n,f+1,l-2,a-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:i}=this,{bodySpacing:r,bodyAlign:o,displayColors:s,boxHeight:a,boxWidth:l,boxPadding:c}=n,u=rd(n.bodyFont);let h=u.lineHeight,d=0;const f=Ld(n.rtl,this.x,this.width),p=function(n){e.fillText(n,f.x(t.x+d),t.y+h/2),t.y+=h+r},g=f.textAlign(o);let m,b,y,v,_,x,w;for(e.textAlign=o,e.textBaseline="middle",e.font=u.string,t.x=Jp(this,g,n),e.fillStyle=n.bodyColor,Ru(this.beforeBody,p),d=s&&"right"!==g?"center"===o?l/2+c:l+2+c:0,v=0,x=i.length;v<x;++v){for(m=i[v],b=this.labelTextColors[v],e.fillStyle=b,Ru(m.before,p),y=m.lines,s&&y.length&&(this._drawColorBox(e,t,v,f,n),h=Math.max(u.lineHeight,a)),_=0,w=y.length;_<w;++_)p(y[_]),h=u.lineHeight;Ru(m.after,p)}d=0,h=u.lineHeight,Ru(this.afterBody,p),t.y-=r}drawFooter(t,e,n){const i=this.footer,r=i.length;let o,s;if(r){const a=Ld(n.rtl,this.x,this.width);for(t.x=Jp(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=a.textAlign(n.footerAlign),e.textBaseline="middle",o=rd(n.footerFont),e.fillStyle=n.footerColor,e.font=o.string,s=0;s<r;++s)e.fillText(i[s],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+n.footerSpacing}}drawBackground(t,e,n,i){const{xAlign:r,yAlign:o}=this,{x:s,y:a}=t,{width:l,height:c}=n,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=nd(i.cornerRadius);e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor,e.lineWidth=i.borderWidth,e.beginPath(),e.moveTo(s+u,a),"top"===o&&this.drawCaret(t,e,n,i),e.lineTo(s+l-h,a),e.quadraticCurveTo(s+l,a,s+l,a+h),"center"===o&&"right"===r&&this.drawCaret(t,e,n,i),e.lineTo(s+l,a+c-f),e.quadraticCurveTo(s+l,a+c,s+l-f,a+c),"bottom"===o&&this.drawCaret(t,e,n,i),e.lineTo(s+d,a+c),e.quadraticCurveTo(s,a+c,s,a+c-d),"center"===o&&"left"===r&&this.drawCaret(t,e,n,i),e.lineTo(s,a+u),e.quadraticCurveTo(s,a,s+u,a),e.closePath(),e.fill(),i.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,i=n&&n.x,r=n&&n.y;if(i||r){const n=Up[t.position].call(this,this._active,this._eventPosition);if(!n)return;const o=this._size=Gp(this,t),s=Object.assign({},n,this._size),a=Kp(e,t,s),l=Xp(t,s,a,e);i._to===l.x&&r._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const i={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const o=id(e.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&s&&(t.save(),t.globalAlpha=n,this.drawBackground(r,t,i,e),Rd(t,e.textDirection),r.y+=o.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),Dd(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,i=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),r=!Du(n,i),o=this._positionChanged(i,e);(r||o)&&(this._active=i,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,r=this._active||[],o=this._getActiveElements(t,r,e,n),s=this._positionChanged(o,t),a=e||!Du(o,r)||s;return a&&(this._active=o,(i.enabled||i.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,n,i){const r=this.options;if("mouseout"===t.type)return[];if(!i)return e.filter((t=>this.chart.data.datasets[t.datasetIndex]&&void 0!==this.chart.getDatasetMeta(t.datasetIndex).controller.getParsed(t.index)));const o=this.chart.getElementsAtEventForMode(t,r.mode,r,n);return r.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:n,caretY:i,options:r}=this,o=Up[r.position].call(this,t,e);return!1!==o&&(n!==o.x||i!==o.y)}}var ig={id:"tooltip",_element:ng,positioners:Up,afterInit(t,e,n){n&&(t.tooltip=new ng({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const n={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...n,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n)}},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:tg},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]};function rg(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}class og extends Zf{static id="category";static defaults={ticks:{callback:rg}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:i}of e)t[n]===i&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(Eu(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:lh(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,i){const r=t.indexOf(e);return-1===r?((t,e,n,i)=>("string"==typeof e?(n=t.push(e)-1,i.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,i):r!==t.lastIndexOf(e)?n:r}(n,t,Mu(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,i=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)i.push({value:n});return i}getLabelForValue(t){return rg.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function sg(t,e,{horizontal:n,minRotation:i}){const r=oh(i),o=(n?Math.sin(r):Math.cos(r))||.001,s=.75*e*(""+t).length;return Math.min(e/o,s)}class ag extends Zf{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return Eu(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:i,max:r}=this;const o=t=>i=e?i:t,s=t=>r=n?r:t;if(t){const t=eh(i),e=eh(r);t<0&&e<0?s(0):t>0&&e>0&&o(0)}if(i===r){let e=0===r?1:Math.abs(.05*r);s(r+e),t||o(i-e)}this.min=i,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(t,e){const n=[],{bounds:i,step:r,min:o,max:s,precision:a,count:l,maxTicks:c,maxDigits:u,includeBounds:h}=t,d=r||1,f=c-1,{min:p,max:g}=e,m=!Eu(o),b=!Eu(s),y=!Eu(l),v=(g-p)/(u+1);let _,x,w,S,O=ih((g-p)/f/d)*d;if(O<1e-14&&!m&&!b)return[{value:p},{value:g}];S=Math.ceil(g/O)-Math.floor(p/O),S>f&&(O=ih(S*O/f/d)*d),Eu(a)||(_=Math.pow(10,a),O=Math.ceil(O*_)/_),"ticks"===i?(x=Math.floor(p/O)*O,w=Math.ceil(g/O)*O):(x=p,w=g),m&&b&&r&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((s-o)/r,O/1e3)?(S=Math.round(Math.min((s-o)/O,c)),O=(s-o)/S,x=o,w=s):y?(x=m?o:x,w=b?s:w,S=l-1,O=(w-x)/S):(S=(w-x)/O,S=nh(S,Math.round(S),O/1e3)?Math.round(S):Math.ceil(S));const k=Math.max(sh(O),sh(x));_=Math.pow(10,Eu(a)?k:a),x=Math.round(x*_)/_,w=Math.round(w*_)/_;let E=0;for(m&&(h&&x!==o?(n.push({value:o}),x<o&&E++,nh(Math.round((x+E*O)*_)/_,o,sg(o,v,t))&&E++):x<o&&E++);E<S;++E){const t=Math.round((x+E*O)*_)/_;if(b&&t>s)break;n.push({value:t})}return b&&h&&w!==s?n.length&&nh(n[n.length-1].value,s,sg(s,v,t))?n[n.length-1].value=s:n.push({value:s}):b&&w!==s||n.push({value:w}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&function(t,e,n){let i,r,o;for(i=0,r=t.length;i<r;i++)o=t[i][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const i=(n-e)/Math.max(t.length-1,1)/2;e-=i,n+=i}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return Ch(t,this.chart.options.locale,this.options.ticks.format)}}class lg extends ag{static id="linear";static defaults={ticks:{callback:Mh.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=Cu(t)?t:0,this.max=Cu(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=oh(this.options.ticks.minRotation),i=(t?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}Mh.formatters.logarithmic,Mh.formatters.numeric;const cg={data:{type:Object,required:!0},options:{type:Object,default:()=>({})},plugins:{type:Array,default:()=>[]},datasetIdKey:{type:String,default:"label"},updateMode:{type:String,default:void 0}},ug={ariaLabel:{type:String},ariaDescribedby:{type:String}},hg={type:{type:String,required:!0},destroyDelay:{type:Number,default:0},...cg,...ug},dg="2"===Wr[0]?(t,e)=>Object.assign(t,{attrs:e}):(t,e)=>Object.assign(t,e);function fg(t){return he(t)?de(t):t}function pg(t,e){t.labels=e}function gg(t,e,n){const i=[];t.datasets=e.map((e=>{const r=t.datasets.find((t=>t[n]===e[n]));return r&&e.data&&!i.includes(r)?(i.push(r),Object.assign(r,e),r):{...e}}))}const mg=Dn({props:hg,setup(t,e){let{expose:n,slots:i}=e;const r=ve(null),o=_e(null);return n({chart:o}),Sn((()=>{if(!r.value)return;const{type:e,data:n,options:i,plugins:s,datasetIdKey:a}=t,l=function(t,e){const n={labels:[],datasets:[]};return pg(n,t.labels),gg(n,t.datasets,e),n}(n,a),c=function(t){return he(arguments.length>1&&void 0!==arguments[1]?arguments[1]:t)?new Proxy(t,{}):t}(l,n);o.value=new Cp(r.value,{type:e,data:c,options:{...i},plugins:s})})),An((()=>{const e=de(o.value);e&&(t.destroyDelay>0?setTimeout((()=>{e.destroy(),o.value=null}),t.destroyDelay):(e.destroy(),o.value=null))})),Di([()=>t.options,()=>t.data],((e,n)=>{let[i,r]=e,[s,a]=n;const l=de(o.value);if(!l)return;let c=!1;if(i){const t=fg(i),e=fg(s);t&&t!==e&&(function(t,e){const n=t.options;n&&e&&Object.assign(n,e)}(l,t),c=!0)}if(r){const e=fg(r.labels),n=fg(a.labels),i=fg(r.datasets),o=fg(a.datasets);e!==n&&(pg(l.config.data,e),c=!0),i&&i!==o&&(gg(l.config.data,i,t.datasetIdKey),c=!0)}c&&Ne((()=>{(e=>{e.update(t.updateMode)})(l)}))}),{deep:!0}),()=>$r("canvas",{role:"img",ariaLabel:t.ariaLabel,ariaDescribedby:t.ariaDescribedby,ref:r},[$r("p",{},[i.default?i.default():""])])}});function bg(t,e){return Cp.register(e),Dn({props:cg,setup(e,n){let{expose:i}=n;const r=_e(null),o=t=>{r.value=t?.chart};return i({chart:r}),()=>$r(mg,dg({ref:o},{type:t,...e}))}})}const yg=bg("bar",lf);var vg={name:"BarChart",components:{Bar:yg},props:{chartId:{type:String,default:"bar-chart"},width:{type:Number,default:400},height:{type:Number,default:400},cssClasses:{default:"",type:String},styles:{type:Object,default:function(){}},plugins:{type:Array,default:function(){return[]}},labels:{type:Array,default:function(){return[]}},datasets:{type:Object,default:function(){}},chartOptions:{type:Object,required:!1,default:{responsive:!0,maintainAspectRatio:!1}}},computed:{chartData:function(){return{labels:this.labels,datasets:this.datasets}}}};function _g(t){return _g="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_g(t)}function xg(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function wg(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?xg(Object(n),!0).forEach((function(e){Sg(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):xg(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Sg(t,e,n){return(e=function(t){var e=function(t,e){if("object"!=_g(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!=_g(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==_g(e)?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const Og={name:"Graph",components:{BarChart:Object.assign(vg,{setup:function(t){return Cp.register(Hp,ig,Vp,Ip,og,lg),function(e,n){return lr(),dr("div",null,[vr(Se(yg),{data:e.chartData,"chart-options":t.chartOptions,"chart-id":t.chartId,styles:t.styles,width:t.width,height:t.height,plugins:t.plugins,"css-classes":t.cssClasses},null,8,["data","chart-options","chart-id","styles","width","height","plugins","css-classes"])])}}})},computed:wg(wg({},Jl(["getGraphData"])),{},{graphData:function(){return{labels:this.getGraphData.labels,datasets:[{label:"Values",backgroundColor:"rgba(75, 192, 192, 1)",borderColor:"rgba(75, 192, 192, 1)",borderWidth:5,data:this.getGraphData.values}]}}}),created:function(){this.fetchGraphData()},methods:wg({},Ql(["fetchGraphData"]))};var kg=[{path:"/",name:"Settings",component:Wc,alias:"/settings"},{path:"/table",name:"Table",component:bc},{path:"/graph",name:"Graph",component:(0,vs.A)(Og,[["render",function(t,e,n,i,r,o){var s=bn("BarChart");return lr(),dr("div",qc,[Gc,vr(s,{labels:o.graphData.labels,datasets:o.graphData.datasets,height:100},null,8,["labels","datasets"])])}]])}],Eg=function(t){const e=function(t,e){const n=[],i=new Map;function r(t,n,i){const a=!i,l=function(t){return{path:t.path,redirect:t.redirect,name:t.name,meta:t.meta||{},aliasOf:void 0,beforeEnter:t.beforeEnter,props:ja(t),children:t.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in t?t.components||null:t.component&&{default:t.component}}}(t);l.aliasOf=i&&i.record;const c=Na(e,t),u=[l];if("alias"in t){const e="string"==typeof t.alias?[t.alias]:t.alias;for(const t of e)u.push(Ls({},l,{components:i?i.record.components:l.components,path:t,aliasOf:i?i.record:l}))}let h,d;for(const e of u){const{path:u}=e;if(n&&"/"!==u[0]){const t=n.record.path,i="/"===t[t.length-1]?"":"/";e.path=n.record.path+(u&&i+u)}if(h=Ra(e,n,c),i?i.alias.push(h):(d=d||h,d!==h&&d.alias.push(h),a&&t.name&&!Ia(h)&&o(t.name)),Ba(h)&&s(h),l.children){const t=l.children;for(let e=0;e<t.length;e++)r(t[e],h,i&&i.children[e])}i=i||h}return d?()=>{o(d)}:Ds}function o(t){if(va(t)){const e=i.get(t);e&&(i.delete(t),n.splice(n.indexOf(e),1),e.children.forEach(o),e.alias.forEach(o))}else{const e=n.indexOf(t);e>-1&&(n.splice(e,1),t.record.name&&i.delete(t.record.name),t.children.forEach(o),t.alias.forEach(o))}}function s(t){const e=function(t,e){let n=0,i=e.length;for(;n!==i;){const r=n+i>>1;Ca(t,e[r])<0?i=r:n=r+1}const r=function(t){let e=t;for(;e=e.parent;)if(Ba(e)&&0===Ca(t,e))return e}(t);return r&&(i=e.lastIndexOf(r,i-1)),i}(t,n);n.splice(e,0,t),t.record.name&&!Ia(t)&&i.set(t.record.name,t)}return e=Na({strict:!1,end:!0,sensitive:!1},e),t.forEach((t=>r(t))),{addRoute:r,resolve:function(t,e){let r,o,s,a={};if("name"in t&&t.name){if(r=i.get(t.name),!r)throw Sa(1,{location:t});s=r.record.name,a=Ls(Da(e.params,r.keys.filter((t=>!t.optional)).concat(r.parent?r.parent.keys.filter((t=>t.optional)):[]).map((t=>t.name))),t.params&&Da(t.params,r.keys.map((t=>t.name)))),o=r.stringify(a)}else if(null!=t.path)o=t.path,r=n.find((t=>t.re.test(o))),r&&(a=r.parse(o),s=r.record.name);else{if(r=e.name?i.get(e.name):n.find((t=>t.re.test(e.path))),!r)throw Sa(1,{location:t,currentLocation:e});s=r.record.name,a=Ls({},e.params,t.params),o=r.stringify(a)}const l=[];let c=r;for(;c;)l.unshift(c.record),c=c.parent;return{name:s,path:o,params:a,matched:l,meta:Fa(l)}},removeRoute:o,getRoutes:function(){return n},getRecordMatcher:function(t){return i.get(t)}}}(t.routes,t),n=t.parseQuery||Va,i=t.stringifyQuery||za,r=t.history,o=Ya(),s=Ya(),a=Ya(),l=_e(_a);let c=_a;Ms&&t.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const u=Rs.bind(null,(t=>""+t)),h=Rs.bind(null,Qs),d=Rs.bind(null,Zs);function f(t,o){if(o=Ls({},o||l.value),"string"==typeof t){const i=na(n,t,o.path),s=e.resolve({path:i.path},o),a=r.createHref(i.fullPath);return Ls(i,s,{params:d(s.params),hash:Zs(i.hash),redirectedFrom:void 0,href:a})}let s;if(null!=t.path)s=Ls({},t,{path:na(n,t.path,o.path).path});else{const e=Ls({},t.params);for(const t in e)null==e[t]&&delete e[t];s=Ls({},t,{params:h(e)}),o.params=h(o.params)}const a=e.resolve(s,o),c=t.hash||"";a.params=u(d(a.params));const f=function(t,e){const n=e.query?t(e.query):"";return e.path+(n&&"?")+n+(e.hash||"")}(i,Ls({},t,{hash:(p=c,Xs(p).replace(qs,"{").replace(Ys,"}").replace($s,"^")),path:a.path}));var p;const g=r.createHref(f);return Ls({fullPath:f,hash:c,query:i===za?Ha(t.query):t.query||{}},a,{redirectedFrom:void 0,href:g})}function p(t){return"string"==typeof t?na(n,t,l.value.path):Ls({},t)}function g(t,e){if(c!==t)return Sa(8,{from:e,to:t})}function m(t){return y(t)}function b(t){const e=t.matched[t.matched.length-1];if(e&&e.redirect){const{redirect:n}=e;let i="function"==typeof n?n(t):n;return"string"==typeof i&&(i=i.includes("?")||i.includes("#")?i=p(i):{path:i},i.params={}),Ls({query:t.query,hash:t.hash,params:null!=i.path?{}:t.params},i)}}function y(t,e){const n=c=f(t),r=l.value,o=t.state,s=t.force,a=!0===t.replace,u=b(n);if(u)return y(Ls(p(u),{state:"object"==typeof u?Ls({},o,u.state):o,force:s,replace:a}),e||n);const h=n;let d;return h.redirectedFrom=e,!s&&function(t,e,n){const i=e.matched.length-1,r=n.matched.length-1;return i>-1&&i===r&&ra(e.matched[i],n.matched[r])&&oa(e.params,n.params)&&t(e.query)===t(n.query)&&e.hash===n.hash}(i,r,n)&&(d=Sa(16,{to:h,from:r}),T(r,r,!0,!1)),(d?Promise.resolve(d):x(h,r)).catch((t=>Oa(t)?Oa(t,2)?t:C(t):P(t,h,r))).then((t=>{if(t){if(Oa(t,2))return y(Ls({replace:a},p(t.to),{state:"object"==typeof t.to?Ls({},o,t.to.state):o,force:s}),e||h)}else t=S(h,r,!0,a,o);return w(h,r,t),t}))}function v(t,e){const n=g(t,e);return n?Promise.reject(n):Promise.resolve()}function _(t){const e=R.values().next().value;return e&&"function"==typeof e.runWithContext?e.runWithContext(t):t()}function x(t,e){let n;const[i,r,a]=function(t,e){const n=[],i=[],r=[],o=Math.max(e.matched.length,t.matched.length);for(let s=0;s<o;s++){const o=e.matched[s];o&&(t.matched.find((t=>ra(t,o)))?i.push(o):n.push(o));const a=t.matched[s];a&&(e.matched.find((t=>ra(t,a)))||r.push(a))}return[n,i,r]}(t,e);n=Xa(i.reverse(),"beforeRouteLeave",t,e);for(const r of i)r.leaveGuards.forEach((i=>{n.push(Ka(i,t,e))}));const l=v.bind(null,t,e);return n.push(l),j(n).then((()=>{n=[];for(const i of o.list())n.push(Ka(i,t,e));return n.push(l),j(n)})).then((()=>{n=Xa(r,"beforeRouteUpdate",t,e);for(const i of r)i.updateGuards.forEach((i=>{n.push(Ka(i,t,e))}));return n.push(l),j(n)})).then((()=>{n=[];for(const i of a)if(i.beforeEnter)if(js(i.beforeEnter))for(const r of i.beforeEnter)n.push(Ka(r,t,e));else n.push(Ka(i.beforeEnter,t,e));return n.push(l),j(n)})).then((()=>(t.matched.forEach((t=>t.enterCallbacks={})),n=Xa(a,"beforeRouteEnter",t,e,_),n.push(l),j(n)))).then((()=>{n=[];for(const i of s.list())n.push(Ka(i,t,e));return n.push(l),j(n)})).catch((t=>Oa(t,8)?t:Promise.reject(t)))}function w(t,e,n){a.list().forEach((i=>_((()=>i(t,e,n)))))}function S(t,e,n,i,o){const s=g(t,e);if(s)return s;const a=e===_a,c=Ms?history.state:{};n&&(i||a?r.replace(t.fullPath,Ls({scroll:a&&c&&c.scroll},o)):r.push(t.fullPath,o)),l.value=t,T(t,e,n,a),C()}let O;let k,E=Ya(),A=Ya();function P(t,e,n){C(t);const i=A.list();return i.length?i.forEach((i=>i(t,e,n))):console.error(t),Promise.reject(t)}function C(t){return k||(k=!t,O||(O=r.listen(((t,e,n)=>{if(!D.listening)return;const i=f(t),o=b(i);if(o)return void y(Ls(o,{replace:!0}),i).catch(Ds);c=i;const s=l.value;var a,u;Ms&&(a=fa(s.fullPath,n.delta),u=da(),pa.set(a,u)),x(i,s).catch((t=>Oa(t,12)?t:Oa(t,2)?(y(t.to,i).then((t=>{Oa(t,20)&&!n.delta&&n.type===la.pop&&r.go(-1,!1)})).catch(Ds),Promise.reject()):(n.delta&&r.go(-n.delta,!1),P(t,i,s)))).then((t=>{(t=t||S(i,s,!1))&&(n.delta&&!Oa(t,8)?r.go(-n.delta,!1):n.type===la.pop&&Oa(t,20)&&r.go(-1,!1)),w(i,s,t)})).catch(Ds)}))),E.list().forEach((([e,n])=>t?n(t):e())),E.reset()),t}function T(e,n,i,r){const{scrollBehavior:o}=t;if(!Ms||!o)return Promise.resolve();const s=!i&&function(t){const e=pa.get(t);return pa.delete(t),e}(fa(e.fullPath,0))||(r||!i)&&history.state&&history.state.scroll||null;return Ne().then((()=>o(e,n,s))).then((t=>t&&function(t){let e;if("el"in t){const n=t.el,i="string"==typeof n&&n.startsWith("#"),r="string"==typeof n?i?document.getElementById(n.slice(1)):document.querySelector(n):n;if(!r)return;e=function(t,e){const n=document.documentElement.getBoundingClientRect(),i=t.getBoundingClientRect();return{behavior:e.behavior,left:i.left-n.left-(e.left||0),top:i.top-n.top-(e.top||0)}}(r,t)}else e=t;"scrollBehavior"in document.documentElement.style?window.scrollTo(e):window.scrollTo(null!=e.left?e.left:window.scrollX,null!=e.top?e.top:window.scrollY)}(t))).catch((t=>P(t,e,n)))}const M=t=>r.go(t);let L;const R=new Set,D={currentRoute:l,listening:!0,addRoute:function(t,n){let i,r;return va(t)?(i=e.getRecordMatcher(t),r=n):r=t,e.addRoute(r,i)},removeRoute:function(t){const n=e.getRecordMatcher(t);n&&e.removeRoute(n)},hasRoute:function(t){return!!e.getRecordMatcher(t)},getRoutes:function(){return e.getRoutes().map((t=>t.record))},resolve:f,options:t,push:m,replace:function(t){return m(Ls(p(t),{replace:!0}))},go:M,back:()=>M(-1),forward:()=>M(1),beforeEach:o.add,beforeResolve:s.add,afterEach:a.add,onError:A.add,isReady:function(){return k&&l.value!==_a?Promise.resolve():new Promise(((t,e)=>{E.add([t,e])}))},install(t){const n=this;t.component("RouterLink",Qa),t.component("RouterView",il),t.config.globalProperties.$router=n,Object.defineProperty(t.config.globalProperties,"$route",{enumerable:!0,get:()=>Se(l)}),Ms&&!L&&l.value===_a&&(L=!0,m(r.location).catch((t=>{})));const i={};for(const t in _a)Object.defineProperty(i,t,{get:()=>l.value[t],enumerable:!0});t.provide(Wa,n),t.provide(qa,oe(i)),t.provide(Ga,l);const o=t.unmount;R.add(t),t.unmount=function(){R.delete(t),R.size<1&&(c=_a,O&&O(),O=null,l.value=_a,L=!1,k=!1),o()},__VUE_PROD_DEVTOOLS__&&Ms&&al(t,n,e)}};function j(t){return t.reduce(((t,e)=>t.then((()=>_(e)))),Promise.resolve())}return D}({history:function(t){const e=function(t){const{history:e,location:n}=window,i={value:ma(t,n)},r={value:e.state};function o(i,o,s){const a=t.indexOf("#"),l=a>-1?(n.host&&document.querySelector("base")?t:t.slice(a))+i:ga()+t+i;try{e[s?"replaceState":"pushState"](o,"",l),r.value=o}catch(t){console.error(t),n[s?"replace":"assign"](l)}}return r.value||o(i.value,{back:null,current:i.value,forward:null,position:e.length-1,replaced:!0,scroll:null},!0),{location:i,state:r,push:function(t,n){const s=Ls({},r.value,e.state,{forward:t,scroll:da()});o(s.current,s,!0),o(t,Ls({},ba(i.value,t,null),{position:s.position+1},n),!1),i.value=t},replace:function(t,n){o(t,Ls({},e.state,ba(r.value.back,t,r.value.forward,!0),n,{position:r.value.position}),!0),i.value=t}}}(t=function(t){if(!t)if(Ms){const e=document.querySelector("base");t=(t=e&&e.getAttribute("href")||"/").replace(/^\w+:\/\/[^\/]+/,"")}else t="/";return"/"!==t[0]&&"#"!==t[0]&&(t="/"+t),ea(t)}(t)),n=function(t,e,n,i){let r=[],o=[],s=null;const a=({state:o})=>{const a=ma(t,location),l=n.value,c=e.value;let u=0;if(o){if(n.value=a,e.value=o,s&&s===l)return void(s=null);u=c?o.position-c.position:0}else i(a);r.forEach((t=>{t(n.value,l,{delta:u,type:la.pop,direction:u?u>0?ca.forward:ca.back:ca.unknown})}))};function l(){const{history:t}=window;t.state&&t.replaceState(Ls({},t.state,{scroll:da()}),"")}return window.addEventListener("popstate",a),window.addEventListener("beforeunload",l,{passive:!0}),{pauseListeners:function(){s=n.value},listen:function(t){r.push(t);const e=()=>{const e=r.indexOf(t);e>-1&&r.splice(e,1)};return o.push(e),e},destroy:function(){for(const t of o)t();o=[],window.removeEventListener("popstate",a),window.removeEventListener("beforeunload",l)}}}(t,e.state,e.location,e.replace),i=Ls({location:"",base:t,go:function(t,e=!0){e||n.pauseListeners(),history.go(t)},createHref:ha.bind(null,t)},e,n);return Object.defineProperty(i,"location",{enumerable:!0,get:()=>e.location.value}),Object.defineProperty(i,"state",{enumerable:!0,get:()=>e.state.value}),i}(wpAmVue.site.base_url),routes:kg});const Ag=Eg;var Pg=n(604),Cg=n.n(Pg);const Tg=function(t,e){var n,i,r=0;function o(){var o,s,a=n,l=arguments.length;t:for(;a;){if(a.args.length===arguments.length){for(s=0;s<l;s++)if(a.args[s]!==arguments[s]){a=a.next;continue t}return a!==n&&(a===i&&(i=a.prev),a.prev.next=a.next,a.next&&(a.next.prev=a.prev),a.next=n,a.prev=null,n.prev=a,n=a),a.val}a=a.next}for(o=new Array(l),s=0;s<l;s++)o[s]=arguments[s];return a={args:o,val:t.apply(null,o)},n?(n.prev=a,a.next=n):i=a,r===e.maxSize?(i=i.prev).next=null:r++,n=a,a.val}return e=e||{},o.clear=function(){n=null,i=null,r=0},o}(console.error);var Mg,Lg,Rg,Dg;Mg={"(":9,"!":8,"*":7,"/":7,"%":7,"+":6,"-":6,"<":5,"<=":5,">":5,">=":5,"==":4,"!=":4,"&&":3,"||":2,"?":1,"?:":1},Lg=["(","?"],Rg={")":["("],":":["?","?:"]},Dg=/<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/;var jg={"!":function(t){return!t},"*":function(t,e){return t*e},"/":function(t,e){return t/e},"%":function(t,e){return t%e},"+":function(t,e){return t+e},"-":function(t,e){return t-e},"<":function(t,e){return t<e},"<=":function(t,e){return t<=e},">":function(t,e){return t>e},">=":function(t,e){return t>=e},"==":function(t,e){return t===e},"!=":function(t,e){return t!==e},"&&":function(t,e){return t&&e},"||":function(t,e){return t||e},"?:":function(t,e,n){if(t)throw e;return n}};var Ig={contextDelimiter:"",onMissingKey:null};function Fg(t,e){var n;for(n in this.data=t,this.pluralForms={},this.options={},Ig)this.options[n]=void 0!==e&&n in e?e[n]:Ig[n]}Fg.prototype.getPluralForm=function(t,e){var n,i,r,o,s=this.pluralForms[t];return s||("function"!=typeof(r=(n=this.data[t][""])["Plural-Forms"]||n["plural-forms"]||n.plural_forms)&&(i=function(t){var e,n,i;for(e=t.split(";"),n=0;n<e.length;n++)if(0===(i=e[n].trim()).indexOf("plural="))return i.substr(7)}(n["Plural-Forms"]||n["plural-forms"]||n.plural_forms),o=function(t){var e=function(t){for(var e,n,i,r,o=[],s=[];e=t.match(Dg);){for(n=e[0],(i=t.substr(0,e.index).trim())&&o.push(i);r=s.pop();){if(Rg[n]){if(Rg[n][0]===r){n=Rg[n][1]||n;break}}else if(Lg.indexOf(r)>=0||Mg[r]<Mg[n]){s.push(r);break}o.push(r)}Rg[n]||s.push(n),t=t.substr(e.index+n.length)}return(t=t.trim())&&o.push(t),o.concat(s.reverse())}(t);return function(t){return function(t,e){var n,i,r,o,s,a,l=[];for(n=0;n<t.length;n++){if(s=t[n],o=jg[s]){for(i=o.length,r=Array(i);i--;)r[i]=l.pop();try{a=o.apply(null,r)}catch(t){return t}}else a=e.hasOwnProperty(s)?e[s]:+s;l.push(a)}return l[0]}(e,t)}}(i),r=function(t){return+o({n:t})}),s=this.pluralForms[t]=r),s(e)},Fg.prototype.dcnpgettext=function(t,e,n,i,r){var o,s,a;return o=void 0===r?0:this.getPluralForm(t,r),s=n,e&&(s=e+this.options.contextDelimiter+n),(a=this.data[t][s])&&a[o]?a[o]:(this.options.onMissingKey&&this.options.onMissingKey(n,t),0===o?n:i)};const Ng={plural_forms:t=>1===t?0:1},Bg=/^i18n\.(n?gettext|has_translation)(_|$)/,Vg=((t,e,n)=>{const i=new Fg({}),r=new Set,o=()=>{r.forEach((t=>t()))},s=(t,e="default")=>{i.data[e]={...i.data[e],...t},i.data[e][""]={...Ng,...i.data[e]?.[""]},delete i.pluralForms[e]},a=(t,e)=>{s(t,e),o()},l=(t="default",e,n,r,o)=>(i.data[t]||s(void 0,t),i.dcnpgettext(t,e,n,r,o)),c=(t="default")=>t,u=(t,e,i)=>{let r=l(i,e,t);return n?(r=n.applyFilters("i18n.gettext_with_context",r,t,e,i),n.applyFilters("i18n.gettext_with_context_"+c(i),r,t,e,i)):r};if(n){const t=t=>{Bg.test(t)&&o()};n.addAction("hookAdded","core/i18n",t),n.addAction("hookRemoved","core/i18n",t)}return{getLocaleData:(t="default")=>i.data[t],setLocaleData:a,addLocaleData:(t,e="default")=>{i.data[e]={...i.data[e],...t,"":{...Ng,...i.data[e]?.[""],...t?.[""]}},delete i.pluralForms[e],o()},resetLocaleData:(t,e)=>{i.data={},i.pluralForms={},a(t,e)},subscribe:t=>(r.add(t),()=>r.delete(t)),__:(t,e)=>{let i=l(e,void 0,t);return n?(i=n.applyFilters("i18n.gettext",i,t,e),n.applyFilters("i18n.gettext_"+c(e),i,t,e)):i},_x:u,_n:(t,e,i,r)=>{let o=l(r,void 0,t,e,i);return n?(o=n.applyFilters("i18n.ngettext",o,t,e,i,r),n.applyFilters("i18n.ngettext_"+c(r),o,t,e,i,r)):o},_nx:(t,e,i,r,o)=>{let s=l(o,r,t,e,i);return n?(s=n.applyFilters("i18n.ngettext_with_context",s,t,e,i,r,o),n.applyFilters("i18n.ngettext_with_context_"+c(o),s,t,e,i,r,o)):s},isRTL:()=>"rtl"===u("ltr","text direction"),hasTranslation:(t,e,r)=>{const o=e?e+""+t:t;let s=!!i.data?.[null!=r?r:"default"]?.[o];return n&&(s=n.applyFilters("i18n.has_translation",s,t,e,r),s=n.applyFilters("i18n.has_translation_"+c(r),s,t,e,r)),s}}})(0,0,Uo),zg=(Vg.getLocaleData.bind(Vg),Vg.setLocaleData.bind(Vg),Vg.resetLocaleData.bind(Vg),Vg.subscribe.bind(Vg),Vg.__.bind(Vg));Vg._x.bind(Vg),Vg._n.bind(Vg),Vg._nx.bind(Vg),Vg.isRTL.bind(Vg),Vg.hasTranslation.bind(Vg),window.__=zg,window.sprintf=function(t,...e){try{return Cg().sprintf(t,...e)}catch(e){return e instanceof Error&&Tg("sprintf error: \n\n"+e.toString()),t}};const Hg={methods:{__:function(t){function e(e,n){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return __(t,e)})),sprintf:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){for(var e=arguments.length,n=new Array(e>1?e-1:0),i=1;i<e;i++)n[i-1]=arguments[i];return sprintf.apply(void 0,[t].concat(n))}))}};function Ug(t,e){return function(){return t.apply(e,arguments)}}const{toString:$g}=Object.prototype,{getPrototypeOf:Wg}=Object,qg=(Gg=Object.create(null),t=>{const e=$g.call(t);return Gg[e]||(Gg[e]=e.slice(8,-1).toLowerCase())});var Gg;const Yg=t=>(t=t.toLowerCase(),e=>qg(e)===t),Kg=t=>e=>typeof e===t,{isArray:Xg}=Array,Jg=Kg("undefined"),Qg=Yg("ArrayBuffer"),Zg=Kg("string"),tm=Kg("function"),em=Kg("number"),nm=t=>null!==t&&"object"==typeof t,im=t=>{if("object"!==qg(t))return!1;const e=Wg(t);return!(null!==e&&e!==Object.prototype&&null!==Object.getPrototypeOf(e)||Symbol.toStringTag in t||Symbol.iterator in t)},rm=Yg("Date"),om=Yg("File"),sm=Yg("Blob"),am=Yg("FileList"),lm=Yg("URLSearchParams"),[cm,um,hm,dm]=["ReadableStream","Request","Response","Headers"].map(Yg);function fm(t,e,{allOwnKeys:n=!1}={}){if(null==t)return;let i,r;if("object"!=typeof t&&(t=[t]),Xg(t))for(i=0,r=t.length;i<r;i++)e.call(null,t[i],i,t);else{const r=n?Object.getOwnPropertyNames(t):Object.keys(t),o=r.length;let s;for(i=0;i<o;i++)s=r[i],e.call(null,t[s],s,t)}}function pm(t,e){e=e.toLowerCase();const n=Object.keys(t);let i,r=n.length;for(;r-- >0;)if(i=n[r],e===i.toLowerCase())return i;return null}const gm="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,mm=t=>!Jg(t)&&t!==gm,bm=(ym="undefined"!=typeof Uint8Array&&Wg(Uint8Array),t=>ym&&t instanceof ym);var ym;const vm=Yg("HTMLFormElement"),_m=(({hasOwnProperty:t})=>(e,n)=>t.call(e,n))(Object.prototype),xm=Yg("RegExp"),wm=(t,e)=>{const n=Object.getOwnPropertyDescriptors(t),i={};fm(n,((n,r)=>{let o;!1!==(o=e(n,r,t))&&(i[r]=o||n)})),Object.defineProperties(t,i)},Sm="abcdefghijklmnopqrstuvwxyz",Om="0123456789",km={DIGIT:Om,ALPHA:Sm,ALPHA_DIGIT:Sm+Sm.toUpperCase()+Om},Em=Yg("AsyncFunction"),Am={isArray:Xg,isArrayBuffer:Qg,isBuffer:function(t){return null!==t&&!Jg(t)&&null!==t.constructor&&!Jg(t.constructor)&&tm(t.constructor.isBuffer)&&t.constructor.isBuffer(t)},isFormData:t=>{let e;return t&&("function"==typeof FormData&&t instanceof FormData||tm(t.append)&&("formdata"===(e=qg(t))||"object"===e&&tm(t.toString)&&"[object FormData]"===t.toString()))},isArrayBufferView:function(t){let e;return e="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&Qg(t.buffer),e},isString:Zg,isNumber:em,isBoolean:t=>!0===t||!1===t,isObject:nm,isPlainObject:im,isReadableStream:cm,isRequest:um,isResponse:hm,isHeaders:dm,isUndefined:Jg,isDate:rm,isFile:om,isBlob:sm,isRegExp:xm,isFunction:tm,isStream:t=>nm(t)&&tm(t.pipe),isURLSearchParams:lm,isTypedArray:bm,isFileList:am,forEach:fm,merge:function t(){const{caseless:e}=mm(this)&&this||{},n={},i=(i,r)=>{const o=e&&pm(n,r)||r;im(n[o])&&im(i)?n[o]=t(n[o],i):im(i)?n[o]=t({},i):Xg(i)?n[o]=i.slice():n[o]=i};for(let t=0,e=arguments.length;t<e;t++)arguments[t]&&fm(arguments[t],i);return n},extend:(t,e,n,{allOwnKeys:i}={})=>(fm(e,((e,i)=>{n&&tm(e)?t[i]=Ug(e,n):t[i]=e}),{allOwnKeys:i}),t),trim:t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:t=>(65279===t.charCodeAt(0)&&(t=t.slice(1)),t),inherits:(t,e,n,i)=>{t.prototype=Object.create(e.prototype,i),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:e.prototype}),n&&Object.assign(t.prototype,n)},toFlatObject:(t,e,n,i)=>{let r,o,s;const a={};if(e=e||{},null==t)return e;do{for(r=Object.getOwnPropertyNames(t),o=r.length;o-- >0;)s=r[o],i&&!i(s,t,e)||a[s]||(e[s]=t[s],a[s]=!0);t=!1!==n&&Wg(t)}while(t&&(!n||n(t,e))&&t!==Object.prototype);return e},kindOf:qg,kindOfTest:Yg,endsWith:(t,e,n)=>{t=String(t),(void 0===n||n>t.length)&&(n=t.length),n-=e.length;const i=t.indexOf(e,n);return-1!==i&&i===n},toArray:t=>{if(!t)return null;if(Xg(t))return t;let e=t.length;if(!em(e))return null;const n=new Array(e);for(;e-- >0;)n[e]=t[e];return n},forEachEntry:(t,e)=>{const n=(t&&t[Symbol.iterator]).call(t);let i;for(;(i=n.next())&&!i.done;){const n=i.value;e.call(t,n[0],n[1])}},matchAll:(t,e)=>{let n;const i=[];for(;null!==(n=t.exec(e));)i.push(n);return i},isHTMLForm:vm,hasOwnProperty:_m,hasOwnProp:_m,reduceDescriptors:wm,freezeMethods:t=>{wm(t,((e,n)=>{if(tm(t)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;const i=t[n];tm(i)&&(e.enumerable=!1,"writable"in e?e.writable=!1:e.set||(e.set=()=>{throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:(t,e)=>{const n={},i=t=>{t.forEach((t=>{n[t]=!0}))};return Xg(t)?i(t):i(String(t).split(e)),n},toCamelCase:t=>t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(t,e,n){return e.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(t,e)=>null!=t&&Number.isFinite(t=+t)?t:e,findKey:pm,global:gm,isContextDefined:mm,ALPHABET:km,generateString:(t=16,e=km.ALPHA_DIGIT)=>{let n="";const{length:i}=e;for(;t--;)n+=e[Math.random()*i|0];return n},isSpecCompliantForm:function(t){return!!(t&&tm(t.append)&&"FormData"===t[Symbol.toStringTag]&&t[Symbol.iterator])},toJSONObject:t=>{const e=new Array(10),n=(t,i)=>{if(nm(t)){if(e.indexOf(t)>=0)return;if(!("toJSON"in t)){e[i]=t;const r=Xg(t)?[]:{};return fm(t,((t,e)=>{const o=n(t,i+1);!Jg(o)&&(r[e]=o)})),e[i]=void 0,r}}return t};return n(t,0)},isAsyncFn:Em,isThenable:t=>t&&(nm(t)||tm(t))&&tm(t.then)&&tm(t.catch)};function Pm(t,e,n,i,r){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=t,this.name="AxiosError",e&&(this.code=e),n&&(this.config=n),i&&(this.request=i),r&&(this.response=r)}Am.inherits(Pm,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:Am.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const Cm=Pm.prototype,Tm={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((t=>{Tm[t]={value:t}})),Object.defineProperties(Pm,Tm),Object.defineProperty(Cm,"isAxiosError",{value:!0}),Pm.from=(t,e,n,i,r,o)=>{const s=Object.create(Cm);return Am.toFlatObject(t,s,(function(t){return t!==Error.prototype}),(t=>"isAxiosError"!==t)),Pm.call(s,t.message,e,n,i,r),s.cause=t,s.name=t.name,o&&Object.assign(s,o),s};const Mm=Pm;function Lm(t){return Am.isPlainObject(t)||Am.isArray(t)}function Rm(t){return Am.endsWith(t,"[]")?t.slice(0,-2):t}function Dm(t,e,n){return t?t.concat(e).map((function(t,e){return t=Rm(t),!n&&e?"["+t+"]":t})).join(n?".":""):e}const jm=Am.toFlatObject(Am,{},null,(function(t){return/^is[A-Z]/.test(t)})),Im=function(t,e,n){if(!Am.isObject(t))throw new TypeError("target must be an object");e=e||new FormData;const i=(n=Am.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(t,e){return!Am.isUndefined(e[t])}))).metaTokens,r=n.visitor||c,o=n.dots,s=n.indexes,a=(n.Blob||"undefined"!=typeof Blob&&Blob)&&Am.isSpecCompliantForm(e);if(!Am.isFunction(r))throw new TypeError("visitor must be a function");function l(t){if(null===t)return"";if(Am.isDate(t))return t.toISOString();if(!a&&Am.isBlob(t))throw new Mm("Blob is not supported. Use a Buffer instead.");return Am.isArrayBuffer(t)||Am.isTypedArray(t)?a&&"function"==typeof Blob?new Blob([t]):Buffer.from(t):t}function c(t,n,r){let a=t;if(t&&!r&&"object"==typeof t)if(Am.endsWith(n,"{}"))n=i?n:n.slice(0,-2),t=JSON.stringify(t);else if(Am.isArray(t)&&function(t){return Am.isArray(t)&&!t.some(Lm)}(t)||(Am.isFileList(t)||Am.endsWith(n,"[]"))&&(a=Am.toArray(t)))return n=Rm(n),a.forEach((function(t,i){!Am.isUndefined(t)&&null!==t&&e.append(!0===s?Dm([n],i,o):null===s?n:n+"[]",l(t))})),!1;return!!Lm(t)||(e.append(Dm(r,n,o),l(t)),!1)}const u=[],h=Object.assign(jm,{defaultVisitor:c,convertValue:l,isVisitable:Lm});if(!Am.isObject(t))throw new TypeError("data must be an object");return function t(n,i){if(!Am.isUndefined(n)){if(-1!==u.indexOf(n))throw Error("Circular reference detected in "+i.join("."));u.push(n),Am.forEach(n,(function(n,o){!0===(!(Am.isUndefined(n)||null===n)&&r.call(e,n,Am.isString(o)?o.trim():o,i,h))&&t(n,i?i.concat(o):[o])})),u.pop()}}(t),e};function Fm(t){const e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,(function(t){return e[t]}))}function Nm(t,e){this._pairs=[],t&&Im(t,this,e)}const Bm=Nm.prototype;Bm.append=function(t,e){this._pairs.push([t,e])},Bm.toString=function(t){const e=t?function(e){return t.call(this,e,Fm)}:Fm;return this._pairs.map((function(t){return e(t[0])+"="+e(t[1])}),"").join("&")};const Vm=Nm;function zm(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Hm(t,e,n){if(!e)return t;const i=n&&n.encode||zm,r=n&&n.serialize;let o;if(o=r?r(e,n):Am.isURLSearchParams(e)?e.toString():new Vm(e,n).toString(i),o){const e=t.indexOf("#");-1!==e&&(t=t.slice(0,e)),t+=(-1===t.indexOf("?")?"?":"&")+o}return t}const Um=class{constructor(){this.handlers=[]}use(t,e,n){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){Am.forEach(this.handlers,(function(e){null!==e&&t(e)}))}},$m={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},Wm={isBrowser:!0,classes:{URLSearchParams:"undefined"!=typeof URLSearchParams?URLSearchParams:Vm,FormData:"undefined"!=typeof FormData?FormData:null,Blob:"undefined"!=typeof Blob?Blob:null},protocols:["http","https","file","blob","url","data"]},qm="undefined"!=typeof window&&"undefined"!=typeof document,Gm=(Ym="undefined"!=typeof navigator&&navigator.product,qm&&["ReactNative","NativeScript","NS"].indexOf(Ym)<0);var Ym;const Km="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts,Xm=qm&&window.location.href||"http://localhost",Jm={...t,...Wm},Qm=function(t){function e(t,n,i,r){let o=t[r++];if("__proto__"===o)return!0;const s=Number.isFinite(+o),a=r>=t.length;return o=!o&&Am.isArray(i)?i.length:o,a?(Am.hasOwnProp(i,o)?i[o]=[i[o],n]:i[o]=n,!s):(i[o]&&Am.isObject(i[o])||(i[o]=[]),e(t,n,i[o],r)&&Am.isArray(i[o])&&(i[o]=function(t){const e={},n=Object.keys(t);let i;const r=n.length;let o;for(i=0;i<r;i++)o=n[i],e[o]=t[o];return e}(i[o])),!s)}if(Am.isFormData(t)&&Am.isFunction(t.entries)){const n={};return Am.forEachEntry(t,((t,i)=>{e(function(t){return Am.matchAll(/\w+|\[(\w*)]/g,t).map((t=>"[]"===t[0]?"":t[1]||t[0]))}(t),i,n,0)})),n}return null},Zm={transitional:$m,adapter:["xhr","http","fetch"],transformRequest:[function(t,e){const n=e.getContentType()||"",i=n.indexOf("application/json")>-1,r=Am.isObject(t);if(r&&Am.isHTMLForm(t)&&(t=new FormData(t)),Am.isFormData(t))return i?JSON.stringify(Qm(t)):t;if(Am.isArrayBuffer(t)||Am.isBuffer(t)||Am.isStream(t)||Am.isFile(t)||Am.isBlob(t)||Am.isReadableStream(t))return t;if(Am.isArrayBufferView(t))return t.buffer;if(Am.isURLSearchParams(t))return e.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let o;if(r){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(t,e){return Im(t,new Jm.classes.URLSearchParams,Object.assign({visitor:function(t,e,n,i){return Jm.isNode&&Am.isBuffer(t)?(this.append(e,t.toString("base64")),!1):i.defaultVisitor.apply(this,arguments)}},e))}(t,this.formSerializer).toString();if((o=Am.isFileList(t))||n.indexOf("multipart/form-data")>-1){const e=this.env&&this.env.FormData;return Im(o?{"files[]":t}:t,e&&new e,this.formSerializer)}}return r||i?(e.setContentType("application/json",!1),function(t,e,n){if(Am.isString(t))try{return(0,JSON.parse)(t),Am.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(0,JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){const e=this.transitional||Zm.transitional,n=e&&e.forcedJSONParsing,i="json"===this.responseType;if(Am.isResponse(t)||Am.isReadableStream(t))return t;if(t&&Am.isString(t)&&(n&&!this.responseType||i)){const n=!(e&&e.silentJSONParsing)&&i;try{return JSON.parse(t)}catch(t){if(n){if("SyntaxError"===t.name)throw Mm.from(t,Mm.ERR_BAD_RESPONSE,this,null,this.response);throw t}}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:Jm.classes.FormData,Blob:Jm.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};Am.forEach(["delete","get","head","post","put","patch"],(t=>{Zm.headers[t]={}}));const tb=Zm,eb=Am.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),nb=Symbol("internals");function ib(t){return t&&String(t).trim().toLowerCase()}function rb(t){return!1===t||null==t?t:Am.isArray(t)?t.map(rb):String(t)}function ob(t,e,n,i,r){return Am.isFunction(i)?i.call(this,e,n):(r&&(e=n),Am.isString(e)?Am.isString(i)?-1!==e.indexOf(i):Am.isRegExp(i)?i.test(e):void 0:void 0)}class sb{constructor(t){t&&this.set(t)}set(t,e,n){const i=this;function r(t,e,n){const r=ib(e);if(!r)throw new Error("header name must be a non-empty string");const o=Am.findKey(i,r);(!o||void 0===i[o]||!0===n||void 0===n&&!1!==i[o])&&(i[o||e]=rb(t))}const o=(t,e)=>Am.forEach(t,((t,n)=>r(t,n,e)));if(Am.isPlainObject(t)||t instanceof this.constructor)o(t,e);else if(Am.isString(t)&&(t=t.trim())&&!/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim()))o((t=>{const e={};let n,i,r;return t&&t.split("\n").forEach((function(t){r=t.indexOf(":"),n=t.substring(0,r).trim().toLowerCase(),i=t.substring(r+1).trim(),!n||e[n]&&eb[n]||("set-cookie"===n?e[n]?e[n].push(i):e[n]=[i]:e[n]=e[n]?e[n]+", "+i:i)})),e})(t),e);else if(Am.isHeaders(t))for(const[e,i]of t.entries())r(i,e,n);else null!=t&&r(e,t,n);return this}get(t,e){if(t=ib(t)){const n=Am.findKey(this,t);if(n){const t=this[n];if(!e)return t;if(!0===e)return function(t){const e=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=n.exec(t);)e[i[1]]=i[2];return e}(t);if(Am.isFunction(e))return e.call(this,t,n);if(Am.isRegExp(e))return e.exec(t);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,e){if(t=ib(t)){const n=Am.findKey(this,t);return!(!n||void 0===this[n]||e&&!ob(0,this[n],n,e))}return!1}delete(t,e){const n=this;let i=!1;function r(t){if(t=ib(t)){const r=Am.findKey(n,t);!r||e&&!ob(0,n[r],r,e)||(delete n[r],i=!0)}}return Am.isArray(t)?t.forEach(r):r(t),i}clear(t){const e=Object.keys(this);let n=e.length,i=!1;for(;n--;){const r=e[n];t&&!ob(0,this[r],r,t,!0)||(delete this[r],i=!0)}return i}normalize(t){const e=this,n={};return Am.forEach(this,((i,r)=>{const o=Am.findKey(n,r);if(o)return e[o]=rb(i),void delete e[r];const s=t?function(t){return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((t,e,n)=>e.toUpperCase()+n))}(r):String(r).trim();s!==r&&delete e[r],e[s]=rb(i),n[s]=!0})),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const e=Object.create(null);return Am.forEach(this,((n,i)=>{null!=n&&!1!==n&&(e[i]=t&&Am.isArray(n)?n.join(", "):n)})),e}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map((([t,e])=>t+": "+e)).join("\n")}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...e){const n=new this(t);return e.forEach((t=>n.set(t))),n}static accessor(t){const e=(this[nb]=this[nb]={accessors:{}}).accessors,n=this.prototype;function i(t){const i=ib(t);e[i]||(function(t,e){const n=Am.toCamelCase(" "+e);["get","set","has"].forEach((i=>{Object.defineProperty(t,i+n,{value:function(t,n,r){return this[i].call(this,e,t,n,r)},configurable:!0})}))}(n,t),e[i]=!0)}return Am.isArray(t)?t.forEach(i):i(t),this}}sb.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),Am.reduceDescriptors(sb.prototype,(({value:t},e)=>{let n=e[0].toUpperCase()+e.slice(1);return{get:()=>t,set(t){this[n]=t}}})),Am.freezeMethods(sb);const ab=sb;function lb(t,e){const n=this||tb,i=e||n,r=ab.from(i.headers);let o=i.data;return Am.forEach(t,(function(t){o=t.call(n,o,r.normalize(),e?e.status:void 0)})),r.normalize(),o}function cb(t){return!(!t||!t.__CANCEL__)}function ub(t,e,n){Mm.call(this,null==t?"canceled":t,Mm.ERR_CANCELED,e,n),this.name="CanceledError"}Am.inherits(ub,Mm,{__CANCEL__:!0});const hb=ub;function db(t,e,n){const i=n.config.validateStatus;n.status&&i&&!i(n.status)?e(new Mm("Request failed with status code "+n.status,[Mm.ERR_BAD_REQUEST,Mm.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):t(n)}const fb=(t,e,n=3)=>{let i=0;const r=function(t,e){t=t||10;const n=new Array(t),i=new Array(t);let r,o=0,s=0;return e=void 0!==e?e:1e3,function(a){const l=Date.now(),c=i[s];r||(r=l),n[o]=a,i[o]=l;let u=s,h=0;for(;u!==o;)h+=n[u++],u%=t;if(o=(o+1)%t,o===s&&(s=(s+1)%t),l-r<e)return;const d=c&&l-c;return d?Math.round(1e3*h/d):void 0}}(50,250);return function(t,e){let n=0;const i=1e3/e;let r=null;return function(){const e=!0===this,o=Date.now();if(e||o-n>i)return r&&(clearTimeout(r),r=null),n=o,t.apply(null,arguments);r||(r=setTimeout((()=>(r=null,n=Date.now(),t.apply(null,arguments))),i-(o-n)))}}((n=>{const o=n.loaded,s=n.lengthComputable?n.total:void 0,a=o-i,l=r(a);i=o;const c={loaded:o,total:s,progress:s?o/s:void 0,bytes:a,rate:l||void 0,estimated:l&&s&&o<=s?(s-o)/l:void 0,event:n,lengthComputable:null!=s};c[e?"download":"upload"]=!0,t(c)}),n)},pb=Jm.hasStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");let n;function i(n){let i=n;return t&&(e.setAttribute("href",i),i=e.href),e.setAttribute("href",i),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return n=i(window.location.href),function(t){const e=Am.isString(t)?i(t):t;return e.protocol===n.protocol&&e.host===n.host}}():function(){return!0},gb=Jm.hasStandardBrowserEnv?{write(t,e,n,i,r,o){const s=[t+"="+encodeURIComponent(e)];Am.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),Am.isString(i)&&s.push("path="+i),Am.isString(r)&&s.push("domain="+r),!0===o&&s.push("secure"),document.cookie=s.join("; ")},read(t){const e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove(t){this.write(t,"",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function mb(t,e){return t&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)?function(t,e){return e?t.replace(/\/?\/$/,"")+"/"+e.replace(/^\/+/,""):t}(t,e):e}const bb=t=>t instanceof ab?{...t}:t;function yb(t,e){e=e||{};const n={};function i(t,e,n){return Am.isPlainObject(t)&&Am.isPlainObject(e)?Am.merge.call({caseless:n},t,e):Am.isPlainObject(e)?Am.merge({},e):Am.isArray(e)?e.slice():e}function r(t,e,n){return Am.isUndefined(e)?Am.isUndefined(t)?void 0:i(void 0,t,n):i(t,e,n)}function o(t,e){if(!Am.isUndefined(e))return i(void 0,e)}function s(t,e){return Am.isUndefined(e)?Am.isUndefined(t)?void 0:i(void 0,t):i(void 0,e)}function a(n,r,o){return o in e?i(n,r):o in t?i(void 0,n):void 0}const l={url:o,method:o,data:o,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,withXSRFToken:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:a,headers:(t,e)=>r(bb(t),bb(e),!0)};return Am.forEach(Object.keys(Object.assign({},t,e)),(function(i){const o=l[i]||r,s=o(t[i],e[i],i);Am.isUndefined(s)&&o!==a||(n[i]=s)})),n}const vb=t=>{const e=yb({},t);let n,{data:i,withXSRFToken:r,xsrfHeaderName:o,xsrfCookieName:s,headers:a,auth:l}=e;if(e.headers=a=ab.from(a),e.url=Hm(mb(e.baseURL,e.url),t.params,t.paramsSerializer),l&&a.set("Authorization","Basic "+btoa((l.username||"")+":"+(l.password?unescape(encodeURIComponent(l.password)):""))),Am.isFormData(i))if(Jm.hasStandardBrowserEnv||Jm.hasStandardBrowserWebWorkerEnv)a.setContentType(void 0);else if(!1!==(n=a.getContentType())){const[t,...e]=n?n.split(";").map((t=>t.trim())).filter(Boolean):[];a.setContentType([t||"multipart/form-data",...e].join("; "))}if(Jm.hasStandardBrowserEnv&&(r&&Am.isFunction(r)&&(r=r(e)),r||!1!==r&&pb(e.url))){const t=o&&s&&gb.read(s);t&&a.set(o,t)}return e},_b="undefined"!=typeof XMLHttpRequest&&function(t){return new Promise((function(e,n){const i=vb(t);let r=i.data;const o=ab.from(i.headers).normalize();let s,{responseType:a}=i;function l(){i.cancelToken&&i.cancelToken.unsubscribe(s),i.signal&&i.signal.removeEventListener("abort",s)}let c=new XMLHttpRequest;function u(){if(!c)return;const i=ab.from("getAllResponseHeaders"in c&&c.getAllResponseHeaders());db((function(t){e(t),l()}),(function(t){n(t),l()}),{data:a&&"text"!==a&&"json"!==a?c.response:c.responseText,status:c.status,statusText:c.statusText,headers:i,config:t,request:c}),c=null}c.open(i.method.toUpperCase(),i.url,!0),c.timeout=i.timeout,"onloadend"in c?c.onloadend=u:c.onreadystatechange=function(){c&&4===c.readyState&&(0!==c.status||c.responseURL&&0===c.responseURL.indexOf("file:"))&&setTimeout(u)},c.onabort=function(){c&&(n(new Mm("Request aborted",Mm.ECONNABORTED,i,c)),c=null)},c.onerror=function(){n(new Mm("Network Error",Mm.ERR_NETWORK,i,c)),c=null},c.ontimeout=function(){let t=i.timeout?"timeout of "+i.timeout+"ms exceeded":"timeout exceeded";const e=i.transitional||$m;i.timeoutErrorMessage&&(t=i.timeoutErrorMessage),n(new Mm(t,e.clarifyTimeoutError?Mm.ETIMEDOUT:Mm.ECONNABORTED,i,c)),c=null},void 0===r&&o.setContentType(null),"setRequestHeader"in c&&Am.forEach(o.toJSON(),(function(t,e){c.setRequestHeader(e,t)})),Am.isUndefined(i.withCredentials)||(c.withCredentials=!!i.withCredentials),a&&"json"!==a&&(c.responseType=i.responseType),"function"==typeof i.onDownloadProgress&&c.addEventListener("progress",fb(i.onDownloadProgress,!0)),"function"==typeof i.onUploadProgress&&c.upload&&c.upload.addEventListener("progress",fb(i.onUploadProgress)),(i.cancelToken||i.signal)&&(s=e=>{c&&(n(!e||e.type?new hb(null,t,c):e),c.abort(),c=null)},i.cancelToken&&i.cancelToken.subscribe(s),i.signal&&(i.signal.aborted?s():i.signal.addEventListener("abort",s)));const h=function(t){const e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return e&&e[1]||""}(i.url);h&&-1===Jm.protocols.indexOf(h)?n(new Mm("Unsupported protocol "+h+":",Mm.ERR_BAD_REQUEST,t)):c.send(r||null)}))},xb=(t,e)=>{let n,i=new AbortController;const r=function(t){if(!n){n=!0,s();const e=t instanceof Error?t:this.reason;i.abort(e instanceof Mm?e:new hb(e instanceof Error?e.message:e))}};let o=e&&setTimeout((()=>{r(new Mm(`timeout ${e} of ms exceeded`,Mm.ETIMEDOUT))}),e);const s=()=>{t&&(o&&clearTimeout(o),o=null,t.forEach((t=>{t&&(t.removeEventListener?t.removeEventListener("abort",r):t.unsubscribe(r))})),t=null)};t.forEach((t=>t&&t.addEventListener&&t.addEventListener("abort",r)));const{signal:a}=i;return a.unsubscribe=s,[a,()=>{o&&clearTimeout(o),o=null}]},wb=function*(t,e){let n=t.byteLength;if(!e||n<e)return void(yield t);let i,r=0;for(;r<n;)i=r+e,yield t.slice(r,i),r=i},Sb=(t,e,n,i,r)=>{const o=async function*(t,e,n){for await(const i of t)yield*wb(ArrayBuffer.isView(i)?i:await n(String(i)),e)}(t,e,r);let s=0;return new ReadableStream({type:"bytes",async pull(t){const{done:e,value:r}=await o.next();if(e)return t.close(),void i();let a=r.byteLength;n&&n(s+=a),t.enqueue(new Uint8Array(r))},cancel:t=>(i(t),o.return())},{highWaterMark:2})},Ob=(t,e)=>{const n=null!=t;return i=>setTimeout((()=>e({lengthComputable:n,total:t,loaded:i})))},kb="function"==typeof fetch&&"function"==typeof Request&&"function"==typeof Response,Eb=kb&&"function"==typeof ReadableStream,Ab=kb&&("function"==typeof TextEncoder?(Pb=new TextEncoder,t=>Pb.encode(t)):async t=>new Uint8Array(await new Response(t).arrayBuffer()));var Pb;const Cb=Eb&&(()=>{let t=!1;const e=new Request(Jm.origin,{body:new ReadableStream,method:"POST",get duplex(){return t=!0,"half"}}).headers.has("Content-Type");return t&&!e})(),Tb=Eb&&!!(()=>{try{return Am.isReadableStream(new Response("").body)}catch(t){}})(),Mb={stream:Tb&&(t=>t.body)};var Lb;kb&&(Lb=new Response,["text","arrayBuffer","blob","formData","stream"].forEach((t=>{!Mb[t]&&(Mb[t]=Am.isFunction(Lb[t])?e=>e[t]():(e,n)=>{throw new Mm(`Response type '${t}' is not supported`,Mm.ERR_NOT_SUPPORT,n)})})));const Rb=kb&&(async t=>{let{url:e,method:n,data:i,signal:r,cancelToken:o,timeout:s,onDownloadProgress:a,onUploadProgress:l,responseType:c,headers:u,withCredentials:h="same-origin",fetchOptions:d}=vb(t);c=c?(c+"").toLowerCase():"text";let f,p,[g,m]=r||o||s?xb([r,o],s):[];const b=()=>{!f&&setTimeout((()=>{g&&g.unsubscribe()})),f=!0};let y;try{if(l&&Cb&&"get"!==n&&"head"!==n&&0!==(y=await(async(t,e)=>{const n=Am.toFiniteNumber(t.getContentLength());return null==n?(async t=>null==t?0:Am.isBlob(t)?t.size:Am.isSpecCompliantForm(t)?(await new Request(t).arrayBuffer()).byteLength:Am.isArrayBufferView(t)?t.byteLength:(Am.isURLSearchParams(t)&&(t+=""),Am.isString(t)?(await Ab(t)).byteLength:void 0))(e):n})(u,i))){let t,n=new Request(e,{method:"POST",body:i,duplex:"half"});Am.isFormData(i)&&(t=n.headers.get("content-type"))&&u.setContentType(t),n.body&&(i=Sb(n.body,65536,Ob(y,fb(l)),null,Ab))}Am.isString(h)||(h=h?"cors":"omit"),p=new Request(e,{...d,signal:g,method:n.toUpperCase(),headers:u.normalize().toJSON(),body:i,duplex:"half",withCredentials:h});let r=await fetch(p);const o=Tb&&("stream"===c||"response"===c);if(Tb&&(a||o)){const t={};["status","statusText","headers"].forEach((e=>{t[e]=r[e]}));const e=Am.toFiniteNumber(r.headers.get("content-length"));r=new Response(Sb(r.body,65536,a&&Ob(e,fb(a,!0)),o&&b,Ab),t)}c=c||"text";let s=await Mb[Am.findKey(Mb,c)||"text"](r,t);return!o&&b(),m&&m(),await new Promise(((e,n)=>{db(e,n,{data:s,headers:ab.from(r.headers),status:r.status,statusText:r.statusText,config:t,request:p})}))}catch(e){if(b(),e&&"TypeError"===e.name&&/fetch/i.test(e.message))throw Object.assign(new Mm("Network Error",Mm.ERR_NETWORK,t,p),{cause:e.cause||e});throw Mm.from(e,e&&e.code,t,p)}}),Db={http:null,xhr:_b,fetch:Rb};Am.forEach(Db,((t,e)=>{if(t){try{Object.defineProperty(t,"name",{value:e})}catch(t){}Object.defineProperty(t,"adapterName",{value:e})}}));const jb=t=>`- ${t}`,Ib=t=>Am.isFunction(t)||null===t||!1===t,Fb=t=>{t=Am.isArray(t)?t:[t];const{length:e}=t;let n,i;const r={};for(let o=0;o<e;o++){let e;if(n=t[o],i=n,!Ib(n)&&(i=Db[(e=String(n)).toLowerCase()],void 0===i))throw new Mm(`Unknown adapter '${e}'`);if(i)break;r[e||"#"+o]=i}if(!i){const t=Object.entries(r).map((([t,e])=>`adapter ${t} `+(!1===e?"is not supported by the environment":"is not available in the build")));let n=e?t.length>1?"since :\n"+t.map(jb).join("\n"):" "+jb(t[0]):"as no adapter specified";throw new Mm("There is no suitable adapter to dispatch the request "+n,"ERR_NOT_SUPPORT")}return i};function Nb(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new hb(null,t)}function Bb(t){return Nb(t),t.headers=ab.from(t.headers),t.data=lb.call(t,t.transformRequest),-1!==["post","put","patch"].indexOf(t.method)&&t.headers.setContentType("application/x-www-form-urlencoded",!1),Fb(t.adapter||tb.adapter)(t).then((function(e){return Nb(t),e.data=lb.call(t,t.transformResponse,e),e.headers=ab.from(e.headers),e}),(function(e){return cb(e)||(Nb(t),e&&e.response&&(e.response.data=lb.call(t,t.transformResponse,e.response),e.response.headers=ab.from(e.response.headers))),Promise.reject(e)}))}const Vb={};["object","boolean","number","function","string","symbol"].forEach(((t,e)=>{Vb[t]=function(n){return typeof n===t||"a"+(e<1?"n ":" ")+t}}));const zb={};Vb.transitional=function(t,e,n){function i(t,e){return"[Axios v1.7.2] Transitional option '"+t+"'"+e+(n?". "+n:"")}return(n,r,o)=>{if(!1===t)throw new Mm(i(r," has been removed"+(e?" in "+e:"")),Mm.ERR_DEPRECATED);return e&&!zb[r]&&(zb[r]=!0,console.warn(i(r," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(n,r,o)}};const Hb={assertOptions:function(t,e,n){if("object"!=typeof t)throw new Mm("options must be an object",Mm.ERR_BAD_OPTION_VALUE);const i=Object.keys(t);let r=i.length;for(;r-- >0;){const o=i[r],s=e[o];if(s){const e=t[o],n=void 0===e||s(e,o,t);if(!0!==n)throw new Mm("option "+o+" must be "+n,Mm.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Mm("Unknown option "+o,Mm.ERR_BAD_OPTION)}},validators:Vb},Ub=Hb.validators;class $b{constructor(t){this.defaults=t,this.interceptors={request:new Um,response:new Um}}async request(t,e){try{return await this._request(t,e)}catch(t){if(t instanceof Error){let e;Error.captureStackTrace?Error.captureStackTrace(e={}):e=new Error;const n=e.stack?e.stack.replace(/^.+\n/,""):"";try{t.stack?n&&!String(t.stack).endsWith(n.replace(/^.+\n.+\n/,""))&&(t.stack+="\n"+n):t.stack=n}catch(t){}}throw t}}_request(t,e){"string"==typeof t?(e=e||{}).url=t:e=t||{},e=yb(this.defaults,e);const{transitional:n,paramsSerializer:i,headers:r}=e;void 0!==n&&Hb.assertOptions(n,{silentJSONParsing:Ub.transitional(Ub.boolean),forcedJSONParsing:Ub.transitional(Ub.boolean),clarifyTimeoutError:Ub.transitional(Ub.boolean)},!1),null!=i&&(Am.isFunction(i)?e.paramsSerializer={serialize:i}:Hb.assertOptions(i,{encode:Ub.function,serialize:Ub.function},!0)),e.method=(e.method||this.defaults.method||"get").toLowerCase();let o=r&&Am.merge(r.common,r[e.method]);r&&Am.forEach(["delete","get","head","post","put","patch","common"],(t=>{delete r[t]})),e.headers=ab.concat(o,r);const s=[];let a=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(a=a&&t.synchronous,s.unshift(t.fulfilled,t.rejected))}));const l=[];let c;this.interceptors.response.forEach((function(t){l.push(t.fulfilled,t.rejected)}));let u,h=0;if(!a){const t=[Bb.bind(this),void 0];for(t.unshift.apply(t,s),t.push.apply(t,l),u=t.length,c=Promise.resolve(e);h<u;)c=c.then(t[h++],t[h++]);return c}u=s.length;let d=e;for(h=0;h<u;){const t=s[h++],e=s[h++];try{d=t(d)}catch(t){e.call(this,t);break}}try{c=Bb.call(this,d)}catch(t){return Promise.reject(t)}for(h=0,u=l.length;h<u;)c=c.then(l[h++],l[h++]);return c}getUri(t){return Hm(mb((t=yb(this.defaults,t)).baseURL,t.url),t.params,t.paramsSerializer)}}Am.forEach(["delete","get","head","options"],(function(t){$b.prototype[t]=function(e,n){return this.request(yb(n||{},{method:t,url:e,data:(n||{}).data}))}})),Am.forEach(["post","put","patch"],(function(t){function e(e){return function(n,i,r){return this.request(yb(r||{},{method:t,headers:e?{"Content-Type":"multipart/form-data"}:{},url:n,data:i}))}}$b.prototype[t]=e(),$b.prototype[t+"Form"]=e(!0)}));const Wb=$b;class qb{constructor(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");let e;this.promise=new Promise((function(t){e=t}));const n=this;this.promise.then((t=>{if(!n._listeners)return;let e=n._listeners.length;for(;e-- >0;)n._listeners[e](t);n._listeners=null})),this.promise.then=t=>{let e;const i=new Promise((t=>{n.subscribe(t),e=t})).then(t);return i.cancel=function(){n.unsubscribe(e)},i},t((function(t,i,r){n.reason||(n.reason=new hb(t,i,r),e(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){this.reason?t(this.reason):this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}static source(){let t;return{token:new qb((function(e){t=e})),cancel:t}}}const Gb=qb,Yb={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(Yb).forEach((([t,e])=>{Yb[e]=t}));const Kb=Yb,Xb=function t(e){const n=new Wb(e),i=Ug(Wb.prototype.request,n);return Am.extend(i,Wb.prototype,n,{allOwnKeys:!0}),Am.extend(i,n,null,{allOwnKeys:!0}),i.create=function(n){return t(yb(e,n))},i}(tb);Xb.Axios=Wb,Xb.CanceledError=hb,Xb.CancelToken=Gb,Xb.isCancel=cb,Xb.VERSION="1.7.2",Xb.toFormData=Im,Xb.AxiosError=Mm,Xb.Cancel=Xb.CanceledError,Xb.all=function(t){return Promise.all(t)},Xb.spread=function(t){return function(e){return t.apply(null,e)}},Xb.isAxiosError=function(t){return Am.isObject(t)&&!0===t.isAxiosError},Xb.mergeConfig=yb,Xb.AxiosHeaders=ab,Xb.formToJSON=t=>Qm(Am.isHTMLForm(t)?new FormData(t):t),Xb.getAdapter=Fb,Xb.HttpStatusCode=Kb,Xb.default=Xb;const Jb=Xb;function Qb(t){return Qb="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Qb(t)}function Zb(){Zb=function(){return e};var t,e={},n=Object.prototype,i=n.hasOwnProperty,r=Object.defineProperty||function(t,e,n){t[e]=n.value},o="function"==typeof Symbol?Symbol:{},s=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{c({},"")}catch(t){c=function(t,e,n){return t[e]=n}}function u(t,e,n,i){var o=e&&e.prototype instanceof b?e:b,s=Object.create(o.prototype),a=new T(i||[]);return r(s,"_invoke",{value:E(t,n,a)}),s}function h(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",g="completed",m={};function b(){}function y(){}function v(){}var _={};c(_,s,(function(){return this}));var x=Object.getPrototypeOf,w=x&&x(x(M([])));w&&w!==n&&i.call(w,s)&&(_=w);var S=v.prototype=b.prototype=Object.create(_);function O(t){["next","throw","return"].forEach((function(e){c(t,e,(function(t){return this._invoke(e,t)}))}))}function k(t,e){function n(r,o,s,a){var l=h(t[r],t,o);if("throw"!==l.type){var c=l.arg,u=c.value;return u&&"object"==Qb(u)&&i.call(u,"__await")?e.resolve(u.__await).then((function(t){n("next",t,s,a)}),(function(t){n("throw",t,s,a)})):e.resolve(u).then((function(t){c.value=t,s(c)}),(function(t){return n("throw",t,s,a)}))}a(l.arg)}var o;r(this,"_invoke",{value:function(t,i){function r(){return new e((function(e,r){n(t,i,e,r)}))}return o=o?o.then(r,r):r()}})}function E(e,n,i){var r=d;return function(o,s){if(r===p)throw Error("Generator is already running");if(r===g){if("throw"===o)throw s;return{value:t,done:!0}}for(i.method=o,i.arg=s;;){var a=i.delegate;if(a){var l=A(a,i);if(l){if(l===m)continue;return l}}if("next"===i.method)i.sent=i._sent=i.arg;else if("throw"===i.method){if(r===d)throw r=g,i.arg;i.dispatchException(i.arg)}else"return"===i.method&&i.abrupt("return",i.arg);r=p;var c=h(e,n,i);if("normal"===c.type){if(r=i.done?g:f,c.arg===m)continue;return{value:c.arg,done:i.done}}"throw"===c.type&&(r=g,i.method="throw",i.arg=c.arg)}}}function A(e,n){var i=n.method,r=e.iterator[i];if(r===t)return n.delegate=null,"throw"===i&&e.iterator.return&&(n.method="return",n.arg=t,A(e,n),"throw"===n.method)||"return"!==i&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+i+"' method")),m;var o=h(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,m;var s=o.arg;return s?s.done?(n[e.resultName]=s.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):s:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function P(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function T(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(P,this),this.reset(!0)}function M(e){if(e||""===e){var n=e[s];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function n(){for(;++r<e.length;)if(i.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=t,n.done=!0,n};return o.next=o}}throw new TypeError(Qb(e)+" is not iterable")}return y.prototype=v,r(S,"constructor",{value:v,configurable:!0}),r(v,"constructor",{value:y,configurable:!0}),y.displayName=c(v,l,"GeneratorFunction"),e.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},e.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,v):(t.__proto__=v,c(t,l,"GeneratorFunction")),t.prototype=Object.create(S),t},e.awrap=function(t){return{__await:t}},O(k.prototype),c(k.prototype,a,(function(){return this})),e.AsyncIterator=k,e.async=function(t,n,i,r,o){void 0===o&&(o=Promise);var s=new k(u(t,n,i,r),o);return e.isGeneratorFunction(n)?s:s.next().then((function(t){return t.done?t.value:s.next()}))},O(S),c(S,l,"Generator"),c(S,s,(function(){return this})),c(S,"toString",(function(){return"[object Generator]"})),e.keys=function(t){var e=Object(t),n=[];for(var i in e)n.push(i);return n.reverse(),function t(){for(;n.length;){var i=n.pop();if(i in e)return t.value=i,t.done=!1,t}return t.done=!0,t}},e.values=M,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(C),!e)for(var n in this)"t"===n.charAt(0)&&i.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(i,r){return a.type="throw",a.arg=e,n.next=i,r&&(n.method="next",n.arg=t),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var s=this.tryEntries[o],a=s.completion;if("root"===s.tryLoc)return r("end");if(s.tryLoc<=this.prev){var l=i.call(s,"catchLoc"),c=i.call(s,"finallyLoc");if(l&&c){if(this.prev<s.catchLoc)return r(s.catchLoc,!0);if(this.prev<s.finallyLoc)return r(s.finallyLoc)}else if(l){if(this.prev<s.catchLoc)return r(s.catchLoc,!0)}else{if(!c)throw Error("try statement without catch or finally");if(this.prev<s.finallyLoc)return r(s.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&i.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var o=r;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var s=o?o.completion:{};return s.type=t,s.arg=e,o?(this.method="next",this.next=o.finallyLoc,m):this.complete(s)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),m},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),C(n),m}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var i=n.completion;if("throw"===i.type){var r=i.arg;C(n)}return r}}throw Error("illegal catch attempt")},delegateYield:function(e,n,i){return this.delegate={iterator:M(e),resultName:n,nextLoc:i},"next"===this.method&&(this.arg=t),m}},e}function ty(t,e,n,i,r,o,s){try{var a=t[o](s),l=a.value}catch(t){return void n(t)}a.done?e(l):Promise.resolve(l).then(i,r)}function ey(t){return function(){var e=this,n=arguments;return new Promise((function(i,r){var o=t.apply(e,n);function s(t){ty(o,i,r,s,a,"next",t)}function a(t){ty(o,i,r,s,a,"throw",t)}s(void 0)}))}}var ny={storeSettings:function(t,e){return ey(Zb().mark((function n(){var i,r;return Zb().wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return i=t.commit,n.prev=1,i("setSettingsSaving",!0),n.next=5,Jb.post("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/settings"),e,{headers:{"X-WP-Nonce":"".concat(wpAmVue.site.nonce),"content-type":"application/json"}});case 5:r=n.sent,i("storeSettings",r.data),i("setSettingsSaving",!1),n.next=14;break;case 10:n.prev=10,n.t0=n.catch(1),console.error("Error while saving settings:",n.t0),i("setSettingsSaving",!1);case 14:case"end":return n.stop()}}),n,null,[[1,10]])})))()},getSettings:function(t){return ey(Zb().mark((function e(){var n,i;return Zb().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=t.commit,e.prev=1,e.next=4,Jb.get("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/settings"));case 4:i=e.sent,n("storeSettings",i.data),e.next=11;break;case 8:e.prev=8,e.t0=e.catch(1),console.error("Error while fetching settings:",e.t0);case 11:case"end":return e.stop()}}),e,null,[[1,8]])})))()}};function iy(t){return iy="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},iy(t)}function ry(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function oy(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?ry(Object(n),!0).forEach((function(e){sy(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):ry(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function sy(t,e,n){return(e=function(t){var e=function(t,e){if("object"!=iy(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var i=n.call(t,"string");if("object"!=iy(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==iy(e)?e:e+""}(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function ay(t){return function(t){if(Array.isArray(t))return ly(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return ly(t,e);var n={}.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ly(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ly(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=Array(e);n<e;n++)i[n]=t[n];return i}var cy={getTableData:function(t){var e=t.commit,n=t.rootGetters.settings;n?Jb.get("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/data")).then((function(t){var i=t.data.table.data,r=i.headers,o=i.rows.map((function(t){return{id:t.id,url:t.url,title:t.title,pageviews:t.pageviews,date:1===n.readable?new Date(1e3*t.date).toLocaleString():t.date}})).slice(0,n.rows);e("SET_TABLE_HEADERS",r),e("SET_TABLE_ROWS",o)})).catch((function(t){console.error("Error fetching table data:",t)})):console.error("Settings not found")}};const uy=new Kl({modules:{global:{state:function(){return{alert:{isVisible:!1,message:"",type:"default"}}},getters:{alert:function(t){return t.alert}},actions:{setAlert:function(t,e){var n=t.commit;n("setAlert",e),"success"===e.type&&setTimeout((function(){n("hideAlert")}),5e3)},showAlert:function(t){(0,t.commit)("setIsAlertVisible",!0)},hideAlert:function(t){(0,t.commit)("hideAlert",!1)}},mutations:{setAlert:function(t,e){t.alert=oy(oy({},t.alert),{},{isVisible:!0},e)},hideAlert:function(t){t.alert={isVisible:!1,message:"",type:"default"}},setIsAlertVisible:function(t,e){t.alert=oy(oy({},t.alert),{},{isVisible:e})}}},settings:{state:function(){return{settings:null,isSaving:!1}},getters:{settings:function(t){return t.settings},isSaving:function(t){return t.isSaving}},actions:ny,mutations:{storeSettings:function(t,e){t.settings=e},setSettingsSaving:function(t,e){t.isSaving=e}}},graph:{state:{graphData:{labels:[],values:[]}},mutations:{SET_GRAPH_DATA:function(t,e){var n,i;t.graphData.labels=[],t.graphData.values=[],(n=t.graphData.labels).push.apply(n,ay(e.labels)),(i=t.graphData.values).push.apply(i,ay(e.values))}},actions:{fetchGraphData:function(t){var e=t.commit;Jb.get("".concat(wpAmVue.site.rest_base,"/wp-am-vue-app/v1/data")).then((function(t){var n=t.data.graph,i=[],r=[];Object.values(n).forEach((function(t){var e=new Date(1e3*t.date);i.push(e.toLocaleString("default",{month:"long"})),r.push(t.value)})),e("SET_GRAPH_DATA",{labels:i,values:r})})).catch((function(t){console.error("Error fetching data in:",t)}))}},getters:{getGraphData:function(t){return t.graphData}}},table:{state:{tableHeaders:[],tableRows:[]},mutations:{SET_TABLE_HEADERS:function(t,e){t.tableHeaders=e},SET_TABLE_ROWS:function(t,e){t.tableRows=e}},actions:cy,getters:{getTableHeaders:function(t){return t.tableHeaders},getTableRows:function(t){return t.tableRows}}}},strict:!1,plugins:[]});var hy=((...t)=>{const e=(Mo||(Mo=ki(To))).createApp(...t),{mount:n}=e;return e.mount=t=>{const i=function(t){return b(t)?document.querySelector(t):t}(t);if(!i)return;const r=e._component;m(r)||r.render||r.template||(r.template=i.innerHTML),i.innerHTML="";const o=n(i,!1,function(t){return t instanceof SVGElement?"svg":"function"==typeof MathMLElement&&t instanceof MathMLElement?"mathml":void 0}(i));return i instanceof Element&&(i.removeAttribute("v-cloak"),i.setAttribute("data-v-app","")),o},e})({extends:Ss,mixins:[Hg]});hy.use(Ag).use(uy),hy.config.devtools=!1,hy.mount("#wp-am-vue-app"),window.wpAmVueHooks=Ho(),wpAmVueHooks.addFilter=function(t,e,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10;wpAmVueHooks.hooks.addFilter(t,e,(function(t){return t.push(n),t}),i)}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,