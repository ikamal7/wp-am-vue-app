/*! For license information please see vendors-node_modules_vue-chartjs_dist_index_js.js.LICENSE.txt */
"use strict";(self.webpackChunkwpamvuekit=self.webpackChunkwpamvuekit||[]).push([["vendors-node_modules_vue-chartjs_dist_index_js"],{"./node_modules/@kurkle/color/dist/color.esm.js":(t,e,i)=>{function s(t){return t+.5|0}i.r(e),i.d(e,{Color:()=>$,b2n:()=>l,b2p:()=>a,default:()=>Y,hexParse:()=>m,hexString:()=>x,hsl2rgb:()=>S,hslString:()=>T,hsv2rgb:()=>D,hueParse:()=>O,hwb2rgb:()=>P,lim:()=>n,n2b:()=>r,n2p:()=>h,nameParse:()=>F,p2b:()=>o,rgb2hsl:()=>w,rgbParse:()=>z,rgbString:()=>V,rotate:()=>A,round:()=>s});const n=(t,e,i)=>Math.max(Math.min(t,i),e);function o(t){return n(s(2.55*t),0,255)}function a(t){return n(s(t/2.55),0,100)}function r(t){return n(s(255*t),0,255)}function l(t){return n(s(t/2.55)/100,0,1)}function h(t){return n(s(100*t),0,100)}const c={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},d=[..."0123456789ABCDEF"],u=t=>d[15&t],f=t=>d[(240&t)>>4]+d[15&t],g=t=>(240&t)>>4==(15&t),p=t=>g(t.r)&&g(t.g)&&g(t.b)&&g(t.a);function m(t){var e,i=t.length;return"#"===t[0]&&(4===i||5===i?e={r:255&17*c[t[1]],g:255&17*c[t[2]],b:255&17*c[t[3]],a:5===i?17*c[t[4]]:255}:7!==i&&9!==i||(e={r:c[t[1]]<<4|c[t[2]],g:c[t[3]]<<4|c[t[4]],b:c[t[5]]<<4|c[t[6]],a:9===i?c[t[7]]<<4|c[t[8]]:255})),e}const b=(t,e)=>t<255?e(t):"";function x(t){var e=p(t)?u:f;return t?"#"+e(t.r)+e(t.g)+e(t.b)+b(t.a,e):void 0}const _=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function y(t,e,i){const s=e*Math.min(i,1-i),n=(e,n=(e+t/30)%12)=>i-s*Math.max(Math.min(n-3,9-n,1),-1);return[n(0),n(8),n(4)]}function v(t,e,i){const s=(s,n=(s+t/60)%6)=>i-i*e*Math.max(Math.min(n,4-n,1),0);return[s(5),s(3),s(1)]}function M(t,e,i){const s=y(t,1,.5);let n;for(e+i>1&&(n=1/(e+i),e*=n,i*=n),n=0;n<3;n++)s[n]*=1-e-i,s[n]+=e;return s}function w(t){const e=t.r/255,i=t.g/255,s=t.b/255,n=Math.max(e,i,s),o=Math.min(e,i,s),a=(n+o)/2;let r,l,h;return n!==o&&(h=n-o,l=a>.5?h/(2-n-o):h/(n+o),r=function(t,e,i,s,n){return t===n?(e-i)/s+(e<i?6:0):e===n?(i-t)/s+2:(t-e)/s+4}(e,i,s,h,n),r=60*r+.5),[0|r,l||0,a]}function k(t,e,i,s){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,i,s)).map(r)}function S(t,e,i){return k(y,t,e,i)}function P(t,e,i){return k(M,t,e,i)}function D(t,e,i){return k(v,t,e,i)}function C(t){return(t%360+360)%360}function O(t){const e=_.exec(t);let i,s=255;if(!e)return;e[5]!==i&&(s=e[6]?o(+e[5]):r(+e[5]));const n=C(+e[2]),a=+e[3]/100,l=+e[4]/100;return i="hwb"===e[1]?P(n,a,l):"hsv"===e[1]?D(n,a,l):S(n,a,l),{r:i[0],g:i[1],b:i[2],a:s}}function A(t,e){var i=w(t);i[0]=C(i[0]+e),i=S(i),t.r=i[0],t.g=i[1],t.b=i[2]}function T(t){if(!t)return;const e=w(t),i=e[0],s=h(e[1]),n=h(e[2]);return t.a<255?`hsla(${i}, ${s}%, ${n}%, ${l(t.a)})`:`hsl(${i}, ${s}%, ${n}%)`}const E={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},L={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let R;function F(t){R||(R=function(){const t={},e=Object.keys(L),i=Object.keys(E);let s,n,o,a,r;for(s=0;s<e.length;s++){for(a=r=e[s],n=0;n<i.length;n++)o=i[n],r=r.replace(o,E[o]);o=parseInt(L[a],16),t[r]=[o>>16&255,o>>8&255,255&o]}return t}(),R.transparent=[0,0,0,0]);const e=R[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}const I=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function z(t){const e=I.exec(t);let i,s,a,r=255;if(e){if(e[7]!==i){const t=+e[7];r=e[8]?o(t):n(255*t,0,255)}return i=+e[1],s=+e[3],a=+e[5],i=255&(e[2]?o(i):n(i,0,255)),s=255&(e[4]?o(s):n(s,0,255)),a=255&(e[6]?o(a):n(a,0,255)),{r:i,g:s,b:a,a:r}}}function V(t){return t&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${l(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`)}const B=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,j=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function W(t,e,i){if(t){let s=w(t);s[e]=Math.max(0,Math.min(s[e]+s[e]*i,0===e?360:1)),s=S(s),t.r=s[0],t.g=s[1],t.b=s[2]}}function N(t,e){return t?Object.assign(e||{},t):t}function H(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=r(t[3]))):(e=N(t,{r:0,g:0,b:0,a:1})).a=r(e.a),e}class ${constructor(t){if(t instanceof $)return t;const e=typeof t;let i;var s;"object"===e?i=H(t):"string"===e&&(i=m(t)||F(t)||("r"===(s=t).charAt(0)?z(s):O(s))),this._rgb=i,this._valid=!!i}get valid(){return this._valid}get rgb(){var t=N(this._rgb);return t&&(t.a=l(t.a)),t}set rgb(t){this._rgb=H(t)}rgbString(){return this._valid?V(this._rgb):void 0}hexString(){return this._valid?x(this._rgb):void 0}hslString(){return this._valid?T(this._rgb):void 0}mix(t,e){if(t){const i=this.rgb,s=t.rgb;let n;const o=e===n?.5:e,a=2*o-1,r=i.a-s.a,l=((a*r==-1?a:(a+r)/(1+a*r))+1)/2;n=1-l,i.r=255&l*i.r+n*s.r+.5,i.g=255&l*i.g+n*s.g+.5,i.b=255&l*i.b+n*s.b+.5,i.a=o*i.a+(1-o)*s.a,this.rgb=i}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,i){const s=j(l(t.r)),n=j(l(t.g)),o=j(l(t.b));return{r:r(B(s+i*(j(l(e.r))-s))),g:r(B(n+i*(j(l(e.g))-n))),b:r(B(o+i*(j(l(e.b))-o))),a:t.a+i*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new $(this.rgb)}alpha(t){return this._rgb.a=r(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=s(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return W(this._rgb,2,t),this}darken(t){return W(this._rgb,2,-t),this}saturate(t){return W(this._rgb,1,t),this}desaturate(t){return W(this._rgb,1,-t),this}rotate(t){return A(this._rgb,t),this}}function Y(t){return new $(t)}},"./node_modules/chart.js/dist/chart.js":(t,e,i)=>{i.r(e),i.d(e,{Animation:()=>l,Animations:()=>h,ArcElement:()=>fe,BarController:()=>A,BarElement:()=>Oe,BasePlatform:()=>at,BasicPlatform:()=>rt,BubbleController:()=>T,CategoryScale:()=>Di,Chart:()=>he,Colors:()=>Ie,DatasetController:()=>v,Decimation:()=>Be,DomPlatform:()=>Mt,DoughnutController:()=>E,Element:()=>kt,Filler:()=>ei,Interaction:()=>X,Legend:()=>oi,LineController:()=>L,LineElement:()=>ve,LinearScale:()=>Ai,LogarithmicScale:()=>Fi,PieController:()=>F,PointElement:()=>we,PolarAreaController:()=>R,RadarController:()=>I,RadialLinearScale:()=>Hi,Scale:()=>Lt,ScatterController:()=>z,SubTitle:()=>hi,Ticks:()=>s.aL,TimeScale:()=>Zi,TimeSeriesScale:()=>Ji,Title:()=>ri,Tooltip:()=>ki,_adapters:()=>W,_detectPlatform:()=>wt,animator:()=>o,controllers:()=>V,defaults:()=>s.d,elements:()=>Ae,layouts:()=>ot,plugins:()=>Si,registerables:()=>es,registry:()=>It,scales:()=>ts});var s=i("./node_modules/chart.js/dist/chunks/helpers.segment.js");class n{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,i,s){const n=e.listeners[s],o=e.duration;n.forEach((s=>s({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(i-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=s.r.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((i,s)=>{if(!i.running||!i.items.length)return;const n=i.items;let o,a=n.length-1,r=!1;for(;a>=0;--a)o=n[a],o._active?(o._total>i.duration&&(i.duration=o._total),o.tick(t),r=!0):(n[a]=n[n.length-1],n.pop());r&&(s.draw(),this._notify(s,i,t,"progress")),n.length||(i.running=!1,this._notify(s,i,t,"complete"),i.initial=!1),e+=n.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let i=e.get(t);return i||(i={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,i)),i}listen(t,e,i){this._getAnims(t).listeners[e].push(i)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const i=e.items;let s=i.length-1;for(;s>=0;--s)i[s].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}}var o=new n;const a="transparent",r={boolean:(t,e,i)=>i>.5?e:t,color(t,e,i){const n=(0,s.c)(t||a),o=n.valid&&(0,s.c)(e||a);return o&&o.valid?o.mix(n,i).hexString():e},number:(t,e,i)=>t+(e-t)*i};class l{constructor(t,e,i,n){const o=e[i];n=(0,s.a)([t.to,n,o,t.from]);const a=(0,s.a)([t.from,o,n]);this._active=!0,this._fn=t.fn||r[t.type||typeof a],this._easing=s.e[t.easing]||s.e.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=i,this._from=a,this._to=n,this._promises=void 0}active(){return this._active}update(t,e,i){if(this._active){this._notify(!1);const n=this._target[this._prop],o=i-this._start,a=this._duration-o;this._start=i,this._duration=Math.floor(Math.max(a,t.duration)),this._total+=o,this._loop=!!t.loop,this._to=(0,s.a)([t.to,e,n,t.from]),this._from=(0,s.a)([t.from,n,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,i=this._duration,s=this._prop,n=this._from,o=this._loop,a=this._to;let r;if(this._active=n!==a&&(o||e<i),!this._active)return this._target[s]=a,void this._notify(!0);e<0?this._target[s]=n:(r=e/i%2,r=o&&r>1?2-r:r,r=this._easing(Math.min(1,Math.max(0,r))),this._target[s]=this._fn(n,a,r))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,i)=>{t.push({res:e,rej:i})}))}_notify(t){const e=t?"res":"rej",i=this._promises||[];for(let t=0;t<i.length;t++)i[t][e]()}}class h{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!(0,s.i)(t))return;const e=Object.keys(s.d.animation),i=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const o=t[n];if(!(0,s.i)(o))return;const a={};for(const t of e)a[t]=o[t];((0,s.b)(o.properties)&&o.properties||[n]).forEach((t=>{t!==n&&i.has(t)||i.set(t,a)}))}))}_animateOptions(t,e){const i=e.options,s=function(t,e){if(!e)return;let i=t.options;if(i)return i.$shared&&(t.options=i=Object.assign({},i,{$shared:!1,$animations:{}})),i;t.options=e}(t,i);if(!s)return[];const n=this._createAnimations(s,i);return i.$shared&&function(t,e){const i=[],s=Object.keys(e);for(let e=0;e<s.length;e++){const n=t[s[e]];n&&n.active()&&i.push(n.wait())}return Promise.all(i)}(t.options.$animations,i).then((()=>{t.options=i}),(()=>{})),n}_createAnimations(t,e){const i=this._properties,s=[],n=t.$animations||(t.$animations={}),o=Object.keys(e),a=Date.now();let r;for(r=o.length-1;r>=0;--r){const h=o[r];if("$"===h.charAt(0))continue;if("options"===h){s.push(...this._animateOptions(t,e));continue}const c=e[h];let d=n[h];const u=i.get(h);if(d){if(u&&d.active()){d.update(u,c,a);continue}d.cancel()}u&&u.duration?(n[h]=d=new l(u,t,h,c),s.push(d)):t[h]=c}return s}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const i=this._createAnimations(t,e);return i.length?(o.add(this._chart,i),!0):void 0}}function c(t,e){const i=t&&t.options||{},s=i.reverse,n=void 0===i.min?e:0,o=void 0===i.max?e:0;return{start:s?o:n,end:s?n:o}}function d(t,e){const i=[],s=t._getSortedDatasetMetas(e);let n,o;for(n=0,o=s.length;n<o;++n)i.push(s[n].index);return i}function u(t,e,i,n={}){const o=t.keys,a="single"===n.mode;let r,l,h,c;if(null!==e){for(r=0,l=o.length;r<l;++r){if(h=+o[r],h===i){if(n.all)continue;break}c=t.values[h],(0,s.g)(c)&&(a||0===e||(0,s.s)(e)===(0,s.s)(c))&&(e+=c)}return e}}function f(t,e){const i=t&&t.options.stacked;return i||void 0===i&&void 0!==e.stack}function g(t,e,i){const s=t[e]||(t[e]={});return s[i]||(s[i]={})}function p(t,e,i,s){for(const n of e.getMatchingVisibleMetas(s).reverse()){const e=t[n.index];if(i&&e>0||!i&&e<0)return n.index}return null}function m(t,e){const{chart:i,_cachedMeta:s}=t,n=i._stacks||(i._stacks={}),{iScale:o,vScale:a,index:r}=s,l=o.axis,h=a.axis,c=function(t,e,i){return`${t.id}.${e.id}.${i.stack||i.type}`}(o,a,s),d=e.length;let u;for(let t=0;t<d;++t){const i=e[t],{[l]:o,[h]:d}=i;u=(i._stacks||(i._stacks={}))[h]=g(n,c,o),u[r]=d,u._top=p(u,a,!0,s.type),u._bottom=p(u,a,!1,s.type),(u._visualValues||(u._visualValues={}))[r]=d}}function b(t,e){const i=t.scales;return Object.keys(i).filter((t=>i[t].axis===e)).shift()}function x(t,e){const i=t.controller.index,s=t.vScale&&t.vScale.axis;if(s){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[s]||void 0===e[s][i])return;delete e[s][i],void 0!==e[s]._visualValues&&void 0!==e[s]._visualValues[i]&&delete e[s]._visualValues[i]}}}const _=t=>"reset"===t||"none"===t,y=(t,e)=>e?t:Object.assign({},t);class v{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=f(t.vScale,t),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(t){this.index!==t&&x(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,i=this.getDataset(),n=(t,e,i,s)=>"x"===t?e:"r"===t?s:i,o=e.xAxisID=(0,s.v)(i.xAxisID,b(t,"x")),a=e.yAxisID=(0,s.v)(i.yAxisID,b(t,"y")),r=e.rAxisID=(0,s.v)(i.rAxisID,b(t,"r")),l=e.indexAxis,h=e.iAxisID=n(l,o,a,r),c=e.vAxisID=n(l,a,o,r);e.xScale=this.getScaleForId(o),e.yScale=this.getScaleForId(a),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(h),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&(0,s.u)(this._data,this),t._stacked&&x(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),i=this._data;if((0,s.i)(e))this._data=function(t){const e=Object.keys(t),i=new Array(e.length);let s,n,o;for(s=0,n=e.length;s<n;++s)o=e[s],i[s]={x:o,y:t[o]};return i}(e);else if(i!==e){if(i){(0,s.u)(i,this);const t=this._cachedMeta;x(t),t._parsed=[]}e&&Object.isExtensible(e)&&(0,s.l)(e,this),this._syncList=[],this._data=e}}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,i=this.getDataset();let s=!1;this._dataCheck();const n=e._stacked;e._stacked=f(e.vScale,e),e.stack!==i.stack&&(s=!0,x(e),e.stack=i.stack),this._resyncElements(t),(s||n!==e._stacked)&&m(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),i=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(i,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:i,_data:n}=this,{iScale:o,_stacked:a}=i,r=o.axis;let l,h,c,d=0===t&&e===n.length||i._sorted,u=t>0&&i._parsed[t-1];if(!1===this._parsing)i._parsed=n,i._sorted=!0,c=n;else{c=(0,s.b)(n[t])?this.parseArrayData(i,n,t,e):(0,s.i)(n[t])?this.parseObjectData(i,n,t,e):this.parsePrimitiveData(i,n,t,e);const o=()=>null===h[r]||u&&h[r]<u[r];for(l=0;l<e;++l)i._parsed[l+t]=h=c[l],d&&(o()&&(d=!1),u=h);i._sorted=d}a&&m(this,c)}parsePrimitiveData(t,e,i,s){const{iScale:n,vScale:o}=t,a=n.axis,r=o.axis,l=n.getLabels(),h=n===o,c=new Array(s);let d,u,f;for(d=0,u=s;d<u;++d)f=d+i,c[d]={[a]:h||n.parse(l[f],f),[r]:o.parse(e[f],f)};return c}parseArrayData(t,e,i,s){const{xScale:n,yScale:o}=t,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={x:n.parse(c[0],h),y:o.parse(c[1],h)};return a}parseObjectData(t,e,i,n){const{xScale:o,yScale:a}=t,{xAxisKey:r="x",yAxisKey:l="y"}=this._parsing,h=new Array(n);let c,d,u,f;for(c=0,d=n;c<d;++c)u=c+i,f=e[u],h[c]={x:o.parse((0,s.f)(f,r),u),y:a.parse((0,s.f)(f,l),u)};return h}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,i){const s=this.chart,n=this._cachedMeta,o=e[t.axis];return u({keys:d(s,!0),values:e._stacks[t.axis]._visualValues},o,n.index,{mode:i})}updateRangeFromParsed(t,e,i,s){const n=i[e.axis];let o=null===n?NaN:n;const a=s&&i._stacks[e.axis];s&&a&&(s.values=a,o=u(s,n,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const i=this._cachedMeta,n=i._parsed,o=i._sorted&&t===i.iScale,a=n.length,r=this._getOtherScale(t),l=((t,e,i)=>t&&!e.hidden&&e._stacked&&{keys:d(i,!0),values:null})(e,i,this.chart),h={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:u}=function(t){const{min:e,max:i,minDefined:s,maxDefined:n}=t.getUserBounds();return{min:s?e:Number.NEGATIVE_INFINITY,max:n?i:Number.POSITIVE_INFINITY}}(r);let f,g;function p(){g=n[f];const e=g[r.axis];return!(0,s.g)(g[t.axis])||c>e||u<e}for(f=0;f<a&&(p()||(this.updateRangeFromParsed(h,t,g,l),!o));++f);if(o)for(f=a-1;f>=0;--f)if(!p()){this.updateRangeFromParsed(h,t,g,l);break}return h}getAllParsedValues(t){const e=this._cachedMeta._parsed,i=[];let n,o,a;for(n=0,o=e.length;n<o;++n)a=e[n][t.axis],(0,s.g)(a)&&i.push(a);return i}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,i=e.iScale,s=e.vScale,n=this.getParsed(t);return{label:i?""+i.getLabelForValue(n[i.axis]):"",value:s?""+s.getLabelForValue(n[s.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,i,n,o;return(0,s.i)(t)?(e=t.top,i=t.right,n=t.bottom,o=t.left):e=i=n=o=t,{top:e,right:i,bottom:n,left:o,disabled:!1===t}}((0,s.v)(this.options.clip,function(t,e,i){if(!1===i)return!1;const s=c(t,i),n=c(e,i);return{top:n.end,right:s.end,bottom:n.start,left:s.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,i=this._cachedMeta,s=i.data||[],n=e.chartArea,o=[],a=this._drawStart||0,r=this._drawCount||s.length-a,l=this.options.drawActiveElementsOnTop;let h;for(i.dataset&&i.dataset.draw(t,n,a,r),h=a;h<a+r;++h){const e=s[h];e.hidden||(e.active&&l?o.push(e):e.draw(t,n))}for(h=0;h<o.length;++h)o[h].draw(t,n)}getStyle(t,e){const i=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(i):this.resolveDataElementOptions(t||0,i)}getContext(t,e,i){const n=this.getDataset();let o;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];o=e.$context||(e.$context=function(t,e,i){return(0,s.j)(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:i,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),o.parsed=this.getParsed(t),o.raw=n.data[t],o.index=o.dataIndex=t}else o=this.$context||(this.$context=function(t,e){return(0,s.j)(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),o.dataset=n,o.index=o.datasetIndex=this.index;return o.active=!!e,o.mode=i,o}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",i){const n="active"===e,o=this._cachedDataOpts,a=t+"-"+e,r=o[a],l=this.enableOptionSharing&&(0,s.h)(i);if(r)return y(r,l);const h=this.chart.config,c=h.datasetElementScopeKeys(this._type,t),d=n?[`${t}Hover`,"hover",t,""]:[t,""],u=h.getOptionScopes(this.getDataset(),c),f=Object.keys(s.d.elements[t]),g=h.resolveNamedOptions(u,f,(()=>this.getContext(i,n,e)),d);return g.$shared&&(g.$shared=l,o[a]=Object.freeze(y(g,l))),g}_resolveAnimations(t,e,i){const s=this.chart,n=this._cachedDataOpts,o=`animation-${e}`,a=n[o];if(a)return a;let r;if(!1!==s.options.animation){const s=this.chart.config,n=s.datasetAnimationScopeKeys(this._type,e),o=s.getOptionScopes(this.getDataset(),n);r=s.createResolver(o,this.getContext(t,i,e))}const l=new h(s,r&&r.animations);return r&&r._cacheable&&(n[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||_(t)||this.chart._animationsDisabled}_getSharedOptions(t,e){const i=this.resolveDataElementOptions(t,e),s=this._sharedOptions,n=this.getSharedOptions(i),o=this.includeOptions(e,n)||n!==s;return this.updateSharedOptions(n,e,i),{sharedOptions:n,includeOptions:o}}updateElement(t,e,i,s){_(s)?Object.assign(t,i):this._resolveAnimations(e,s).update(t,i)}updateSharedOptions(t,e,i){t&&!_(e)&&this._resolveAnimations(void 0,e).update(t,i)}_setStyle(t,e,i,s){t.active=s;const n=this.getStyle(e,s);this._resolveAnimations(e,i,s).update(t,{options:!s&&this.getSharedOptions(n)||n})}removeHoverStyle(t,e,i){this._setStyle(t,i,"active",!1)}setHoverStyle(t,e,i){this._setStyle(t,i,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,i=this._cachedMeta.data;for(const[t,e,i]of this._syncList)this[t](e,i);this._syncList=[];const s=i.length,n=e.length,o=Math.min(n,s);o&&this.parse(0,o),n>s?this._insertElements(s,n-s,t):n<s&&this._removeElements(n,s-n)}_insertElements(t,e,i=!0){const s=this._cachedMeta,n=s.data,o=t+e;let a;const r=t=>{for(t.length+=e,a=t.length-1;a>=o;a--)t[a]=t[a-e]};for(r(n),a=t;a<o;++a)n[a]=new this.dataElementType;this._parsing&&r(s._parsed),this.parse(t,e),i&&this.updateElements(n,t,e,"reset")}updateElements(t,e,i,s){}_removeElements(t,e){const i=this._cachedMeta;if(this._parsing){const s=i._parsed.splice(t,e);i._stacked&&x(i,s)}i.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,i,s]=t;this[e](i,s)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const i=arguments.length-2;i&&this._sync(["_insertElements",t,i])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function M(t){const e=t.iScale,i=function(t,e){if(!t._cache.$bar){const i=t.getMatchingVisibleMetas(e);let n=[];for(let e=0,s=i.length;e<s;e++)n=n.concat(i[e].controller.getAllParsedValues(t));t._cache.$bar=(0,s._)(n.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let n,o,a,r,l=e._length;const h=()=>{32767!==a&&-32768!==a&&((0,s.h)(r)&&(l=Math.min(l,Math.abs(a-r)||l)),r=a)};for(n=0,o=i.length;n<o;++n)a=e.getPixelForValue(i[n]),h();for(r=void 0,n=0,o=e.ticks.length;n<o;++n)a=e.getPixelForTick(n),h();return l}function w(t,e,i,n){return(0,s.b)(t)?function(t,e,i,s){const n=i.parse(t[0],s),o=i.parse(t[1],s),a=Math.min(n,o),r=Math.max(n,o);let l=a,h=r;Math.abs(a)>Math.abs(r)&&(l=r,h=a),e[i.axis]=h,e._custom={barStart:l,barEnd:h,start:n,end:o,min:a,max:r}}(t,e,i,n):e[i.axis]=i.parse(t,n),e}function k(t,e,i,s){const n=t.iScale,o=t.vScale,a=n.getLabels(),r=n===o,l=[];let h,c,d,u;for(h=i,c=i+s;h<c;++h)u=e[h],d={},d[n.axis]=r||n.parse(a[h],h),l.push(w(u,d,o,h));return l}function S(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function P(t,e,i,s){let n=e.borderSkipped;const o={};if(!n)return void(t.borderSkipped=o);if(!0===n)return void(t.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:r,reverse:l,top:h,bottom:c}=function(t){let e,i,s,n,o;return t.horizontal?(e=t.base>t.x,i="left",s="right"):(e=t.base<t.y,i="bottom",s="top"),e?(n="end",o="start"):(n="start",o="end"),{start:i,end:s,reverse:e,top:n,bottom:o}}(t);"middle"===n&&i&&(t.enableBorderRadius=!0,(i._top||0)===s?n=h:(i._bottom||0)===s?n=c:(o[D(c,a,r,l)]=!0,n=h)),o[D(n,a,r,l)]=!0,t.borderSkipped=o}function D(t,e,i,s){var n,o,a;return s?(a=i,t=C(t=(n=t)===(o=e)?a:n===a?o:n,i,e)):t=C(t,e,i),t}function C(t,e,i){return"start"===t?e:"end"===t?i:t}function O(t,{inflateAmount:e},i){t.inflateAmount="auto"===e?1===i?.33:0:e}class A extends v{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(t,e,i,s){return k(t,e,i,s)}parseArrayData(t,e,i,s){return k(t,e,i,s)}parseObjectData(t,e,i,n){const{iScale:o,vScale:a}=t,{xAxisKey:r="x",yAxisKey:l="y"}=this._parsing,h="x"===o.axis?r:l,c="x"===a.axis?r:l,d=[];let u,f,g,p;for(u=i,f=i+n;u<f;++u)p=e[u],g={},g[o.axis]=o.parse((0,s.f)(p,h),u),d.push(w((0,s.f)(p,c),g,a,u));return d}updateRangeFromParsed(t,e,i,s){super.updateRangeFromParsed(t,e,i,s);const n=i._custom;n&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,n.min),t.max=Math.max(t.max,n.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:i,vScale:s}=e,n=this.getParsed(t),o=n._custom,a=S(o)?"["+o.start+", "+o.end+"]":""+s.getLabelForValue(n[s.axis]);return{label:""+i.getLabelForValue(n[i.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,i,n){const o="reset"===n,{index:a,_cachedMeta:{vScale:r}}=this,l=r.getBasePixel(),h=r.isHorizontal(),c=this._getRuler(),{sharedOptions:d,includeOptions:u}=this._getSharedOptions(e,n);for(let f=e;f<e+i;f++){const e=this.getParsed(f),i=o||(0,s.k)(e[r.axis])?{base:l,head:l}:this._calculateBarValuePixels(f),g=this._calculateBarIndexPixels(f,c),p=(e._stacks||{})[r.axis],m={horizontal:h,base:i.base,enableBorderRadius:!p||S(e._custom)||a===p._top||a===p._bottom,x:h?i.head:g.center,y:h?g.center:i.head,height:h?g.size:Math.abs(i.size),width:h?Math.abs(i.size):g.size};u&&(m.options=d||this.resolveDataElementOptions(f,t[f].active?"active":n));const b=m.options||t[f].options;P(m,b,p,a),O(m,b,c.ratio),this.updateElement(t[f],f,m,n)}}_getStacks(t,e){const{iScale:i}=this._cachedMeta,n=i.getMatchingVisibleMetas(this._type).filter((t=>t.controller.options.grouped)),o=i.options.stacked,a=[],r=t=>{const i=t.controller.getParsed(e),n=i&&i[t.vScale.axis];if((0,s.k)(n)||isNaN(n))return!0};for(const i of n)if((void 0===e||!r(i))&&((!1===o||-1===a.indexOf(i.stack)||void 0===o&&void 0===i.stack)&&a.push(i.stack),i.index===t))break;return a.length||a.push(void 0),a}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,i){const s=this._getStacks(t,i),n=void 0!==e?s.indexOf(e):-1;return-1===n?s.length-1:n}_getRuler(){const t=this.options,e=this._cachedMeta,i=e.iScale,s=[];let n,o;for(n=0,o=e.data.length;n<o;++n)s.push(i.getPixelForValue(this.getParsed(n)[i.axis],n));const a=t.barThickness;return{min:a||M(e),pixels:s,start:i._startPixel,end:i._endPixel,stackCount:this._getStackCount(),scale:i,grouped:t.grouped,ratio:a?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:i,index:n},options:{base:o,minBarLength:a}}=this,r=o||0,l=this.getParsed(t),h=l._custom,c=S(h);let d,u,f=l[e.axis],g=0,p=i?this.applyStack(e,l,i):f;p!==f&&(g=p-f,p=f),c&&(f=h.barStart,p=h.barEnd-h.barStart,0!==f&&(0,s.s)(f)!==(0,s.s)(h.barEnd)&&(g=0),g+=f);const m=(0,s.k)(o)||c?g:o;let b=e.getPixelForValue(m);if(d=this.chart.getDataVisibility(t)?e.getPixelForValue(g+p):b,u=d-b,Math.abs(u)<a){u=function(t,e,i){return 0!==t?(0,s.s)(t):(e.isHorizontal()?1:-1)*(e.min>=i?1:-1)}(u,e,r)*a,f===r&&(b-=u/2);const t=e.getPixelForDecimal(0),o=e.getPixelForDecimal(1),h=Math.min(t,o),g=Math.max(t,o);b=Math.max(Math.min(b,g),h),d=b+u,i&&!c&&(l._stacks[e.axis]._visualValues[n]=e.getValueForPixel(d)-e.getValueForPixel(b))}if(b===e.getPixelForValue(r)){const t=(0,s.s)(u)*e.getLineWidthForValue(r)/2;b+=t,u-=t}return{size:u,base:b,head:d,center:d+u/2}}_calculateBarIndexPixels(t,e){const i=e.scale,n=this.options,o=n.skipNull,a=(0,s.v)(n.maxBarThickness,1/0);let r,l;if(e.grouped){const i=o?this._getStackCount(t):e.stackCount,h="flex"===n.barThickness?function(t,e,i,s){const n=e.pixels,o=n[t];let a=t>0?n[t-1]:null,r=t<n.length-1?n[t+1]:null;const l=i.categoryPercentage;null===a&&(a=o-(null===r?e.end-e.start:r-o)),null===r&&(r=o+o-a);const h=o-(o-Math.min(a,r))/2*l;return{chunk:Math.abs(r-a)/2*l/s,ratio:i.barPercentage,start:h}}(t,e,n,i):function(t,e,i,n){const o=i.barThickness;let a,r;return(0,s.k)(o)?(a=e.min*i.categoryPercentage,r=i.barPercentage):(a=o*n,r=1),{chunk:a/n,ratio:r,start:e.pixels[t]-a/2}}(t,e,n,i),c=this._getStackIndex(this.index,this._cachedMeta.stack,o?t:void 0);r=h.start+h.chunk*c+h.chunk/2,l=Math.min(a,h.chunk*h.ratio)}else r=i.getPixelForValue(this.getParsed(t)[i.axis],t),l=Math.min(a,e.min*e.ratio);return{base:r-l/2,head:r+l/2,center:r,size:l}}draw(){const t=this._cachedMeta,e=t.vScale,i=t.data,s=i.length;let n=0;for(;n<s;++n)null!==this.getParsed(n)[e.axis]&&i[n].draw(this._ctx)}}class T extends v{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,i,s){const n=super.parsePrimitiveData(t,e,i,s);for(let t=0;t<n.length;t++)n[t]._custom=this.resolveDataElementOptions(t+i).radius;return n}parseArrayData(t,e,i,n){const o=super.parseArrayData(t,e,i,n);for(let t=0;t<o.length;t++){const n=e[i+t];o[t]._custom=(0,s.v)(n[2],this.resolveDataElementOptions(t+i).radius)}return o}parseObjectData(t,e,i,n){const o=super.parseObjectData(t,e,i,n);for(let t=0;t<o.length;t++){const n=e[i+t];o[t]._custom=(0,s.v)(n&&n.r&&+n.r,this.resolveDataElementOptions(t+i).radius)}return o}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let i=t.length-1;i>=0;--i)e=Math.max(e,t[i].size(this.resolveDataElementOptions(i))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y),l=o._custom;return{label:i[t]||"",value:"("+a+", "+r+(l?", "+l:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,i,s){const n="reset"===s,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:r,includeOptions:l}=this._getSharedOptions(e,s),h=o.axis,c=a.axis;for(let d=e;d<e+i;d++){const e=t[d],i=!n&&this.getParsed(d),u={},f=u[h]=n?o.getPixelForDecimal(.5):o.getPixelForValue(i[h]),g=u[c]=n?a.getBasePixel():a.getPixelForValue(i[c]);u.skip=isNaN(f)||isNaN(g),l&&(u.options=r||this.resolveDataElementOptions(d,e.active?"active":s),n&&(u.options.radius=0)),this.updateElement(e,d,u,s)}}resolveDataElementOptions(t,e){const i=this.getParsed(t);let n=super.resolveDataElementOptions(t,e);n.$shared&&(n=Object.assign({},n,{$shared:!1}));const o=n.radius;return"active"!==e&&(n.radius=0),n.radius+=(0,s.v)(i&&i._custom,o),n}}class E extends v{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t&&!t.startsWith("borderDash")&&!t.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}}};constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const i=this.getDataset().data,n=this._cachedMeta;if(!1===this._parsing)n._parsed=i;else{let o,a,r=t=>+i[t];if((0,s.i)(i[t])){const{key:t="value"}=this._parsing;r=e=>+(0,s.f)(i[e],t)}for(o=t,a=t+e;o<a;++o)n._parsed[o]=r(o)}}_getRotation(){return(0,s.t)(this.options.rotation-90)}_getCircumference(){return(0,s.t)(this.options.circumference)}_getRotationExtents(){let t=s.T,e=-s.T;for(let i=0;i<this.chart.data.datasets.length;++i)if(this.chart.isDatasetVisible(i)&&this.chart.getDatasetMeta(i).type===this._type){const s=this.chart.getDatasetMeta(i).controller,n=s._getRotation(),o=s._getCircumference();t=Math.min(t,n),e=Math.max(e,n+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:i}=e,n=this._cachedMeta,o=n.data,a=this.getMaxBorderWidth()+this.getMaxOffset(o)+this.options.spacing,r=Math.max((Math.min(i.width,i.height)-a)/2,0),l=Math.min((0,s.m)(this.options.cutout,r),1),h=this._getRingWeight(this.index),{circumference:c,rotation:d}=this._getRotationExtents(),{ratioX:u,ratioY:f,offsetX:g,offsetY:p}=function(t,e,i){let n=1,o=1,a=0,r=0;if(e<s.T){const l=t,h=l+e,c=Math.cos(l),d=Math.sin(l),u=Math.cos(h),f=Math.sin(h),g=(t,e,n)=>(0,s.p)(t,l,h,!0)?1:Math.max(e,e*i,n,n*i),p=(t,e,n)=>(0,s.p)(t,l,h,!0)?-1:Math.min(e,e*i,n,n*i),m=g(0,c,u),b=g(s.H,d,f),x=p(s.P,c,u),_=p(s.P+s.H,d,f);n=(m-x)/2,o=(b-_)/2,a=-(m+x)/2,r=-(b+_)/2}return{ratioX:n,ratioY:o,offsetX:a,offsetY:r}}(d,c,l),m=(i.width-a)/u,b=(i.height-a)/f,x=Math.max(Math.min(m,b)/2,0),_=(0,s.n)(this.options.radius,x),y=(_-Math.max(_*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*_,this.offsetY=p*_,n.total=this.calculateTotal(),this.outerRadius=_-y*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-y*h,0),this.updateElements(o,0,o.length,t)}_circumference(t,e){const i=this.options,n=this._cachedMeta,o=this._getCircumference();return e&&i.animation.animateRotate||!this.chart.getDataVisibility(t)||null===n._parsed[t]||n.data[t].hidden?0:this.calculateCircumference(n._parsed[t]*o/s.T)}updateElements(t,e,i,s){const n="reset"===s,o=this.chart,a=o.chartArea,r=o.options.animation,l=(a.left+a.right)/2,h=(a.top+a.bottom)/2,c=n&&r.animateScale,d=c?0:this.innerRadius,u=c?0:this.outerRadius,{sharedOptions:f,includeOptions:g}=this._getSharedOptions(e,s);let p,m=this._getRotation();for(p=0;p<e;++p)m+=this._circumference(p,n);for(p=e;p<e+i;++p){const e=this._circumference(p,n),i=t[p],o={x:l+this.offsetX,y:h+this.offsetY,startAngle:m,endAngle:m+e,circumference:e,outerRadius:u,innerRadius:d};g&&(o.options=f||this.resolveDataElementOptions(p,i.active?"active":s)),m+=e,this.updateElement(i,p,o,s)}}calculateTotal(){const t=this._cachedMeta,e=t.data;let i,s=0;for(i=0;i<e.length;i++){const n=t._parsed[i];null===n||isNaN(n)||!this.chart.getDataVisibility(i)||e[i].hidden||(s+=Math.abs(n))}return s}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?s.T*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=(0,s.o)(e._parsed[t],i.options.locale);return{label:n[t]||"",value:o}}getMaxBorderWidth(t){let e=0;const i=this.chart;let s,n,o,a,r;if(!t)for(s=0,n=i.data.datasets.length;s<n;++s)if(i.isDatasetVisible(s)){o=i.getDatasetMeta(s),t=o.data,a=o.controller;break}if(!t)return 0;for(s=0,n=t.length;s<n;++s)r=a.resolveDataElementOptions(s),"inner"!==r.borderAlign&&(e=Math.max(e,r.borderWidth||0,r.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let i=0,s=t.length;i<s;++i){const t=this.resolveDataElementOptions(i);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let i=0;i<t;++i)this.chart.isDatasetVisible(i)&&(e+=this._getRingWeight(i));return e}_getRingWeight(t){return Math.max((0,s.v)(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class L extends v{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:i,data:n=[],_dataset:o}=e,a=this.chart._animationsDisabled;let{start:r,count:l}=(0,s.q)(e,n,a);this._drawStart=r,this._drawCount=l,(0,s.w)(e)&&(r=0,l=n.length),i._chart=this.chart,i._datasetIndex=this.index,i._decimated=!!o._decimated,i.points=n;const h=this.resolveDatasetElementOptions(t);this.options.showLine||(h.borderWidth=0),h.segment=this.options.segment,this.updateElement(i,void 0,{animated:!a,options:h},t),this.updateElements(n,r,l,t)}updateElements(t,e,i,n){const o="reset"===n,{iScale:a,vScale:r,_stacked:l,_dataset:h}=this._cachedMeta,{sharedOptions:c,includeOptions:d}=this._getSharedOptions(e,n),u=a.axis,f=r.axis,{spanGaps:g,segment:p}=this.options,m=(0,s.x)(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||o||"none"===n,x=e+i,_=t.length;let y=e>0&&this.getParsed(e-1);for(let i=0;i<_;++i){const g=t[i],_=b?g:{};if(i<e||i>=x){_.skip=!0;continue}const v=this.getParsed(i),M=(0,s.k)(v[f]),w=_[u]=a.getPixelForValue(v[u],i),k=_[f]=o||M?r.getBasePixel():r.getPixelForValue(l?this.applyStack(r,v,l):v[f],i);_.skip=isNaN(w)||isNaN(k)||M,_.stop=i>0&&Math.abs(v[u]-y[u])>m,p&&(_.parsed=v,_.raw=h.data[i]),d&&(_.options=c||this.resolveDataElementOptions(i,g.active?"active":n)),b||this.updateElement(g,i,_,n),y=v}}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,i=e.options&&e.options.borderWidth||0,s=t.data||[];if(!s.length)return i;const n=s[0].size(this.resolveDataElementOptions(0)),o=s[s.length-1].size(this.resolveDataElementOptions(s.length-1));return Math.max(i,n,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}class R extends v{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:i,color:s}}=t.legend.options;return e.labels.map(((e,n)=>{const o=t.getDatasetMeta(0).controller.getStyle(n);return{text:e,fillStyle:o.backgroundColor,strokeStyle:o.borderColor,fontColor:s,lineWidth:o.borderWidth,pointStyle:i,hidden:!t.getDataVisibility(n),index:n}}))}return[]}},onClick(t,e,i){i.chart.toggleDataVisibility(e.index),i.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,i=this.chart,n=i.data.labels||[],o=(0,s.o)(e._parsed[t].r,i.options.locale);return{label:n[t]||"",value:o}}parseObjectData(t,e,i,n){return s.y.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,i)=>{const s=this.getParsed(i).r;!isNaN(s)&&this.chart.getDataVisibility(i)&&(s<e.min&&(e.min=s),s>e.max&&(e.max=s))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,i=t.options,s=Math.min(e.right-e.left,e.bottom-e.top),n=Math.max(s/2,0),o=(n-Math.max(i.cutoutPercentage?n/100*i.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=n-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,i,n){const o="reset"===n,a=this.chart,r=a.options.animation,l=this._cachedMeta.rScale,h=l.xCenter,c=l.yCenter,d=l.getIndexAngle(0)-.5*s.P;let u,f=d;const g=360/this.countVisibleElements();for(u=0;u<e;++u)f+=this._computeAngle(u,n,g);for(u=e;u<e+i;u++){const e=t[u];let i=f,s=f+this._computeAngle(u,n,g),p=a.getDataVisibility(u)?l.getDistanceFromCenterForValue(this.getParsed(u).r):0;f=s,o&&(r.animateScale&&(p=0),r.animateRotate&&(i=s=d));const m={x:h,y:c,innerRadius:0,outerRadius:p,startAngle:i,endAngle:s,options:this.resolveDataElementOptions(u,e.active?"active":n)};this.updateElement(e,u,m,n)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,i)=>{!isNaN(this.getParsed(i).r)&&this.chart.getDataVisibility(i)&&e++})),e}_computeAngle(t,e,i){return this.chart.getDataVisibility(t)?(0,s.t)(this.resolveDataElementOptions(t,e).angle||i):0}}class F extends E{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}}class I extends v{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(t){const e=this._cachedMeta.vScale,i=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(i[e.axis])}}parseObjectData(t,e,i,n){return s.y.bind(this)(t,e,i,n)}update(t){const e=this._cachedMeta,i=e.dataset,s=e.data||[],n=e.iScale.getLabels();if(i.points=s,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:n.length===s.length,options:e};this.updateElement(i,void 0,o,t)}this.updateElements(s,0,s.length,t)}updateElements(t,e,i,s){const n=this._cachedMeta.rScale,o="reset"===s;for(let a=e;a<e+i;a++){const e=t[a],i=this.resolveDataElementOptions(a,e.active?"active":s),r=n.getPointPositionForValue(a,this.getParsed(a).r),l=o?n.xCenter:r.x,h=o?n.yCenter:r.y,c={x:l,y:h,angle:r.angle,skip:isNaN(l)||isNaN(h),options:i};this.updateElement(e,a,c,s)}}}class z extends v{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(t){const e=this._cachedMeta,i=this.chart.data.labels||[],{xScale:s,yScale:n}=e,o=this.getParsed(t),a=s.getLabelForValue(o.x),r=n.getLabelForValue(o.y);return{label:i[t]||"",value:"("+a+", "+r+")"}}update(t){const e=this._cachedMeta,{data:i=[]}=e,n=this.chart._animationsDisabled;let{start:o,count:a}=(0,s.q)(e,i,n);if(this._drawStart=o,this._drawCount=a,(0,s.w)(e)&&(o=0,a=i.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:s,_dataset:o}=e;s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!o._decimated,s.points=i;const a=this.resolveDatasetElementOptions(t);a.segment=this.options.segment,this.updateElement(s,void 0,{animated:!n,options:a},t)}else this.datasetElementType&&(delete e.dataset,this.datasetElementType=!1);this.updateElements(i,o,a,t)}addElements(){const{showLine:t}=this.options;!this.datasetElementType&&t&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(t,e,i,n){const o="reset"===n,{iScale:a,vScale:r,_stacked:l,_dataset:h}=this._cachedMeta,c=this.resolveDataElementOptions(e,n),d=this.getSharedOptions(c),u=this.includeOptions(n,d),f=a.axis,g=r.axis,{spanGaps:p,segment:m}=this.options,b=(0,s.x)(p)?p:Number.POSITIVE_INFINITY,x=this.chart._animationsDisabled||o||"none"===n;let _=e>0&&this.getParsed(e-1);for(let c=e;c<e+i;++c){const e=t[c],i=this.getParsed(c),p=x?e:{},y=(0,s.k)(i[g]),v=p[f]=a.getPixelForValue(i[f],c),M=p[g]=o||y?r.getBasePixel():r.getPixelForValue(l?this.applyStack(r,i,l):i[g],c);p.skip=isNaN(v)||isNaN(M)||y,p.stop=c>0&&Math.abs(i[f]-_[f])>b,m&&(p.parsed=i,p.raw=h.data[c]),u&&(p.options=d||this.resolveDataElementOptions(c,e.active?"active":n)),x||this.updateElement(e,c,p,n),_=i}this.updateSharedOptions(d,n,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.data||[];if(!this.options.showLine){let t=0;for(let i=e.length-1;i>=0;--i)t=Math.max(t,e[i].size(this.resolveDataElementOptions(i))/2);return t>0&&t}const i=t.dataset,s=i.options&&i.options.borderWidth||0;if(!e.length)return s;const n=e[0].size(this.resolveDataElementOptions(0)),o=e[e.length-1].size(this.resolveDataElementOptions(e.length-1));return Math.max(s,n,o)/2}}var V=Object.freeze({__proto__:null,BarController:A,BubbleController:T,DoughnutController:E,LineController:L,PieController:F,PolarAreaController:R,RadarController:I,ScatterController:z});function B(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class j{static override(t){Object.assign(j.prototype,t)}options;constructor(t){this.options=t||{}}init(){}formats(){return B()}parse(){return B()}format(){return B()}add(){return B()}diff(){return B()}startOf(){return B()}endOf(){return B()}}var W={_date:j};function N(t,e,i,n){const{controller:o,data:a,_sorted:r}=t,l=o._cachedMeta.iScale;if(l&&e===l.axis&&"r"!==e&&r&&a.length){const t=l._reversePixels?s.A:s.B;if(!n)return t(a,e,i);if(o._sharedOptions){const s=a[0],n="function"==typeof s.getRange&&s.getRange(e);if(n){const s=t(a,e,i-n),o=t(a,e,i+n);return{lo:s.lo,hi:o.hi}}}}return{lo:0,hi:a.length-1}}function H(t,e,i,s,n){const o=t.getSortedVisibleDatasetMetas(),a=i[e];for(let t=0,i=o.length;t<i;++t){const{index:i,data:r}=o[t],{lo:l,hi:h}=N(o[t],e,a,n);for(let t=l;t<=h;++t){const e=r[t];e.skip||s(e,i,t)}}}function $(t,e,i,n,o){const a=[];return o||t.isPointInArea(e)?(H(t,i,e,(function(i,r,l){(o||(0,s.C)(i,t.chartArea,0))&&i.inRange(e.x,e.y,n)&&a.push({element:i,datasetIndex:r,index:l})}),!0),a):a}function Y(t,e,i,n,o,a){return a||t.isPointInArea(e)?"r"!==i||n?function(t,e,i,s,n,o){let a=[];const r=function(t){const e=-1!==t.indexOf("x"),i=-1!==t.indexOf("y");return function(t,s){const n=e?Math.abs(t.x-s.x):0,o=i?Math.abs(t.y-s.y):0;return Math.sqrt(Math.pow(n,2)+Math.pow(o,2))}}(i);let l=Number.POSITIVE_INFINITY;return H(t,i,e,(function(i,h,c){const d=i.inRange(e.x,e.y,n);if(s&&!d)return;const u=i.getCenterPoint(n);if(!o&&!t.isPointInArea(u)&&!d)return;const f=r(e,u);f<l?(a=[{element:i,datasetIndex:h,index:c}],l=f):f===l&&a.push({element:i,datasetIndex:h,index:c})})),a}(t,e,i,n,o,a):function(t,e,i,n){let o=[];return H(t,i,e,(function(t,i,a){const{startAngle:r,endAngle:l}=t.getProps(["startAngle","endAngle"],n),{angle:h}=(0,s.D)(t,{x:e.x,y:e.y});(0,s.p)(h,r,l)&&o.push({element:t,datasetIndex:i,index:a})})),o}(t,e,i,o):[]}function U(t,e,i,s,n){const o=[],a="x"===i?"inXRange":"inYRange";let r=!1;return H(t,i,e,((t,s,l)=>{t[a](e[i],n)&&(o.push({element:t,datasetIndex:s,index:l}),r=r||t.inRange(e.x,e.y,n))})),s&&!r?[]:o}var X={evaluateInteractionItems:H,modes:{index(t,e,i,n){const o=(0,s.z)(e,t),a=i.axis||"x",r=i.includeInvisible||!1,l=i.intersect?$(t,o,a,n,r):Y(t,o,a,!1,n,r),h=[];return l.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=l[0].index,i=t.data[e];i&&!i.skip&&h.push({element:i,datasetIndex:t.index,index:e})})),h):[]},dataset(t,e,i,n){const o=(0,s.z)(e,t),a=i.axis||"xy",r=i.includeInvisible||!1;let l=i.intersect?$(t,o,a,n,r):Y(t,o,a,!1,n,r);if(l.length>0){const e=l[0].datasetIndex,i=t.getDatasetMeta(e).data;l=[];for(let t=0;t<i.length;++t)l.push({element:i[t],datasetIndex:e,index:t})}return l},point:(t,e,i,n)=>$(t,(0,s.z)(e,t),i.axis||"xy",n,i.includeInvisible||!1),nearest(t,e,i,n){const o=(0,s.z)(e,t),a=i.axis||"xy",r=i.includeInvisible||!1;return Y(t,o,a,i.intersect,n,r)},x:(t,e,i,n)=>U(t,(0,s.z)(e,t),"x",i.intersect,n),y:(t,e,i,n)=>U(t,(0,s.z)(e,t),"y",i.intersect,n)}};const Q=["left","top","right","bottom"];function q(t,e){return t.filter((t=>t.pos===e))}function K(t,e){return t.filter((t=>-1===Q.indexOf(t.pos)&&t.box.axis===e))}function Z(t,e){return t.sort(((t,i)=>{const s=e?i:t,n=e?t:i;return s.weight===n.weight?s.index-n.index:s.weight-n.weight}))}function G(t,e,i,s){return Math.max(t[i],e[i])+Math.max(t[s],e[s])}function J(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function tt(t,e,i,n){const{pos:o,box:a}=i,r=t.maxPadding;if(!(0,s.i)(o)){i.size&&(t[o]-=i.size);const e=n[i.stack]||{size:0,count:1};e.size=Math.max(e.size,i.horizontal?a.height:a.width),i.size=e.size/e.count,t[o]+=i.size}a.getPadding&&J(r,a.getPadding());const l=Math.max(0,e.outerWidth-G(r,t,"left","right")),h=Math.max(0,e.outerHeight-G(r,t,"top","bottom")),c=l!==t.w,d=h!==t.h;return t.w=l,t.h=h,i.horizontal?{same:c,other:d}:{same:d,other:c}}function et(t,e){const i=e.maxPadding;return function(t){const s={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{s[t]=Math.max(e[t],i[t])})),s}(t?["left","right"]:["top","bottom"])}function it(t,e,i,s){const n=[];let o,a,r,l,h,c;for(o=0,a=t.length,h=0;o<a;++o){r=t[o],l=r.box,l.update(r.width||e.w,r.height||e.h,et(r.horizontal,e));const{same:a,other:d}=tt(e,i,r,s);h|=a&&n.length,c=c||d,l.fullSize||n.push(r)}return h&&it(n,e,i,s)||c}function st(t,e,i,s,n){t.top=i,t.left=e,t.right=e+s,t.bottom=i+n,t.width=s,t.height=n}function nt(t,e,i,n){const o=i.padding;let{x:a,y:r}=e;for(const l of t){const t=l.box,h=n[l.stack]||{count:1,placed:0,weight:1},c=l.stackWeight/h.weight||1;if(l.horizontal){const n=e.w*c,a=h.size||t.height;(0,s.h)(h.start)&&(r=h.start),t.fullSize?st(t,o.left,r,i.outerWidth-o.right-o.left,a):st(t,e.left+h.placed,r,n,a),h.start=r,h.placed+=n,r=t.bottom}else{const n=e.h*c,r=h.size||t.width;(0,s.h)(h.start)&&(a=h.start),t.fullSize?st(t,a,o.top,r,i.outerHeight-o.bottom-o.top):st(t,a,e.top+h.placed,r,n),h.start=a,h.placed+=n,a=t.right}}e.x=a,e.y=r}var ot={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const i=t.boxes?t.boxes.indexOf(e):-1;-1!==i&&t.boxes.splice(i,1)},configure(t,e,i){e.fullSize=i.fullSize,e.position=i.position,e.weight=i.weight},update(t,e,i,n){if(!t)return;const o=(0,s.E)(t.options.layout.padding),a=Math.max(e-o.width,0),r=Math.max(i-o.height,0),l=function(t){const e=function(t){const e=[];let i,s,n,o,a,r;for(i=0,s=(t||[]).length;i<s;++i)n=t[i],({position:o,options:{stack:a,stackWeight:r=1}}=n),e.push({index:i,box:n,pos:o,horizontal:n.isHorizontal(),weight:n.weight,stack:a&&o+a,stackWeight:r});return e}(t),i=Z(e.filter((t=>t.box.fullSize)),!0),s=Z(q(e,"left"),!0),n=Z(q(e,"right")),o=Z(q(e,"top"),!0),a=Z(q(e,"bottom")),r=K(e,"x"),l=K(e,"y");return{fullSize:i,leftAndTop:s.concat(o),rightAndBottom:n.concat(l).concat(a).concat(r),chartArea:q(e,"chartArea"),vertical:s.concat(n).concat(l),horizontal:o.concat(a).concat(r)}}(t.boxes),h=l.vertical,c=l.horizontal;(0,s.F)(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const d=h.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,u=Object.freeze({outerWidth:e,outerHeight:i,padding:o,availableWidth:a,availableHeight:r,vBoxMaxWidth:a/2/d,hBoxMaxHeight:r/2}),f=Object.assign({},o);J(f,(0,s.E)(n));const g=Object.assign({maxPadding:f,w:a,h:r,x:o.left,y:o.top},o),p=function(t,e){const i=function(t){const e={};for(const i of t){const{stack:t,pos:s,stackWeight:n}=i;if(!t||!Q.includes(s))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=n}return e}(t),{vBoxMaxWidth:s,hBoxMaxHeight:n}=e;let o,a,r;for(o=0,a=t.length;o<a;++o){r=t[o];const{fullSize:a}=r.box,l=i[r.stack],h=l&&r.stackWeight/l.weight;r.horizontal?(r.width=h?h*s:a&&e.availableWidth,r.height=n):(r.width=s,r.height=h?h*n:a&&e.availableHeight)}return i}(h.concat(c),u);it(l.fullSize,g,u,p),it(h,g,u,p),it(c,g,u,p)&&it(h,g,u,p),function(t){const e=t.maxPadding;function i(i){const s=Math.max(e[i]-t[i],0);return t[i]+=s,s}t.y+=i("top"),t.x+=i("left"),i("right"),i("bottom")}(g),nt(l.leftAndTop,g,u,p),g.x+=g.w,g.y+=g.h,nt(l.rightAndBottom,g,u,p),t.chartArea={left:g.left,top:g.top,right:g.left+g.w,bottom:g.top+g.h,height:g.h,width:g.w},(0,s.F)(l.chartArea,(e=>{const i=e.box;Object.assign(i,t.chartArea),i.update(g.w,g.h,{left:0,top:0,right:0,bottom:0})}))}};class at{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,i){}removeEventListener(t,e,i){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,i,s){return e=Math.max(0,e||t.width),i=i||t.height,{width:e,height:Math.max(0,s?Math.floor(e/s):i)}}isAttached(t){return!0}updateConfig(t){}}class rt extends at{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const lt="$chartjs",ht={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ct=t=>null===t||""===t,dt=!!s.K&&{passive:!0};function ut(t,e,i){t.canvas.removeEventListener(e,i,dt)}function ft(t,e){for(const i of t)if(i===e||i.contains(e))return!0}function gt(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||ft(i.addedNodes,s),e=e&&!ft(i.removedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}function pt(t,e,i){const s=t.canvas,n=new MutationObserver((t=>{let e=!1;for(const i of t)e=e||ft(i.removedNodes,s),e=e&&!ft(i.addedNodes,s);e&&i()}));return n.observe(document,{childList:!0,subtree:!0}),n}const mt=new Map;let bt=0;function xt(){const t=window.devicePixelRatio;t!==bt&&(bt=t,mt.forEach(((e,i)=>{i.currentDevicePixelRatio!==t&&e()})))}function _t(t,e,i){const n=t.canvas,o=n&&(0,s.I)(n);if(!o)return;const a=(0,s.L)(((t,e)=>{const s=o.clientWidth;i(t,e),s<o.clientWidth&&i()}),window),r=new ResizeObserver((t=>{const e=t[0],i=e.contentRect.width,s=e.contentRect.height;0===i&&0===s||a(i,s)}));return r.observe(o),function(t,e){mt.size||window.addEventListener("resize",xt),mt.set(t,e)}(t,a),r}function yt(t,e,i){i&&i.disconnect(),"resize"===e&&function(t){mt.delete(t),mt.size||window.removeEventListener("resize",xt)}(t)}function vt(t,e,i){const n=t.canvas,o=(0,s.L)((e=>{null!==t.ctx&&i(function(t,e){const i=ht[t.type]||t.type,{x:n,y:o}=(0,s.z)(t,e);return{type:i,chart:e,native:t,x:void 0!==n?n:null,y:void 0!==o?o:null}}(e,t))}),t);return function(t,e,i){t.addEventListener(e,i,dt)}(n,e,o),o}class Mt extends at{acquireContext(t,e){const i=t&&t.getContext&&t.getContext("2d");return i&&i.canvas===t?(function(t,e){const i=t.style,n=t.getAttribute("height"),o=t.getAttribute("width");if(t[lt]={initial:{height:n,width:o,style:{display:i.display,height:i.height,width:i.width}}},i.display=i.display||"block",i.boxSizing=i.boxSizing||"border-box",ct(o)){const e=(0,s.J)(t,"width");void 0!==e&&(t.width=e)}if(ct(n))if(""===t.style.height)t.height=t.width/(e||2);else{const e=(0,s.J)(t,"height");void 0!==e&&(t.height=e)}}(t,e),i):null}releaseContext(t){const e=t.canvas;if(!e[lt])return!1;const i=e[lt].initial;["height","width"].forEach((t=>{const n=i[t];(0,s.k)(n)?e.removeAttribute(t):e.setAttribute(t,n)}));const n=i.style||{};return Object.keys(n).forEach((t=>{e.style[t]=n[t]})),e.width=e.width,delete e[lt],!0}addEventListener(t,e,i){this.removeEventListener(t,e);const s=t.$proxies||(t.$proxies={}),n={attach:gt,detach:pt,resize:_t}[e]||vt;s[e]=n(t,e,i)}removeEventListener(t,e){const i=t.$proxies||(t.$proxies={}),s=i[e];s&&(({attach:yt,detach:yt,resize:yt}[e]||ut)(t,e,s),i[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,i,n){return(0,s.G)(t,e,i,n)}isAttached(t){const e=(0,s.I)(t);return!(!e||!e.isConnected)}}function wt(t){return!(0,s.M)()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?rt:Mt}class kt{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}hasValue(){return(0,s.x)(this.x)&&(0,s.x)(this.y)}getProps(t,e){const i=this.$animations;if(!e||!i)return this;const s={};return t.forEach((t=>{s[t]=i[t]&&i[t].active()?i[t]._to:this[t]})),s}}function St(t,e,i,n,o){const a=(0,s.v)(n,0),r=Math.min((0,s.v)(o,t.length),t.length);let l,h,c,d=0;for(i=Math.ceil(i),o&&(l=o-n,i=l/Math.floor(l/i)),c=a;c<0;)d++,c=Math.round(a+d*i);for(h=Math.max(a,0);h<r;h++)h===c&&(e.push(t[h]),d++,c=Math.round(a+d*i))}const Pt=(t,e,i)=>"top"===e||"left"===e?t[e]+i:t[e]-i,Dt=(t,e)=>Math.min(e||t,t);function Ct(t,e){const i=[],s=t.length/e,n=t.length;let o=0;for(;o<n;o+=s)i.push(t[Math.floor(o)]);return i}function Ot(t,e,i){const s=t.ticks.length,n=Math.min(e,s-1),o=t._startPixel,a=t._endPixel,r=1e-6;let l,h=t.getPixelForTick(n);if(!(i&&(l=1===s?Math.max(h-o,a-h):0===e?(t.getPixelForTick(1)-h)/2:(h-t.getPixelForTick(n-1))/2,h+=n<e?l:-l,h<o-r||h>a+r)))return h}function At(t){return t.drawTicks?t.tickLength:0}function Tt(t,e){if(!t.display)return 0;const i=(0,s.a0)(t.font,e),n=(0,s.E)(t.padding);return((0,s.b)(t.text)?t.text.length:1)*i.lineHeight+n.height}function Et(t,e,i){let n=(0,s.a1)(t);return(i&&"right"!==e||!i&&"right"===e)&&(n=(t=>"left"===t?"right":"right"===t?"left":t)(n)),n}class Lt extends kt{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:i,_suggestedMax:n}=this;return t=(0,s.O)(t,Number.POSITIVE_INFINITY),e=(0,s.O)(e,Number.NEGATIVE_INFINITY),i=(0,s.O)(i,Number.POSITIVE_INFINITY),n=(0,s.O)(n,Number.NEGATIVE_INFINITY),{min:(0,s.O)(t,i),max:(0,s.O)(e,n),minDefined:(0,s.g)(t),maxDefined:(0,s.g)(e)}}getMinMax(t){let e,{min:i,max:n,minDefined:o,maxDefined:a}=this.getUserBounds();if(o&&a)return{min:i,max:n};const r=this.getMatchingVisibleMetas();for(let s=0,l=r.length;s<l;++s)e=r[s].controller.getMinMax(this,t),o||(i=Math.min(i,e.min)),a||(n=Math.max(n,e.max));return i=a&&i>n?n:i,n=o&&i>n?i:n,{min:(0,s.O)(i,(0,s.O)(n,i)),max:(0,s.O)(n,(0,s.O)(i,n))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}getLabelItems(t=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(t))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){(0,s.Q)(this.options.beforeUpdate,[this])}update(t,e,i){const{beginAtZero:n,grace:o,ticks:a}=this.options,r=a.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=i=Object.assign({left:0,right:0,top:0,bottom:0},i),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+i.left+i.right:this.height+i.top+i.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=(0,s.R)(this,o,n),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=r<this.ticks.length;this._convertTicksToLabels(l?Ct(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),a.display&&(a.autoSkip||"auto"===a.source)&&(this.ticks=function(t,e){const i=t.options.ticks,n=function(t){const e=t.options.offset,i=t._tickSize(),s=t._length/i+(e?0:1),n=t._maxLength/i;return Math.floor(Math.min(s,n))}(t),o=Math.min(i.maxTicksLimit||n,n),a=i.major.enabled?function(t){const e=[];let i,s;for(i=0,s=t.length;i<s;i++)t[i].major&&e.push(i);return e}(e):[],r=a.length,l=a[0],h=a[r-1],c=[];if(r>o)return function(t,e,i,s){let n,o=0,a=i[0];for(s=Math.ceil(s),n=0;n<t.length;n++)n===a&&(e.push(t[n]),o++,a=i[o*s])}(e,c,a,r/o),c;const d=function(t,e,i){const n=function(t){const e=t.length;let i,s;if(e<2)return!1;for(s=t[0],i=1;i<e;++i)if(t[i]-t[i-1]!==s)return!1;return s}(t),o=e.length/i;if(!n)return Math.max(o,1);const a=(0,s.N)(n);for(let t=0,e=a.length-1;t<e;t++){const e=a[t];if(e>o)return e}return Math.max(o,1)}(a,e,o);if(r>0){let t,i;const n=r>1?Math.round((h-l)/(r-1)):null;for(St(e,c,d,(0,s.k)(n)?0:l-n,l),t=0,i=r-1;t<i;t++)St(e,c,d,a[t],a[t+1]);return St(e,c,d,h,(0,s.k)(n)?e.length:h+n),c}return St(e,c,d),c}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,i=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,i=!i),this._startPixel=t,this._endPixel=e,this._reversePixels=i,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){(0,s.Q)(this.options.afterUpdate,[this])}beforeSetDimensions(){(0,s.Q)(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){(0,s.Q)(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),(0,s.Q)(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){(0,s.Q)(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let i,n,o;for(i=0,n=t.length;i<n;i++)o=t[i],o.label=(0,s.Q)(e.callback,[o.value,i,t],this)}afterTickToLabelConversion(){(0,s.Q)(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){(0,s.Q)(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,i=Dt(this.ticks.length,t.ticks.maxTicksLimit),n=e.minRotation||0,o=e.maxRotation;let a,r,l,h=n;if(!this._isVisible()||!e.display||n>=o||i<=1||!this.isHorizontal())return void(this.labelRotation=n);const c=this._getLabelSizes(),d=c.widest.width,u=c.highest.height,f=(0,s.S)(this.chart.width-d,0,this.maxWidth);a=t.offset?this.maxWidth/i:f/(i-1),d+6>a&&(a=f/(i-(t.offset?.5:1)),r=this.maxHeight-At(t.grid)-e.padding-Tt(t.title,this.chart.options.font),l=Math.sqrt(d*d+u*u),h=(0,s.U)(Math.min(Math.asin((0,s.S)((c.highest.height+6)/a,-1,1)),Math.asin((0,s.S)(r/l,-1,1))-Math.asin((0,s.S)(u/l,-1,1)))),h=Math.max(n,Math.min(o,h))),this.labelRotation=h}afterCalculateLabelRotation(){(0,s.Q)(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){(0,s.Q)(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:i,title:n,grid:o}}=this,a=this._isVisible(),r=this.isHorizontal();if(a){const a=Tt(n,e.options.font);if(r?(t.width=this.maxWidth,t.height=At(o)+a):(t.height=this.maxHeight,t.width=At(o)+a),i.display&&this.ticks.length){const{first:e,last:n,widest:o,highest:a}=this._getLabelSizes(),l=2*i.padding,h=(0,s.t)(this.labelRotation),c=Math.cos(h),d=Math.sin(h);if(r){const e=i.mirror?0:d*o.width+c*a.height;t.height=Math.min(this.maxHeight,t.height+e+l)}else{const e=i.mirror?0:c*o.width+d*a.height;t.width=Math.min(this.maxWidth,t.width+e+l)}this._calculatePadding(e,n,d,c)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,i,s){const{ticks:{align:n,padding:o},position:a}=this.options,r=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,h=this.right-this.getPixelForTick(this.ticks.length-1);let c=0,d=0;r?l?(c=s*t.width,d=i*e.height):(c=i*t.height,d=s*e.width):"start"===n?d=e.width:"end"===n?c=t.width:"inner"!==n&&(c=t.width/2,d=e.width/2),this.paddingLeft=Math.max((c-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-h+o)*this.width/(this.width-h),0)}else{let i=e.height/2,s=t.height/2;"start"===n?(i=0,s=t.height):"end"===n&&(i=e.height,s=0),this.paddingTop=i+o,this.paddingBottom=s+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){(0,s.Q)(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,i;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,i=t.length;e<i;e++)(0,s.k)(t[e].label)&&(t.splice(e,1),i--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let i=this.ticks;e<i.length&&(i=Ct(i,e)),this._labelSizes=t=this._computeLabelSizes(i,i.length,this.options.ticks.maxTicksLimit)}return t}_computeLabelSizes(t,e,i){const{ctx:n,_longestTextCache:o}=this,a=[],r=[],l=Math.floor(e/Dt(e,i));let h,c,d,u,f,g,p,m,b,x,_,y=0,v=0;for(h=0;h<e;h+=l){if(u=t[h].label,f=this._resolveTickFontOptions(h),n.font=g=f.string,p=o[g]=o[g]||{data:{},gc:[]},m=f.lineHeight,b=x=0,(0,s.k)(u)||(0,s.b)(u)){if((0,s.b)(u))for(c=0,d=u.length;c<d;++c)_=u[c],(0,s.k)(_)||(0,s.b)(_)||(b=(0,s.V)(n,p.data,p.gc,b,_),x+=m)}else b=(0,s.V)(n,p.data,p.gc,b,u),x=m;a.push(b),r.push(x),y=Math.max(b,y),v=Math.max(x,v)}!function(t,e){(0,s.F)(t,(t=>{const i=t.gc,s=i.length/2;let n;if(s>e){for(n=0;n<s;++n)delete t.data[i[n]];i.splice(0,s)}}))}(o,e);const M=a.indexOf(y),w=r.indexOf(v),k=t=>({width:a[t]||0,height:r[t]||0});return{first:k(0),last:k(e-1),widest:k(M),highest:k(w),widths:a,heights:r}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return(0,s.W)(this._alignToPixels?(0,s.X)(this.chart,e,0):e)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const i=e[t];return i.$context||(i.$context=function(t,e,i){return(0,s.j)(t,{tick:i,index:e,type:"tick"})}(this.getContext(),t,i))}return this.$context||(this.$context=(i=this.chart.getContext(),this,(0,s.j)(i,{scale:this,type:"scale"})));var i}_tickSize(){const t=this.options.ticks,e=(0,s.t)(this.labelRotation),i=Math.abs(Math.cos(e)),n=Math.abs(Math.sin(e)),o=this._getLabelSizes(),a=t.autoSkipPadding||0,r=o?o.widest.width+a:0,l=o?o.highest.height+a:0;return this.isHorizontal()?l*i>r*n?r/i:l/n:l*n<r*i?l/i:r/n}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,i=this.chart,n=this.options,{grid:o,position:a,border:r}=n,l=o.offset,h=this.isHorizontal(),c=this.ticks.length+(l?1:0),d=At(o),u=[],f=r.setContext(this.getContext()),g=f.display?f.width:0,p=g/2,m=function(t){return(0,s.X)(i,t,g)};let b,x,_,y,v,M,w,k,S,P,D,C;if("top"===a)b=m(this.bottom),M=this.bottom-d,k=b-p,P=m(t.top)+p,C=t.bottom;else if("bottom"===a)b=m(this.top),P=t.top,C=m(t.bottom)-p,M=b+p,k=this.top+d;else if("left"===a)b=m(this.right),v=this.right-d,w=b-p,S=m(t.left)+p,D=t.right;else if("right"===a)b=m(this.left),S=t.left,D=m(t.right)-p,v=b+p,w=this.left+d;else if("x"===e){if("center"===a)b=m((t.top+t.bottom)/2+.5);else if((0,s.i)(a)){const t=Object.keys(a)[0],e=a[t];b=m(this.chart.scales[t].getPixelForValue(e))}P=t.top,C=t.bottom,M=b+p,k=M+d}else if("y"===e){if("center"===a)b=m((t.left+t.right)/2);else if((0,s.i)(a)){const t=Object.keys(a)[0],e=a[t];b=m(this.chart.scales[t].getPixelForValue(e))}v=b-p,w=v-d,S=t.left,D=t.right}const O=(0,s.v)(n.ticks.maxTicksLimit,c),A=Math.max(1,Math.ceil(c/O));for(x=0;x<c;x+=A){const t=this.getContext(x),e=o.setContext(t),n=r.setContext(t),a=e.lineWidth,c=e.color,d=n.dash||[],f=n.dashOffset,g=e.tickWidth,p=e.tickColor,m=e.tickBorderDash||[],b=e.tickBorderDashOffset;_=Ot(this,x,l),void 0!==_&&(y=(0,s.X)(i,_,a),h?v=w=S=D=y:M=k=P=C=y,u.push({tx1:v,ty1:M,tx2:w,ty2:k,x1:S,y1:P,x2:D,y2:C,width:a,color:c,borderDash:d,borderDashOffset:f,tickWidth:g,tickColor:p,tickBorderDash:m,tickBorderDashOffset:b}))}return this._ticksLength=c,this._borderValue=b,u}_computeLabelItems(t){const e=this.axis,i=this.options,{position:n,ticks:o}=i,a=this.isHorizontal(),r=this.ticks,{align:l,crossAlign:h,padding:c,mirror:d}=o,u=At(i.grid),f=u+c,g=d?-c:f,p=-(0,s.t)(this.labelRotation),m=[];let b,x,_,y,v,M,w,k,S,P,D,C,O="middle";if("top"===n)M=this.bottom-g,w=this._getXAxisLabelAlignment();else if("bottom"===n)M=this.top+g,w=this._getXAxisLabelAlignment();else if("left"===n){const t=this._getYAxisLabelAlignment(u);w=t.textAlign,v=t.x}else if("right"===n){const t=this._getYAxisLabelAlignment(u);w=t.textAlign,v=t.x}else if("x"===e){if("center"===n)M=(t.top+t.bottom)/2+f;else if((0,s.i)(n)){const t=Object.keys(n)[0],e=n[t];M=this.chart.scales[t].getPixelForValue(e)+f}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===n)v=(t.left+t.right)/2-f;else if((0,s.i)(n)){const t=Object.keys(n)[0],e=n[t];v=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(u).textAlign}"y"===e&&("start"===l?O="top":"end"===l&&(O="bottom"));const A=this._getLabelSizes();for(b=0,x=r.length;b<x;++b){_=r[b],y=_.label;const t=o.setContext(this.getContext(b));k=this.getPixelForTick(b)+o.labelOffset,S=this._resolveTickFontOptions(b),P=S.lineHeight,D=(0,s.b)(y)?y.length:1;const e=D/2,i=t.color,l=t.textStrokeColor,c=t.textStrokeWidth;let u,f=w;if(a?(v=k,"inner"===w&&(f=b===x-1?this.options.reverse?"left":"right":0===b?this.options.reverse?"right":"left":"center"),C="top"===n?"near"===h||0!==p?-D*P+P/2:"center"===h?-A.highest.height/2-e*P+P:-A.highest.height+P/2:"near"===h||0!==p?P/2:"center"===h?A.highest.height/2-e*P:A.highest.height-D*P,d&&(C*=-1),0===p||t.showLabelBackdrop||(v+=P/2*Math.sin(p))):(M=k,C=(1-D)*P/2),t.showLabelBackdrop){const e=(0,s.E)(t.backdropPadding),i=A.heights[b],n=A.widths[b];let o=C-e.top,a=0-e.left;switch(O){case"middle":o-=i/2;break;case"bottom":o-=i}switch(w){case"center":a-=n/2;break;case"right":a-=n}u={left:a,top:o,width:n+e.width,height:i+e.height,color:t.backdropColor}}m.push({label:y,font:S,textOffset:C,options:{rotation:p,color:i,strokeColor:l,strokeWidth:c,textAlign:f,textBaseline:O,translation:[v,M],backdrop:u}})}return m}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-(0,s.t)(this.labelRotation))return"top"===t?"left":"right";let i="center";return"start"===e.align?i="left":"end"===e.align?i="right":"inner"===e.align&&(i="inner"),i}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:i,mirror:s,padding:n}}=this.options,o=t+n,a=this._getLabelSizes().widest.width;let r,l;return"left"===e?s?(l=this.right+n,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l+=a)):(l=this.right-o,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l=this.left)):"right"===e?s?(l=this.left+n,"near"===i?r="right":"center"===i?(r="center",l-=a/2):(r="left",l-=a)):(l=this.left+o,"near"===i?r="left":"center"===i?(r="center",l+=a/2):(r="right",l=this.right)):r="right",{textAlign:r,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:i,top:s,width:n,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(i,s,n,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const i=this.ticks.findIndex((e=>e.value===t));return i>=0?e.setContext(this.getContext(i)).lineWidth:0}drawGrid(t){const e=this.options.grid,i=this.ctx,s=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let n,o;const a=(t,e,s)=>{s.width&&s.color&&(i.save(),i.lineWidth=s.width,i.strokeStyle=s.color,i.setLineDash(s.borderDash||[]),i.lineDashOffset=s.borderDashOffset,i.beginPath(),i.moveTo(t.x,t.y),i.lineTo(e.x,e.y),i.stroke(),i.restore())};if(e.display)for(n=0,o=s.length;n<o;++n){const t=s[n];e.drawOnChartArea&&a({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&a({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{border:i,grid:n}}=this,o=i.setContext(this.getContext()),a=i.display?o.width:0;if(!a)return;const r=n.setContext(this.getContext(0)).lineWidth,l=this._borderValue;let h,c,d,u;this.isHorizontal()?(h=(0,s.X)(t,this.left,a)-a/2,c=(0,s.X)(t,this.right,r)+r/2,d=u=l):(d=(0,s.X)(t,this.top,a)-a/2,u=(0,s.X)(t,this.bottom,r)+r/2,h=c=l),e.save(),e.lineWidth=o.width,e.strokeStyle=o.color,e.beginPath(),e.moveTo(h,d),e.lineTo(c,u),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,i=this._computeLabelArea();i&&(0,s.Y)(e,i);const n=this.getLabelItems(t);for(const t of n){const i=t.options,n=t.font,o=t.label,a=t.textOffset;(0,s.Z)(e,o,0,a,n,i)}i&&(0,s.$)(e)}drawTitle(){const{ctx:t,options:{position:e,title:i,reverse:n}}=this;if(!i.display)return;const o=(0,s.a0)(i.font),a=(0,s.E)(i.padding),r=i.align;let l=o.lineHeight/2;"bottom"===e||"center"===e||(0,s.i)(e)?(l+=a.bottom,(0,s.b)(i.text)&&(l+=o.lineHeight*(i.text.length-1))):l+=a.top;const{titleX:h,titleY:c,maxWidth:d,rotation:u}=function(t,e,i,n){const{top:o,left:a,bottom:r,right:l,chart:h}=t,{chartArea:c,scales:d}=h;let u,f,g,p=0;const m=r-o,b=l-a;if(t.isHorizontal()){if(f=(0,s.a2)(n,a,l),(0,s.i)(i)){const t=Object.keys(i)[0],s=i[t];g=d[t].getPixelForValue(s)+m-e}else g="center"===i?(c.bottom+c.top)/2+m-e:Pt(t,i,e);u=l-a}else{if((0,s.i)(i)){const t=Object.keys(i)[0],s=i[t];f=d[t].getPixelForValue(s)-b+e}else f="center"===i?(c.left+c.right)/2-b+e:Pt(t,i,e);g=(0,s.a2)(n,r,o),p="left"===i?-s.H:s.H}return{titleX:f,titleY:g,maxWidth:u,rotation:p}}(this,l,e,r);(0,s.Z)(t,i.text,0,0,o,{color:i.color,maxWidth:d,rotation:u,textAlign:Et(r,e,n),textBaseline:"middle",translation:[h,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,i=(0,s.v)(t.grid&&t.grid.z,-1),n=(0,s.v)(t.border&&t.border.z,0);return this._isVisible()&&this.draw===Lt.prototype.draw?[{z:i,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),i=this.axis+"AxisID",s=[];let n,o;for(n=0,o=e.length;n<o;++n){const o=e[n];o[i]!==this.id||t&&o.type!==t||s.push(o)}return s}_resolveTickFontOptions(t){const e=this.options.ticks.setContext(this.getContext(t));return(0,s.a0)(e.font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Rt{constructor(t,e,i){this.type=t,this.scope=e,this.override=i,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let i;(function(t){return"id"in t&&"defaults"in t})(e)&&(i=this.register(e));const n=this.items,o=t.id,a=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+t);return o in n||(n[o]=t,function(t,e,i){const n=(0,s.a4)(Object.create(null),[i?s.d.get(i):{},s.d.get(e),t.defaults]);s.d.set(e,n),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((i=>{const n=i.split("."),o=n.pop(),a=[t].concat(n).join("."),r=e[i].split("."),l=r.pop(),h=r.join(".");s.d.route(a,o,h,l)}))}(e,t.defaultRoutes),t.descriptors&&s.d.describe(e,t.descriptors)}(t,a,i),this.override&&s.d.override(t.id,t.overrides)),a}get(t){return this.items[t]}unregister(t){const e=this.items,i=t.id,n=this.scope;i in e&&delete e[i],n&&i in s.d[n]&&(delete s.d[n][i],this.override&&delete s.a3[i])}}class Ft{constructor(){this.controllers=new Rt(v,"datasets",!0),this.elements=new Rt(kt,"elements"),this.plugins=new Rt(Object,"plugins"),this.scales=new Rt(Lt,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,i){[...e].forEach((e=>{const n=i||this._getRegistryForType(e);i||n.isForType(e)||n===this.plugins&&e.id?this._exec(t,n,e):(0,s.F)(e,(e=>{const s=i||this._getRegistryForType(e);this._exec(t,s,e)}))}))}_exec(t,e,i){const n=(0,s.a5)(t);(0,s.Q)(i["before"+n],[],i),e[t](i),(0,s.Q)(i["after"+n],[],i)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const i=this._typedRegistries[e];if(i.isForType(t))return i}return this.plugins}_get(t,e,i){const s=e.get(t);if(void 0===s)throw new Error('"'+t+'" is not a registered '+i+".");return s}}var It=new Ft;class zt{constructor(){this._init=[]}notify(t,e,i,s){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const n=s?this._descriptors(t).filter(s):this._descriptors(t),o=this._notify(n,t,e,i);return"afterDestroy"===e&&(this._notify(n,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,i,n){n=n||{};for(const o of t){const t=o.plugin,a=t[i],r=[e,n,o.options];if(!1===(0,s.Q)(a,r,t)&&n.cancelable)return!1}return!0}invalidate(){(0,s.k)(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const i=t&&t.config,n=(0,s.v)(i.options&&i.options.plugins,{}),o=function(t){const e={},i=[],s=Object.keys(It.plugins.items);for(let t=0;t<s.length;t++)i.push(It.getPlugin(s[t]));const n=t.plugins||[];for(let t=0;t<n.length;t++){const s=n[t];-1===i.indexOf(s)&&(i.push(s),e[s.id]=!0)}return{plugins:i,localIds:e}}(i);return!1!==n||e?function(t,{plugins:e,localIds:i},s,n){const o=[],a=t.getContext();for(const r of e){const e=r.id,l=Vt(s[e],n);null!==l&&o.push({plugin:r,options:Bt(t.config,{plugin:r,local:i[e]},l,a)})}return o}(t,o,n,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],i=this._cache,s=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(s(e,i),t,"stop"),this._notify(s(i,e),t,"start")}}function Vt(t,e){return e||!1!==t?!0===t?{}:t:null}function Bt(t,{plugin:e,local:i},s,n){const o=t.pluginScopeKeys(e),a=t.getOptionScopes(s,o);return i&&e.defaults&&a.push(e.defaults),t.createResolver(a,n,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function jt(t,e){const i=s.d.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||i.indexAxis||"x"}function Wt(t){if("x"===t||"y"===t||"r"===t)return t}function Nt(t,...e){if(Wt(t))return t;for(const s of e){const e=s.axis||("top"===(i=s.position)||"bottom"===i?"x":"left"===i||"right"===i?"y":void 0)||t.length>1&&Wt(t[0].toLowerCase());if(e)return e}var i;throw new Error(`Cannot determine type of '${t}' axis. Please provide 'axis' or 'position' option.`)}function Ht(t,e,i){if(i[e+"AxisID"]===t)return{axis:e}}function $t(t){const e=t.options||(t.options={});e.plugins=(0,s.v)(e.plugins,{}),e.scales=function(t,e){const i=s.a3[t.type]||{scales:{}},n=e.scales||{},o=jt(t.type,e),a=Object.create(null);return Object.keys(n).forEach((e=>{const r=n[e];if(!(0,s.i)(r))return console.error(`Invalid scale configuration for scale: ${e}`);if(r._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const l=Nt(e,r,function(t,e){if(e.data&&e.data.datasets){const i=e.data.datasets.filter((e=>e.xAxisID===t||e.yAxisID===t));if(i.length)return Ht(t,"x",i[0])||Ht(t,"y",i[0])}return{}}(e,t),s.d.scales[r.type]),h=function(t,e){return t===e?"_index_":"_value_"}(l,o),c=i.scales||{};a[e]=(0,s.ab)(Object.create(null),[{axis:l},r,c[l],c[h]])})),t.data.datasets.forEach((i=>{const o=i.type||t.type,r=i.indexAxis||jt(o,e),l=(s.a3[o]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let i=t;return"_index_"===t?i=e:"_value_"===t&&(i="x"===e?"y":"x"),i}(t,r),o=i[e+"AxisID"]||e;a[o]=a[o]||Object.create(null),(0,s.ab)(a[o],[{axis:e},n[o],l[t]])}))})),Object.keys(a).forEach((t=>{const e=a[t];(0,s.ab)(e,[s.d.scales[e.type],s.d.scale])})),a}(t,e)}function Yt(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const Ut=new Map,Xt=new Set;function Qt(t,e){let i=Ut.get(t);return i||(i=e(),Ut.set(t,i),Xt.add(i)),i}const qt=(t,e,i)=>{const n=(0,s.f)(e,i);void 0!==n&&t.add(n)};class Kt{constructor(t){this._config=function(t){return(t=t||{}).data=Yt(t.data),$t(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=Yt(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),$t(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return Qt(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return Qt(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return Qt(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return Qt(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const i=this._scopeCache;let s=i.get(t);return s&&!e||(s=new Map,i.set(t,s)),s}getOptionScopes(t,e,i){const{options:n,type:o}=this,a=this._cachedScopes(t,i),r=a.get(e);if(r)return r;const l=new Set;e.forEach((e=>{t&&(l.add(t),e.forEach((e=>qt(l,t,e)))),e.forEach((t=>qt(l,n,t))),e.forEach((t=>qt(l,s.a3[o]||{},t))),e.forEach((t=>qt(l,s.d,t))),e.forEach((t=>qt(l,s.a6,t)))}));const h=Array.from(l);return 0===h.length&&h.push(Object.create(null)),Xt.has(e)&&a.set(e,h),h}chartOptionScopes(){const{options:t,type:e}=this;return[t,s.a3[e]||{},s.d.datasets[e]||{},{type:e},s.d,s.a6]}resolveNamedOptions(t,e,i,n=[""]){const o={$shared:!0},{resolver:a,subPrefixes:r}=Zt(this._resolverCache,t,n);let l=a;if(function(t,e){const{isScriptable:i,isIndexable:n}=(0,s.aa)(t);for(const o of e){const e=i(o),a=n(o),r=(a||e)&&t[o];if(e&&((0,s.a7)(r)||Gt(r))||a&&(0,s.b)(r))return!0}return!1}(a,e)){o.$shared=!1,i=(0,s.a7)(i)?i():i;const e=this.createResolver(t,i,r);l=(0,s.a8)(a,i,e)}for(const t of e)o[t]=l[t];return o}createResolver(t,e,i=[""],n){const{resolver:o}=Zt(this._resolverCache,t,i);return(0,s.i)(e)?(0,s.a8)(o,e,void 0,n):o}}function Zt(t,e,i){let n=t.get(e);n||(n=new Map,t.set(e,n));const o=i.join();let a=n.get(o);return a||(a={resolver:(0,s.a9)(e,i),subPrefixes:i.filter((t=>!t.toLowerCase().includes("hover")))},n.set(o,a)),a}const Gt=t=>(0,s.i)(t)&&Object.getOwnPropertyNames(t).reduce(((e,i)=>e||(0,s.a7)(t[i])),!1),Jt=["top","bottom","left","right","chartArea"];function te(t,e){return"top"===t||"bottom"===t||-1===Jt.indexOf(t)&&"x"===e}function ee(t,e){return function(i,s){return i[t]===s[t]?i[e]-s[e]:i[t]-s[t]}}function ie(t){const e=t.chart,i=e.options.animation;e.notifyPlugins("afterRender"),(0,s.Q)(i&&i.onComplete,[t],e)}function se(t){const e=t.chart,i=e.options.animation;(0,s.Q)(i&&i.onProgress,[t],e)}function ne(t){return(0,s.M)()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const oe={},ae=t=>{const e=ne(t);return Object.values(oe).filter((t=>t.canvas===e)).pop()};function re(t,e,i){const s=Object.keys(t);for(const n of s){const s=+n;if(s>=e){const o=t[n];delete t[n],(i>0||s>e)&&(t[s+i]=o)}}}function le(t,e,i){return t.options.clip?t[i]:e[i]}class he{static defaults=s.d;static instances=oe;static overrides=s.a3;static registry=It;static version="4.4.0";static getChart=ae;static register(...t){It.add(...t),ce()}static unregister(...t){It.remove(...t),ce()}constructor(t,e){const i=this.config=new Kt(e),n=ne(t),a=ae(n);if(a)throw new Error("Canvas is already in use. Chart with ID '"+a.id+"' must be destroyed before the canvas with ID '"+a.canvas.id+"' can be reused.");const r=i.createResolver(i.chartOptionScopes(),this.getContext());this.platform=new(i.platform||wt(n)),this.platform.updateConfig(i);const l=this.platform.acquireContext(n,r.aspectRatio),h=l&&l.canvas,c=h&&h.height,d=h&&h.width;this.id=(0,s.ac)(),this.ctx=l,this.canvas=h,this.width=d,this.height=c,this._options=r,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new zt,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=(0,s.ad)((t=>this.update(t)),r.resizeDelay||0),this._dataChanges=[],oe[this.id]=this,l&&h?(o.listen(this,"complete",ie),o.listen(this,"progress",se),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:i,height:n,_aspectRatio:o}=this;return(0,s.k)(t)?e&&o?o:n?i/n:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}get registry(){return It}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():(0,s.ae)(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return(0,s.af)(this.canvas,this.ctx),this}stop(){return o.stop(this),this}resize(t,e){o.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const i=this.options,n=this.canvas,o=i.maintainAspectRatio&&this.aspectRatio,a=this.platform.getMaximumSize(n,t,e,o),r=i.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=a.width,this.height=a.height,this._aspectRatio=this.aspectRatio,(0,s.ae)(this,r,!0)&&(this.notifyPlugins("resize",{size:a}),(0,s.Q)(i.onResize,[this,a],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const t=this.options.scales||{};(0,s.F)(t,((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,i=this.scales,n=Object.keys(i).reduce(((t,e)=>(t[e]=!1,t)),{});let o=[];e&&(o=o.concat(Object.keys(e).map((t=>{const i=e[t],s=Nt(t,i),n="r"===s,o="x"===s;return{options:i,dposition:n?"chartArea":o?"bottom":"left",dtype:n?"radialLinear":o?"category":"linear"}})))),(0,s.F)(o,(e=>{const o=e.options,a=o.id,r=Nt(a,o),l=(0,s.v)(o.type,e.dtype);void 0!==o.position&&te(o.position,r)===te(e.dposition)||(o.position=e.dposition),n[a]=!0;let h=null;a in i&&i[a].type===l?h=i[a]:(h=new(It.getScale(l))({id:a,type:l,ctx:this.ctx,chart:this}),i[h.id]=h),h.init(o,t)})),(0,s.F)(n,((t,e)=>{t||delete i[e]})),(0,s.F)(i,(t=>{ot.configure(this,t,t.options),ot.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,i=t.length;if(t.sort(((t,e)=>t.index-e.index)),i>e){for(let t=e;t<i;++t)this._destroyDatasetMeta(t);t.splice(e,i-e)}this._sortedMetasets=t.slice(0).sort(ee("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,i)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(i)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let i,n;for(this._removeUnreferencedMetasets(),i=0,n=e.length;i<n;i++){const n=e[i];let o=this.getDatasetMeta(i);const a=n.type||this.config.type;if(o.type&&o.type!==a&&(this._destroyDatasetMeta(i),o=this.getDatasetMeta(i)),o.type=a,o.indexAxis=n.indexAxis||jt(a,this.options),o.order=n.order||0,o.index=i,o.label=""+n.label,o.visible=this.isDatasetVisible(i),o.controller)o.controller.updateIndex(i),o.controller.linkScales();else{const e=It.getController(a),{datasetElementType:n,dataElementType:r}=s.d.datasets[a];Object.assign(e,{dataElementType:It.getElement(r),datasetElementType:n&&It.getElement(n)}),o.controller=new e(this,i),t.push(o.controller)}}return this._updateMetasets(),t}_resetElements(){(0,s.F)(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const i=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),n=this._animationsDisabled=!i.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let a=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),i=!n&&-1===o.indexOf(e);e.buildOrUpdateElements(i),a=Math.max(+e.getMaxOverflow(),a)}a=this._minPadding=i.layout.autoPadding?a:0,this._updateLayout(a),n||(0,s.F)(o,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(ee("z","_idx"));const{_active:r,_lastEvent:l}=this;l?this._eventHandler(l,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){(0,s.F)(this.scales,(t=>{ot.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),i=new Set(t.events);(0,s.ag)(e,i)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:i,start:s,count:n}of e)re(t,s,"_removeElements"===i?-n:n)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,i=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),n=i(0);for(let t=1;t<e;t++)if(!(0,s.ag)(n,i(t)))return;return Array.from(n).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;ot.update(this,this.width,this.height,t);const e=this.chartArea,i=e.width<=0||e.height<=0;this._layers=[],(0,s.F)(this.boxes,(t=>{i&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,i=this.data.datasets.length;e<i;++e)this._updateDataset(e,(0,s.a7)(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const i=this.getDatasetMeta(t),s={meta:i,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",s)&&(i.controller._update(e),s.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",s))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(o.has(this)?this.attached&&!o.running(this)&&o.start(this):(this.draw(),ie({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,i=[];let s,n;for(s=0,n=e.length;s<n;++s){const n=e[s];t&&!n.visible||i.push(n)}return i}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,i=t._clip,n=!i.disabled,o=function(t,e){const{xScale:i,yScale:s}=t;return i&&s?{left:le(i,e,"left"),right:le(i,e,"right"),top:le(s,e,"top"),bottom:le(s,e,"bottom")}:e}(t,this.chartArea),a={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",a)&&(n&&(0,s.Y)(e,{left:!1===i.left?0:o.left-i.left,right:!1===i.right?this.width:o.right+i.right,top:!1===i.top?0:o.top-i.top,bottom:!1===i.bottom?this.height:o.bottom+i.bottom}),t.controller.draw(),n&&(0,s.$)(e),a.cancelable=!1,this.notifyPlugins("afterDatasetDraw",a))}isPointInArea(t){return(0,s.C)(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,i,s){const n=X.modes[e];return"function"==typeof n?n(this,t,i,s):[]}getDatasetMeta(t){const e=this.data.datasets[t],i=this._metasets;let s=i.filter((t=>t&&t._dataset===e)).pop();return s||(s={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},i.push(s)),s}getContext(){return this.$context||(this.$context=(0,s.j)(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const i=this.getDatasetMeta(t);return"boolean"==typeof i.hidden?!i.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,i){const n=i?"show":"hide",o=this.getDatasetMeta(t),a=o.controller._resolveAnimations(void 0,n);(0,s.h)(e)?(o.data[e].hidden=!i,this.update()):(this.setDatasetVisibility(t,i),a.update(o,{visible:i}),this.update((e=>e.datasetIndex===t?n:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),o.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),(0,s.af)(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),delete oe[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},n=(t,e,i)=>{t.offsetX=e,t.offsetY=i,this._eventHandler(t)};(0,s.F)(this.options.events,(t=>i(t,n)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,i=(i,s)=>{e.addEventListener(this,i,s),t[i]=s},s=(i,s)=>{t[i]&&(e.removeEventListener(this,i,s),delete t[i])},n=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const a=()=>{s("attach",a),this.attached=!0,this.resize(),i("resize",n),i("detach",o)};o=()=>{this.attached=!1,s("resize",n),this._stop(),this._resize(0,0),i("attach",a)},e.isAttached(this.canvas)?a():o()}unbindEvents(){(0,s.F)(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},(0,s.F)(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,i){const s=i?"set":"remove";let n,o,a,r;for("dataset"===e&&(n=this.getDatasetMeta(t[0].datasetIndex),n.controller["_"+s+"DatasetHoverStyle"]()),a=0,r=t.length;a<r;++a){o=t[a];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[s+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],i=t.map((({datasetIndex:t,index:e})=>{const i=this.getDatasetMeta(t);if(!i)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:i.data[e],index:e}}));!(0,s.ah)(i,e)&&(this._active=i,this._lastEvent=null,this._updateHoverStyles(i,e))}notifyPlugins(t,e,i){return this._plugins.notify(this,t,e,i)}isPluginEnabled(t){return 1===this._plugins._cache.filter((e=>e.plugin.id===t)).length}_updateHoverStyles(t,e,i){const s=this.options.hover,n=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=n(e,t),a=i?t:n(t,e);o.length&&this.updateHoverStyle(o,s.mode,!1),a.length&&s.mode&&this.updateHoverStyle(a,s.mode,!0)}_eventHandler(t,e){const i={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},s=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",i,s))return;const n=this._handleEvent(t,e,i.inChartArea);return i.cancelable=!1,this.notifyPlugins("afterEvent",i,s),(n||i.changed)&&this.render(),this}_handleEvent(t,e,i){const{_active:n=[],options:o}=this,a=e,r=this._getActiveElements(t,n,i,a),l=(0,s.ai)(t),h=function(t,e,i,s){return i&&"mouseout"!==t.type?s?e:t:null}(t,this._lastEvent,i,l);i&&(this._lastEvent=null,(0,s.Q)(o.onHover,[t,r,this],this),l&&(0,s.Q)(o.onClick,[t,r,this],this));const c=!(0,s.ah)(r,n);return(c||e)&&(this._active=r,this._updateHoverStyles(r,n,e)),this._lastEvent=h,c}_getActiveElements(t,e,i,s){if("mouseout"===t.type)return[];if(!i)return e;const n=this.options.hover;return this.getElementsAtEventForMode(t,n.mode,n,s)}}function ce(){return(0,s.F)(he.instances,(t=>t._plugins.invalidate()))}function de(t,e,i,s){return{x:i+t*Math.cos(e),y:s+t*Math.sin(e)}}function ue(t,e,i,n,o,a){const{x:r,y:l,startAngle:h,pixelMargin:c,innerRadius:d}=e,u=Math.max(e.outerRadius+n+i-c,0),f=d>0?d+n+i+c:0;let g=0;const p=o-h;if(n){const t=((d>0?d-n:0)+(u>0?u-n:0))/2;g=(p-(0!==t?p*t/(t+n):p))/2}const m=(p-Math.max(.001,p*u-i/s.P)/u)/2,b=h+m+g,x=o-m-g,{outerStart:_,outerEnd:y,innerStart:v,innerEnd:M}=function(t,e,i,n){const o=(a=t.options.borderRadius,(0,s.ak)(a,["outerStart","outerEnd","innerStart","innerEnd"]));var a;const r=(i-e)/2,l=Math.min(r,n*e/2),h=t=>{const e=(i-Math.min(r,t))*n/2;return(0,s.S)(t,0,Math.min(r,e))};return{outerStart:h(o.outerStart),outerEnd:h(o.outerEnd),innerStart:(0,s.S)(o.innerStart,0,l),innerEnd:(0,s.S)(o.innerEnd,0,l)}}(e,f,u,x-b),w=u-_,k=u-y,S=b+_/w,P=x-y/k,D=f+v,C=f+M,O=b+v/D,A=x-M/C;if(t.beginPath(),a){const e=(S+P)/2;if(t.arc(r,l,u,S,e),t.arc(r,l,u,e,P),y>0){const e=de(k,P,r,l);t.arc(e.x,e.y,y,P,x+s.H)}const i=de(C,x,r,l);if(t.lineTo(i.x,i.y),M>0){const e=de(C,A,r,l);t.arc(e.x,e.y,M,x+s.H,A+Math.PI)}const n=(x-M/f+(b+v/f))/2;if(t.arc(r,l,f,x-M/f,n,!0),t.arc(r,l,f,n,b+v/f,!0),v>0){const e=de(D,O,r,l);t.arc(e.x,e.y,v,O+Math.PI,b-s.H)}const o=de(w,b,r,l);if(t.lineTo(o.x,o.y),_>0){const e=de(w,S,r,l);t.arc(e.x,e.y,_,b-s.H,S)}}else{t.moveTo(r,l);const e=Math.cos(S)*u+r,i=Math.sin(S)*u+l;t.lineTo(e,i);const s=Math.cos(P)*u+r,n=Math.sin(P)*u+l;t.lineTo(s,n)}t.closePath()}class fe extends kt{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,i){const n=this.getProps(["x","y"],i),{angle:o,distance:a}=(0,s.D)(n,{x:t,y:e}),{startAngle:r,endAngle:l,innerRadius:h,outerRadius:c,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],i),u=(this.options.spacing+this.options.borderWidth)/2,f=(0,s.v)(d,l-r)>=s.T||(0,s.p)(o,r,l),g=(0,s.aj)(a,h+u,c+u);return f&&g}getCenterPoint(t){const{x:e,y:i,startAngle:s,endAngle:n,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],t),{offset:r,spacing:l}=this.options,h=(s+n)/2,c=(o+a+l+r)/2;return{x:e+Math.cos(h)*c,y:i+Math.sin(h)*c}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:i}=this,n=(e.offset||0)/4,o=(e.spacing||0)/2,a=e.circular;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=i>s.T?Math.floor(i/s.T):0,0===i||this.innerRadius<0||this.outerRadius<0)return;t.save();const r=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(r)*n,Math.sin(r)*n);const l=n*(1-Math.sin(Math.min(s.P,i||0)));t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor,function(t,e,i,n,o){const{fullCircles:a,startAngle:r,circumference:l}=e;let h=e.endAngle;if(a){ue(t,e,i,n,h,o);for(let e=0;e<a;++e)t.fill();isNaN(l)||(h=r+(l%s.T||s.T))}ue(t,e,i,n,h,o),t.fill()}(t,this,l,o,a),function(t,e,i,n,o){const{fullCircles:a,startAngle:r,circumference:l,options:h}=e,{borderWidth:c,borderJoinStyle:d,borderDash:u,borderDashOffset:f}=h,g="inner"===h.borderAlign;if(!c)return;t.setLineDash(u||[]),t.lineDashOffset=f,g?(t.lineWidth=2*c,t.lineJoin=d||"round"):(t.lineWidth=c,t.lineJoin=d||"bevel");let p=e.endAngle;if(a){ue(t,e,i,n,p,o);for(let e=0;e<a;++e)t.stroke();isNaN(l)||(p=r+(l%s.T||s.T))}g&&function(t,e,i){const{startAngle:n,pixelMargin:o,x:a,y:r,outerRadius:l,innerRadius:h}=e;let c=o/l;t.beginPath(),t.arc(a,r,l,n-c,i+c),h>o?(c=o/h,t.arc(a,r,h,i+c,n-c,!0)):t.arc(a,r,o,i+s.H,n-s.H),t.closePath(),t.clip()}(t,e,p),a||(ue(t,e,i,n,p,o),t.stroke())}(t,this,l,o,a),t.restore()}}function ge(t,e,i=e){t.lineCap=(0,s.v)(i.borderCapStyle,e.borderCapStyle),t.setLineDash((0,s.v)(i.borderDash,e.borderDash)),t.lineDashOffset=(0,s.v)(i.borderDashOffset,e.borderDashOffset),t.lineJoin=(0,s.v)(i.borderJoinStyle,e.borderJoinStyle),t.lineWidth=(0,s.v)(i.borderWidth,e.borderWidth),t.strokeStyle=(0,s.v)(i.borderColor,e.borderColor)}function pe(t,e,i){t.lineTo(i.x,i.y)}function me(t,e,i={}){const s=t.length,{start:n=0,end:o=s-1}=i,{start:a,end:r}=e,l=Math.max(n,a),h=Math.min(o,r),c=n<a&&o<a||n>r&&o>r;return{count:s,start:l,loop:e.loop,ilen:h<l&&!c?s+h-l:h-l}}function be(t,e,i,n){const{points:o,options:a}=e,{count:r,start:l,loop:h,ilen:c}=me(o,i,n),d=function(t){return t.stepped?s.ar:t.tension||"monotone"===t.cubicInterpolationMode?s.as:pe}(a);let u,f,g,{move:p=!0,reverse:m}=n||{};for(u=0;u<=c;++u)f=o[(l+(m?c-u:u))%r],f.skip||(p?(t.moveTo(f.x,f.y),p=!1):d(t,g,f,m,a.stepped),g=f);return h&&(f=o[(l+(m?c:0))%r],d(t,g,f,m,a.stepped)),!!h}function xe(t,e,i,s){const n=e.points,{count:o,start:a,ilen:r}=me(n,i,s),{move:l=!0,reverse:h}=s||{};let c,d,u,f,g,p,m=0,b=0;const x=t=>(a+(h?r-t:t))%o,_=()=>{f!==g&&(t.lineTo(m,g),t.lineTo(m,f),t.lineTo(m,p))};for(l&&(d=n[x(0)],t.moveTo(d.x,d.y)),c=0;c<=r;++c){if(d=n[x(c)],d.skip)continue;const e=d.x,i=d.y,s=0|e;s===u?(i<f?f=i:i>g&&(g=i),m=(b*m+e)/++b):(_(),t.lineTo(e,i),u=s,b=0,f=g=i),p=i}_()}function _e(t){const e=t.options,i=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||i?be:xe}const ye="function"==typeof Path2D;class ve extends kt{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const i=this.options;if((i.tension||"monotone"===i.cubicInterpolationMode)&&!i.stepped&&!this._pointsUpdated){const n=i.spanGaps?this._loop:this._fullLoop;(0,s.al)(this._points,i,t,n,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=(0,s.am)(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,i=t.length;return i&&e[t[i-1].end]}interpolate(t,e){const i=this.options,n=t[e],o=this.points,a=(0,s.an)(this,{property:e,start:n,end:n});if(!a.length)return;const r=[],l=function(t){return t.stepped?s.ao:t.tension||"monotone"===t.cubicInterpolationMode?s.ap:s.aq}(i);let h,c;for(h=0,c=a.length;h<c;++h){const{start:s,end:c}=a[h],d=o[s],u=o[c];if(d===u){r.push(d);continue}const f=l(d,u,Math.abs((n-d[e])/(u[e]-d[e])),i.stepped);f[e]=t[e],r.push(f)}return 1===r.length?r[0]:r}pathSegment(t,e,i){return _e(this)(t,this,e,i)}path(t,e,i){const s=this.segments,n=_e(this);let o=this._loop;e=e||0,i=i||this.points.length-e;for(const a of s)o&=n(t,this,a,{start:e,end:e+i-1});return!!o}draw(t,e,i,s){const n=this.options||{};(this.points||[]).length&&n.borderWidth&&(t.save(),function(t,e,i,s){ye&&!e.options.segment?function(t,e,i,s){let n=e._path;n||(n=e._path=new Path2D,e.path(n,i,s)&&n.closePath()),ge(t,e.options),t.stroke(n)}(t,e,i,s):function(t,e,i,s){const{segments:n,options:o}=e,a=_e(e);for(const r of n)ge(t,o,r.style),t.beginPath(),a(t,e,r,{start:i,end:i+s-1})&&t.closePath(),t.stroke()}(t,e,i,s)}(t,this,i,s),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Me(t,e,i,s){const n=t.options,{[i]:o}=t.getProps([i],s);return Math.abs(e-o)<n.radius+n.hitRadius}class we extends kt{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,i){const s=this.options,{x:n,y:o}=this.getProps(["x","y"],i);return Math.pow(t-n,2)+Math.pow(e-o,2)<Math.pow(s.hitRadius+s.radius,2)}inXRange(t,e){return Me(this,t,"x",e)}inYRange(t,e){return Me(this,t,"y",e)}getCenterPoint(t){const{x:e,y:i}=this.getProps(["x","y"],t);return{x:e,y:i}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const i=this.options;this.skip||i.radius<.1||!(0,s.C)(this,e,this.size(i)/2)||(t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.fillStyle=i.backgroundColor,(0,s.at)(t,i,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function ke(t,e){const{x:i,y:s,base:n,width:o,height:a}=t.getProps(["x","y","base","width","height"],e);let r,l,h,c,d;return t.horizontal?(d=a/2,r=Math.min(i,n),l=Math.max(i,n),h=s-d,c=s+d):(d=o/2,r=i-d,l=i+d,h=Math.min(s,n),c=Math.max(s,n)),{left:r,top:h,right:l,bottom:c}}function Se(t,e,i,n){return t?0:(0,s.S)(e,i,n)}function Pe(t,e,i,n){const o=null===e,a=null===i,r=t&&!(o&&a)&&ke(t,n);return r&&(o||(0,s.aj)(e,r.left,r.right))&&(a||(0,s.aj)(i,r.top,r.bottom))}function De(t,e){t.rect(e.x,e.y,e.w,e.h)}function Ce(t,e,i={}){const s=t.x!==i.x?-e:0,n=t.y!==i.y?-e:0,o=(t.x+t.w!==i.x+i.w?e:0)-s,a=(t.y+t.h!==i.y+i.h?e:0)-n;return{x:t.x+s,y:t.y+n,w:t.w+o,h:t.h+a,radius:t.radius}}class Oe extends kt{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:i,backgroundColor:n}}=this,{inner:o,outer:a}=function(t){const e=ke(t),i=e.right-e.left,n=e.bottom-e.top,o=function(t,e,i){const n=t.options.borderWidth,o=t.borderSkipped,a=(0,s.av)(n);return{t:Se(o.top,a.top,0,i),r:Se(o.right,a.right,0,e),b:Se(o.bottom,a.bottom,0,i),l:Se(o.left,a.left,0,e)}}(t,i/2,n/2),a=function(t,e,i){const{enableBorderRadius:n}=t.getProps(["enableBorderRadius"]),o=t.options.borderRadius,a=(0,s.aw)(o),r=Math.min(e,i),l=t.borderSkipped,h=n||(0,s.i)(o);return{topLeft:Se(!h||l.top||l.left,a.topLeft,0,r),topRight:Se(!h||l.top||l.right,a.topRight,0,r),bottomLeft:Se(!h||l.bottom||l.left,a.bottomLeft,0,r),bottomRight:Se(!h||l.bottom||l.right,a.bottomRight,0,r)}}(t,i/2,n/2);return{outer:{x:e.left,y:e.top,w:i,h:n,radius:a},inner:{x:e.left+o.l,y:e.top+o.t,w:i-o.l-o.r,h:n-o.t-o.b,radius:{topLeft:Math.max(0,a.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,a.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,a.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,a.bottomRight-Math.max(o.b,o.r))}}}}(this),r=(l=a.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?s.au:De;var l;t.save(),a.w===o.w&&a.h===o.h||(t.beginPath(),r(t,Ce(a,e,o)),t.clip(),r(t,Ce(o,-e,a)),t.fillStyle=i,t.fill("evenodd")),t.beginPath(),r(t,Ce(o,e)),t.fillStyle=n,t.fill(),t.restore()}inRange(t,e,i){return Pe(this,t,e,i)}inXRange(t,e){return Pe(this,t,null,e)}inYRange(t,e){return Pe(this,null,t,e)}getCenterPoint(t){const{x:e,y:i,base:s,horizontal:n}=this.getProps(["x","y","base","horizontal"],t);return{x:n?(e+s)/2:e,y:n?i:(i+s)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}var Ae=Object.freeze({__proto__:null,ArcElement:fe,BarElement:Oe,LineElement:ve,PointElement:we});const Te=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],Ee=Te.map((t=>t.replace("rgb(","rgba(").replace(")",", 0.5)")));function Le(t){return Te[t%Te.length]}function Re(t){return Ee[t%Ee.length]}function Fe(t){let e;for(e in t)if(t[e].borderColor||t[e].backgroundColor)return!0;return!1}var Ie={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(t,e,i){if(!i.enabled)return;const{data:{datasets:s},options:n}=t.config,{elements:o}=n;if(!i.forceOverride&&(Fe(s)||(a=n)&&(a.borderColor||a.backgroundColor)||o&&Fe(o)))return;var a;const r=function(t){let e=0;return(i,s)=>{const n=t.getDatasetMeta(s).controller;n instanceof E?e=function(t,e){return t.backgroundColor=t.data.map((()=>Le(e++))),e}(i,e):n instanceof R?e=function(t,e){return t.backgroundColor=t.data.map((()=>Re(e++))),e}(i,e):n&&(e=function(t,e){return t.borderColor=Le(e),t.backgroundColor=Re(e),++e}(i,e))}}(t);s.forEach(r)}};function ze(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,writable:!0,value:e})}}function Ve(t){t.data.datasets.forEach((t=>{ze(t)}))}var Be={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,i)=>{if(!i.enabled)return void Ve(t);const n=t.width;t.data.datasets.forEach(((e,o)=>{const{_data:a,indexAxis:r}=e,l=t.getDatasetMeta(o),h=a||e.data;if("y"===(0,s.a)([r,t.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const c=t.scales[l.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let d,{start:u,count:f}=function(t,e){const i=e.length;let n,o=0;const{iScale:a}=t,{min:r,max:l,minDefined:h,maxDefined:c}=a.getUserBounds();return h&&(o=(0,s.S)((0,s.B)(e,a.axis,r).lo,0,i-1)),n=c?(0,s.S)((0,s.B)(e,a.axis,l).hi+1,o,i)-o:i-o,{start:o,count:n}}(l,h);if(f<=(i.threshold||4*n))ze(e);else{switch((0,s.k)(a)&&(e._data=h,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),i.algorithm){case"lttb":d=function(t,e,i,s,n){const o=n.samples||s;if(o>=i)return t.slice(e,e+i);const a=[],r=(i-2)/(o-2);let l=0;const h=e+i-1;let c,d,u,f,g,p=e;for(a[l++]=t[p],c=0;c<o-2;c++){let s,n=0,o=0;const h=Math.floor((c+1)*r)+1+e,m=Math.min(Math.floor((c+2)*r)+1,i)+e,b=m-h;for(s=h;s<m;s++)n+=t[s].x,o+=t[s].y;n/=b,o/=b;const x=Math.floor(c*r)+1+e,_=Math.min(Math.floor((c+1)*r)+1,i)+e,{x:y,y:v}=t[p];for(u=f=-1,s=x;s<_;s++)f=.5*Math.abs((y-n)*(t[s].y-v)-(y-t[s].x)*(o-v)),f>u&&(u=f,d=t[s],g=s);a[l++]=d,p=g}return a[l++]=t[h],a}(h,u,f,n,i);break;case"min-max":d=function(t,e,i,n){let o,a,r,l,h,c,d,u,f,g,p=0,m=0;const b=[],x=e+i-1,_=t[e].x,y=t[x].x-_;for(o=e;o<e+i;++o){a=t[o],r=(a.x-_)/y*n,l=a.y;const e=0|r;if(e===h)l<f?(f=l,c=o):l>g&&(g=l,d=o),p=(m*p+a.x)/++m;else{const i=o-1;if(!(0,s.k)(c)&&!(0,s.k)(d)){const e=Math.min(c,d),s=Math.max(c,d);e!==u&&e!==i&&b.push({...t[e],x:p}),s!==u&&s!==i&&b.push({...t[s],x:p})}o>0&&i!==u&&b.push(t[i]),b.push(a),h=e,m=0,f=g=l,c=d=u=o}}return b}(h,u,f,n);break;default:throw new Error(`Unsupported decimation algorithm '${i.algorithm}'`)}e._decimated=d}}))},destroy(t){Ve(t)}};function je(t,e,i,n){if(n)return;let o=e[t],a=i[t];return"angle"===t&&(o=(0,s.ay)(o),a=(0,s.ay)(a)),{property:t,start:o,end:a}}function We(t,e,i){for(;e>t;e--){const t=i[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Ne(t,e,i,s){return t&&e?s(t[i],e[i]):t?t[i]:e?e[i]:0}function He(t,e){let i=[],n=!1;return(0,s.b)(t)?(n=!0,i=t):i=function(t,e){const{x:i=null,y:s=null}=t||{},n=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=We(t,e,n);const a=n[t],r=n[e];null!==s?(o.push({x:a.x,y:s}),o.push({x:r.x,y:s})):null!==i&&(o.push({x:i,y:a.y}),o.push({x:i,y:r.y}))})),o}(t,e),i.length?new ve({points:i,options:{tension:0},_loop:n,_fullLoop:n}):null}function $e(t){return t&&!1!==t.fill}function Ye(t,e,i){let n=t[e].fill;const o=[e];let a;if(!i)return n;for(;!1!==n&&-1===o.indexOf(n);){if(!(0,s.g)(n))return n;if(a=t[n],!a)return!1;if(a.visible)return n;o.push(n),n=a.fill}return!1}function Ue(t,e,i){const n=function(t){const e=t.options,i=e.fill;let n=(0,s.v)(i&&i.target,i);return void 0===n&&(n=!!e.backgroundColor),!1!==n&&null!==n&&(!0===n?"origin":n)}(t);if((0,s.i)(n))return!isNaN(n.value)&&n;let o=parseFloat(n);return(0,s.g)(o)&&Math.floor(o)===o?function(t,e,i,s){return"-"!==t&&"+"!==t||(i=e+i),!(i===e||i<0||i>=s)&&i}(n[0],e,o,i):["origin","start","end","stack","shape"].indexOf(n)>=0&&n}function Xe(t,e,i){const s=[];for(let n=0;n<i.length;n++){const o=i[n],{first:a,last:r,point:l}=Qe(o,e,"x");if(!(!l||a&&r))if(a)s.unshift(l);else if(t.push(l),!r)break}t.push(...s)}function Qe(t,e,i){const n=t.interpolate(e,i);if(!n)return{};const o=n[i],a=t.segments,r=t.points;let l=!1,h=!1;for(let t=0;t<a.length;t++){const e=a[t],n=r[e.start][i],c=r[e.end][i];if((0,s.aj)(o,n,c)){l=o===n,h=o===c;break}}return{first:l,last:h,point:n}}class qe{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,i){const{x:n,y:o,radius:a}=this;return e=e||{start:0,end:s.T},t.arc(n,o,a,e.end,e.start,!0),!i.bounds}interpolate(t){const{x:e,y:i,radius:s}=this,n=t.angle;return{x:e+Math.cos(n)*s,y:i+Math.sin(n)*s,angle:n}}}function Ke(t,e,i){const n=function(t){const{chart:e,fill:i,line:n}=t;if((0,s.g)(i))return function(t,e){const i=t.getDatasetMeta(e);return i&&t.isDatasetVisible(e)?i.dataset:null}(e,i);if("stack"===i)return function(t){const{scale:e,index:i,line:s}=t,n=[],o=s.segments,a=s.points,r=function(t,e){const i=[],s=t.getMatchingVisibleMetas("line");for(let t=0;t<s.length;t++){const n=s[t];if(n.index===e)break;n.hidden||i.unshift(n.dataset)}return i}(e,i);r.push(He({x:null,y:e.bottom},s));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)Xe(n,a[t],r)}return new ve({points:n,options:{}})}(t);if("shape"===i)return!0;const o=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:i}=t,n=e.options,o=e.getLabels().length,a=n.reverse?e.max:e.min,r=function(t,e,i){let n;return n="start"===t?i:"end"===t?e.options.reverse?e.min:e.max:(0,s.i)(t)?t.value:e.getBaseValue(),n}(i,e,a),l=[];if(n.grid.circular){const t=e.getPointPositionForValue(0,a);return new qe({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<o;++t)l.push(e.getPointPositionForValue(t,r));return l}(t):function(t){const{scale:e={},fill:i}=t,n=function(t,e){let i=null;return"start"===t?i=e.bottom:"end"===t?i=e.top:(0,s.i)(t)?i=e.getPixelForValue(t.value):e.getBasePixel&&(i=e.getBasePixel()),i}(i,e);if((0,s.g)(n)){const t=e.isHorizontal();return{x:t?n:null,y:t?null:n}}return null}(t)}(t);return o instanceof qe?o:He(o,n)}(e),{line:o,scale:a,axis:r}=e,l=o.options,h=l.fill,c=l.backgroundColor,{above:d=c,below:u=c}=h||{};n&&o.points.length&&((0,s.Y)(t,i),function(t,e){const{line:i,target:s,above:n,below:o,area:a,scale:r}=e,l=i._loop?"angle":e.axis;t.save(),"x"===l&&o!==n&&(Ze(t,s,a.top),Ge(t,{line:i,target:s,color:n,scale:r,property:l}),t.restore(),t.save(),Ze(t,s,a.bottom)),Ge(t,{line:i,target:s,color:o,scale:r,property:l}),t.restore()}(t,{line:o,target:n,above:d,below:u,area:i,scale:a,axis:r}),(0,s.$)(t))}function Ze(t,e,i){const{segments:s,points:n}=e;let o=!0,a=!1;t.beginPath();for(const r of s){const{start:s,end:l}=r,h=n[s],c=n[We(s,l,n)];o?(t.moveTo(h.x,h.y),o=!1):(t.lineTo(h.x,i),t.lineTo(h.x,h.y)),a=!!e.pathSegment(t,r,{move:a}),a?t.closePath():t.lineTo(c.x,i)}t.lineTo(e.first().x,i),t.closePath(),t.clip()}function Ge(t,e){const{line:i,target:n,property:o,color:a,scale:r}=e,l=function(t,e,i){const n=t.segments,o=t.points,a=e.points,r=[];for(const t of n){let{start:n,end:l}=t;l=We(n,l,o);const h=je(i,o[n],o[l],t.loop);if(!e.segments){r.push({source:t,target:h,start:o[n],end:o[l]});continue}const c=(0,s.an)(e,h);for(const e of c){const n=je(i,a[e.start],a[e.end],e.loop),l=(0,s.ax)(t,o,n);for(const t of l)r.push({source:t,target:e,start:{[i]:Ne(h,n,"start",Math.max)},end:{[i]:Ne(h,n,"end",Math.min)}})}}return r}(i,n,o);for(const{source:e,target:s,start:h,end:c}of l){const{style:{backgroundColor:l=a}={}}=e,d=!0!==n;t.save(),t.fillStyle=l,Je(t,r,d&&je(o,h,c)),t.beginPath();const u=!!i.pathSegment(t,e);let f;if(d){u?t.closePath():ti(t,n,c,o);const e=!!n.pathSegment(t,s,{move:u,reverse:!0});f=u&&e,f||ti(t,n,h,o)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function Je(t,e,i){const{top:s,bottom:n}=e.chart.chartArea,{property:o,start:a,end:r}=i||{};"x"===o&&(t.beginPath(),t.rect(a,s,r-a,n-s),t.clip())}function ti(t,e,i,s){const n=e.interpolate(i,s);n&&t.lineTo(n.x,n.y)}var ei={id:"filler",afterDatasetsUpdate(t,e,i){const s=(t.data.datasets||[]).length,n=[];let o,a,r,l;for(a=0;a<s;++a)o=t.getDatasetMeta(a),r=o.dataset,l=null,r&&r.options&&r instanceof ve&&(l={visible:t.isDatasetVisible(a),index:a,fill:Ue(r,a,s),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:r}),o.$filler=l,n.push(l);for(a=0;a<s;++a)l=n[a],l&&!1!==l.fill&&(l.fill=Ye(n,a,i.propagate))},beforeDraw(t,e,i){const s="beforeDraw"===i.drawTime,n=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=n.length-1;e>=0;--e){const i=n[e].$filler;i&&(i.line.updateControlPoints(o,i.axis),s&&i.fill&&Ke(t.ctx,i,o))}},beforeDatasetsDraw(t,e,i){if("beforeDatasetsDraw"!==i.drawTime)return;const s=t.getSortedVisibleDatasetMetas();for(let e=s.length-1;e>=0;--e){const i=s[e].$filler;$e(i)&&Ke(t.ctx,i,t.chartArea)}},beforeDatasetDraw(t,e,i){const s=e.meta.$filler;$e(s)&&"beforeDatasetDraw"===i.drawTime&&Ke(t.ctx,s,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const ii=(t,e)=>{let{boxHeight:i=e,boxWidth:s=e}=t;return t.usePointStyle&&(i=Math.min(i,e),s=t.pointStyleWidth||Math.min(s,e)),{boxWidth:s,boxHeight:i,itemHeight:Math.max(e,i)}};class si extends kt{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,i){this.maxWidth=t,this.maxHeight=e,this._margins=i,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=(0,s.Q)(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,i)=>t.sort(e,i,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const i=t.labels,n=(0,s.a0)(i.font),o=n.size,a=this._computeTitleHeight(),{boxWidth:r,itemHeight:l}=ii(i,o);let h,c;e.font=n.string,this.isHorizontal()?(h=this.maxWidth,c=this._fitRows(a,o,r,l)+10):(c=this.maxHeight,h=this._fitCols(a,n,r,l)+10),this.width=Math.min(h,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,i,s){const{ctx:n,maxWidth:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.lineWidths=[0],h=s+a;let c=t;n.textAlign="left",n.textBaseline="middle";let d=-1,u=-h;return this.legendItems.forEach(((t,f)=>{const g=i+e/2+n.measureText(t.text).width;(0===f||l[l.length-1]+g+2*a>o)&&(c+=h,l[l.length-(f>0?0:1)]=0,u+=h,d++),r[f]={left:0,top:u,row:d,width:g,height:s},l[l.length-1]+=g+a})),c}_fitCols(t,e,i,s){const{ctx:n,maxHeight:o,options:{labels:{padding:a}}}=this,r=this.legendHitBoxes=[],l=this.columnSizes=[],h=o-t;let c=a,d=0,u=0,f=0,g=0;return this.legendItems.forEach(((t,o)=>{const{itemWidth:p,itemHeight:m}=function(t,e,i,s,n){const o=function(t,e,i,s){let n=t.text;return n&&"string"!=typeof n&&(n=n.reduce(((t,e)=>t.length>e.length?t:e))),e+i.size/2+s.measureText(n).width}(s,t,e,i),a=function(t,e,i){let s=t;return"string"!=typeof e.text&&(s=ni(e,i)),s}(n,s,e.lineHeight);return{itemWidth:o,itemHeight:a}}(i,e,n,t,s);o>0&&u+m+2*a>h&&(c+=d+a,l.push({width:d,height:u}),f+=d+a,g++,d=u=0),r[o]={left:f,top:u,col:g,width:p,height:m},d=Math.max(d,p),u+=m+a})),c+=d,l.push({width:d,height:u}),c}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:i,labels:{padding:n},rtl:o}}=this,a=(0,s.az)(o,this.left,this.width);if(this.isHorizontal()){let o=0,r=(0,s.a2)(i,this.left+n,this.right-this.lineWidths[o]);for(const l of e)o!==l.row&&(o=l.row,r=(0,s.a2)(i,this.left+n,this.right-this.lineWidths[o])),l.top+=this.top+t+n,l.left=a.leftForLtr(a.x(r),l.width),r+=l.width+n}else{let o=0,r=(0,s.a2)(i,this.top+t+n,this.bottom-this.columnSizes[o].height);for(const l of e)l.col!==o&&(o=l.col,r=(0,s.a2)(i,this.top+t+n,this.bottom-this.columnSizes[o].height)),l.top=r,l.left+=this.left+n,l.left=a.leftForLtr(a.x(l.left),l.width),r+=l.height+n}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;(0,s.Y)(t,this),this._draw(),(0,s.$)(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:i,ctx:n}=this,{align:o,labels:a}=t,r=s.d.color,l=(0,s.az)(t.rtl,this.left,this.width),h=(0,s.a0)(a.font),{padding:c}=a,d=h.size,u=d/2;let f;this.drawTitle(),n.textAlign=l.textAlign("left"),n.textBaseline="middle",n.lineWidth=.5,n.font=h.string;const{boxWidth:g,boxHeight:p,itemHeight:m}=ii(a,d),b=this.isHorizontal(),x=this._computeTitleHeight();f=b?{x:(0,s.a2)(o,this.left+c,this.right-i[0]),y:this.top+c+x,line:0}:{x:this.left+c,y:(0,s.a2)(o,this.top+x+c,this.bottom-e[0].height),line:0},(0,s.aA)(this.ctx,t.textDirection);const _=m+c;this.legendItems.forEach(((y,v)=>{n.strokeStyle=y.fontColor,n.fillStyle=y.fontColor;const M=n.measureText(y.text).width,w=l.textAlign(y.textAlign||(y.textAlign=a.textAlign)),k=g+u+M;let S=f.x,P=f.y;if(l.setWidth(this.width),b?v>0&&S+k+c>this.right&&(P=f.y+=_,f.line++,S=f.x=(0,s.a2)(o,this.left+c,this.right-i[f.line])):v>0&&P+_>this.bottom&&(S=f.x=S+e[f.line].width+c,f.line++,P=f.y=(0,s.a2)(o,this.top+x+c,this.bottom-e[f.line].height)),function(t,e,i){if(isNaN(g)||g<=0||isNaN(p)||p<0)return;n.save();const o=(0,s.v)(i.lineWidth,1);if(n.fillStyle=(0,s.v)(i.fillStyle,r),n.lineCap=(0,s.v)(i.lineCap,"butt"),n.lineDashOffset=(0,s.v)(i.lineDashOffset,0),n.lineJoin=(0,s.v)(i.lineJoin,"miter"),n.lineWidth=o,n.strokeStyle=(0,s.v)(i.strokeStyle,r),n.setLineDash((0,s.v)(i.lineDash,[])),a.usePointStyle){const r={radius:p*Math.SQRT2/2,pointStyle:i.pointStyle,rotation:i.rotation,borderWidth:o},h=l.xPlus(t,g/2),c=e+u;(0,s.aD)(n,r,h,c,a.pointStyleWidth&&g)}else{const a=e+Math.max((d-p)/2,0),r=l.leftForLtr(t,g),h=(0,s.aw)(i.borderRadius);n.beginPath(),Object.values(h).some((t=>0!==t))?(0,s.au)(n,{x:r,y:a,w:g,h:p,radius:h}):n.rect(r,a,g,p),n.fill(),0!==o&&n.stroke()}n.restore()}(l.x(S),P,y),S=(0,s.aB)(w,S+g+u,b?S+k:this.right,t.rtl),function(t,e,i){(0,s.Z)(n,i.text,t,e+m/2,h,{strikethrough:i.hidden,textAlign:l.textAlign(i.textAlign)})}(l.x(S),P,y),b)f.x+=k+c;else if("string"!=typeof y.text){const t=h.lineHeight;f.y+=ni(y,t)+c}else f.y+=_})),(0,s.aC)(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,i=(0,s.a0)(e.font),n=(0,s.E)(e.padding);if(!e.display)return;const o=(0,s.az)(t.rtl,this.left,this.width),a=this.ctx,r=e.position,l=i.size/2,h=n.top+l;let c,d=this.left,u=this.width;if(this.isHorizontal())u=Math.max(...this.lineWidths),c=this.top+h,d=(0,s.a2)(t.align,d,this.right-u);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=h+(0,s.a2)(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const f=(0,s.a2)(r,d,d+u);a.textAlign=o.textAlign((0,s.a1)(r)),a.textBaseline="middle",a.strokeStyle=e.color,a.fillStyle=e.color,a.font=i.string,(0,s.Z)(a,e.text,f,c,i)}_computeTitleHeight(){const t=this.options.title,e=(0,s.a0)(t.font),i=(0,s.E)(t.padding);return t.display?e.lineHeight+i.height:0}_getLegendItemAt(t,e){let i,n,o;if((0,s.aj)(t,this.left,this.right)&&(0,s.aj)(e,this.top,this.bottom))for(o=this.legendHitBoxes,i=0;i<o.length;++i)if(n=o[i],(0,s.aj)(t,n.left,n.left+n.width)&&(0,s.aj)(e,n.top,n.top+n.height))return this.legendItems[i];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const i=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const a=this._hoveredItem,r=(o=i,null!==(n=a)&&null!==o&&n.datasetIndex===o.datasetIndex&&n.index===o.index);a&&!r&&(0,s.Q)(e.onLeave,[t,a,this],this),this._hoveredItem=i,i&&!r&&(0,s.Q)(e.onHover,[t,i,this],this)}else i&&(0,s.Q)(e.onClick,[t,i,this],this);var n,o}}function ni(t,e){return e*(t.text?t.text.length:0)}var oi={id:"legend",_element:si,start(t,e,i){const s=t.legend=new si({ctx:t.ctx,options:i,chart:t});ot.configure(t,s,i),ot.addBox(t,s)},stop(t){ot.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,i){const s=t.legend;ot.configure(t,s,i),s.options=i},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,i){const s=e.datasetIndex,n=i.chart;n.isDatasetVisible(s)?(n.hide(s),e.hidden=!0):(n.show(s),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:i,pointStyle:n,textAlign:o,color:a,useBorderRadius:r,borderRadius:l}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const h=t.controller.getStyle(i?0:void 0),c=(0,s.E)(h.borderWidth);return{text:e[t.index].label,fillStyle:h.backgroundColor,fontColor:a,hidden:!t.visible,lineCap:h.borderCapStyle,lineDash:h.borderDash,lineDashOffset:h.borderDashOffset,lineJoin:h.borderJoinStyle,lineWidth:(c.width+c.height)/4,strokeStyle:h.borderColor,pointStyle:n||h.pointStyle,rotation:h.rotation,textAlign:o||h.textAlign,borderRadius:r&&(l||h.borderRadius),datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class ai extends kt{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const i=this.options;if(this.left=0,this.top=0,!i.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const n=(0,s.b)(i.text)?i.text.length:1;this._padding=(0,s.E)(i.padding);const o=n*(0,s.a0)(i.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:i,bottom:n,right:o,options:a}=this,r=a.align;let l,h,c,d=0;return this.isHorizontal()?(h=(0,s.a2)(r,i,o),c=e+t,l=o-i):("left"===a.position?(h=i+t,c=(0,s.a2)(r,n,e),d=-.5*s.P):(h=o-t,c=(0,s.a2)(r,e,n),d=.5*s.P),l=n-e),{titleX:h,titleY:c,maxWidth:l,rotation:d}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const i=(0,s.a0)(e.font),n=i.lineHeight/2+this._padding.top,{titleX:o,titleY:a,maxWidth:r,rotation:l}=this._drawArgs(n);(0,s.Z)(t,e.text,0,0,i,{color:e.color,maxWidth:r,rotation:l,textAlign:(0,s.a1)(e.align),textBaseline:"middle",translation:[o,a]})}}var ri={id:"title",_element:ai,start(t,e,i){!function(t,e){const i=new ai({ctx:t.ctx,options:e,chart:t});ot.configure(t,i,e),ot.addBox(t,i),t.titleBlock=i}(t,i)},stop(t){const e=t.titleBlock;ot.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,i){const s=t.titleBlock;ot.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const li=new WeakMap;var hi={id:"subtitle",start(t,e,i){const s=new ai({ctx:t.ctx,options:i,chart:t});ot.configure(t,s,i),ot.addBox(t,s),li.set(t,s)},stop(t){ot.removeBox(t,li.get(t)),li.delete(t)},beforeUpdate(t,e,i){const s=li.get(t);ot.configure(t,s,i),s.options=i},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const ci={average(t){if(!t.length)return!1;let e,i,s=0,n=0,o=0;for(e=0,i=t.length;e<i;++e){const i=t[e].element;if(i&&i.hasValue()){const t=i.tooltipPosition();s+=t.x,n+=t.y,++o}}return{x:s/o,y:n/o}},nearest(t,e){if(!t.length)return!1;let i,n,o,a=e.x,r=e.y,l=Number.POSITIVE_INFINITY;for(i=0,n=t.length;i<n;++i){const n=t[i].element;if(n&&n.hasValue()){const t=n.getCenterPoint(),i=(0,s.aE)(e,t);i<l&&(l=i,o=n)}}if(o){const t=o.tooltipPosition();a=t.x,r=t.y}return{x:a,y:r}}};function di(t,e){return e&&((0,s.b)(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function ui(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function fi(t,e){const{element:i,datasetIndex:s,index:n}=e,o=t.getDatasetMeta(s).controller,{label:a,value:r}=o.getLabelAndValue(n);return{chart:t,label:a,parsed:o.getParsed(n),raw:t.data.datasets[s].data[n],formattedValue:r,dataset:o.getDataset(),dataIndex:n,datasetIndex:s,element:i}}function gi(t,e){const i=t.chart.ctx,{body:n,footer:o,title:a}=t,{boxWidth:r,boxHeight:l}=e,h=(0,s.a0)(e.bodyFont),c=(0,s.a0)(e.titleFont),d=(0,s.a0)(e.footerFont),u=a.length,f=o.length,g=n.length,p=(0,s.E)(e.padding);let m=p.height,b=0,x=n.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);x+=t.beforeBody.length+t.afterBody.length,u&&(m+=u*c.lineHeight+(u-1)*e.titleSpacing+e.titleMarginBottom),x&&(m+=g*(e.displayColors?Math.max(l,h.lineHeight):h.lineHeight)+(x-g)*h.lineHeight+(x-1)*e.bodySpacing),f&&(m+=e.footerMarginTop+f*d.lineHeight+(f-1)*e.footerSpacing);let _=0;const y=function(t){b=Math.max(b,i.measureText(t).width+_)};return i.save(),i.font=c.string,(0,s.F)(t.title,y),i.font=h.string,(0,s.F)(t.beforeBody.concat(t.afterBody),y),_=e.displayColors?r+2+e.boxPadding:0,(0,s.F)(n,(t=>{(0,s.F)(t.before,y),(0,s.F)(t.lines,y),(0,s.F)(t.after,y)})),_=0,i.font=d.string,(0,s.F)(t.footer,y),i.restore(),b+=p.width,{width:b,height:m}}function pi(t,e,i,s){const{x:n,width:o}=i,{width:a,chartArea:{left:r,right:l}}=t;let h="center";return"center"===s?h=n<=(r+l)/2?"left":"right":n<=o/2?h="left":n>=a-o/2&&(h="right"),function(t,e,i,s){const{x:n,width:o}=s,a=i.caretSize+i.caretPadding;return"left"===t&&n+o+a>e.width||"right"===t&&n-o-a<0||void 0}(h,t,e,i)&&(h="center"),h}function mi(t,e,i){const s=i.yAlign||e.yAlign||function(t,e){const{y:i,height:s}=e;return i<s/2?"top":i>t.height-s/2?"bottom":"center"}(t,i);return{xAlign:i.xAlign||e.xAlign||pi(t,e,i,s),yAlign:s}}function bi(t,e,i,n){const{caretSize:o,caretPadding:a,cornerRadius:r}=t,{xAlign:l,yAlign:h}=i,c=o+a,{topLeft:d,topRight:u,bottomLeft:f,bottomRight:g}=(0,s.aw)(r);let p=function(t,e){let{x:i,width:s}=t;return"right"===e?i-=s:"center"===e&&(i-=s/2),i}(e,l);const m=function(t,e,i){let{y:s,height:n}=t;return"top"===e?s+=i:s-="bottom"===e?n+i:n/2,s}(e,h,c);return"center"===h?"left"===l?p+=c:"right"===l&&(p-=c):"left"===l?p-=Math.max(d,f)+o:"right"===l&&(p+=Math.max(u,g)+o),{x:(0,s.S)(p,0,n.width-e.width),y:(0,s.S)(m,0,n.height-e.height)}}function xi(t,e,i){const n=(0,s.E)(i.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-n.right:t.x+n.left}function _i(t){return di([],ui(t))}function yi(t,e){const i=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return i?t.override(i):t}const vi={beforeTitle:s.aF,title(t){if(t.length>0){const e=t[0],i=e.chart.data.labels,s=i?i.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(s>0&&e.dataIndex<s)return i[e.dataIndex]}return""},afterTitle:s.aF,beforeBody:s.aF,beforeLabel:s.aF,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const i=t.formattedValue;return(0,s.k)(i)||(e+=i),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:s.aF,afterBody:s.aF,beforeFooter:s.aF,footer:s.aF,afterFooter:s.aF};function Mi(t,e,i,s){const n=t[e].call(i,s);return void 0===n?vi[e].call(i,s):n}class wi extends kt{static positioners=ci;constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,i=this.options.setContext(this.getContext()),s=i.enabled&&e.options.animation&&i.animations,n=new h(this.chart,s);return s._cacheable&&(this._cachedAnimations=Object.freeze(n)),n}getContext(){return this.$context||(this.$context=(t=this.chart.getContext(),this,e=this._tooltipItems,(0,s.j)(t,{tooltip:this,tooltipItems:e,type:"tooltip"})));var t,e}getTitle(t,e){const{callbacks:i}=e,s=Mi(i,"beforeTitle",this,t),n=Mi(i,"title",this,t),o=Mi(i,"afterTitle",this,t);let a=[];return a=di(a,ui(s)),a=di(a,ui(n)),a=di(a,ui(o)),a}getBeforeBody(t,e){return _i(Mi(e.callbacks,"beforeBody",this,t))}getBody(t,e){const{callbacks:i}=e,n=[];return(0,s.F)(t,(t=>{const e={before:[],lines:[],after:[]},s=yi(i,t);di(e.before,ui(Mi(s,"beforeLabel",this,t))),di(e.lines,Mi(s,"label",this,t)),di(e.after,ui(Mi(s,"afterLabel",this,t))),n.push(e)})),n}getAfterBody(t,e){return _i(Mi(e.callbacks,"afterBody",this,t))}getFooter(t,e){const{callbacks:i}=e,s=Mi(i,"beforeFooter",this,t),n=Mi(i,"footer",this,t),o=Mi(i,"afterFooter",this,t);let a=[];return a=di(a,ui(s)),a=di(a,ui(n)),a=di(a,ui(o)),a}_createItems(t){const e=this._active,i=this.chart.data,n=[],o=[],a=[];let r,l,h=[];for(r=0,l=e.length;r<l;++r)h.push(fi(this.chart,e[r]));return t.filter&&(h=h.filter(((e,s,n)=>t.filter(e,s,n,i)))),t.itemSort&&(h=h.sort(((e,s)=>t.itemSort(e,s,i)))),(0,s.F)(h,(e=>{const i=yi(t.callbacks,e);n.push(Mi(i,"labelColor",this,e)),o.push(Mi(i,"labelPointStyle",this,e)),a.push(Mi(i,"labelTextColor",this,e))})),this.labelColors=n,this.labelPointStyles=o,this.labelTextColors=a,this.dataPoints=h,h}update(t,e){const i=this.options.setContext(this.getContext()),s=this._active;let n,o=[];if(s.length){const t=ci[i.position].call(this,s,this._eventPosition);o=this._createItems(i),this.title=this.getTitle(o,i),this.beforeBody=this.getBeforeBody(o,i),this.body=this.getBody(o,i),this.afterBody=this.getAfterBody(o,i),this.footer=this.getFooter(o,i);const e=this._size=gi(this,i),a=Object.assign({},t,e),r=mi(this.chart,i,a),l=bi(i,a,r,this.chart);this.xAlign=r.xAlign,this.yAlign=r.yAlign,n={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(n={opacity:0});this._tooltipItems=o,this.$context=void 0,n&&this._resolveAnimations().update(this,n),t&&i.external&&i.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,i,s){const n=this.getCaretPosition(t,i,s);e.lineTo(n.x1,n.y1),e.lineTo(n.x2,n.y2),e.lineTo(n.x3,n.y3)}getCaretPosition(t,e,i){const{xAlign:n,yAlign:o}=this,{caretSize:a,cornerRadius:r}=i,{topLeft:l,topRight:h,bottomLeft:c,bottomRight:d}=(0,s.aw)(r),{x:u,y:f}=t,{width:g,height:p}=e;let m,b,x,_,y,v;return"center"===o?(y=f+p/2,"left"===n?(m=u,b=m-a,_=y+a,v=y-a):(m=u+g,b=m+a,_=y-a,v=y+a),x=m):(b="left"===n?u+Math.max(l,c)+a:"right"===n?u+g-Math.max(h,d)-a:this.caretX,"top"===o?(_=f,y=_-a,m=b-a,x=b+a):(_=f+p,y=_+a,m=b+a,x=b-a),v=_),{x1:m,x2:b,x3:x,y1:_,y2:y,y3:v}}drawTitle(t,e,i){const n=this.title,o=n.length;let a,r,l;if(o){const h=(0,s.az)(i.rtl,this.x,this.width);for(t.x=xi(this,i.titleAlign,i),e.textAlign=h.textAlign(i.titleAlign),e.textBaseline="middle",a=(0,s.a0)(i.titleFont),r=i.titleSpacing,e.fillStyle=i.titleColor,e.font=a.string,l=0;l<o;++l)e.fillText(n[l],h.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+r,l+1===o&&(t.y+=i.titleMarginBottom-r)}}_drawColorBox(t,e,i,n,o){const a=this.labelColors[i],r=this.labelPointStyles[i],{boxHeight:l,boxWidth:h}=o,c=(0,s.a0)(o.bodyFont),d=xi(this,"left",o),u=n.x(d),f=l<c.lineHeight?(c.lineHeight-l)/2:0,g=e.y+f;if(o.usePointStyle){const e={radius:Math.min(h,l)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},i=n.leftForLtr(u,h)+h/2,c=g+l/2;t.strokeStyle=o.multiKeyBackground,t.fillStyle=o.multiKeyBackground,(0,s.at)(t,e,i,c),t.strokeStyle=a.borderColor,t.fillStyle=a.backgroundColor,(0,s.at)(t,e,i,c)}else{t.lineWidth=(0,s.i)(a.borderWidth)?Math.max(...Object.values(a.borderWidth)):a.borderWidth||1,t.strokeStyle=a.borderColor,t.setLineDash(a.borderDash||[]),t.lineDashOffset=a.borderDashOffset||0;const e=n.leftForLtr(u,h),i=n.leftForLtr(n.xPlus(u,1),h-2),r=(0,s.aw)(a.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=o.multiKeyBackground,(0,s.au)(t,{x:e,y:g,w:h,h:l,radius:r}),t.fill(),t.stroke(),t.fillStyle=a.backgroundColor,t.beginPath(),(0,s.au)(t,{x:i,y:g+1,w:h-2,h:l-2,radius:r}),t.fill()):(t.fillStyle=o.multiKeyBackground,t.fillRect(e,g,h,l),t.strokeRect(e,g,h,l),t.fillStyle=a.backgroundColor,t.fillRect(i,g+1,h-2,l-2))}t.fillStyle=this.labelTextColors[i]}drawBody(t,e,i){const{body:n}=this,{bodySpacing:o,bodyAlign:a,displayColors:r,boxHeight:l,boxWidth:h,boxPadding:c}=i,d=(0,s.a0)(i.bodyFont);let u=d.lineHeight,f=0;const g=(0,s.az)(i.rtl,this.x,this.width),p=function(i){e.fillText(i,g.x(t.x+f),t.y+u/2),t.y+=u+o},m=g.textAlign(a);let b,x,_,y,v,M,w;for(e.textAlign=a,e.textBaseline="middle",e.font=d.string,t.x=xi(this,m,i),e.fillStyle=i.bodyColor,(0,s.F)(this.beforeBody,p),f=r&&"right"!==m?"center"===a?h/2+c:h+2+c:0,y=0,M=n.length;y<M;++y){for(b=n[y],x=this.labelTextColors[y],e.fillStyle=x,(0,s.F)(b.before,p),_=b.lines,r&&_.length&&(this._drawColorBox(e,t,y,g,i),u=Math.max(d.lineHeight,l)),v=0,w=_.length;v<w;++v)p(_[v]),u=d.lineHeight;(0,s.F)(b.after,p)}f=0,u=d.lineHeight,(0,s.F)(this.afterBody,p),t.y-=o}drawFooter(t,e,i){const n=this.footer,o=n.length;let a,r;if(o){const l=(0,s.az)(i.rtl,this.x,this.width);for(t.x=xi(this,i.footerAlign,i),t.y+=i.footerMarginTop,e.textAlign=l.textAlign(i.footerAlign),e.textBaseline="middle",a=(0,s.a0)(i.footerFont),e.fillStyle=i.footerColor,e.font=a.string,r=0;r<o;++r)e.fillText(n[r],l.x(t.x),t.y+a.lineHeight/2),t.y+=a.lineHeight+i.footerSpacing}}drawBackground(t,e,i,n){const{xAlign:o,yAlign:a}=this,{x:r,y:l}=t,{width:h,height:c}=i,{topLeft:d,topRight:u,bottomLeft:f,bottomRight:g}=(0,s.aw)(n.cornerRadius);e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.beginPath(),e.moveTo(r+d,l),"top"===a&&this.drawCaret(t,e,i,n),e.lineTo(r+h-u,l),e.quadraticCurveTo(r+h,l,r+h,l+u),"center"===a&&"right"===o&&this.drawCaret(t,e,i,n),e.lineTo(r+h,l+c-g),e.quadraticCurveTo(r+h,l+c,r+h-g,l+c),"bottom"===a&&this.drawCaret(t,e,i,n),e.lineTo(r+f,l+c),e.quadraticCurveTo(r,l+c,r,l+c-f),"center"===a&&"left"===o&&this.drawCaret(t,e,i,n),e.lineTo(r,l+d),e.quadraticCurveTo(r,l,r+d,l),e.closePath(),e.fill(),n.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,i=this.$animations,s=i&&i.x,n=i&&i.y;if(s||n){const i=ci[t.position].call(this,this._active,this._eventPosition);if(!i)return;const o=this._size=gi(this,t),a=Object.assign({},i,this._size),r=mi(e,t,a),l=bi(t,a,r,e);s._to===l.x&&n._to===l.y||(this.xAlign=r.xAlign,this.yAlign=r.yAlign,this.width=o.width,this.height=o.height,this.caretX=i.x,this.caretY=i.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let i=this.opacity;if(!i)return;this._updateAnimationTarget(e);const n={width:this.width,height:this.height},o={x:this.x,y:this.y};i=Math.abs(i)<.001?0:i;const a=(0,s.E)(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=i,this.drawBackground(o,t,n,e),(0,s.aA)(t,e.textDirection),o.y+=a.top,this.drawTitle(o,t,e),this.drawBody(o,t,e),this.drawFooter(o,t,e),(0,s.aC)(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const i=this._active,n=t.map((({datasetIndex:t,index:e})=>{const i=this.chart.getDatasetMeta(t);if(!i)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:i.data[e],index:e}})),o=!(0,s.ah)(i,n),a=this._positionChanged(n,e);(o||a)&&(this._active=n,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,i=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const n=this.options,o=this._active||[],a=this._getActiveElements(t,o,e,i),r=this._positionChanged(a,t),l=e||!(0,s.ah)(a,o)||r;return l&&(this._active=a,(n.enabled||n.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),l}_getActiveElements(t,e,i,s){const n=this.options;if("mouseout"===t.type)return[];if(!s)return e;const o=this.chart.getElementsAtEventForMode(t,n.mode,n,i);return n.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:i,caretY:s,options:n}=this,o=ci[n.position].call(this,t,e);return!1!==o&&(i!==o.x||s!==o.y)}}var ki={id:"tooltip",_element:wi,positioners:ci,afterInit(t,e,i){i&&(t.tooltip=new wi({chart:t,options:i}))},beforeUpdate(t,e,i){t.tooltip&&t.tooltip.initialize(i)},reset(t,e,i){t.tooltip&&t.tooltip.initialize(i)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const i={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",{...i,cancelable:!0}))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",i)}},afterEvent(t,e){if(t.tooltip){const i=e.replay;t.tooltip.handleEvent(e.event,i,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:vi},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Si=Object.freeze({__proto__:null,Colors:Ie,Decimation:Be,Filler:ei,Legend:oi,SubTitle:hi,Title:ri,Tooltip:ki});function Pi(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}class Di extends Lt{static id="category";static defaults={ticks:{callback:Pi}};constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:i,label:s}of e)t[i]===s&&t.splice(i,1);this._addedLabels=[]}super.init(t)}parse(t,e){if((0,s.k)(t))return null;const i=this.getLabels();return((t,e)=>null===t?null:(0,s.S)(Math.round(t),0,e))(e=isFinite(e)&&i[e]===t?e:function(t,e,i,s){const n=t.indexOf(e);return-1===n?((t,e,i,s)=>("string"==typeof e?(i=t.push(e)-1,s.unshift({index:i,label:e})):isNaN(e)&&(i=null),i))(t,e,i,s):n!==t.lastIndexOf(e)?i:n}(i,t,(0,s.v)(e,t),this._addedLabels),i.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:i,max:s}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(i=0),e||(s=this.getLabels().length-1)),this.min=i,this.max=s}buildTicks(){const t=this.min,e=this.max,i=this.options.offset,s=[];let n=this.getLabels();n=0===t&&e===n.length-1?n:n.slice(t,e+1),this._valueRange=Math.max(n.length-(i?0:1),1),this._startValue=this.min-(i?.5:0);for(let i=t;i<=e;i++)s.push({value:i});return s}getLabelForValue(t){return Pi.call(this,t)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Ci(t,e,{horizontal:i,minRotation:n}){const o=(0,s.t)(n),a=(i?Math.sin(o):Math.cos(o))||.001,r=.75*e*(""+t).length;return Math.min(e/a,r)}class Oi extends Lt{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return(0,s.k)(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:i}=this.getUserBounds();let{min:n,max:o}=this;const a=t=>n=e?n:t,r=t=>o=i?o:t;if(t){const t=(0,s.s)(n),e=(0,s.s)(o);t<0&&e<0?r(0):t>0&&e>0&&a(0)}if(n===o){let e=0===o?1:Math.abs(.05*o);r(o+e),t||a(n-e)}this.min=n,this.max=o}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:i,stepSize:s}=t;return s?(e=Math.ceil(this.max/s)-Math.floor(this.min/s)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${s} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),i=i||11),i&&(e=Math.min(i,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let i=this.getTickLimit();i=Math.max(2,i);const n=function(t,e){const i=[],{bounds:n,step:o,min:a,max:r,precision:l,count:h,maxTicks:c,maxDigits:d,includeBounds:u}=t,f=o||1,g=c-1,{min:p,max:m}=e,b=!(0,s.k)(a),x=!(0,s.k)(r),_=!(0,s.k)(h),y=(m-p)/(d+1);let v,M,w,k,S=(0,s.aH)((m-p)/g/f)*f;if(S<1e-14&&!b&&!x)return[{value:p},{value:m}];k=Math.ceil(m/S)-Math.floor(p/S),k>g&&(S=(0,s.aH)(k*S/g/f)*f),(0,s.k)(l)||(v=Math.pow(10,l),S=Math.ceil(S*v)/v),"ticks"===n?(M=Math.floor(p/S)*S,w=Math.ceil(m/S)*S):(M=p,w=m),b&&x&&o&&(0,s.aI)((r-a)/o,S/1e3)?(k=Math.round(Math.min((r-a)/S,c)),S=(r-a)/k,M=a,w=r):_?(M=b?a:M,w=x?r:w,k=h-1,S=(w-M)/k):(k=(w-M)/S,k=(0,s.aJ)(k,Math.round(k),S/1e3)?Math.round(k):Math.ceil(k));const P=Math.max((0,s.aK)(S),(0,s.aK)(M));v=Math.pow(10,(0,s.k)(l)?P:l),M=Math.round(M*v)/v,w=Math.round(w*v)/v;let D=0;for(b&&(u&&M!==a?(i.push({value:a}),M<a&&D++,(0,s.aJ)(Math.round((M+D*S)*v)/v,a,Ci(a,y,t))&&D++):M<a&&D++);D<k;++D){const t=Math.round((M+D*S)*v)/v;if(x&&t>r)break;i.push({value:t})}return x&&u&&w!==r?i.length&&(0,s.aJ)(i[i.length-1].value,r,Ci(r,y,t))?i[i.length-1].value=r:i.push({value:r}):x&&w!==r||i.push({value:w}),i}({maxTicks:i,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&(0,s.aG)(n,this,"value"),t.reverse?(n.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),n}configure(){const t=this.ticks;let e=this.min,i=this.max;if(super.configure(),this.options.offset&&t.length){const s=(i-e)/Math.max(t.length-1,1)/2;e-=s,i+=s}this._startValue=e,this._endValue=i,this._valueRange=i-e}getLabelForValue(t){return(0,s.o)(t,this.chart.options.locale,this.options.ticks.format)}}class Ai extends Oi{static id="linear";static defaults={ticks:{callback:s.aL.formatters.numeric}};determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=(0,s.g)(t)?t:0,this.max=(0,s.g)(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,i=(0,s.t)(this.options.ticks.minRotation),n=(t?Math.sin(i):Math.cos(i))||.001,o=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,o.lineHeight/n))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}const Ti=t=>Math.floor((0,s.aM)(t)),Ei=(t,e)=>Math.pow(10,Ti(t)+e);function Li(t){return 1==t/Math.pow(10,Ti(t))}function Ri(t,e,i){const s=Math.pow(10,i),n=Math.floor(t/s);return Math.ceil(e/s)-n}class Fi extends Lt{static id="logarithmic";static defaults={ticks:{callback:s.aL.formatters.logarithmic,major:{enabled:!0}}};constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const i=Oi.prototype.parse.apply(this,[t,e]);if(0!==i)return(0,s.g)(i)&&i>0?i:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=(0,s.g)(t)?Math.max(0,t):null,this.max=(0,s.g)(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!(0,s.g)(this._userMin)&&(this.min=t===Ei(this.min,0)?Ei(this.min,-1):Ei(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let i=this.min,s=this.max;const n=e=>i=t?i:e,o=t=>s=e?s:t;i===s&&(i<=0?(n(1),o(10)):(n(Ei(i,-1)),o(Ei(s,1)))),i<=0&&n(Ei(s,-1)),s<=0&&o(Ei(i,1)),this.min=i,this.max=s}buildTicks(){const t=this.options,e=function(t,{min:e,max:i}){e=(0,s.O)(t.min,e);const n=[],o=Ti(e);let a=function(t,e){let i=Ti(e-t);for(;Ri(t,e,i)>10;)i++;for(;Ri(t,e,i)<10;)i--;return Math.min(i,Ti(t))}(e,i),r=a<0?Math.pow(10,Math.abs(a)):1;const l=Math.pow(10,a),h=o>a?Math.pow(10,o):0,c=Math.round((e-h)*r)/r,d=Math.floor((e-h)/l/10)*l*10;let u=Math.floor((c-d)/Math.pow(10,a)),f=(0,s.O)(t.min,Math.round((h+d+u*Math.pow(10,a))*r)/r);for(;f<i;)n.push({value:f,major:Li(f),significand:u}),u>=10?u=u<15?15:20:u++,u>=20&&(a++,u=2,r=a>=0?1:r),f=Math.round((h+d+u*Math.pow(10,a))*r)/r;const g=(0,s.O)(t.max,f);return n.push({value:g,major:Li(g),significand:u}),n}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&(0,s.aG)(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":(0,s.o)(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=(0,s.aM)(t),this._valueRange=(0,s.aM)(this.max)-(0,s.aM)(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:((0,s.aM)(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Ii(t){const e=t.ticks;if(e.display&&t.display){const t=(0,s.E)(e.backdropPadding);return(0,s.v)(e.font&&e.font.size,s.d.font.size)+t.height}return 0}function zi(t,e,i,s,n){return t===s||t===n?{start:e-i/2,end:e+i/2}:t<s||t>n?{start:e-i,end:e}:{start:e,end:e+i}}function Vi(t,e,i,s,n){const o=Math.abs(Math.sin(i)),a=Math.abs(Math.cos(i));let r=0,l=0;s.start<e.l?(r=(e.l-s.start)/o,t.l=Math.min(t.l,e.l-r)):s.end>e.r&&(r=(s.end-e.r)/o,t.r=Math.max(t.r,e.r+r)),n.start<e.t?(l=(e.t-n.start)/a,t.t=Math.min(t.t,e.t-l)):n.end>e.b&&(l=(n.end-e.b)/a,t.b=Math.max(t.b,e.b+l))}function Bi(t,e,i){const n=t.drawingArea,{extra:o,additionalAngle:a,padding:r,size:l}=i,h=t.getPointPosition(e,n+o+r,a),c=Math.round((0,s.U)((0,s.ay)(h.angle+s.H))),d=function(t,e,i){return 90===i||270===i?t-=e/2:(i>270||i<90)&&(t-=e),t}(h.y,l.h,c),u=function(t){return 0===t||180===t?"center":t<180?"left":"right"}(c),f=(g=h.x,p=l.w,"right"===(m=u)?g-=p:"center"===m&&(g-=p/2),g);var g,p,m;return{visible:!0,x:h.x,y:d,textAlign:u,left:f,top:d,right:f+l.w,bottom:d+l.h}}function ji(t,e){if(!e)return!0;const{left:i,top:n,right:o,bottom:a}=t;return!((0,s.C)({x:i,y:n},e)||(0,s.C)({x:i,y:a},e)||(0,s.C)({x:o,y:n},e)||(0,s.C)({x:o,y:a},e))}function Wi(t,e,i){const{left:n,top:o,right:a,bottom:r}=i,{backdropColor:l}=e;if(!(0,s.k)(l)){const i=(0,s.aw)(e.borderRadius),h=(0,s.E)(e.backdropPadding);t.fillStyle=l;const c=n-h.left,d=o-h.top,u=a-n+h.width,f=r-o+h.height;Object.values(i).some((t=>0!==t))?(t.beginPath(),(0,s.au)(t,{x:c,y:d,w:u,h:f,radius:i}),t.fill()):t.fillRect(c,d,u,f)}}function Ni(t,e,i,n){const{ctx:o}=t;if(i)o.arc(t.xCenter,t.yCenter,e,0,s.T);else{let i=t.getPointPosition(0,e);o.moveTo(i.x,i.y);for(let s=1;s<n;s++)i=t.getPointPosition(s,e),o.lineTo(i.x,i.y)}}class Hi extends Oi{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:s.aL.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=(0,s.E)(Ii(this.options)/2),e=this.width=this.maxWidth-t.width,i=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+i/2+t.top),this.drawingArea=Math.floor(Math.min(e,i)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=(0,s.g)(t)&&!isNaN(t)?t:0,this.max=(0,s.g)(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Ii(this.options))}generateTickLabels(t){Oi.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const i=(0,s.Q)(this.options.pointLabels.callback,[t,e],this);return i||0===i?i:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},i=Object.assign({},e),n=[],o=[],a=t._pointLabels.length,r=t.options.pointLabels,l=r.centerPointLabels?s.P/a:0;for(let u=0;u<a;u++){const a=r.setContext(t.getPointLabelContext(u));o[u]=a.padding;const f=t.getPointPosition(u,t.drawingArea+o[u],l),g=(0,s.a0)(a.font),p=(h=t.ctx,c=g,d=t._pointLabels[u],d=(0,s.b)(d)?d:[d],{w:(0,s.aN)(h,c.string,d),h:d.length*c.lineHeight});n[u]=p;const m=(0,s.ay)(t.getIndexAngle(u)+l),b=Math.round((0,s.U)(m));Vi(i,e,m,zi(b,f.x,p.w,0,180),zi(b,f.y,p.h,90,270))}var h,c,d;t.setCenterPoint(e.l-i.l,i.r-e.r,e.t-i.t,i.b-e.b),t._pointLabelItems=function(t,e,i){const n=[],o=t._pointLabels.length,a=t.options,{centerPointLabels:r,display:l}=a.pointLabels,h={extra:Ii(a)/2,additionalAngle:r?s.P/o:0};let c;for(let s=0;s<o;s++){h.padding=i[s],h.size=e[s];const o=Bi(t,s,h);n.push(o),"auto"===l&&(o.visible=ji(o,c),o.visible&&(c=o))}return n}(t,n,o)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,i,s){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((i-s)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,i,s))}getIndexAngle(t){const e=s.T/(this._pointLabels.length||1),i=this.options.startAngle||0;return(0,s.ay)(t*e+(0,s.t)(i))}getDistanceFromCenterForValue(t){if((0,s.k)(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if((0,s.k)(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const i=e[t];return function(t,e,i){return(0,s.j)(t,{label:i,index:e,type:"pointLabel"})}(this.getContext(),t,i)}}getPointPosition(t,e,i=0){const n=this.getIndexAngle(t)-s.H+i;return{x:Math.cos(n)*e+this.xCenter,y:Math.sin(n)*e+this.yCenter,angle:n}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:i,right:s,bottom:n}=this._pointLabelItems[t];return{left:e,top:i,right:s,bottom:n}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const i=this.ctx;i.save(),i.beginPath(),Ni(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),i.closePath(),i.fillStyle=t,i.fill(),i.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:i,grid:n,border:o}=e,a=this._pointLabels.length;let r,l,h;if(e.pointLabels.display&&function(t,e){const{ctx:i,options:{pointLabels:n}}=t;for(let o=e-1;o>=0;o--){const e=t._pointLabelItems[o];if(!e.visible)continue;const a=n.setContext(t.getPointLabelContext(o));Wi(i,a,e);const r=(0,s.a0)(a.font),{x:l,y:h,textAlign:c}=e;(0,s.Z)(i,t._pointLabels[o],l,h+r.lineHeight/2,r,{color:a.color,textAlign:c,textBaseline:"middle"})}}(this,a),n.display&&this.ticks.forEach(((t,e)=>{if(0!==e){l=this.getDistanceFromCenterForValue(t.value);const i=this.getContext(e),s=n.setContext(i),r=o.setContext(i);!function(t,e,i,s,n){const o=t.ctx,a=e.circular,{color:r,lineWidth:l}=e;!a&&!s||!r||!l||i<0||(o.save(),o.strokeStyle=r,o.lineWidth=l,o.setLineDash(n.dash),o.lineDashOffset=n.dashOffset,o.beginPath(),Ni(t,i,a,s),o.closePath(),o.stroke(),o.restore())}(this,s,l,a,r)}})),i.display){for(t.save(),r=a-1;r>=0;r--){const s=i.setContext(this.getPointLabelContext(r)),{color:n,lineWidth:o}=s;o&&n&&(t.lineWidth=o,t.strokeStyle=n,t.setLineDash(s.borderDash),t.lineDashOffset=s.borderDashOffset,l=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),h=this.getPointPosition(r,l),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(h.x,h.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,i=e.ticks;if(!i.display)return;const n=this.getIndexAngle(0);let o,a;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(n),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((n,r)=>{if(0===r&&!e.reverse)return;const l=i.setContext(this.getContext(r)),h=(0,s.a0)(l.font);if(o=this.getDistanceFromCenterForValue(this.ticks[r].value),l.showLabelBackdrop){t.font=h.string,a=t.measureText(n.label).width,t.fillStyle=l.backdropColor;const e=(0,s.E)(l.backdropPadding);t.fillRect(-a/2-e.left,-o-h.size/2-e.top,a+e.width,h.size+e.height)}(0,s.Z)(t,n.label,0,-o,h,{color:l.color,strokeColor:l.textStrokeColor,strokeWidth:l.textStrokeWidth})})),t.restore()}drawTitle(){}}const $i={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Yi=Object.keys($i);function Ui(t,e){return t-e}function Xi(t,e){if((0,s.k)(e))return null;const i=t._adapter,{parser:n,round:o,isoWeekday:a}=t._parseOpts;let r=e;return"function"==typeof n&&(r=n(r)),(0,s.g)(r)||(r="string"==typeof n?i.parse(r,n):i.parse(r)),null===r?null:(o&&(r="week"!==o||!(0,s.x)(a)&&!0!==a?i.startOf(r,o):i.startOf(r,"isoWeek",a)),+r)}function Qi(t,e,i,s){const n=Yi.length;for(let o=Yi.indexOf(t);o<n-1;++o){const t=$i[Yi[o]],n=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((i-e)/(n*t.size))<=s)return Yi[o]}return Yi[n-1]}function qi(t,e,i){if(i){if(i.length){const{lo:n,hi:o}=(0,s.aP)(i,e);t[i[n]>=e?i[n]:i[o]]=!0}}else t[e]=!0}function Ki(t,e,i){const s=[],n={},o=e.length;let a,r;for(a=0;a<o;++a)r=e[a],n[r]=a,s.push({value:r,major:!1});return 0!==o&&i?function(t,e,i,s){const n=t._adapter,o=+n.startOf(e[0].value,s),a=e[e.length-1].value;let r,l;for(r=o;r<=a;r=+n.add(r,1,s))l=i[r],l>=0&&(e[l].major=!0);return e}(t,s,n,i):s}class Zi extends Lt{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e={}){const i=t.time||(t.time={}),n=this._adapter=new W._date(t.adapters.date);n.init(e),(0,s.ab)(i.displayFormats,n.formats()),this._parseOpts={parser:i.parser,round:i.round,isoWeekday:i.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:Xi(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,i=t.time.unit||"day";let{min:n,max:o,minDefined:a,maxDefined:r}=this.getUserBounds();function l(t){a||isNaN(t.min)||(n=Math.min(n,t.min)),r||isNaN(t.max)||(o=Math.max(o,t.max))}a&&r||(l(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(this.getMinMax(!1))),n=(0,s.g)(n)&&!isNaN(n)?n:+e.startOf(Date.now(),i),o=(0,s.g)(o)&&!isNaN(o)?o:+e.endOf(Date.now(),i)+1,this.min=Math.min(n,o-1),this.max=Math.max(n+1,o)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],i=t[t.length-1]),{min:e,max:i}}buildTicks(){const t=this.options,e=t.time,i=t.ticks,n="labels"===i.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&n.length&&(this.min=this._userMin||n[0],this.max=this._userMax||n[n.length-1]);const o=this.min,a=this.max,r=(0,s.aO)(n,o,a);return this._unit=e.unit||(i.autoSkip?Qi(e.minUnit,this.min,this.max,this._getLabelCapacity(o)):function(t,e,i,s,n){for(let o=Yi.length-1;o>=Yi.indexOf(i);o--){const i=Yi[o];if($i[i].common&&t._adapter.diff(n,s,i)>=e-1)return i}return Yi[i?Yi.indexOf(i):0]}(this,r.length,e.minUnit,this.min,this.max)),this._majorUnit=i.major.enabled&&"year"!==this._unit?function(t){for(let e=Yi.indexOf(t)+1,i=Yi.length;e<i;++e)if($i[Yi[e]].common)return Yi[e]}(this._unit):void 0,this.initOffsets(n),t.reverse&&r.reverse(),Ki(this,r,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t=[]){let e,i,n=0,o=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),n=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,i=this.getDecimalForValue(t[t.length-1]),o=1===t.length?i:(i-this.getDecimalForValue(t[t.length-2]))/2);const a=t.length<3?.5:.25;n=(0,s.S)(n,0,a),o=(0,s.S)(o,0,a),this._offsets={start:n,end:o,factor:1/(n+1+o)}}_generate(){const t=this._adapter,e=this.min,i=this.max,n=this.options,o=n.time,a=o.unit||Qi(o.minUnit,e,i,this._getLabelCapacity(e)),r=(0,s.v)(n.ticks.stepSize,1),l="week"===a&&o.isoWeekday,h=(0,s.x)(l)||!0===l,c={};let d,u,f=e;if(h&&(f=+t.startOf(f,"isoWeek",l)),f=+t.startOf(f,h?"day":a),t.diff(i,e,a)>1e5*r)throw new Error(e+" and "+i+" are too far apart with stepSize of "+r+" "+a);const g="data"===n.ticks.source&&this.getDataTimestamps();for(d=f,u=0;d<i;d=+t.add(d,r,a),u++)qi(c,d,g);return d!==i&&"ticks"!==n.bounds&&1!==u||qi(c,d,g),Object.keys(c).sort(Ui).map((t=>+t))}getLabelForValue(t){const e=this._adapter,i=this.options.time;return i.tooltipFormat?e.format(t,i.tooltipFormat):e.format(t,i.displayFormats.datetime)}format(t,e){const i=this.options.time.displayFormats,s=this._unit,n=e||i[s];return this._adapter.format(t,n)}_tickFormatFunction(t,e,i,n){const o=this.options,a=o.ticks.callback;if(a)return(0,s.Q)(a,[t,e,i],this);const r=o.time.displayFormats,l=this._unit,h=this._majorUnit,c=l&&r[l],d=h&&r[h],u=i[e],f=h&&d&&u&&u.major;return this._adapter.format(t,n||(f?d:c))}generateTickLabels(t){let e,i,s;for(e=0,i=t.length;e<i;++e)s=t[e],s.label=this._tickFormatFunction(s.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,i=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+i)*e.factor)}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+i*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,i=this.ctx.measureText(t).width,n=(0,s.t)(this.isHorizontal()?e.maxRotation:e.minRotation),o=Math.cos(n),a=Math.sin(n),r=this._resolveTickFontOptions(0).size;return{w:i*o+r*a,h:i*a+r*o}}_getLabelCapacity(t){const e=this.options.time,i=e.displayFormats,s=i[e.unit]||i.millisecond,n=this._tickFormatFunction(t,0,Ki(this,[t],this._majorUnit),s),o=this._getLabelSize(n),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let t,e,i=this._cache.data||[];if(i.length)return i;const s=this.getMatchingVisibleMetas();if(this._normalized&&s.length)return this._cache.data=s[0].controller.getAllParsedValues(this);for(t=0,e=s.length;t<e;++t)i=i.concat(s[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(i)}getLabelTimestamps(){const t=this._cache.labels||[];let e,i;if(t.length)return t;const s=this.getLabels();for(e=0,i=s.length;e<i;++e)t.push(Xi(this,s[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return(0,s._)(t.sort(Ui))}}function Gi(t,e,i){let n,o,a,r,l=0,h=t.length-1;i?(e>=t[l].pos&&e<=t[h].pos&&({lo:l,hi:h}=(0,s.B)(t,"pos",e)),({pos:n,time:a}=t[l]),({pos:o,time:r}=t[h])):(e>=t[l].time&&e<=t[h].time&&({lo:l,hi:h}=(0,s.B)(t,"time",e)),({time:n,pos:a}=t[l]),({time:o,pos:r}=t[h]));const c=o-n;return c?a+(r-a)*(e-n)/c:a}class Ji extends Zi{static id="timeseries";static defaults=Zi.defaults;constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=Gi(e,this.min),this._tableRange=Gi(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:i}=this,s=[],n=[];let o,a,r,l,h;for(o=0,a=t.length;o<a;++o)l=t[o],l>=e&&l<=i&&s.push(l);if(s.length<2)return[{time:e,pos:0},{time:i,pos:1}];for(o=0,a=s.length;o<a;++o)h=s[o+1],r=s[o-1],l=s[o],Math.round((h+r)/2)!==l&&n.push({time:l,pos:o/(a-1)});return n}_generate(){const t=this.min,e=this.max;let i=super.getDataTimestamps();return i.includes(t)&&i.length||i.splice(0,0,t),i.includes(e)&&1!==i.length||i.push(e),i.sort(((t,e)=>t-e))}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),i=this.getLabelTimestamps();return t=e.length&&i.length?this.normalize(e.concat(i)):e.length?e:i,t=this._cache.all=t,t}getDecimalForValue(t){return(Gi(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,i=this.getDecimalForPixel(t)/e.factor-e.end;return Gi(this._table,i*this._tableRange+this._minPos,!0)}}var ts=Object.freeze({__proto__:null,CategoryScale:Di,LinearScale:Ai,LogarithmicScale:Fi,RadialLinearScale:Hi,TimeScale:Zi,TimeSeriesScale:Ji});const es=[V,Ae,Si,ts]},"./node_modules/chart.js/dist/chunks/helpers.segment.js":(t,e,i)=>{i.r(e),i.d(e,{$:()=>Kt,A:()=>rt,B:()=>at,C:()=>Qt,D:()=>Z,E:()=>ce,F:()=>p,G:()=>Ue,H:()=>z,I:()=>ze,J:()=>qe,K:()=>Qe,L:()=>pt,M:()=>Ie,N:()=>$,O:()=>c,P:()=>E,Q:()=>g,R:()=>fe,S:()=>it,T:()=>L,U:()=>q,V:()=>Nt,W:()=>st,X:()=>$t,Y:()=>qt,Z:()=>ee,_:()=>ut,a:()=>ue,a$:()=>ft,a0:()=>de,a1:()=>bt,a2:()=>xt,a3:()=>Ft,a4:()=>y,a5:()=>D,a6:()=>It,a7:()=>O,a8:()=>me,a9:()=>pe,aA:()=>ii,aB:()=>_t,aC:()=>si,aD:()=>Xt,aE:()=>G,aF:()=>n,aG:()=>X,aH:()=>H,aI:()=>U,aJ:()=>N,aK:()=>K,aL:()=>Rt,aM:()=>j,aN:()=>Ht,aO:()=>lt,aP:()=>ot,aQ:()=>Pt,aR:()=>Ct,aS:()=>b,aT:()=>_,aU:()=>M,aV:()=>w,aW:()=>S,aX:()=>Wt,aY:()=>Ee,aZ:()=>Le,a_:()=>je,aa:()=>be,ab:()=>v,ac:()=>o,ad:()=>mt,ae:()=>Xe,af:()=>Yt,ag:()=>A,ah:()=>m,ai:()=>T,aj:()=>nt,ak:()=>re,al:()=>Fe,am:()=>li,an:()=>ri,ao:()=>Ze,ap:()=>Ge,aq:()=>Ke,ar:()=>Zt,as:()=>Gt,at:()=>Ut,au:()=>ie,av:()=>le,aw:()=>he,ax:()=>ai,ay:()=>tt,az:()=>ei,b:()=>r,b0:()=>oe,b1:()=>R,b2:()=>F,b3:()=>I,b4:()=>V,b5:()=>B,b6:()=>J,c:()=>Dt,d:()=>jt,e:()=>St,f:()=>P,g:()=>h,h:()=>C,i:()=>l,j:()=>ge,k:()=>a,l:()=>ct,m:()=>u,n:()=>f,o:()=>Et,p:()=>et,q:()=>yt,r:()=>gt,s:()=>W,t:()=>Q,u:()=>dt,v:()=>d,w:()=>vt,x:()=>Y,y:()=>Ce,z:()=>$e});var s=i("./node_modules/@kurkle/color/dist/color.esm.js");function n(){}const o=(()=>{let t=0;return()=>t++})();function a(t){return null==t}function r(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function l(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}function h(t){return("number"==typeof t||t instanceof Number)&&isFinite(+t)}function c(t,e){return h(t)?t:e}function d(t,e){return void 0===t?e:t}const u=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100:+t/e,f=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function g(t,e,i){if(t&&"function"==typeof t.call)return t.apply(i,e)}function p(t,e,i,s){let n,o,a;if(r(t))if(o=t.length,s)for(n=o-1;n>=0;n--)e.call(i,t[n],n);else for(n=0;n<o;n++)e.call(i,t[n],n);else if(l(t))for(a=Object.keys(t),o=a.length,n=0;n<o;n++)e.call(i,t[a[n]],a[n])}function m(t,e){let i,s,n,o;if(!t||!e||t.length!==e.length)return!1;for(i=0,s=t.length;i<s;++i)if(n=t[i],o=e[i],n.datasetIndex!==o.datasetIndex||n.index!==o.index)return!1;return!0}function b(t){if(r(t))return t.map(b);if(l(t)){const e=Object.create(null),i=Object.keys(t),s=i.length;let n=0;for(;n<s;++n)e[i[n]]=b(t[i[n]]);return e}return t}function x(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function _(t,e,i,s){if(!x(t))return;const n=e[t],o=i[t];l(n)&&l(o)?y(n,o,s):e[t]=b(o)}function y(t,e,i){const s=r(e)?e:[e],n=s.length;if(!l(t))return t;const o=(i=i||{}).merger||_;let a;for(let e=0;e<n;++e){if(a=s[e],!l(a))continue;const n=Object.keys(a);for(let e=0,s=n.length;e<s;++e)o(n[e],t,a,i)}return t}function v(t,e){return y(t,e,{merger:M})}function M(t,e,i){if(!x(t))return;const s=e[t],n=i[t];l(s)&&l(n)?v(s,n):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=b(n))}function w(t,e,i,s){void 0!==e&&console.warn(t+': "'+i+'" is deprecated. Please use "'+s+'" instead')}const k={"":t=>t,x:t=>t.x,y:t=>t.y};function S(t){const e=t.split("."),i=[];let s="";for(const t of e)s+=t,s.endsWith("\\")?s=s.slice(0,-1)+".":(i.push(s),s="");return i}function P(t,e){const i=k[e]||(k[e]=function(t){const e=S(t);return t=>{for(const i of e){if(""===i)break;t=t&&t[i]}return t}}(e));return i(t)}function D(t){return t.charAt(0).toUpperCase()+t.slice(1)}const C=t=>void 0!==t,O=t=>"function"==typeof t,A=(t,e)=>{if(t.size!==e.size)return!1;for(const i of t)if(!e.has(i))return!1;return!0};function T(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}const E=Math.PI,L=2*E,R=L+E,F=Number.POSITIVE_INFINITY,I=E/180,z=E/2,V=E/4,B=2*E/3,j=Math.log10,W=Math.sign;function N(t,e,i){return Math.abs(t-e)<i}function H(t){const e=Math.round(t);t=N(t,e,t/1e3)?e:t;const i=Math.pow(10,Math.floor(j(t))),s=t/i;return(s<=1?1:s<=2?2:s<=5?5:10)*i}function $(t){const e=[],i=Math.sqrt(t);let s;for(s=1;s<i;s++)t%s==0&&(e.push(s),e.push(t/s));return i===(0|i)&&e.push(i),e.sort(((t,e)=>t-e)).pop(),e}function Y(t){return!isNaN(parseFloat(t))&&isFinite(t)}function U(t,e){const i=Math.round(t);return i-e<=t&&i+e>=t}function X(t,e,i){let s,n,o;for(s=0,n=t.length;s<n;s++)o=t[s][i],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function Q(t){return t*(E/180)}function q(t){return t*(180/E)}function K(t){if(!h(t))return;let e=1,i=0;for(;Math.round(t*e)/e!==t;)e*=10,i++;return i}function Z(t,e){const i=e.x-t.x,s=e.y-t.y,n=Math.sqrt(i*i+s*s);let o=Math.atan2(s,i);return o<-.5*E&&(o+=L),{angle:o,distance:n}}function G(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function J(t,e){return(t-e+R)%L-E}function tt(t){return(t%L+L)%L}function et(t,e,i,s){const n=tt(t),o=tt(e),a=tt(i),r=tt(o-n),l=tt(a-n),h=tt(n-o),c=tt(n-a);return n===o||n===a||s&&o===a||r>l&&h<c}function it(t,e,i){return Math.max(e,Math.min(i,t))}function st(t){return it(t,-32768,32767)}function nt(t,e,i,s=1e-6){return t>=Math.min(e,i)-s&&t<=Math.max(e,i)+s}function ot(t,e,i){i=i||(i=>t[i]<e);let s,n=t.length-1,o=0;for(;n-o>1;)s=o+n>>1,i(s)?o=s:n=s;return{lo:o,hi:n}}const at=(t,e,i,s)=>ot(t,i,s?s=>{const n=t[s][e];return n<i||n===i&&t[s+1][e]===i}:s=>t[s][e]<i),rt=(t,e,i)=>ot(t,i,(s=>t[s][e]>=i));function lt(t,e,i){let s=0,n=t.length;for(;s<n&&t[s]<e;)s++;for(;n>s&&t[n-1]>i;)n--;return s>0||n<t.length?t.slice(s,n):t}const ht=["push","pop","shift","splice","unshift"];function ct(t,e){t._chartjs?t._chartjs.listeners.push(e):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[e]}}),ht.forEach((e=>{const i="_onData"+D(e),s=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value(...e){const n=s.apply(this,e);return t._chartjs.listeners.forEach((t=>{"function"==typeof t[i]&&t[i](...e)})),n}})})))}function dt(t,e){const i=t._chartjs;if(!i)return;const s=i.listeners,n=s.indexOf(e);-1!==n&&s.splice(n,1),s.length>0||(ht.forEach((e=>{delete t[e]})),delete t._chartjs)}function ut(t){const e=new Set(t);return e.size===t.length?t:Array.from(e)}function ft(t,e,i){return e+" "+t+"px "+i}const gt="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function pt(t,e){let i=[],s=!1;return function(...n){i=n,s||(s=!0,gt.call(window,(()=>{s=!1,t.apply(e,i)})))}}function mt(t,e){let i;return function(...s){return e?(clearTimeout(i),i=setTimeout(t,e,s)):t.apply(this,s),e}}const bt=t=>"start"===t?"left":"end"===t?"right":"center",xt=(t,e,i)=>"start"===t?e:"end"===t?i:(e+i)/2,_t=(t,e,i,s)=>t===(s?"left":"right")?i:"center"===t?(e+i)/2:e;function yt(t,e,i){const s=e.length;let n=0,o=s;if(t._sorted){const{iScale:a,_parsed:r}=t,l=a.axis,{min:h,max:c,minDefined:d,maxDefined:u}=a.getUserBounds();d&&(n=it(Math.min(at(r,l,h).lo,i?s:at(e,l,a.getPixelForValue(h)).lo),0,s-1)),o=u?it(Math.max(at(r,a.axis,c,!0).hi+1,i?0:at(e,l,a.getPixelForValue(c),!0).hi+1),n,s)-n:s-n}return{start:n,count:o}}function vt(t){const{xScale:e,yScale:i,_scaleRanges:s}=t,n={xmin:e.min,xmax:e.max,ymin:i.min,ymax:i.max};if(!s)return t._scaleRanges=n,!0;const o=s.xmin!==e.min||s.xmax!==e.max||s.ymin!==i.min||s.ymax!==i.max;return Object.assign(s,n),o}const Mt=t=>0===t||1===t,wt=(t,e,i)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*L/i),kt=(t,e,i)=>Math.pow(2,-10*t)*Math.sin((t-e)*L/i)+1,St={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*z),easeOutSine:t=>Math.sin(t*z),easeInOutSine:t=>-.5*(Math.cos(E*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>Mt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>Mt(t)?t:wt(t,.075,.3),easeOutElastic:t=>Mt(t)?t:kt(t,.075,.3),easeInOutElastic(t){const e=.1125;return Mt(t)?t:t<.5?.5*wt(2*t,e,.45):.5+.5*kt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-St.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,i=2.75;return t<1/i?e*t*t:t<2/i?e*(t-=1.5/i)*t+.75:t<2.5/i?e*(t-=2.25/i)*t+.9375:e*(t-=2.625/i)*t+.984375},easeInOutBounce:t=>t<.5?.5*St.easeInBounce(2*t):.5*St.easeOutBounce(2*t-1)+.5};function Pt(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Dt(t){return Pt(t)?t:new s.Color(t)}function Ct(t){return Pt(t)?t:new s.Color(t).saturate(.5).darken(.1).hexString()}const Ot=["x","y","borderWidth","radius","tension"],At=["color","borderColor","backgroundColor"],Tt=new Map;function Et(t,e,i){return function(t,e){e=e||{};const i=t+JSON.stringify(e);let s=Tt.get(i);return s||(s=new Intl.NumberFormat(t,e),Tt.set(i,s)),s}(e,i).format(t)}const Lt={values:t=>r(t)?t:""+t,numeric(t,e,i){if(0===t)return"0";const s=this.chart.options.locale;let n,o=t;if(i.length>1){const e=Math.max(Math.abs(i[0].value),Math.abs(i[i.length-1].value));(e<1e-4||e>1e15)&&(n="scientific"),o=function(t,e){let i=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(i)>=1&&t!==Math.floor(t)&&(i=t-Math.floor(t)),i}(t,i)}const a=j(Math.abs(o)),r=isNaN(a)?1:Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:n,minimumFractionDigits:r,maximumFractionDigits:r};return Object.assign(l,this.options.ticks.format),Et(t,s,l)},logarithmic(t,e,i){if(0===t)return"0";const s=i[e].significand||t/Math.pow(10,Math.floor(j(t)));return[1,2,3,5,10,15].includes(s)||e>.8*i.length?Lt.numeric.call(this,t,e,i):""}};var Rt={formatters:Lt};const Ft=Object.create(null),It=Object.create(null);function zt(t,e){if(!e)return t;const i=e.split(".");for(let e=0,s=i.length;e<s;++e){const s=i[e];t=t[s]||(t[s]=Object.create(null))}return t}function Vt(t,e,i){return"string"==typeof e?y(zt(t,e),i):y(zt(t,""),e)}class Bt{constructor(t,e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Ct(e.backgroundColor),this.hoverBorderColor=(t,e)=>Ct(e.borderColor),this.hoverColor=(t,e)=>Ct(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t),this.apply(e)}set(t,e){return Vt(this,t,e)}get(t){return zt(this,t)}describe(t,e){return Vt(It,t,e)}override(t,e){return Vt(Ft,t,e)}route(t,e,i,s){const n=zt(this,t),o=zt(this,i),a="_"+e;Object.defineProperties(n,{[a]:{value:n[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[a],e=o[s];return l(t)?Object.assign({},e,t):d(t,e)},set(t){this[a]=t}}})}apply(t){t.forEach((t=>t(this)))}}var jt=new Bt({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(t){t.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),t.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),t.set("animations",{colors:{type:"color",properties:At},numbers:{type:"number",properties:Ot}}),t.describe("animations",{_fallback:"animation"}),t.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}})},function(t){t.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(t){t.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Rt.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),t.route("scale.ticks","color","","color"),t.route("scale.grid","color","","borderColor"),t.route("scale.border","color","","borderColor"),t.route("scale.title","color","","color"),t.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t&&"dash"!==t}),t.describe("scales",{_fallback:"scale"}),t.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t})}]);function Wt(t){return!t||a(t.size)||a(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}function Nt(t,e,i,s,n){let o=e[n];return o||(o=e[n]=t.measureText(n).width,i.push(n)),o>s&&(s=o),s}function Ht(t,e,i,s){let n=(s=s||{}).data=s.data||{},o=s.garbageCollect=s.garbageCollect||[];s.font!==e&&(n=s.data={},o=s.garbageCollect=[],s.font=e),t.save(),t.font=e;let a=0;const l=i.length;let h,c,d,u,f;for(h=0;h<l;h++)if(u=i[h],null==u||r(u)){if(r(u))for(c=0,d=u.length;c<d;c++)f=u[c],null==f||r(f)||(a=Nt(t,n,o,a,f))}else a=Nt(t,n,o,a,u);t.restore();const g=o.length/2;if(g>i.length){for(h=0;h<g;h++)delete n[o[h]];o.splice(0,g)}return a}function $t(t,e,i){const s=t.currentDevicePixelRatio,n=0!==i?Math.max(i/2,.5):0;return Math.round((e-n)*s)/s+n}function Yt(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function Ut(t,e,i,s){Xt(t,e,i,s,null)}function Xt(t,e,i,s,n){let o,a,r,l,h,c,d,u;const f=e.pointStyle,g=e.rotation,p=e.radius;let m=(g||0)*I;if(f&&"object"==typeof f&&(o=f.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return t.save(),t.translate(i,s),t.rotate(m),t.drawImage(f,-f.width/2,-f.height/2,f.width,f.height),void t.restore();if(!(isNaN(p)||p<=0)){switch(t.beginPath(),f){default:n?t.ellipse(i,s,n/2,p,0,0,L):t.arc(i,s,p,0,L),t.closePath();break;case"triangle":c=n?n/2:p,t.moveTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=B,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),m+=B,t.lineTo(i+Math.sin(m)*c,s-Math.cos(m)*p),t.closePath();break;case"rectRounded":h=.516*p,l=p-h,a=Math.cos(m+V)*l,d=Math.cos(m+V)*(n?n/2-h:l),r=Math.sin(m+V)*l,u=Math.sin(m+V)*(n?n/2-h:l),t.arc(i-d,s-r,h,m-E,m-z),t.arc(i+u,s-a,h,m-z,m),t.arc(i+d,s+r,h,m,m+z),t.arc(i-u,s+a,h,m+z,m+E),t.closePath();break;case"rect":if(!g){l=Math.SQRT1_2*p,c=n?n/2:l,t.rect(i-c,s-l,2*c,2*l);break}m+=V;case"rectRot":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+u,s-a),t.lineTo(i+d,s+r),t.lineTo(i-u,s+a),t.closePath();break;case"crossRot":m+=V;case"cross":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"star":d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a),m+=V,d=Math.cos(m)*(n?n/2:p),a=Math.cos(m)*p,r=Math.sin(m)*p,u=Math.sin(m)*(n?n/2:p),t.moveTo(i-d,s-r),t.lineTo(i+d,s+r),t.moveTo(i+u,s-a),t.lineTo(i-u,s+a);break;case"line":a=n?n/2:Math.cos(m)*p,r=Math.sin(m)*p,t.moveTo(i-a,s-r),t.lineTo(i+a,s+r);break;case"dash":t.moveTo(i,s),t.lineTo(i+Math.cos(m)*(n?n/2:p),s+Math.sin(m)*p);break;case!1:t.closePath()}t.fill(),e.borderWidth>0&&t.stroke()}}function Qt(t,e,i){return i=i||.5,!e||t&&t.x>e.left-i&&t.x<e.right+i&&t.y>e.top-i&&t.y<e.bottom+i}function qt(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function Kt(t){t.restore()}function Zt(t,e,i,s,n){if(!e)return t.lineTo(i.x,i.y);if("middle"===n){const s=(e.x+i.x)/2;t.lineTo(s,e.y),t.lineTo(s,i.y)}else"after"===n!=!!s?t.lineTo(e.x,i.y):t.lineTo(i.x,e.y);t.lineTo(i.x,i.y)}function Gt(t,e,i,s){if(!e)return t.lineTo(i.x,i.y);t.bezierCurveTo(s?e.cp1x:e.cp2x,s?e.cp1y:e.cp2y,s?i.cp2x:i.cp1x,s?i.cp2y:i.cp1y,i.x,i.y)}function Jt(t,e,i,s,n){if(n.strikethrough||n.underline){const o=t.measureText(s),a=e-o.actualBoundingBoxLeft,r=e+o.actualBoundingBoxRight,l=i-o.actualBoundingBoxAscent,h=i+o.actualBoundingBoxDescent,c=n.strikethrough?(l+h)/2:h;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=n.decorationWidth||2,t.moveTo(a,c),t.lineTo(r,c),t.stroke()}}function te(t,e){const i=t.fillStyle;t.fillStyle=e.color,t.fillRect(e.left,e.top,e.width,e.height),t.fillStyle=i}function ee(t,e,i,s,n,o={}){const l=r(e)?e:[e],h=o.strokeWidth>0&&""!==o.strokeColor;let c,d;for(t.save(),t.font=n.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),a(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),c=0;c<l.length;++c)d=l[c],o.backdrop&&te(t,o.backdrop),h&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),a(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(d,i,s,o.maxWidth)),t.fillText(d,i,s,o.maxWidth),Jt(t,i,s,d,o),s+=Number(n.lineHeight);t.restore()}function ie(t,e){const{x:i,y:s,w:n,h:o,radius:a}=e;t.arc(i+a.topLeft,s+a.topLeft,a.topLeft,1.5*E,E,!0),t.lineTo(i,s+o-a.bottomLeft),t.arc(i+a.bottomLeft,s+o-a.bottomLeft,a.bottomLeft,E,z,!0),t.lineTo(i+n-a.bottomRight,s+o),t.arc(i+n-a.bottomRight,s+o-a.bottomRight,a.bottomRight,z,0,!0),t.lineTo(i+n,s+a.topRight),t.arc(i+n-a.topRight,s+a.topRight,a.topRight,0,-z,!0),t.lineTo(i+a.topLeft,s)}const se=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,ne=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function oe(t,e){const i=(""+t).match(se);if(!i||"normal"===i[1])return 1.2*e;switch(t=+i[2],i[3]){case"px":return t;case"%":t/=100}return e*t}const ae=t=>+t||0;function re(t,e){const i={},s=l(e),n=s?Object.keys(e):e,o=l(t)?s?i=>d(t[i],t[e[i]]):e=>t[e]:()=>t;for(const t of n)i[t]=ae(o(t));return i}function le(t){return re(t,{top:"y",right:"x",bottom:"y",left:"x"})}function he(t){return re(t,["topLeft","topRight","bottomLeft","bottomRight"])}function ce(t){const e=le(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function de(t,e){t=t||{},e=e||jt.font;let i=d(t.size,e.size);"string"==typeof i&&(i=parseInt(i,10));let s=d(t.style,e.style);s&&!(""+s).match(ne)&&(console.warn('Invalid font style specified: "'+s+'"'),s=void 0);const n={family:d(t.family,e.family),lineHeight:oe(d(t.lineHeight,e.lineHeight),i),size:i,style:s,weight:d(t.weight,e.weight),string:""};return n.string=Wt(n),n}function ue(t,e,i,s){let n,o,a,l=!0;for(n=0,o=t.length;n<o;++n)if(a=t[n],void 0!==a&&(void 0!==e&&"function"==typeof a&&(a=a(e),l=!1),void 0!==i&&r(a)&&(a=a[i%a.length],l=!1),void 0!==a))return s&&!l&&(s.cacheable=!1),a}function fe(t,e,i){const{min:s,max:n}=t,o=f(e,(n-s)/2),a=(t,e)=>i&&0===t?0:t+e;return{min:a(s,-Math.abs(o)),max:a(n,o)}}function ge(t,e){return Object.assign(Object.create(t),e)}function pe(t,e=[""],i,s,n=(()=>t[0])){const o=i||t;void 0===s&&(s=Pe("_fallback",t));const a={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:o,_fallback:s,_getTarget:n,override:i=>pe([i,...t],e,o,s)};return new Proxy(a,{deleteProperty:(e,i)=>(delete e[i],delete e._keys,delete t[0][i],!0),get:(i,s)=>ye(i,s,(()=>function(t,e,i,s){let n;for(const o of e)if(n=Pe(xe(o,t),i),void 0!==n)return _e(t,n)?ke(i,s,t,n):n}(s,e,t,i))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>De(t).includes(e),ownKeys:t=>De(t),set(t,e,i){const s=t._storage||(t._storage=n());return t[e]=s[e]=i,delete t._keys,!0}})}function me(t,e,i,s){const n={_cacheable:!1,_proxy:t,_context:e,_subProxy:i,_stack:new Set,_descriptors:be(t,s),setContext:e=>me(t,e,i,s),override:n=>me(t.override(n),e,i,s)};return new Proxy(n,{deleteProperty:(e,i)=>(delete e[i],delete t[i],!0),get:(t,e,i)=>ye(t,e,(()=>function(t,e,i){const{_proxy:s,_context:n,_subProxy:o,_descriptors:a}=t;let h=s[e];return O(h)&&a.isScriptable(e)&&(h=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_stack:r}=i;if(r.has(t))throw new Error("Recursion detected: "+Array.from(r).join("->")+"->"+t);r.add(t);let l=e(o,a||s);return r.delete(t),_e(t,l)&&(l=ke(n._scopes,n,t,l)),l}(e,h,t,i)),r(h)&&h.length&&(h=function(t,e,i,s){const{_proxy:n,_context:o,_subProxy:a,_descriptors:r}=i;if(void 0!==o.index&&s(t))return e[o.index%e.length];if(l(e[0])){const i=e,s=n._scopes.filter((t=>t!==i));e=[];for(const l of i){const i=ke(s,n,t,l);e.push(me(i,o,a&&a[t],r))}}return e}(e,h,t,a.isIndexable)),_e(e,h)&&(h=me(h,n,o&&o[e],a)),h}(t,e,i))),getOwnPropertyDescriptor:(e,i)=>e._descriptors.allKeys?Reflect.has(t,i)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,i),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,i)=>Reflect.has(t,i),ownKeys:()=>Reflect.ownKeys(t),set:(e,i,s)=>(t[i]=s,delete e[i],!0)})}function be(t,e={scriptable:!0,indexable:!0}){const{_scriptable:i=e.scriptable,_indexable:s=e.indexable,_allKeys:n=e.allKeys}=t;return{allKeys:n,scriptable:i,indexable:s,isScriptable:O(i)?i:()=>i,isIndexable:O(s)?s:()=>s}}const xe=(t,e)=>t?t+D(e):e,_e=(t,e)=>l(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function ye(t,e,i){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const s=i();return t[e]=s,s}function ve(t,e,i){return O(t)?t(e,i):t}const Me=(t,e)=>!0===t?e:"string"==typeof t?P(e,t):void 0;function we(t,e,i,s,n){for(const o of e){const e=Me(i,o);if(e){t.add(e);const o=ve(e._fallback,i,n);if(void 0!==o&&o!==i&&o!==s)return o}else if(!1===e&&void 0!==s&&i!==s)return null}return!1}function ke(t,e,i,s){const n=e._rootScopes,o=ve(e._fallback,i,s),a=[...t,...n],h=new Set;h.add(s);let c=Se(h,a,i,o||i,s);return null!==c&&(void 0===o||o===i||(c=Se(h,a,o,c,s),null!==c))&&pe(Array.from(h),[""],n,o,(()=>function(t,e,i){const s=t._getTarget();e in s||(s[e]={});const n=s[e];return r(n)&&l(i)?i:n||{}}(e,i,s)))}function Se(t,e,i,s,n){for(;i;)i=we(t,e,i,s,n);return i}function Pe(t,e){for(const i of e){if(!i)continue;const e=i[t];if(void 0!==e)return e}}function De(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const i of t)for(const t of Object.keys(i).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Ce(t,e,i,s){const{iScale:n}=t,{key:o="r"}=this._parsing,a=new Array(s);let r,l,h,c;for(r=0,l=s;r<l;++r)h=r+i,c=e[h],a[r]={r:n.parse(P(c,o),h)};return a}const Oe=Number.EPSILON||1e-14,Ae=(t,e)=>e<t.length&&!t[e].skip&&t[e],Te=t=>"x"===t?"y":"x";function Ee(t,e,i,s){const n=t.skip?e:t,o=e,a=i.skip?e:i,r=G(o,n),l=G(a,o);let h=r/(r+l),c=l/(r+l);h=isNaN(h)?0:h,c=isNaN(c)?0:c;const d=s*h,u=s*c;return{previous:{x:o.x-d*(a.x-n.x),y:o.y-d*(a.y-n.y)},next:{x:o.x+u*(a.x-n.x),y:o.y+u*(a.y-n.y)}}}function Le(t,e="x"){const i=Te(e),s=t.length,n=Array(s).fill(0),o=Array(s);let a,r,l,h=Ae(t,0);for(a=0;a<s;++a)if(r=l,l=h,h=Ae(t,a+1),l){if(h){const t=h[e]-l[e];n[a]=0!==t?(h[i]-l[i])/t:0}o[a]=r?h?W(n[a-1])!==W(n[a])?0:(n[a-1]+n[a])/2:n[a-1]:n[a]}!function(t,e,i){const s=t.length;let n,o,a,r,l,h=Ae(t,0);for(let c=0;c<s-1;++c)l=h,h=Ae(t,c+1),l&&h&&(N(e[c],0,Oe)?i[c]=i[c+1]=0:(n=i[c]/e[c],o=i[c+1]/e[c],r=Math.pow(n,2)+Math.pow(o,2),r<=9||(a=3/Math.sqrt(r),i[c]=n*a*e[c],i[c+1]=o*a*e[c])))}(t,n,o),function(t,e,i="x"){const s=Te(i),n=t.length;let o,a,r,l=Ae(t,0);for(let h=0;h<n;++h){if(a=r,r=l,l=Ae(t,h+1),!r)continue;const n=r[i],c=r[s];a&&(o=(n-a[i])/3,r[`cp1${i}`]=n-o,r[`cp1${s}`]=c-o*e[h]),l&&(o=(l[i]-n)/3,r[`cp2${i}`]=n+o,r[`cp2${s}`]=c+o*e[h])}}(t,o,e)}function Re(t,e,i){return Math.max(Math.min(t,i),e)}function Fe(t,e,i,s,n){let o,a,r,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)Le(t,n);else{let i=s?t[t.length-1]:t[0];for(o=0,a=t.length;o<a;++o)r=t[o],l=Ee(i,r,t[Math.min(o+1,a-(s?0:1))%a],e.tension),r.cp1x=l.previous.x,r.cp1y=l.previous.y,r.cp2x=l.next.x,r.cp2y=l.next.y,i=r}e.capBezierPoints&&function(t,e){let i,s,n,o,a,r=Qt(t[0],e);for(i=0,s=t.length;i<s;++i)a=o,o=r,r=i<s-1&&Qt(t[i+1],e),o&&(n=t[i],a&&(n.cp1x=Re(n.cp1x,e.left,e.right),n.cp1y=Re(n.cp1y,e.top,e.bottom)),r&&(n.cp2x=Re(n.cp2x,e.left,e.right),n.cp2y=Re(n.cp2y,e.top,e.bottom)))}(t,i)}function Ie(){return"undefined"!=typeof window&&"undefined"!=typeof document}function ze(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function Ve(t,e,i){let s;return"string"==typeof t?(s=parseInt(t,10),-1!==t.indexOf("%")&&(s=s/100*e.parentNode[i])):s=t,s}const Be=t=>t.ownerDocument.defaultView.getComputedStyle(t,null);function je(t,e){return Be(t).getPropertyValue(e)}const We=["top","right","bottom","left"];function Ne(t,e,i){const s={};i=i?"-"+i:"";for(let n=0;n<4;n++){const o=We[n];s[o]=parseFloat(t[e+"-"+o+i])||0}return s.width=s.left+s.right,s.height=s.top+s.bottom,s}const He=(t,e,i)=>(t>0||e>0)&&(!i||!i.shadowRoot);function $e(t,e){if("native"in t)return t;const{canvas:i,currentDevicePixelRatio:s}=e,n=Be(i),o="border-box"===n.boxSizing,a=Ne(n,"padding"),r=Ne(n,"border","width"),{x:l,y:h,box:c}=function(t,e){const i=t.touches,s=i&&i.length?i[0]:t,{offsetX:n,offsetY:o}=s;let a,r,l=!1;if(He(n,o,t.target))a=n,r=o;else{const t=e.getBoundingClientRect();a=s.clientX-t.left,r=s.clientY-t.top,l=!0}return{x:a,y:r,box:l}}(t,i),d=a.left+(c&&r.left),u=a.top+(c&&r.top);let{width:f,height:g}=e;return o&&(f-=a.width+r.width,g-=a.height+r.height),{x:Math.round((l-d)/f*i.width/s),y:Math.round((h-u)/g*i.height/s)}}const Ye=t=>Math.round(10*t)/10;function Ue(t,e,i,s){const n=Be(t),o=Ne(n,"margin"),a=Ve(n.maxWidth,t,"clientWidth")||F,r=Ve(n.maxHeight,t,"clientHeight")||F,l=function(t,e,i){let s,n;if(void 0===e||void 0===i){const o=ze(t);if(o){const t=o.getBoundingClientRect(),a=Be(o),r=Ne(a,"border","width"),l=Ne(a,"padding");e=t.width-l.width-r.width,i=t.height-l.height-r.height,s=Ve(a.maxWidth,o,"clientWidth"),n=Ve(a.maxHeight,o,"clientHeight")}else e=t.clientWidth,i=t.clientHeight}return{width:e,height:i,maxWidth:s||F,maxHeight:n||F}}(t,e,i);let{width:h,height:c}=l;if("content-box"===n.boxSizing){const t=Ne(n,"border","width"),e=Ne(n,"padding");h-=e.width+t.width,c-=e.height+t.height}return h=Math.max(0,h-o.width),c=Math.max(0,s?h/s:c-o.height),h=Ye(Math.min(h,a,l.maxWidth)),c=Ye(Math.min(c,r,l.maxHeight)),h&&!c&&(c=Ye(h/2)),(void 0!==e||void 0!==i)&&s&&l.height&&c>l.height&&(c=l.height,h=Ye(Math.floor(c*s))),{width:h,height:c}}function Xe(t,e,i){const s=e||1,n=Math.floor(t.height*s),o=Math.floor(t.width*s);t.height=Math.floor(t.height),t.width=Math.floor(t.width);const a=t.canvas;return a.style&&(i||!a.style.height&&!a.style.width)&&(a.style.height=`${t.height}px`,a.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==s||a.height!==n||a.width!==o)&&(t.currentDevicePixelRatio=s,a.height=n,a.width=o,t.ctx.setTransform(s,0,0,s,0,0),!0)}const Qe=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function qe(t,e){const i=je(t,e),s=i&&i.match(/^(\d+)(\.\d+)?px$/);return s?+s[1]:void 0}function Ke(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:t.y+i*(e.y-t.y)}}function Ze(t,e,i,s){return{x:t.x+i*(e.x-t.x),y:"middle"===s?i<.5?t.y:e.y:"after"===s?i<1?t.y:e.y:i>0?e.y:t.y}}function Ge(t,e,i,s){const n={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},a=Ke(t,n,i),r=Ke(n,o,i),l=Ke(o,e,i),h=Ke(a,r,i),c=Ke(r,l,i);return Ke(h,c,i)}const Je=function(t,e){return{x:i=>t+t+e-i,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}},ti=function(){return{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}};function ei(t,e,i){return t?Je(e,i):ti()}function ii(t,e){let i,s;"ltr"!==e&&"rtl"!==e||(i=t.canvas.style,s=[i.getPropertyValue("direction"),i.getPropertyPriority("direction")],i.setProperty("direction",e,"important"),t.prevTextDirection=s)}function si(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function ni(t){return"angle"===t?{between:et,compare:J,normalize:tt}:{between:nt,compare:(t,e)=>t-e,normalize:t=>t}}function oi({start:t,end:e,count:i,loop:s,style:n}){return{start:t%i,end:e%i,loop:s&&(e-t+1)%i==0,style:n}}function ai(t,e,i){if(!i)return[t];const{property:s,start:n,end:o}=i,a=e.length,{compare:r,between:l,normalize:h}=ni(s),{start:c,end:d,loop:u,style:f}=function(t,e,i){const{property:s,start:n,end:o}=i,{between:a,normalize:r}=ni(s),l=e.length;let h,c,{start:d,end:u,loop:f}=t;if(f){for(d+=l,u+=l,h=0,c=l;h<c&&a(r(e[d%l][s]),n,o);++h)d--,u--;d%=l,u%=l}return u<d&&(u+=l),{start:d,end:u,loop:f,style:t.style}}(t,e,i),g=[];let p,m,b,x=!1,_=null;for(let t=c,i=c;t<=d;++t)m=e[t%a],m.skip||(p=h(m[s]),p!==b&&(x=l(p,n,o),null===_&&(x||l(n,b,p)&&0!==r(n,b))&&(_=0===r(p,n)?t:i),null!==_&&(!x||0===r(o,p)||l(o,b,p))&&(g.push(oi({start:_,end:t,loop:u,count:a,style:f})),_=null),i=t,b=p));return null!==_&&g.push(oi({start:_,end:d,loop:u,count:a,style:f})),g}function ri(t,e){const i=[],s=t.segments;for(let n=0;n<s.length;n++){const o=ai(s[n],t.points,e);o.length&&i.push(...o)}return i}function li(t,e){const i=t.points,s=t.options.spanGaps,n=i.length;if(!n)return[];const o=!!t._loop,{start:a,end:r}=function(t,e,i,s){let n=0,o=e-1;if(i&&!s)for(;n<e&&!t[n].skip;)n++;for(;n<e&&t[n].skip;)n++;for(n%=e,i&&(o+=n);o>n&&t[o%e].skip;)o--;return o%=e,{start:n,end:o}}(i,n,o,s);return hi(t,!0===s?[{start:a,end:r,loop:o}]:function(t,e,i,s){const n=t.length,o=[];let a,r=e,l=t[e];for(a=e+1;a<=i;++a){const i=t[a%n];i.skip||i.stop?l.skip||(s=!1,o.push({start:e%n,end:(a-1)%n,loop:s}),e=r=i.stop?a:null):(r=a,l.skip&&(e=a)),l=i}return null!==r&&o.push({start:e%n,end:r%n,loop:s}),o}(i,a,r<a?r+n:r,!!t._fullLoop&&0===a&&r===n-1),i,e)}function hi(t,e,i,s){return s&&s.setContext&&i?function(t,e,i,s){const n=t._chart.getContext(),o=ci(t.options),{_datasetIndex:a,options:{spanGaps:r}}=t,l=i.length,h=[];let c=o,d=e[0].start,u=d;function f(t,e,s,n){const o=r?-1:1;if(t!==e){for(t+=l;i[t%l].skip;)t-=o;for(;i[e%l].skip;)e+=o;t%l!=e%l&&(h.push({start:t%l,end:e%l,loop:s,style:n}),c=n,d=e%l)}}for(const t of e){d=r?d:t.start;let e,o=i[d%l];for(u=d+1;u<=t.end;u++){const r=i[u%l];e=ci(s.setContext(ge(n,{type:"segment",p0:o,p1:r,p0DataIndex:(u-1)%l,p1DataIndex:u%l,datasetIndex:a}))),di(e,c)&&f(d,u-1,t.loop,c),o=r,c=e}d<u-1&&f(d,u-1,t.loop,c)}return h}(t,e,i,s):e}function ci(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function di(t,e){if(!e)return!1;const i=[],s=function(t,e){return Pt(e)?(i.includes(e)||i.push(e),i.indexOf(e)):e};return JSON.stringify(t,s)!==JSON.stringify(e,s)}},"./node_modules/vue-chartjs/dist/index.js":(t,e,i)=>{i.r(e),i.d(e,{Bar:()=>m,Bubble:()=>M,Chart:()=>g,Doughnut:()=>b,Line:()=>x,Pie:()=>_,PolarArea:()=>y,Radar:()=>v,Scatter:()=>w,createTypedChart:()=>p,getDatasetAtEvent:()=>d,getElementAtEvent:()=>u,getElementsAtEvent:()=>f});var s=i("./node_modules/vue/dist/vue.runtime.esm-bundler.js"),n=i("./node_modules/chart.js/dist/chart.js");const o={data:{type:Object,required:!0},options:{type:Object,default:()=>({})},plugins:{type:Array,default:()=>[]},datasetIdKey:{type:String,default:"label"},updateMode:{type:String,default:void 0}},a={type:{type:String,required:!0},...o},r="2"===s.version[0]?(t,e)=>Object.assign(t,{attrs:e}):(t,e)=>Object.assign(t,e);function l(t){return(0,s.isProxy)(t)?(0,s.toRaw)(t):t}function h(t,e){t.labels=e}function c(t,e,i){const s=[];t.datasets=e.map((e=>{const n=t.datasets.find((t=>t[i]===e[i]));return n&&e.data&&!s.includes(n)?(s.push(n),Object.assign(n,e),n):{...e}}))}function d(t,e){return t.getElementsAtEventForMode(e,"dataset",{intersect:!0},!1)}function u(t,e){return t.getElementsAtEventForMode(e,"nearest",{intersect:!0},!1)}function f(t,e){return t.getElementsAtEventForMode(e,"index",{intersect:!0},!1)}const g=(0,s.defineComponent)({props:a,setup(t,e){let{expose:i}=e;const o=(0,s.ref)(null),a=(0,s.shallowRef)(null);return i({chart:a}),(0,s.onMounted)((()=>{if(!o.value)return;const{type:e,data:i,options:r,plugins:l,datasetIdKey:d}=t,u=function(t,e){const i={labels:[],datasets:[]};return h(i,t.labels),c(i,t.datasets,e),i}(i,d),f=function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t;return(0,s.isProxy)(e)?new Proxy(t,{}):t}(u,i);a.value=new n.Chart(o.value,{type:e,data:f,options:{...r},plugins:l})})),(0,s.onBeforeUnmount)((()=>{const t=(0,s.toRaw)(a.value);t&&(t.destroy(),a.value=null)})),(0,s.watch)([()=>t.options,()=>t.data],((e,i)=>{let[n,o]=e,[r,d]=i;const u=(0,s.toRaw)(a.value);if(!u)return;let f=!1;if(n){const t=l(n),e=l(r);t&&t!==e&&(function(t,e){const i=t.options;i&&e&&Object.assign(i,e)}(u,t),f=!0)}if(o){const e=l(o.labels),i=l(d.labels),s=l(o.datasets),n=l(d.datasets);e!==i&&(h(u.config.data,e),f=!0),s&&s!==n&&(c(u.config.data,s,t.datasetIdKey),f=!0)}f&&(e=>{e.update(t.updateMode)})(u)}),{deep:!0}),()=>(0,s.h)("canvas",{ref:o})}});function p(t,e){return n.Chart.register(e),(0,s.defineComponent)({props:o,setup(e,i){let{expose:n}=i;const o=(0,s.shallowRef)(null),a=t=>{o.value=t?.chart};return n({chart:o}),()=>(0,s.h)(g,r({ref:a},{type:t,...e}))}})}const m=p("bar",n.BarController),b=p("doughnut",n.DoughnutController),x=p("line",n.LineController),_=p("pie",n.PieController),y=p("polarArea",n.PolarAreaController),v=p("radar",n.RadarController),M=p("bubble",n.BubbleController),w=p("scatter",n.ScatterController)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfdnVlLWNoYXJ0anNfZGlzdF9pbmRleF9qcy5qcyIsIm1hcHBpbmdzIjoiO2dNQU1BLFNBQVNBLEVBQU1DLEdBQ2IsT0FBT0EsRUFBSSxHQUFNLENBQ25CLHFTQUNBLE1BQU1DLEVBQU0sQ0FBQ0QsRUFBR0UsRUFBR0MsSUFBTUMsS0FBS0MsSUFBSUQsS0FBS0UsSUFBSU4sRUFBR0csR0FBSUQsR0FDbEQsU0FBU0ssRUFBSVAsR0FDWCxPQUFPQyxFQUFJRixFQUFVLEtBQUpDLEdBQVcsRUFBRyxJQUNqQyxDQUNBLFNBQVNRLEVBQUlSLEdBQ1gsT0FBT0MsRUFBSUYsRUFBTUMsRUFBSSxNQUFPLEVBQUcsSUFDakMsQ0FDQSxTQUFTUyxFQUFJVCxHQUNYLE9BQU9DLEVBQUlGLEVBQVUsSUFBSkMsR0FBVSxFQUFHLElBQ2hDLENBQ0EsU0FBU1UsRUFBSVYsR0FDWCxPQUFPQyxFQUFJRixFQUFNQyxFQUFJLE1BQVEsSUFBSyxFQUFHLEVBQ3ZDLENBQ0EsU0FBU1csRUFBSVgsR0FDWCxPQUFPQyxFQUFJRixFQUFVLElBQUpDLEdBQVUsRUFBRyxJQUNoQyxDQUVBLE1BQU1ZLEVBQVEsQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUdDLEVBQUcsR0FBSUMsRUFBRyxHQUFJQyxFQUFHLEdBQUlDLEVBQUcsR0FBSUMsRUFBRyxHQUFJQyxFQUFHLEdBQUlDLEVBQUcsR0FBSUMsRUFBRyxHQUFJQyxFQUFHLEdBQUlDLEVBQUcsR0FBSUMsRUFBRyxHQUFJQyxFQUFHLElBQ3JKQyxFQUFNLElBQUksb0JBQ1ZDLEVBQUtOLEdBQUtLLEVBQVEsR0FBSkwsR0FDZE8sRUFBS1AsR0FBS0ssR0FBUyxJQUFKTCxJQUFhLEdBQUtLLEVBQVEsR0FBSkwsR0FDckNRLEVBQUtSLElBQVcsSUFBSkEsSUFBYSxJQUFZLEdB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Q1RDLE1BQU8sU0FDUEMsS0FBTSxTQUNOQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsVUFBVyxTQUNYQyxRQUFTLFNBQ1RDLFdBQVksU0FDWkMsSUFBSyxTQUNMQyxLQUFNLFNBQ05DLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxPQUFRLFNBQ1JDLE1BQU8sU0FDUEMsTUFBTyxTQUNQQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsS0FBTSxPQUNOQyxRQUFTLFNBQ1RDLElBQUssU0FDTEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsSUFBSyxLQUNMQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxLQUFNLFNBQ05DLFVBQVcsT0FDWEMsSUFBSyxTQUNMQyxTQUFVLFNBQ1ZDLFdBQVksU0FDWkMsUUFBUyxTQUNUQyxTQUFVLFNBQ1ZDLFFBQVMsU0FDVEMsV0FBWSxTQUNaQyxLQUFNLEtBQ05DLE9BQVEsU0FDUkMsS0FBTSxTQUNOQyxRQUFTLFNBQ1RDLE1BQU8sU0FDUEMsUUFBUyxTQUNUQyxLQUFNLFNBQ05DLFVBQVcsU0FDWEMsT0FBUSxTQUNSQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsVUFBVyxTQUNYQyxRQUFTLFNBQ1RDLEtBQU0sU0FDTkMsSUFBSyxTQUNMQyxLQUFNLFNBQ05DLFFBQVMsU0FDVEMsTUFBTyxTQUNQQyxZQUFhLFNBQ2JDLEdBQUksU0FDSkMsU0FBVSxTQUNWQyxNQUFPLFNBQ1BDLFVBQVcsU0FDWEMsTUFBTyxTQUNQQyxVQUFXLFNBQ1hDLE1BQU8sU0FDUEMsUUFBUyxTQUNUQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxJQUFLLFNBQ0xDLEtBQU0sU0FDTkMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLFNBQVUsT0FDVkMsT0FBUSxTQUNSQyxJQUFLLFNBQ0xDLElBQUssT0FDTEMsTUFBTyxTQUNQQyxPQUFRLFNBQ1JDLEdBQUks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RUFBTzByQyxFQUFZLENBQ3hCd0IsSUFBS3dCLEdBQ04sQ0FDQzc2RSxVQUNHZ0osSUFHZixHQUVSLENBQ0EsTUFBTTh4RSxFQUFzQkYsRUFBaUIsTUFBTyxFQUFBbmdFLGVBQzlDc2dFLEVBQTJCSCxFQUFpQixXQUFZLEVBQUEvN0Qsb0JBQ3hEbThELEVBQXVCSixFQUFpQixPQUFRLEVBQUEvMkQsZ0JBQ2hEbzNELEVBQXNCTCxFQUFpQixNQUFPLEVBQUExMEQsZUFDOUNnMUQsRUFBNEJOLEVBQWlCLFlBQWEsRUFBQTUxRCxxQkFDMURtMkQsRUFBd0JQLEVBQWlCLFFBQVMsRUFBQXowRCxpQkFDbERpMUQsRUFBeUJSLEVBQWlCLFNBQVUsRUFBQXQ4RCxrQkFDcEQrOEQsRUFBMEJULEVBQWlCLFVBQVcsRUFBQXIwRCIsInNvdXJjZXMiOlsid2VicGFjazovL3dwYW12dWVraXQvLi9ub2RlX21vZHVsZXMvQGt1cmtsZS9jb2xvci9kaXN0L2NvbG9yLmVzbS5qcyIsIndlYnBhY2s6Ly93cGFtdnVla2l0Ly4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL2Rpc3QvY2hhcnQuanMiLCJ3ZWJwYWNrOi8vd3BhbXZ1ZWtpdC8uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9kaXN0L2NodW5rcy9oZWxwZXJzLnNlZ21lbnQuanMiLCJ3ZWJwYWNrOi8vd3BhbXZ1ZWtpdC8uL25vZGVfbW9kdWxlcy92dWUtY2hhcnRqcy9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQGt1cmtsZS9jb2xvciB2MC4zLjJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9rdXJrbGUvY29sb3IjcmVhZG1lXG4gKiAoYykgMjAyMyBKdWtrYSBLdXJrZWxhXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuZnVuY3Rpb24gcm91bmQodikge1xuICByZXR1cm4gdiArIDAuNSB8IDA7XG59XG5jb25zdCBsaW0gPSAodiwgbCwgaCkgPT4gTWF0aC5tYXgoTWF0aC5taW4odiwgaCksIGwpO1xuZnVuY3Rpb24gcDJiKHYpIHtcbiAgcmV0dXJuIGxpbShyb3VuZCh2ICogMi41NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSwgMCwgMTAwKTtcbn1cbmZ1bmN0aW9uIG4yYih2KSB7XG4gIHJldHVybiBsaW0ocm91bmQodiAqIDI1NSksIDAsIDI1NSk7XG59XG5mdW5jdGlvbiBiMm4odikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgLyAyLjU1KSAvIDEwMCwgMCwgMSk7XG59XG5mdW5jdGlvbiBuMnAodikge1xuICByZXR1cm4gbGltKHJvdW5kKHYgKiAxMDApLCAwLCAxMDApO1xufVxuXG5jb25zdCBtYXAkMSA9IHswOiAwLCAxOiAxLCAyOiAyLCAzOiAzLCA0OiA0LCA1OiA1LCA2OiA2LCA3OiA3LCA4OiA4LCA5OiA5LCBBOiAxMCwgQjogMTEsIEM6IDEyLCBEOiAxMywgRTogMTQsIEY6IDE1LCBhOiAxMCwgYjogMTEsIGM6IDEyLCBkOiAxMywgZTogMTQsIGY6IDE1fTtcbmNvbnN0IGhleCA9IFsuLi4nMDEyMzQ1Njc4OUFCQ0RFRiddO1xuY29uc3QgaDEgPSBiID0+IGhleFtiICYgMHhGXTtcbmNvbnN0IGgyID0gYiA9PiBoZXhbKGIgJiAweEYwKSA+PiA0XSArIGhleFtiICYgMHhGXTtcbmNvbnN0IGVxID0gYiA9PiAoKGIgJiAweEYwKSA+PiA0KSA9PT0gKGIgJiAweEYpO1xuY29uc3QgaXNTaG9ydCA9IHYgPT4gZXEodi5yKSAmJiBlcSh2LmcpICYmIGVxKHYuYikgJiYgZXEodi5hKTtcbmZ1bmN0aW9uIGhleFBhcnNlKHN0cikge1xuICB2YXIgbGVuID0gc3RyLmxlbmd0aDtcbiAgdmFyIHJldDtcbiAgaWYgKHN0clswXSA9PT0gJyMnKSB7XG4gICAgaWYgKGxlbiA9PT0gNCB8fCBsZW4gPT09IDUpIHtcbiAgICAgIHJldCA9IHtcbiAgICAgICAgcjogMjU1ICYgbWFwJDFbc3RyWzFdXSAqIDE3LFxuICAgICAgICBnOiAyNTUgJiBtYXAkMVtzdHJbMl1dICogMTcsXG4gICAgICAgIGI6IDI1NSAmIG1hcCQxW3N0clszXV0gKiAxNyxcbiAgICAgICAgYTogbGVuID09PSA1ID8gbWFwJDFbc3RyWzRdXSAqIDE3IDogMjU1XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAobGVuID09PSA3IHx8IGxlbiA9PT0gOSkge1xuICAgICAgcmV0ID0ge1xuICAgICAgICByOiBtYXAkMVtzdHJbMV1dIDw8IDQgfCBtYXAkMVtzdHJbMl1dLFxuICAgICAgICBnOiBtYXAkMVtzdHJbM11dIDw8IDQgfCBtYXAkMVtzdHJbNF1dLFxuICAgICAgICBiOiBtYXAkMVtzdHJbNV1dIDw8IDQgfCBtYXAkMVtzdHJbNl1dLFxuICAgICAgICBhOiBsZW4gPT09IDkgPyAobWFwJDFbc3RyWzddXSA8PCA0IHwgbWFwJDFbc3RyWzhdXSkgOiAyNTVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiByZXQ7XG59XG5jb25zdCBhbHBoYSA9IChhLCBmKSA9PiBhIDwgMjU1ID8gZihhKSA6ICcnO1xuZnVuY3Rpb24gaGV4U3RyaW5nKHYpIHtcbiAgdmFyIGYgPSBpc1Nob3J0KHYpID8gaDEgOiBoMjtcbiAgcmV0dXJuIHZcbiAgICA/ICcjJyArIGYodi5yKSArIGYodi5nKSArIGYodi5iKSArIGFscGhhKHYuYSwgZilcbiAgICA6IHVuZGVmaW5lZDtcbn1cblxuY29uc3QgSFVFX1JFID0gL14oaHNsYT98aHdifGhzdilcXChcXHMqKFstKy5lXFxkXSspKD86ZGVnKT9bXFxzLF0rKFstKy5lXFxkXSspJVtcXHMsXSsoWy0rLmVcXGRdKyklKD86W1xccyxdKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIGhzbDJyZ2JuKGgsIHMsIGwpIHtcbiAgY29uc3QgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG4gIGNvbnN0IGYgPSAobiwgayA9IChuICsgaCAvIDMwKSAlIDEyKSA9PiBsIC0gYSAqIE1hdGgubWF4KE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSksIC0xKTtcbiAgcmV0dXJuIFtmKDApLCBmKDgpLCBmKDQpXTtcbn1cbmZ1bmN0aW9uIGhzdjJyZ2JuKGgsIHMsIHYpIHtcbiAgY29uc3QgZiA9IChuLCBrID0gKG4gKyBoIC8gNjApICUgNikgPT4gdiAtIHYgKiBzICogTWF0aC5tYXgoTWF0aC5taW4oaywgNCAtIGssIDEpLCAwKTtcbiAgcmV0dXJuIFtmKDUpLCBmKDMpLCBmKDEpXTtcbn1cbmZ1bmN0aW9uIGh3YjJyZ2JuKGgsIHcsIGIpIHtcbiAgY29uc3QgcmdiID0gaHNsMnJnYm4oaCwgMSwgMC41KTtcbiAgbGV0IGk7XG4gIGlmICh3ICsgYiA+IDEpIHtcbiAgICBpID0gMSAvICh3ICsgYik7XG4gICAgdyAqPSBpO1xuICAgIGIgKj0gaTtcbiAgfVxuICBmb3IgKGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgcmdiW2ldICo9IDEgLSB3IC0gYjtcbiAgICByZ2JbaV0gKz0gdztcbiAgfVxuICByZXR1cm4gcmdiO1xufVxuZnVuY3Rpb24gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KSB7XG4gIGlmIChyID09PSBtYXgpIHtcbiAgICByZXR1cm4gKChnIC0gYikgLyBkKSArIChnIDwgYiA/IDYgOiAwKTtcbiAgfVxuICBpZiAoZyA9PT0gbWF4KSB7XG4gICAgcmV0dXJuIChiIC0gcikgLyBkICsgMjtcbiAgfVxuICByZXR1cm4gKHIgLSBnKSAvIGQgKyA0O1xufVxuZnVuY3Rpb24gcmdiMmhzbCh2KSB7XG4gIGNvbnN0IHJhbmdlID0gMjU1O1xuICBjb25zdCByID0gdi5yIC8gcmFuZ2U7XG4gIGNvbnN0IGcgPSB2LmcgLyByYW5nZTtcbiAgY29uc3QgYiA9IHYuYiAvIHJhbmdlO1xuICBjb25zdCBtYXggPSBNYXRoLm1heChyLCBnLCBiKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIGNvbnN0IGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGxldCBoLCBzLCBkO1xuICBpZiAobWF4ICE9PSBtaW4pIHtcbiAgICBkID0gbWF4IC0gbWluO1xuICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcbiAgICBoID0gaHVlVmFsdWUociwgZywgYiwgZCwgbWF4KTtcbiAgICBoID0gaCAqIDYwICsgMC41O1xuICB9XG4gIHJldHVybiBbaCB8IDAsIHMgfHwgMCwgbF07XG59XG5mdW5jdGlvbiBjYWxsbihmLCBhLCBiLCBjKSB7XG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheShhKVxuICAgICAgPyBmKGFbMF0sIGFbMV0sIGFbMl0pXG4gICAgICA6IGYoYSwgYiwgYylcbiAgKS5tYXAobjJiKTtcbn1cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgcywgbCkge1xuICByZXR1cm4gY2FsbG4oaHNsMnJnYm4sIGgsIHMsIGwpO1xufVxuZnVuY3Rpb24gaHdiMnJnYihoLCB3LCBiKSB7XG4gIHJldHVybiBjYWxsbihod2IycmdibiwgaCwgdywgYik7XG59XG5mdW5jdGlvbiBoc3YycmdiKGgsIHMsIHYpIHtcbiAgcmV0dXJuIGNhbGxuKGhzdjJyZ2JuLCBoLCBzLCB2KTtcbn1cbmZ1bmN0aW9uIGh1ZShoKSB7XG4gIHJldHVybiAoaCAlIDM2MCArIDM2MCkgJSAzNjA7XG59XG5mdW5jdGlvbiBodWVQYXJzZShzdHIpIHtcbiAgY29uc3QgbSA9IEhVRV9SRS5leGVjKHN0cik7XG4gIGxldCBhID0gMjU1O1xuICBsZXQgdjtcbiAgaWYgKCFtKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChtWzVdICE9PSB2KSB7XG4gICAgYSA9IG1bNl0gPyBwMmIoK21bNV0pIDogbjJiKCttWzVdKTtcbiAgfVxuICBjb25zdCBoID0gaHVlKCttWzJdKTtcbiAgY29uc3QgcDEgPSArbVszXSAvIDEwMDtcbiAgY29uc3QgcDIgPSArbVs0XSAvIDEwMDtcbiAgaWYgKG1bMV0gPT09ICdod2InKSB7XG4gICAgdiA9IGh3YjJyZ2IoaCwgcDEsIHAyKTtcbiAgfSBlbHNlIGlmIChtWzFdID09PSAnaHN2Jykge1xuICAgIHYgPSBoc3YycmdiKGgsIHAxLCBwMik7XG4gIH0gZWxzZSB7XG4gICAgdiA9IGhzbDJyZ2IoaCwgcDEsIHAyKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHI6IHZbMF0sXG4gICAgZzogdlsxXSxcbiAgICBiOiB2WzJdLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJvdGF0ZSh2LCBkZWcpIHtcbiAgdmFyIGggPSByZ2IyaHNsKHYpO1xuICBoWzBdID0gaHVlKGhbMF0gKyBkZWcpO1xuICBoID0gaHNsMnJnYihoKTtcbiAgdi5yID0gaFswXTtcbiAgdi5nID0gaFsxXTtcbiAgdi5iID0gaFsyXTtcbn1cbmZ1bmN0aW9uIGhzbFN0cmluZyh2KSB7XG4gIGlmICghdikge1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBhID0gcmdiMmhzbCh2KTtcbiAgY29uc3QgaCA9IGFbMF07XG4gIGNvbnN0IHMgPSBuMnAoYVsxXSk7XG4gIGNvbnN0IGwgPSBuMnAoYVsyXSk7XG4gIHJldHVybiB2LmEgPCAyNTVcbiAgICA/IGBoc2xhKCR7aH0sICR7c30lLCAke2x9JSwgJHtiMm4odi5hKX0pYFxuICAgIDogYGhzbCgke2h9LCAke3N9JSwgJHtsfSUpYDtcbn1cblxuY29uc3QgbWFwID0ge1xuICB4OiAnZGFyaycsXG4gIFo6ICdsaWdodCcsXG4gIFk6ICdyZScsXG4gIFg6ICdibHUnLFxuICBXOiAnZ3InLFxuICBWOiAnbWVkaXVtJyxcbiAgVTogJ3NsYXRlJyxcbiAgQTogJ2VlJyxcbiAgVDogJ29sJyxcbiAgUzogJ29yJyxcbiAgQjogJ3JhJyxcbiAgQzogJ2xhdGVnJyxcbiAgRDogJ2lnaHRzJyxcbiAgUjogJ2luJyxcbiAgUTogJ3R1cnF1b2lzJyxcbiAgRTogJ2hpJyxcbiAgUDogJ3JvJyxcbiAgTzogJ2FsJyxcbiAgTjogJ2xlJyxcbiAgTTogJ2RlJyxcbiAgTDogJ3llbGxvJyxcbiAgRjogJ2VuJyxcbiAgSzogJ2NoJyxcbiAgRzogJ2Fya3MnLFxuICBIOiAnZWEnLFxuICBJOiAnaWdodGcnLFxuICBKOiAnd2gnXG59O1xuY29uc3QgbmFtZXMkMSA9IHtcbiAgT2ljZVhlOiAnZjBmOGZmJyxcbiAgYW50aXF1ZXdFdGU6ICdmYWViZDcnLFxuICBhcXVhOiAnZmZmZicsXG4gIGFxdWFtYXJSZTogJzdmZmZkNCcsXG4gIGF6dVk6ICdmMGZmZmYnLFxuICBiZWlnZTogJ2Y1ZjVkYycsXG4gIGJpc3F1ZTogJ2ZmZTRjNCcsXG4gIGJsYWNrOiAnMCcsXG4gIGJsYW5LZWRPbW9uZDogJ2ZmZWJjZCcsXG4gIFhlOiAnZmYnLFxuICBYZXZpVGV0OiAnOGEyYmUyJyxcbiAgYlB3bjogJ2E1MmEyYScsXG4gIGJ1cmx5d29vZDogJ2RlYjg4NycsXG4gIGNhTXRYZTogJzVmOWVhMCcsXG4gIEthcnRZdXNlOiAnN2ZmZjAwJyxcbiAgS29jVGF0ZTogJ2QyNjkxZScsXG4gIGNTTzogJ2ZmN2Y1MCcsXG4gIGNTbmZsb3dlclhlOiAnNjQ5NWVkJyxcbiAgY1Nuc2lsazogJ2ZmZjhkYycsXG4gIGNyaW1zb246ICdkYzE0M2MnLFxuICBjeWFuOiAnZmZmZicsXG4gIHhYZTogJzhiJyxcbiAgeGN5YW46ICc4YjhiJyxcbiAgeGdUTW5QZDogJ2I4ODYwYicsXG4gIHhXYXk6ICdhOWE5YTknLFxuICB4Z1lGOiAnNjQwMCcsXG4gIHhnWXk6ICdhOWE5YTknLFxuICB4a2hha2k6ICdiZGI3NmInLFxuICB4bWFnRnRhOiAnOGIwMDhiJyxcbiAgeFRpdmVnWUY6ICc1NTZiMmYnLFxuICB4U2FuZ2U6ICdmZjhjMDAnLFxuICB4U2NFZDogJzk5MzJjYycsXG4gIHhZZDogJzhiMDAwMCcsXG4gIHhzT21vbjogJ2U5OTY3YScsXG4gIHhzSGdZRjogJzhmYmM4ZicsXG4gIHhVWGU6ICc0ODNkOGInLFxuICB4VVdheTogJzJmNGY0ZicsXG4gIHhVZ1l5OiAnMmY0ZjRmJyxcbiAgeFFlOiAnY2VkMScsXG4gIHh2aVRldDogJzk0MDBkMycsXG4gIGRBcHBSazogJ2ZmMTQ5MycsXG4gIGRBcHNreVhlOiAnYmZmZicsXG4gIGRpbVdheTogJzY5Njk2OScsXG4gIGRpbWdZeTogJzY5Njk2OScsXG4gIGRvZGdlclhlOiAnMWU5MGZmJyxcbiAgZmlZYnJpY2s6ICdiMjIyMjInLFxuICBmbFNPd0V0ZTogJ2ZmZmFmMCcsXG4gIGZvWXN0V0FuOiAnMjI4YjIyJyxcbiAgZnVLc2lhOiAnZmYwMGZmJyxcbiAgZ2FSc2JTbzogJ2RjZGNkYycsXG4gIGdob3N0d0V0ZTogJ2Y4ZjhmZicsXG4gIGdUZDogJ2ZmZDcwMCcsXG4gIGdUTW5QZDogJ2RhYTUyMCcsXG4gIFdheTogJzgwODA4MCcsXG4gIGdZRjogJzgwMDAnLFxuICBnWUZMdzogJ2FkZmYyZicsXG4gIGdZeTogJzgwODA4MCcsXG4gIGhvbmV5TXc6ICdmMGZmZjAnLFxuICBob3RwUms6ICdmZjY5YjQnLFxuICBSZGlhbllkOiAnY2Q1YzVjJyxcbiAgUmRpZ286ICc0YjAwODInLFxuICBpdlN5OiAnZmZmZmYwJyxcbiAga2hha2k6ICdmMGU2OGMnLFxuICBsYXZGTXI6ICdlNmU2ZmEnLFxuICBsYXZGTXJYc2g6ICdmZmYwZjUnLFxuICBsYXduZ1lGOiAnN2NmYzAwJyxcbiAgTm1vbmNFZmZvbjogJ2ZmZmFjZCcsXG4gIFpYZTogJ2FkZDhlNicsXG4gIFpjU086ICdmMDgwODAnLFxuICBaY3lhbjogJ2UwZmZmZicsXG4gIFpnVE1uUGRMdzogJ2ZhZmFkMicsXG4gIFpXYXk6ICdkM2QzZDMnLFxuICBaZ1lGOiAnOTBlZTkwJyxcbiAgWmdZeTogJ2QzZDNkMycsXG4gIFpwUms6ICdmZmI2YzEnLFxuICBac09tb246ICdmZmEwN2EnLFxuICBac0hnWUY6ICcyMGIyYWEnLFxuICBac2t5WGU6ICc4N2NlZmEnLFxuICBaVVdheTogJzc3ODg5OScsXG4gIFpVZ1l5OiAnNzc4ODk5JyxcbiAgWnN0QWxYZTogJ2IwYzRkZScsXG4gIFpMdzogJ2ZmZmZlMCcsXG4gIGxpbWU6ICdmZjAwJyxcbiAgbGltZWdZRjogJzMyY2QzMicsXG4gIGxSRjogJ2ZhZjBlNicsXG4gIG1hZ0Z0YTogJ2ZmMDBmZicsXG4gIG1hUG9uOiAnODAwMDAwJyxcbiAgVmFxdWFtYXJSZTogJzY2Y2RhYScsXG4gIFZYZTogJ2NkJyxcbiAgVlNjRWQ6ICdiYTU1ZDMnLFxuICBWcHVycE46ICc5MzcwZGInLFxuICBWc0hnWUY6ICczY2IzNzEnLFxuICBWVVhlOiAnN2I2OGVlJyxcbiAgVnNwclJnZ1lGOiAnZmE5YScsXG4gIFZRZTogJzQ4ZDFjYycsXG4gIFZ2aVRldFlkOiAnYzcxNTg1JyxcbiAgbWlkbmlnaHRYZTogJzE5MTk3MCcsXG4gIG1SdGNZYW06ICdmNWZmZmEnLFxuICBtaXN0eVBzZTogJ2ZmZTRlMScsXG4gIG1vY2Nhc1I6ICdmZmU0YjUnLFxuICBuYXZham93RXRlOiAnZmZkZWFkJyxcbiAgbmF2eTogJzgwJyxcbiAgVGRsYWNlOiAnZmRmNWU2JyxcbiAgVGl2ZTogJzgwODAwMCcsXG4gIFRpdmVkQmI6ICc2YjhlMjMnLFxuICBTYW5nZTogJ2ZmYTUwMCcsXG4gIFNhbmdlWWQ6ICdmZjQ1MDAnLFxuICBTY0VkOiAnZGE3MGQ2JyxcbiAgcE9lZ1RNblBkOiAnZWVlOGFhJyxcbiAgcE9lZ1lGOiAnOThmYjk4JyxcbiAgcE9lUWU6ICdhZmVlZWUnLFxuICBwT2V2aVRldFlkOiAnZGI3MDkzJyxcbiAgcGFwYXlhd0VwOiAnZmZlZmQ1JyxcbiAgcEhLcHVmZjogJ2ZmZGFiOScsXG4gIHBlcnU6ICdjZDg1M2YnLFxuICBwUms6ICdmZmMwY2InLFxuICBwbHVtOiAnZGRhMGRkJyxcbiAgcG93TXJYZTogJ2IwZTBlNicsXG4gIHB1cnBOOiAnODAwMDgwJyxcbiAgWWJlY2NhcHVycE46ICc2NjMzOTknLFxuICBZZDogJ2ZmMDAwMCcsXG4gIFBzeWJyb3duOiAnYmM4ZjhmJyxcbiAgUHlPWGU6ICc0MTY5ZTEnLFxuICBzYWRkTmJQd246ICc4YjQ1MTMnLFxuICBzT21vbjogJ2ZhODA3MicsXG4gIHNhbmR5YlB3bjogJ2Y0YTQ2MCcsXG4gIHNIZ1lGOiAnMmU4YjU3JyxcbiAgc0hzaGVsbDogJ2ZmZjVlZScsXG4gIHNpRm5hOiAnYTA1MjJkJyxcbiAgc2lsdmVyOiAnYzBjMGMwJyxcbiAgc2t5WGU6ICc4N2NlZWInLFxuICBVWGU6ICc2YTVhY2QnLFxuICBVV2F5OiAnNzA4MDkwJyxcbiAgVWdZeTogJzcwODA5MCcsXG4gIHNub3c6ICdmZmZhZmEnLFxuICBzcHJSZ2dZRjogJ2ZmN2YnLFxuICBzdEFsWGU6ICc0NjgyYjQnLFxuICB0YW46ICdkMmI0OGMnLFxuICB0ZU86ICc4MDgwJyxcbiAgdEVzdE46ICdkOGJmZDgnLFxuICB0b21hdG86ICdmZjYzNDcnLFxuICBRZTogJzQwZTBkMCcsXG4gIHZpVGV0OiAnZWU4MmVlJyxcbiAgSkh0OiAnZjVkZWIzJyxcbiAgd0V0ZTogJ2ZmZmZmZicsXG4gIHdFdGVzbW9rZTogJ2Y1ZjVmNScsXG4gIEx3OiAnZmZmZjAwJyxcbiAgTHdnWUY6ICc5YWNkMzInXG59O1xuZnVuY3Rpb24gdW5wYWNrKCkge1xuICBjb25zdCB1bnBhY2tlZCA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobmFtZXMkMSk7XG4gIGNvbnN0IHRrZXlzID0gT2JqZWN0LmtleXMobWFwKTtcbiAgbGV0IGksIGosIGssIG9rLCBuaztcbiAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBvayA9IG5rID0ga2V5c1tpXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgdGtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGsgPSB0a2V5c1tqXTtcbiAgICAgIG5rID0gbmsucmVwbGFjZShrLCBtYXBba10pO1xuICAgIH1cbiAgICBrID0gcGFyc2VJbnQobmFtZXMkMVtva10sIDE2KTtcbiAgICB1bnBhY2tlZFtua10gPSBbayA+PiAxNiAmIDB4RkYsIGsgPj4gOCAmIDB4RkYsIGsgJiAweEZGXTtcbiAgfVxuICByZXR1cm4gdW5wYWNrZWQ7XG59XG5cbmxldCBuYW1lcztcbmZ1bmN0aW9uIG5hbWVQYXJzZShzdHIpIHtcbiAgaWYgKCFuYW1lcykge1xuICAgIG5hbWVzID0gdW5wYWNrKCk7XG4gICAgbmFtZXMudHJhbnNwYXJlbnQgPSBbMCwgMCwgMCwgMF07XG4gIH1cbiAgY29uc3QgYSA9IG5hbWVzW3N0ci50b0xvd2VyQ2FzZSgpXTtcbiAgcmV0dXJuIGEgJiYge1xuICAgIHI6IGFbMF0sXG4gICAgZzogYVsxXSxcbiAgICBiOiBhWzJdLFxuICAgIGE6IGEubGVuZ3RoID09PSA0ID8gYVszXSA6IDI1NVxuICB9O1xufVxuXG5jb25zdCBSR0JfUkUgPSAvXnJnYmE/XFwoXFxzKihbLSsuXFxkXSspKCUpP1tcXHMsXSsoWy0rLmVcXGRdKykoJSk/W1xccyxdKyhbLSsuZVxcZF0rKSglKT8oPzpbXFxzLC9dKyhbLSsuZVxcZF0rKSglKT8pP1xccypcXCkkLztcbmZ1bmN0aW9uIHJnYlBhcnNlKHN0cikge1xuICBjb25zdCBtID0gUkdCX1JFLmV4ZWMoc3RyKTtcbiAgbGV0IGEgPSAyNTU7XG4gIGxldCByLCBnLCBiO1xuICBpZiAoIW0pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1bN10gIT09IHIpIHtcbiAgICBjb25zdCB2ID0gK21bN107XG4gICAgYSA9IG1bOF0gPyBwMmIodikgOiBsaW0odiAqIDI1NSwgMCwgMjU1KTtcbiAgfVxuICByID0gK21bMV07XG4gIGcgPSArbVszXTtcbiAgYiA9ICttWzVdO1xuICByID0gMjU1ICYgKG1bMl0gPyBwMmIocikgOiBsaW0ociwgMCwgMjU1KSk7XG4gIGcgPSAyNTUgJiAobVs0XSA/IHAyYihnKSA6IGxpbShnLCAwLCAyNTUpKTtcbiAgYiA9IDI1NSAmIChtWzZdID8gcDJiKGIpIDogbGltKGIsIDAsIDI1NSkpO1xuICByZXR1cm4ge1xuICAgIHI6IHIsXG4gICAgZzogZyxcbiAgICBiOiBiLFxuICAgIGE6IGFcbiAgfTtcbn1cbmZ1bmN0aW9uIHJnYlN0cmluZyh2KSB7XG4gIHJldHVybiB2ICYmIChcbiAgICB2LmEgPCAyNTVcbiAgICAgID8gYHJnYmEoJHt2LnJ9LCAke3YuZ30sICR7di5ifSwgJHtiMm4odi5hKX0pYFxuICAgICAgOiBgcmdiKCR7di5yfSwgJHt2Lmd9LCAke3YuYn0pYFxuICApO1xufVxuXG5jb25zdCB0byA9IHYgPT4gdiA8PSAwLjAwMzEzMDggPyB2ICogMTIuOTIgOiBNYXRoLnBvdyh2LCAxLjAgLyAyLjQpICogMS4wNTUgLSAwLjA1NTtcbmNvbnN0IGZyb20gPSB2ID0+IHYgPD0gMC4wNDA0NSA/IHYgLyAxMi45MiA6IE1hdGgucG93KCh2ICsgMC4wNTUpIC8gMS4wNTUsIDIuNCk7XG5mdW5jdGlvbiBpbnRlcnBvbGF0ZShyZ2IxLCByZ2IyLCB0KSB7XG4gIGNvbnN0IHIgPSBmcm9tKGIybihyZ2IxLnIpKTtcbiAgY29uc3QgZyA9IGZyb20oYjJuKHJnYjEuZykpO1xuICBjb25zdCBiID0gZnJvbShiMm4ocmdiMS5iKSk7XG4gIHJldHVybiB7XG4gICAgcjogbjJiKHRvKHIgKyB0ICogKGZyb20oYjJuKHJnYjIucikpIC0gcikpKSxcbiAgICBnOiBuMmIodG8oZyArIHQgKiAoZnJvbShiMm4ocmdiMi5nKSkgLSBnKSkpLFxuICAgIGI6IG4yYih0byhiICsgdCAqIChmcm9tKGIybihyZ2IyLmIpKSAtIGIpKSksXG4gICAgYTogcmdiMS5hICsgdCAqIChyZ2IyLmEgLSByZ2IxLmEpXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vZEhTTCh2LCBpLCByYXRpbykge1xuICBpZiAodikge1xuICAgIGxldCB0bXAgPSByZ2IyaHNsKHYpO1xuICAgIHRtcFtpXSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRtcFtpXSArIHRtcFtpXSAqIHJhdGlvLCBpID09PSAwID8gMzYwIDogMSkpO1xuICAgIHRtcCA9IGhzbDJyZ2IodG1wKTtcbiAgICB2LnIgPSB0bXBbMF07XG4gICAgdi5nID0gdG1wWzFdO1xuICAgIHYuYiA9IHRtcFsyXTtcbiAgfVxufVxuZnVuY3Rpb24gY2xvbmUodiwgcHJvdG8pIHtcbiAgcmV0dXJuIHYgPyBPYmplY3QuYXNzaWduKHByb3RvIHx8IHt9LCB2KSA6IHY7XG59XG5mdW5jdGlvbiBmcm9tT2JqZWN0KGlucHV0KSB7XG4gIHZhciB2ID0ge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NX07XG4gIGlmIChBcnJheS5pc0FycmF5KGlucHV0KSkge1xuICAgIGlmIChpbnB1dC5sZW5ndGggPj0gMykge1xuICAgICAgdiA9IHtyOiBpbnB1dFswXSwgZzogaW5wdXRbMV0sIGI6IGlucHV0WzJdLCBhOiAyNTV9O1xuICAgICAgaWYgKGlucHV0Lmxlbmd0aCA+IDMpIHtcbiAgICAgICAgdi5hID0gbjJiKGlucHV0WzNdKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdiA9IGNsb25lKGlucHV0LCB7cjogMCwgZzogMCwgYjogMCwgYTogMX0pO1xuICAgIHYuYSA9IG4yYih2LmEpO1xuICB9XG4gIHJldHVybiB2O1xufVxuZnVuY3Rpb24gZnVuY3Rpb25QYXJzZShzdHIpIHtcbiAgaWYgKHN0ci5jaGFyQXQoMCkgPT09ICdyJykge1xuICAgIHJldHVybiByZ2JQYXJzZShzdHIpO1xuICB9XG4gIHJldHVybiBodWVQYXJzZShzdHIpO1xufVxuY2xhc3MgQ29sb3Ige1xuICBjb25zdHJ1Y3RvcihpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIENvbG9yKSB7XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSB0eXBlb2YgaW5wdXQ7XG4gICAgbGV0IHY7XG4gICAgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2ID0gZnJvbU9iamVjdChpbnB1dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgdiA9IGhleFBhcnNlKGlucHV0KSB8fCBuYW1lUGFyc2UoaW5wdXQpIHx8IGZ1bmN0aW9uUGFyc2UoaW5wdXQpO1xuICAgIH1cbiAgICB0aGlzLl9yZ2IgPSB2O1xuICAgIHRoaXMuX3ZhbGlkID0gISF2O1xuICB9XG4gIGdldCB2YWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQ7XG4gIH1cbiAgZ2V0IHJnYigpIHtcbiAgICB2YXIgdiA9IGNsb25lKHRoaXMuX3JnYik7XG4gICAgaWYgKHYpIHtcbiAgICAgIHYuYSA9IGIybih2LmEpO1xuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuICBzZXQgcmdiKG9iaikge1xuICAgIHRoaXMuX3JnYiA9IGZyb21PYmplY3Qob2JqKTtcbiAgfVxuICByZ2JTdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbGlkID8gcmdiU3RyaW5nKHRoaXMuX3JnYikgOiB1bmRlZmluZWQ7XG4gIH1cbiAgaGV4U3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLl92YWxpZCA/IGhleFN0cmluZyh0aGlzLl9yZ2IpIDogdW5kZWZpbmVkO1xuICB9XG4gIGhzbFN0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsaWQgPyBoc2xTdHJpbmcodGhpcy5fcmdiKSA6IHVuZGVmaW5lZDtcbiAgfVxuICBtaXgoY29sb3IsIHdlaWdodCkge1xuICAgIGlmIChjb2xvcikge1xuICAgICAgY29uc3QgYzEgPSB0aGlzLnJnYjtcbiAgICAgIGNvbnN0IGMyID0gY29sb3IucmdiO1xuICAgICAgbGV0IHcyO1xuICAgICAgY29uc3QgcCA9IHdlaWdodCA9PT0gdzIgPyAwLjUgOiB3ZWlnaHQ7XG4gICAgICBjb25zdCB3ID0gMiAqIHAgLSAxO1xuICAgICAgY29uc3QgYSA9IGMxLmEgLSBjMi5hO1xuICAgICAgY29uc3QgdzEgPSAoKHcgKiBhID09PSAtMSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG4gICAgICB3MiA9IDEgLSB3MTtcbiAgICAgIGMxLnIgPSAweEZGICYgdzEgKiBjMS5yICsgdzIgKiBjMi5yICsgMC41O1xuICAgICAgYzEuZyA9IDB4RkYgJiB3MSAqIGMxLmcgKyB3MiAqIGMyLmcgKyAwLjU7XG4gICAgICBjMS5iID0gMHhGRiAmIHcxICogYzEuYiArIHcyICogYzIuYiArIDAuNTtcbiAgICAgIGMxLmEgPSBwICogYzEuYSArICgxIC0gcCkgKiBjMi5hO1xuICAgICAgdGhpcy5yZ2IgPSBjMTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgaW50ZXJwb2xhdGUoY29sb3IsIHQpIHtcbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHRoaXMuX3JnYiA9IGludGVycG9sYXRlKHRoaXMuX3JnYiwgY29sb3IuX3JnYiwgdCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgQ29sb3IodGhpcy5yZ2IpO1xuICB9XG4gIGFscGhhKGEpIHtcbiAgICB0aGlzLl9yZ2IuYSA9IG4yYihhKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjbGVhcmVyKHJhdGlvKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIHJnYi5hICo9IDEgLSByYXRpbztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBncmV5c2NhbGUoKSB7XG4gICAgY29uc3QgcmdiID0gdGhpcy5fcmdiO1xuICAgIGNvbnN0IHZhbCA9IHJvdW5kKHJnYi5yICogMC4zICsgcmdiLmcgKiAwLjU5ICsgcmdiLmIgKiAwLjExKTtcbiAgICByZ2IuciA9IHJnYi5nID0gcmdiLmIgPSB2YWw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgb3BhcXVlcihyYXRpbykge1xuICAgIGNvbnN0IHJnYiA9IHRoaXMuX3JnYjtcbiAgICByZ2IuYSAqPSAxICsgcmF0aW87XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbmVnYXRlKCkge1xuICAgIGNvbnN0IHYgPSB0aGlzLl9yZ2I7XG4gICAgdi5yID0gMjU1IC0gdi5yO1xuICAgIHYuZyA9IDI1NSAtIHYuZztcbiAgICB2LmIgPSAyNTUgLSB2LmI7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgbGlnaHRlbihyYXRpbykge1xuICAgIG1vZEhTTCh0aGlzLl9yZ2IsIDIsIHJhdGlvKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBkYXJrZW4ocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAyLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHNhdHVyYXRlKHJhdGlvKSB7XG4gICAgbW9kSFNMKHRoaXMuX3JnYiwgMSwgcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGRlc2F0dXJhdGUocmF0aW8pIHtcbiAgICBtb2RIU0wodGhpcy5fcmdiLCAxLCAtcmF0aW8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJvdGF0ZShkZWcpIHtcbiAgICByb3RhdGUodGhpcy5fcmdiLCBkZWcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluZGV4X2VzbShpbnB1dCkge1xuICByZXR1cm4gbmV3IENvbG9yKGlucHV0KTtcbn1cblxuZXhwb3J0IHsgQ29sb3IsIGIybiwgYjJwLCBpbmRleF9lc20gYXMgZGVmYXVsdCwgaGV4UGFyc2UsIGhleFN0cmluZywgaHNsMnJnYiwgaHNsU3RyaW5nLCBoc3YycmdiLCBodWVQYXJzZSwgaHdiMnJnYiwgbGltLCBuMmIsIG4ycCwgbmFtZVBhcnNlLCBwMmIsIHJnYjJoc2wsIHJnYlBhcnNlLCByZ2JTdHJpbmcsIHJvdGF0ZSwgcm91bmQgfTtcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuNC4wXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZXF1ZXN0QW5pbUZyYW1lLCBhIGFzIHJlc29sdmUsIGUgYXMgZWZmZWN0cywgYyBhcyBjb2xvciwgaSBhcyBpc09iamVjdCwgZCBhcyBkZWZhdWx0cywgYiBhcyBpc0FycmF5LCB2IGFzIHZhbHVlT3JEZWZhdWx0LCB1IGFzIHVubGlzdGVuQXJyYXlFdmVudHMsIGwgYXMgbGlzdGVuQXJyYXlFdmVudHMsIGYgYXMgcmVzb2x2ZU9iamVjdEtleSwgZyBhcyBpc051bWJlckZpbml0ZSwgaCBhcyBkZWZpbmVkLCBzIGFzIHNpZ24sIGogYXMgY3JlYXRlQ29udGV4dCwgayBhcyBpc051bGxPclVuZGVmLCBfIGFzIF9hcnJheVVuaXF1ZSwgdCBhcyB0b1JhZGlhbnMsIG0gYXMgdG9QZXJjZW50YWdlLCBuIGFzIHRvRGltZW5zaW9uLCBUIGFzIFRBVSwgbyBhcyBmb3JtYXROdW1iZXIsIHAgYXMgX2FuZ2xlQmV0d2VlbiwgSCBhcyBIQUxGX1BJLCBQIGFzIFBJLCBxIGFzIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzLCB3IGFzIF9zY2FsZVJhbmdlc0NoYW5nZWQsIHggYXMgaXNOdW1iZXIsIHkgYXMgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLCB6IGFzIGdldFJlbGF0aXZlUG9zaXRpb24sIEEgYXMgX3Jsb29rdXBCeUtleSwgQiBhcyBfbG9va3VwQnlLZXksIEMgYXMgX2lzUG9pbnRJbkFyZWEsIEQgYXMgZ2V0QW5nbGVGcm9tUG9pbnQsIEUgYXMgdG9QYWRkaW5nLCBGIGFzIGVhY2gsIEcgYXMgZ2V0TWF4aW11bVNpemUsIEkgYXMgX2dldFBhcmVudE5vZGUsIEogYXMgcmVhZFVzZWRTaXplLCBLIGFzIHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMsIEwgYXMgdGhyb3R0bGVkLCBNIGFzIF9pc0RvbVN1cHBvcnRlZCwgTiBhcyBfZmFjdG9yaXplLCBPIGFzIGZpbml0ZU9yRGVmYXVsdCwgUSBhcyBjYWxsYmFjaywgUiBhcyBfYWRkR3JhY2UsIFMgYXMgX2xpbWl0VmFsdWUsIFUgYXMgdG9EZWdyZWVzLCBWIGFzIF9tZWFzdXJlVGV4dCwgVyBhcyBfaW50MTZSYW5nZSwgWCBhcyBfYWxpZ25QaXhlbCwgWSBhcyBjbGlwQXJlYSwgWiBhcyByZW5kZXJUZXh0LCAkIGFzIHVuY2xpcEFyZWEsIGEwIGFzIHRvRm9udCwgYTEgYXMgX3RvTGVmdFJpZ2h0Q2VudGVyLCBhMiBhcyBfYWxpZ25TdGFydEVuZCwgYTMgYXMgb3ZlcnJpZGVzLCBhNCBhcyBtZXJnZSwgYTUgYXMgX2NhcGl0YWxpemUsIGE2IGFzIGRlc2NyaXB0b3JzLCBhNyBhcyBpc0Z1bmN0aW9uLCBhOCBhcyBfYXR0YWNoQ29udGV4dCwgYTkgYXMgX2NyZWF0ZVJlc29sdmVyLCBhYSBhcyBfZGVzY3JpcHRvcnMsIGFiIGFzIG1lcmdlSWYsIGFjIGFzIHVpZCwgYWQgYXMgZGVib3VuY2UsIGFlIGFzIHJldGluYVNjYWxlLCBhZiBhcyBjbGVhckNhbnZhcywgYWcgYXMgc2V0c0VxdWFsLCBhaCBhcyBfZWxlbWVudHNFcXVhbCwgYWkgYXMgX2lzQ2xpY2tFdmVudCwgYWogYXMgX2lzQmV0d2VlbiwgYWsgYXMgX3JlYWRWYWx1ZVRvUHJvcHMsIGFsIGFzIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzLCBhbSBhcyBfY29tcHV0ZVNlZ21lbnRzLCBhbiBhcyBfYm91bmRTZWdtZW50cywgYW8gYXMgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uLCBhcCBhcyBfYmV6aWVySW50ZXJwb2xhdGlvbiwgYXEgYXMgX3BvaW50SW5MaW5lLCBhciBhcyBfc3RlcHBlZExpbmVUbywgYXMgYXMgX2JlemllckN1cnZlVG8sIGF0IGFzIGRyYXdQb2ludCwgYXUgYXMgYWRkUm91bmRlZFJlY3RQYXRoLCBhdiBhcyB0b1RSQkwsIGF3IGFzIHRvVFJCTENvcm5lcnMsIGF4IGFzIF9ib3VuZFNlZ21lbnQsIGF5IGFzIF9ub3JtYWxpemVBbmdsZSwgYXogYXMgZ2V0UnRsQWRhcHRlciwgYUEgYXMgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uLCBhQiBhcyBfdGV4dFgsIGFDIGFzIHJlc3RvcmVUZXh0RGlyZWN0aW9uLCBhRCBhcyBkcmF3UG9pbnRMZWdlbmQsIGFFIGFzIGRpc3RhbmNlQmV0d2VlblBvaW50cywgYUYgYXMgbm9vcCwgYUcgYXMgX3NldE1pbkFuZE1heEJ5S2V5LCBhSCBhcyBuaWNlTnVtLCBhSSBhcyBhbG1vc3RXaG9sZSwgYUogYXMgYWxtb3N0RXF1YWxzLCBhSyBhcyBfZGVjaW1hbFBsYWNlcywgYUwgYXMgVGlja3MsIGFNIGFzIGxvZzEwLCBhTiBhcyBfbG9uZ2VzdFRleHQsIGFPIGFzIF9maWx0ZXJCZXR3ZWVuLCBhUCBhcyBfbG9va3VwIH0gZnJvbSAnLi9jaHVua3MvaGVscGVycy5zZWdtZW50LmpzJztcbmltcG9ydCAnQGt1cmtsZS9jb2xvcic7XG5cbmNsYXNzIEFuaW1hdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2hhcnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2xhc3REYXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiBfbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgdHlwZSkge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBhbmltcy5saXN0ZW5lcnNbdHlwZV07XG4gICAgICAgIGNvbnN0IG51bVN0ZXBzID0gYW5pbXMuZHVyYXRpb247XG4gICAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKChmbik9PmZuKHtcbiAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICBpbml0aWFsOiBhbmltcy5pbml0aWFsLFxuICAgICAgICAgICAgICAgIG51bVN0ZXBzLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRTdGVwOiBNYXRoLm1pbihkYXRlIC0gYW5pbXMuc3RhcnQsIG51bVN0ZXBzKVxuICAgICAgICAgICAgfSkpO1xuICAgIH1cbiBfcmVmcmVzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlcXVlc3QpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdCA9IHJlcXVlc3RBbmltRnJhbWUuY2FsbCh3aW5kb3csICgpPT57XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWZyZXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfdXBkYXRlKGRhdGUgPSBEYXRlLm5vdygpKSB7XG4gICAgICAgIGxldCByZW1haW5pbmcgPSAwO1xuICAgICAgICB0aGlzLl9jaGFydHMuZm9yRWFjaCgoYW5pbXMsIGNoYXJ0KT0+e1xuICAgICAgICAgICAgaWYgKCFhbmltcy5ydW5uaW5nIHx8ICFhbmltcy5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGFuaW1zLml0ZW1zO1xuICAgICAgICAgICAgbGV0IGkgPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgbGV0IGRyYXcgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBpdGVtO1xuICAgICAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgICAgIGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5fYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLl90b3RhbCA+IGFuaW1zLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGl0ZW0uX3RvdGFsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udGljayhkYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgZHJhdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXNbaV0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRyYXcpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5kcmF3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgZGF0ZSwgJ3Byb2dyZXNzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuaW1zLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnkoY2hhcnQsIGFuaW1zLCBkYXRlLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgICAgICBhbmltcy5pbml0aWFsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZW1haW5pbmcgKz0gaXRlbXMubGVuZ3RoO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fbGFzdERhdGUgPSBkYXRlO1xuICAgICAgICBpZiAocmVtYWluaW5nID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gX2dldEFuaW1zKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuX2NoYXJ0cztcbiAgICAgICAgbGV0IGFuaW1zID0gY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIGFuaW1zID0ge1xuICAgICAgICAgICAgICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGluaXRpYWw6IHRydWUsXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczoge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogW10sXG4gICAgICAgICAgICAgICAgICAgIHByb2dyZXNzOiBbXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjaGFydHMuc2V0KGNoYXJ0LCBhbmltcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1zO1xuICAgIH1cbiBsaXN0ZW4oY2hhcnQsIGV2ZW50LCBjYikge1xuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkubGlzdGVuZXJzW2V2ZW50XS5wdXNoKGNiKTtcbiAgICB9XG4gYWRkKGNoYXJ0LCBpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zIHx8ICFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9nZXRBbmltcyhjaGFydCkuaXRlbXMucHVzaCguLi5pdGVtcyk7XG4gICAgfVxuIGhhcyhjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0QW5pbXMoY2hhcnQpLml0ZW1zLmxlbmd0aCA+IDA7XG4gICAgfVxuIHN0YXJ0KGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltcy5ydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYW5pbXMuc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBhbmltcy5kdXJhdGlvbiA9IGFuaW1zLml0ZW1zLnJlZHVjZSgoYWNjLCBjdXIpPT5NYXRoLm1heChhY2MsIGN1ci5fZHVyYXRpb24pLCAwKTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCgpO1xuICAgIH1cbiAgICBydW5uaW5nKGNoYXJ0KSB7XG4gICAgICAgIGlmICghdGhpcy5fcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLnJ1bm5pbmcgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiBzdG9wKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy5fY2hhcnRzLmdldChjaGFydCk7XG4gICAgICAgIGlmICghYW5pbXMgfHwgIWFuaW1zLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gYW5pbXMuaXRlbXM7XG4gICAgICAgIGxldCBpID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgZm9yKDsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgaXRlbXNbaV0uY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbm90aWZ5KGNoYXJ0LCBhbmltcywgRGF0ZS5ub3coKSwgJ2NvbXBsZXRlJyk7XG4gICAgfVxuIHJlbW92ZShjaGFydCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hhcnRzLmRlbGV0ZShjaGFydCk7XG4gICAgfVxufVxudmFyIGFuaW1hdG9yID0gLyogI19fUFVSRV9fICovIG5ldyBBbmltYXRvcigpO1xuXG5jb25zdCB0cmFuc3BhcmVudCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBpbnRlcnBvbGF0b3JzID0ge1xuICAgIGJvb2xlYW4gKGZyb20sIHRvLCBmYWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhY3RvciA+IDAuNSA/IHRvIDogZnJvbTtcbiAgICB9LFxuIGNvbG9yIChmcm9tLCB0bywgZmFjdG9yKSB7XG4gICAgICAgIGNvbnN0IGMwID0gY29sb3IoZnJvbSB8fCB0cmFuc3BhcmVudCk7XG4gICAgICAgIGNvbnN0IGMxID0gYzAudmFsaWQgJiYgY29sb3IodG8gfHwgdHJhbnNwYXJlbnQpO1xuICAgICAgICByZXR1cm4gYzEgJiYgYzEudmFsaWQgPyBjMS5taXgoYzAsIGZhY3RvcikuaGV4U3RyaW5nKCkgOiB0bztcbiAgICB9LFxuICAgIG51bWJlciAoZnJvbSwgdG8sIGZhY3Rvcikge1xuICAgICAgICByZXR1cm4gZnJvbSArICh0byAtIGZyb20pICogZmFjdG9yO1xuICAgIH1cbn07XG5jbGFzcyBBbmltYXRpb24ge1xuICAgIGNvbnN0cnVjdG9yKGNmZywgdGFyZ2V0LCBwcm9wLCB0byl7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRhcmdldFtwcm9wXTtcbiAgICAgICAgdG8gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgIHRvLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGZyb20gPSByZXNvbHZlKFtcbiAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlLFxuICAgICAgICAgICAgdG9cbiAgICAgICAgXSk7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX2ZuID0gY2ZnLmZuIHx8IGludGVycG9sYXRvcnNbY2ZnLnR5cGUgfHwgdHlwZW9mIGZyb21dO1xuICAgICAgICB0aGlzLl9lYXNpbmcgPSBlZmZlY3RzW2NmZy5lYXNpbmddIHx8IGVmZmVjdHMubGluZWFyO1xuICAgICAgICB0aGlzLl9zdGFydCA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSArIChjZmcuZGVsYXkgfHwgMCkpO1xuICAgICAgICB0aGlzLl9kdXJhdGlvbiA9IHRoaXMuX3RvdGFsID0gTWF0aC5mbG9vcihjZmcuZHVyYXRpb24pO1xuICAgICAgICB0aGlzLl9sb29wID0gISFjZmcubG9vcDtcbiAgICAgICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLl9wcm9wID0gcHJvcDtcbiAgICAgICAgdGhpcy5fZnJvbSA9IGZyb207XG4gICAgICAgIHRoaXMuX3RvID0gdG87XG4gICAgICAgIHRoaXMuX3Byb21pc2VzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBhY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XG4gICAgfVxuICAgIHVwZGF0ZShjZmcsIHRvLCBkYXRlKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLl90YXJnZXRbdGhpcy5fcHJvcF07XG4gICAgICAgICAgICBjb25zdCBlbGFwc2VkID0gZGF0ZSAtIHRoaXMuX3N0YXJ0O1xuICAgICAgICAgICAgY29uc3QgcmVtYWluID0gdGhpcy5fZHVyYXRpb24gLSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBkYXRlO1xuICAgICAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBNYXRoLmZsb29yKE1hdGgubWF4KHJlbWFpbiwgY2ZnLmR1cmF0aW9uKSk7XG4gICAgICAgICAgICB0aGlzLl90b3RhbCArPSBlbGFwc2VkO1xuICAgICAgICAgICAgdGhpcy5fbG9vcCA9ICEhY2ZnLmxvb3A7XG4gICAgICAgICAgICB0aGlzLl90byA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy50byxcbiAgICAgICAgICAgICAgICB0byxcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUsXG4gICAgICAgICAgICAgICAgY2ZnLmZyb21cbiAgICAgICAgICAgIF0pO1xuICAgICAgICAgICAgdGhpcy5fZnJvbSA9IHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGNmZy5mcm9tLFxuICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSxcbiAgICAgICAgICAgICAgICB0b1xuICAgICAgICAgICAgXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FuY2VsKCkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLnRpY2soRGF0ZS5ub3coKSk7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGljayhkYXRlKSB7XG4gICAgICAgIGNvbnN0IGVsYXBzZWQgPSBkYXRlIC0gdGhpcy5fc3RhcnQ7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gdGhpcy5fZHVyYXRpb247XG4gICAgICAgIGNvbnN0IHByb3AgPSB0aGlzLl9wcm9wO1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5fZnJvbTtcbiAgICAgICAgY29uc3QgbG9vcCA9IHRoaXMuX2xvb3A7XG4gICAgICAgIGNvbnN0IHRvID0gdGhpcy5fdG87XG4gICAgICAgIGxldCBmYWN0b3I7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZyb20gIT09IHRvICYmIChsb29wIHx8IGVsYXBzZWQgPCBkdXJhdGlvbik7XG4gICAgICAgIGlmICghdGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICB0aGlzLl90YXJnZXRbcHJvcF0gPSB0bztcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxhcHNlZCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFtwcm9wXSA9IGZyb207XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZmFjdG9yID0gZWxhcHNlZCAvIGR1cmF0aW9uICUgMjtcbiAgICAgICAgZmFjdG9yID0gbG9vcCAmJiBmYWN0b3IgPiAxID8gMiAtIGZhY3RvciA6IGZhY3RvcjtcbiAgICAgICAgZmFjdG9yID0gdGhpcy5fZWFzaW5nKE1hdGgubWluKDEsIE1hdGgubWF4KDAsIGZhY3RvcikpKTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0W3Byb3BdID0gdGhpcy5fZm4oZnJvbSwgdG8sIGZhY3Rvcik7XG4gICAgfVxuICAgIHdhaXQoKSB7XG4gICAgICAgIGNvbnN0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXMgfHwgKHRoaXMuX3Byb21pc2VzID0gW10pO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKT0+e1xuICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgICAgIHJlalxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfbm90aWZ5KHJlc29sdmVkKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlc29sdmVkID8gJ3JlcycgOiAncmVqJztcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB0aGlzLl9wcm9taXNlcyB8fCBbXTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHByb21pc2VzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHByb21pc2VzW2ldW21ldGhvZF0oKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQW5pbWF0aW9ucyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGNvbmZpZyl7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKGNvbmZpZyk7XG4gICAgfVxuICAgIGNvbmZpZ3VyZShjb25maWcpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IE9iamVjdC5rZXlzKGRlZmF1bHRzLmFuaW1hdGlvbik7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhjb25maWcpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ1trZXldO1xuICAgICAgICAgICAgaWYgKCFpc09iamVjdChjZmcpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVzb2x2ZWQgPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIG9mIGFuaW1hdGlvbk9wdGlvbnMpe1xuICAgICAgICAgICAgICAgIHJlc29sdmVkW29wdGlvbl0gPSBjZmdbb3B0aW9uXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIChpc0FycmF5KGNmZy5wcm9wZXJ0aWVzKSAmJiBjZmcucHJvcGVydGllcyB8fCBbXG4gICAgICAgICAgICAgICAga2V5XG4gICAgICAgICAgICBdKS5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSBrZXkgfHwgIWFuaW1hdGVkUHJvcHMuaGFzKHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGVkUHJvcHMuc2V0KHByb3AsIHJlc29sdmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuIF9hbmltYXRlT3B0aW9ucyh0YXJnZXQsIHZhbHVlcykge1xuICAgICAgICBjb25zdCBuZXdPcHRpb25zID0gdmFsdWVzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSByZXNvbHZlVGFyZ2V0T3B0aW9ucyh0YXJnZXQsIG5ld09wdGlvbnMpO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gdGhpcy5fY3JlYXRlQW5pbWF0aW9ucyhvcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgaWYgKG5ld09wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgYXdhaXRBbGwodGFyZ2V0Lm9wdGlvbnMuJGFuaW1hdGlvbnMsIG5ld09wdGlvbnMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgICAgICB0YXJnZXQub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gICAgICAgICAgICB9LCAoKT0+e1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIF9jcmVhdGVBbmltYXRpb25zKHRhcmdldCwgdmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVkUHJvcHMgPSB0aGlzLl9wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gW107XG4gICAgICAgIGNvbnN0IHJ1bm5pbmcgPSB0YXJnZXQuJGFuaW1hdGlvbnMgfHwgKHRhcmdldC4kYW5pbWF0aW9ucyA9IHt9KTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSBPYmplY3Qua2V5cyh2YWx1ZXMpO1xuICAgICAgICBjb25zdCBkYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gcHJvcHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgICAgICAgaWYgKHByb3AuY2hhckF0KDApID09PSAnJCcpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb3B0aW9ucycpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25zLnB1c2goLi4udGhpcy5fYW5pbWF0ZU9wdGlvbnModGFyZ2V0LCB2YWx1ZXMpKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW3Byb3BdO1xuICAgICAgICAgICAgbGV0IGFuaW1hdGlvbiA9IHJ1bm5pbmdbcHJvcF07XG4gICAgICAgICAgICBjb25zdCBjZmcgPSBhbmltYXRlZFByb3BzLmdldChwcm9wKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2ZnICYmIGFuaW1hdGlvbi5hY3RpdmUoKSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24udXBkYXRlKGNmZywgdmFsdWUsIGRhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjZmcgfHwgIWNmZy5kdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcnVubmluZ1twcm9wXSA9IGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oY2ZnLCB0YXJnZXQsIHByb3AsIHZhbHVlKTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnMucHVzaChhbmltYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiB1cGRhdGUodGFyZ2V0LCB2YWx1ZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3BlcnRpZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IHRoaXMuX2NyZWF0ZUFuaW1hdGlvbnModGFyZ2V0LCB2YWx1ZXMpO1xuICAgICAgICBpZiAoYW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yLmFkZCh0aGlzLl9jaGFydCwgYW5pbWF0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGF3YWl0QWxsKGFuaW1hdGlvbnMsIHByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBydW5uaW5nID0gW107XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgY29uc3QgYW5pbSA9IGFuaW1hdGlvbnNba2V5c1tpXV07XG4gICAgICAgIGlmIChhbmltICYmIGFuaW0uYWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHJ1bm5pbmcucHVzaChhbmltLndhaXQoKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHJ1bm5pbmcpO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhcmdldE9wdGlvbnModGFyZ2V0LCBuZXdPcHRpb25zKSB7XG4gICAgaWYgKCFuZXdPcHRpb25zKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG9wdGlvbnMgPSB0YXJnZXQub3B0aW9ucztcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChvcHRpb25zLiRzaGFyZWQpIHtcbiAgICAgICAgdGFyZ2V0Lm9wdGlvbnMgPSBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgJHNoYXJlZDogZmFsc2UsXG4gICAgICAgICAgICAkYW5pbWF0aW9uczoge31cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5mdW5jdGlvbiBzY2FsZUNsaXAoc2NhbGUsIGFsbG93ZWRPdmVyZmxvdykge1xuICAgIGNvbnN0IG9wdHMgPSBzY2FsZSAmJiBzY2FsZS5vcHRpb25zIHx8IHt9O1xuICAgIGNvbnN0IHJldmVyc2UgPSBvcHRzLnJldmVyc2U7XG4gICAgY29uc3QgbWluID0gb3B0cy5taW4gPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgY29uc3QgbWF4ID0gb3B0cy5tYXggPT09IHVuZGVmaW5lZCA/IGFsbG93ZWRPdmVyZmxvdyA6IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQ6IHJldmVyc2UgPyBtYXggOiBtaW4sXG4gICAgICAgIGVuZDogcmV2ZXJzZSA/IG1pbiA6IG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xpcCh4U2NhbGUsIHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KSB7XG4gICAgaWYgKGFsbG93ZWRPdmVyZmxvdyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB4ID0gc2NhbGVDbGlwKHhTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICBjb25zdCB5ID0gc2NhbGVDbGlwKHlTY2FsZSwgYWxsb3dlZE92ZXJmbG93KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHkuZW5kLFxuICAgICAgICByaWdodDogeC5lbmQsXG4gICAgICAgIGJvdHRvbTogeS5zdGFydCxcbiAgICAgICAgbGVmdDogeC5zdGFydFxuICAgIH07XG59XG5mdW5jdGlvbiB0b0NsaXAodmFsdWUpIHtcbiAgICBsZXQgdCwgciwgYiwgbDtcbiAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHQgPSB2YWx1ZS50b3A7XG4gICAgICAgIHIgPSB2YWx1ZS5yaWdodDtcbiAgICAgICAgYiA9IHZhbHVlLmJvdHRvbTtcbiAgICAgICAgbCA9IHZhbHVlLmxlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdCA9IHIgPSBiID0gbCA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IHQsXG4gICAgICAgIHJpZ2h0OiByLFxuICAgICAgICBib3R0b206IGIsXG4gICAgICAgIGxlZnQ6IGwsXG4gICAgICAgIGRpc2FibGVkOiB2YWx1ZSA9PT0gZmFsc2VcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIGZpbHRlclZpc2libGUpIHtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgY29uc3QgbWV0YXNldHMgPSBjaGFydC5fZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpO1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGtleXMucHVzaChtZXRhc2V0c1tpXS5pbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gYXBwbHlTdGFjayhzdGFjaywgdmFsdWUsIGRzSW5kZXgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGtleXMgPSBzdGFjay5rZXlzO1xuICAgIGNvbnN0IHNpbmdsZU1vZGUgPSBvcHRpb25zLm1vZGUgPT09ICdzaW5nbGUnO1xuICAgIGxldCBpLCBpbGVuLCBkYXRhc2V0SW5kZXgsIG90aGVyVmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBkYXRhc2V0SW5kZXggPSAra2V5c1tpXTtcbiAgICAgICAgaWYgKGRhdGFzZXRJbmRleCA9PT0gZHNJbmRleCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWxsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBvdGhlclZhbHVlID0gc3RhY2sudmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChpc051bWJlckZpbml0ZShvdGhlclZhbHVlKSAmJiAoc2luZ2xlTW9kZSB8fCB2YWx1ZSA9PT0gMCB8fCBzaWduKHZhbHVlKSA9PT0gc2lnbihvdGhlclZhbHVlKSkpIHtcbiAgICAgICAgICAgIHZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29udmVydE9iamVjdERhdGFUb0FycmF5KGRhdGEpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgY29uc3QgYWRhdGEgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgIGxldCBpLCBpbGVuLCBrZXk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBhZGF0YVtpXSA9IHtcbiAgICAgICAgICAgIHg6IGtleSxcbiAgICAgICAgICAgIHk6IGRhdGFba2V5XVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gYWRhdGE7XG59XG5mdW5jdGlvbiBpc1N0YWNrZWQoc2NhbGUsIG1ldGEpIHtcbiAgICBjb25zdCBzdGFja2VkID0gc2NhbGUgJiYgc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgIHJldHVybiBzdGFja2VkIHx8IHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBnZXRTdGFja0tleShpbmRleFNjYWxlLCB2YWx1ZVNjYWxlLCBtZXRhKSB7XG4gICAgcmV0dXJuIGAke2luZGV4U2NhbGUuaWR9LiR7dmFsdWVTY2FsZS5pZH0uJHttZXRhLnN0YWNrIHx8IG1ldGEudHlwZX1gO1xufVxuZnVuY3Rpb24gZ2V0VXNlckJvdW5kcyhzY2FsZSkge1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBzY2FsZS5nZXRVc2VyQm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWluOiBtaW5EZWZpbmVkID8gbWluIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLFxuICAgICAgICBtYXg6IG1heERlZmluZWQgPyBtYXggOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFlcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdGFjayhzdGFja3MsIHN0YWNrS2V5LCBpbmRleFZhbHVlKSB7XG4gICAgY29uc3Qgc3ViU3RhY2sgPSBzdGFja3Nbc3RhY2tLZXldIHx8IChzdGFja3Nbc3RhY2tLZXldID0ge30pO1xuICAgIHJldHVybiBzdWJTdGFja1tpbmRleFZhbHVlXSB8fCAoc3ViU3RhY2tbaW5kZXhWYWx1ZV0gPSB7fSk7XG59XG5mdW5jdGlvbiBnZXRMYXN0SW5kZXhJblN0YWNrKHN0YWNrLCB2U2NhbGUsIHBvc2l0aXZlLCB0eXBlKSB7XG4gICAgZm9yIChjb25zdCBtZXRhIG9mIHZTY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKS5yZXZlcnNlKCkpe1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0YWNrW21ldGEuaW5kZXhdO1xuICAgICAgICBpZiAocG9zaXRpdmUgJiYgdmFsdWUgPiAwIHx8ICFwb3NpdGl2ZSAmJiB2YWx1ZSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBtZXRhLmluZGV4O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gdXBkYXRlU3RhY2tzKGNvbnRyb2xsZXIsIHBhcnNlZCkge1xuICAgIGNvbnN0IHsgY2hhcnQgLCBfY2FjaGVkTWV0YTogbWV0YSAgfSA9IGNvbnRyb2xsZXI7XG4gICAgY29uc3Qgc3RhY2tzID0gY2hhcnQuX3N0YWNrcyB8fCAoY2hhcnQuX3N0YWNrcyA9IHt9KTtcbiAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAsIGluZGV4OiBkYXRhc2V0SW5kZXggIH0gPSBtZXRhO1xuICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgY29uc3QgdkF4aXMgPSB2U2NhbGUuYXhpcztcbiAgICBjb25zdCBrZXkgPSBnZXRTdGFja0tleShpU2NhbGUsIHZTY2FsZSwgbWV0YSk7XG4gICAgY29uc3QgaWxlbiA9IHBhcnNlZC5sZW5ndGg7XG4gICAgbGV0IHN0YWNrO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCBpdGVtID0gcGFyc2VkW2ldO1xuICAgICAgICBjb25zdCB7IFtpQXhpc106IGluZGV4ICwgW3ZBeGlzXTogdmFsdWUgIH0gPSBpdGVtO1xuICAgICAgICBjb25zdCBpdGVtU3RhY2tzID0gaXRlbS5fc3RhY2tzIHx8IChpdGVtLl9zdGFja3MgPSB7fSk7XG4gICAgICAgIHN0YWNrID0gaXRlbVN0YWNrc1t2QXhpc10gPSBnZXRPckNyZWF0ZVN0YWNrKHN0YWNrcywga2V5LCBpbmRleCk7XG4gICAgICAgIHN0YWNrW2RhdGFzZXRJbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgc3RhY2suX3RvcCA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgdHJ1ZSwgbWV0YS50eXBlKTtcbiAgICAgICAgc3RhY2suX2JvdHRvbSA9IGdldExhc3RJbmRleEluU3RhY2soc3RhY2ssIHZTY2FsZSwgZmFsc2UsIG1ldGEudHlwZSk7XG4gICAgICAgIGNvbnN0IHZpc3VhbFZhbHVlcyA9IHN0YWNrLl92aXN1YWxWYWx1ZXMgfHwgKHN0YWNrLl92aXN1YWxWYWx1ZXMgPSB7fSk7XG4gICAgICAgIHZpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdmFsdWU7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCBheGlzKSB7XG4gICAgY29uc3Qgc2NhbGVzID0gY2hhcnQuc2NhbGVzO1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzY2FsZXMpLmZpbHRlcigoa2V5KT0+c2NhbGVzW2tleV0uYXhpcyA9PT0gYXhpcykuc2hpZnQoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFzZXRDb250ZXh0KHBhcmVudCwgaW5kZXgpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YXNldDogdW5kZWZpbmVkLFxuICAgICAgICBkYXRhc2V0SW5kZXg6IGluZGV4LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YXNldCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZURhdGFDb250ZXh0KHBhcmVudCwgaW5kZXgsIGVsZW1lbnQpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgZGF0YUluZGV4OiBpbmRleCxcbiAgICAgICAgcGFyc2VkOiB1bmRlZmluZWQsXG4gICAgICAgIHJhdzogdW5kZWZpbmVkLFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBpbmRleCxcbiAgICAgICAgbW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICB0eXBlOiAnZGF0YSdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3RhY2tzKG1ldGEsIGl0ZW1zKSB7XG4gICAgY29uc3QgZGF0YXNldEluZGV4ID0gbWV0YS5jb250cm9sbGVyLmluZGV4O1xuICAgIGNvbnN0IGF4aXMgPSBtZXRhLnZTY2FsZSAmJiBtZXRhLnZTY2FsZS5heGlzO1xuICAgIGlmICghYXhpcykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGl0ZW1zID0gaXRlbXMgfHwgbWV0YS5fcGFyc2VkO1xuICAgIGZvciAoY29uc3QgcGFyc2VkIG9mIGl0ZW1zKXtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gcGFyc2VkLl9zdGFja3M7XG4gICAgICAgIGlmICghc3RhY2tzIHx8IHN0YWNrc1theGlzXSA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrc1theGlzXVtkYXRhc2V0SW5kZXhdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgc3RhY2tzW2F4aXNdW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGlmIChzdGFja3NbYXhpc10uX3Zpc3VhbFZhbHVlcyAhPT0gdW5kZWZpbmVkICYmIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVsZXRlIHN0YWNrc1theGlzXS5fdmlzdWFsVmFsdWVzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBpc0RpcmVjdFVwZGF0ZU1vZGUgPSAobW9kZSk9Pm1vZGUgPT09ICdyZXNldCcgfHwgbW9kZSA9PT0gJ25vbmUnO1xuY29uc3QgY2xvbmVJZk5vdFNoYXJlZCA9IChjYWNoZWQsIHNoYXJlZCk9PnNoYXJlZCA/IGNhY2hlZCA6IE9iamVjdC5hc3NpZ24oe30sIGNhY2hlZCk7XG5jb25zdCBjcmVhdGVTdGFjayA9IChjYW5TdGFjaywgbWV0YSwgY2hhcnQpPT5jYW5TdGFjayAmJiAhbWV0YS5oaWRkZW4gJiYgbWV0YS5fc3RhY2tlZCAmJiB7XG4gICAgICAgIGtleXM6IGdldFNvcnRlZERhdGFzZXRJbmRpY2VzKGNoYXJ0LCB0cnVlKSxcbiAgICAgICAgdmFsdWVzOiBudWxsXG4gICAgfTtcbmNsYXNzIERhdGFzZXRDb250cm9sbGVyIHtcbiBzdGF0aWMgZGVmYXVsdHMgPSB7fTtcbiBzdGF0aWMgZGF0YXNldEVsZW1lbnRUeXBlID0gbnVsbDtcbiBzdGF0aWMgZGF0YUVsZW1lbnRUeXBlID0gbnVsbDtcbiBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNoYXJ0O1xuICAgICAgICB0aGlzLl9jdHggPSBjaGFydC5jdHg7XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlZE1ldGEgPSB0aGlzLmdldE1ldGEoKTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHRoaXMuX2NhY2hlZE1ldGEudHlwZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcGFyc2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9vYmplY3REYXRhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaGFyZWRPcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N5bmNMaXN0ID0gW107XG4gICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhc2V0RWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuZGF0YUVsZW1lbnRUeXBlID0gbmV3LnRhcmdldC5kYXRhRWxlbWVudFR5cGU7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICBpbml0aWFsaXplKCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5saW5rU2NhbGVzKCk7XG4gICAgICAgIG1ldGEuX3N0YWNrZWQgPSBpc1N0YWNrZWQobWV0YS52U2NhbGUsIG1ldGEpO1xuICAgICAgICB0aGlzLmFkZEVsZW1lbnRzKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlsbCAmJiAhdGhpcy5jaGFydC5pc1BsdWdpbkVuYWJsZWQoJ2ZpbGxlcicpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byB1c2UgdGhlICdmaWxsJyBvcHRpb24gd2l0aG91dCB0aGUgJ0ZpbGxlcicgcGx1Z2luIGVuYWJsZWQuIFBsZWFzZSBpbXBvcnQgYW5kIHJlZ2lzdGVyIHRoZSAnRmlsbGVyJyBwbHVnaW4gYW5kIG1ha2Ugc3VyZSBpdCBpcyBub3QgZGlzYWJsZWQgaW4gdGhlIG9wdGlvbnNcIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlSW5kZXgoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ICE9PSBkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKHRoaXMuX2NhY2hlZE1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5kZXggPSBkYXRhc2V0SW5kZXg7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgY2hvb3NlSWQgPSAoYXhpcywgeCwgeSwgcik9PmF4aXMgPT09ICd4JyA/IHggOiBheGlzID09PSAncicgPyByIDogeTtcbiAgICAgICAgY29uc3QgeGlkID0gbWV0YS54QXhpc0lEID0gdmFsdWVPckRlZmF1bHQoZGF0YXNldC54QXhpc0lELCBnZXRGaXJzdFNjYWxlSWQoY2hhcnQsICd4JykpO1xuICAgICAgICBjb25zdCB5aWQgPSBtZXRhLnlBeGlzSUQgPSB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnlBeGlzSUQsIGdldEZpcnN0U2NhbGVJZChjaGFydCwgJ3knKSk7XG4gICAgICAgIGNvbnN0IHJpZCA9IG1ldGEuckF4aXNJRCA9IHZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuckF4aXNJRCwgZ2V0Rmlyc3RTY2FsZUlkKGNoYXJ0LCAncicpKTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gbWV0YS5pbmRleEF4aXM7XG4gICAgICAgIGNvbnN0IGlpZCA9IG1ldGEuaUF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeGlkLCB5aWQsIHJpZCk7XG4gICAgICAgIGNvbnN0IHZpZCA9IG1ldGEudkF4aXNJRCA9IGNob29zZUlkKGluZGV4QXhpcywgeWlkLCB4aWQsIHJpZCk7XG4gICAgICAgIG1ldGEueFNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHhpZCk7XG4gICAgICAgIG1ldGEueVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHlpZCk7XG4gICAgICAgIG1ldGEuclNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHJpZCk7XG4gICAgICAgIG1ldGEuaVNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKGlpZCk7XG4gICAgICAgIG1ldGEudlNjYWxlID0gdGhpcy5nZXRTY2FsZUZvcklkKHZpZCk7XG4gICAgfVxuICAgIGdldERhdGFzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbdGhpcy5pbmRleF07XG4gICAgfVxuICAgIGdldE1ldGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRoaXMuaW5kZXgpO1xuICAgIH1cbiBnZXRTY2FsZUZvcklkKHNjYWxlSUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuICAgIH1cbiBfZ2V0T3RoZXJTY2FsZShzY2FsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgcmV0dXJuIHNjYWxlID09PSBtZXRhLmlTY2FsZSA/IG1ldGEudlNjYWxlIDogbWV0YS5pU2NhbGU7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl91cGRhdGUoJ3Jlc2V0Jyk7XG4gICAgfVxuIF9kZXN0cm95KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgaWYgKHRoaXMuX2RhdGEpIHtcbiAgICAgICAgICAgIHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1ldGEuX3N0YWNrZWQpIHtcbiAgICAgICAgICAgIGNsZWFyU3RhY2tzKG1ldGEpO1xuICAgICAgICB9XG4gICAgfVxuIF9kYXRhQ2hlY2soKSB7XG4gICAgICAgIGNvbnN0IGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuICAgICAgICBjb25zdCBfZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGNvbnZlcnRPYmplY3REYXRhVG9BcnJheShkYXRhKTtcbiAgICAgICAgfSBlbHNlIGlmIChfZGF0YSAhPT0gZGF0YSkge1xuICAgICAgICAgICAgaWYgKF9kYXRhKSB7XG4gICAgICAgICAgICAgICAgdW5saXN0ZW5BcnJheUV2ZW50cyhfZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YSAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuQXJyYXlFdmVudHMoZGF0YSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICB0aGlzLl9kYXRhQ2hlY2soKTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFzZXQgPSBuZXcgdGhpcy5kYXRhc2V0RWxlbWVudFR5cGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBidWlsZE9yVXBkYXRlRWxlbWVudHMocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuICAgICAgICBsZXQgc3RhY2tDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2RhdGFDaGVjaygpO1xuICAgICAgICBjb25zdCBvbGRTdGFja2VkID0gbWV0YS5fc3RhY2tlZDtcbiAgICAgICAgbWV0YS5fc3RhY2tlZCA9IGlzU3RhY2tlZChtZXRhLnZTY2FsZSwgbWV0YSk7XG4gICAgICAgIGlmIChtZXRhLnN0YWNrICE9PSBkYXRhc2V0LnN0YWNrKSB7XG4gICAgICAgICAgICBzdGFja0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSk7XG4gICAgICAgICAgICBtZXRhLnN0YWNrID0gZGF0YXNldC5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXN5bmNFbGVtZW50cyhyZXNldE5ld0VsZW1lbnRzKTtcbiAgICAgICAgaWYgKHN0YWNrQ2hhbmdlZCB8fCBvbGRTdGFja2VkICE9PSBtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICB1cGRhdGVTdGFja3ModGhpcywgbWV0YS5fcGFyc2VkKTtcbiAgICAgICAgfVxuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY2hhcnQuY29uZmlnO1xuICAgICAgICBjb25zdCBzY29wZUtleXMgPSBjb25maWcuZGF0YXNldFNjb3BlS2V5cyh0aGlzLl90eXBlKTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzLCB0cnVlKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLl9wYXJzaW5nID0gdGhpcy5vcHRpb25zLnBhcnNpbmc7XG4gICAgICAgIHRoaXMuX2NhY2hlZERhdGFPcHRzID0ge307XG4gICAgfVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiBtZXRhICwgX2RhdGE6IGRhdGEgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIF9zdGFja2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgaUF4aXMgPSBpU2NhbGUuYXhpcztcbiAgICAgICAgbGV0IHNvcnRlZCA9IHN0YXJ0ID09PSAwICYmIGNvdW50ID09PSBkYXRhLmxlbmd0aCA/IHRydWUgOiBtZXRhLl9zb3J0ZWQ7XG4gICAgICAgIGxldCBwcmV2ID0gc3RhcnQgPiAwICYmIG1ldGEuX3BhcnNlZFtzdGFydCAtIDFdO1xuICAgICAgICBsZXQgaSwgY3VyLCBwYXJzZWQ7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgICAgIG1ldGEuX3NvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBwYXJzZWQgPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVtzdGFydF0pKSB7XG4gICAgICAgICAgICAgICAgcGFyc2VkID0gdGhpcy5wYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChkYXRhW3N0YXJ0XSkpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQgPSB0aGlzLnBhcnNlUHJpbWl0aXZlRGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXNOb3RJbk9yZGVyQ29tcGFyZWRUb1ByZXYgPSAoKT0+Y3VyW2lBeGlzXSA9PT0gbnVsbCB8fCBwcmV2ICYmIGN1cltpQXhpc10gPCBwcmV2W2lBeGlzXTtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgICAgIG1ldGEuX3BhcnNlZFtpICsgc3RhcnRdID0gY3VyID0gcGFyc2VkW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90SW5PcmRlckNvbXBhcmVkVG9QcmV2KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHByZXYgPSBjdXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS5fc29ydGVkID0gc29ydGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChfc3RhY2tlZCkge1xuICAgICAgICAgICAgdXBkYXRlU3RhY2tzKHRoaXMsIHBhcnNlZCk7XG4gICAgICAgIH1cbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICAgICAgY29uc3Qgc2luZ2xlU2NhbGUgPSBpU2NhbGUgPT09IHZTY2FsZTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4O1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICBbaUF4aXNdOiBzaW5nbGVTY2FsZSB8fCBpU2NhbGUucGFyc2UobGFiZWxzW2luZGV4XSwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIFt2QXhpc106IHZTY2FsZS5wYXJzZShkYXRhW2luZGV4XSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlQXJyYXlEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IHhTY2FsZSAsIHlTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgICAgIGxldCBpLCBpbGVuLCBpbmRleCwgaXRlbTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgICAgICBpdGVtID0gZGF0YVtpbmRleF07XG4gICAgICAgICAgICBwYXJzZWRbaV0gPSB7XG4gICAgICAgICAgICAgICAgeDogeFNjYWxlLnBhcnNlKGl0ZW1bMF0sIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UoaXRlbVsxXSwgaW5kZXgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCB7IHhBeGlzS2V5ID0neCcgLCB5QXhpc0tleSA9J3knICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgY29uc3QgcGFyc2VkID0gbmV3IEFycmF5KGNvdW50KTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpbmRleCA9IGkgKyBzdGFydDtcbiAgICAgICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgICAgIHBhcnNlZFtpXSA9IHtcbiAgICAgICAgICAgICAgICB4OiB4U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB4QXhpc0tleSksIGluZGV4KSxcbiAgICAgICAgICAgICAgICB5OiB5U2NhbGUucGFyc2UocmVzb2x2ZU9iamVjdEtleShpdGVtLCB5QXhpc0tleSksIGluZGV4KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRQYXJzZWQoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZE1ldGEuX3BhcnNlZFtpbmRleF07XG4gICAgfVxuIGdldERhdGFFbGVtZW50KGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgIH1cbiBhcHBseVN0YWNrKHNjYWxlLCBwYXJzZWQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJzZWRbc2NhbGUuYXhpc107XG4gICAgICAgIGNvbnN0IHN0YWNrID0ge1xuICAgICAgICAgICAga2V5czogZ2V0U29ydGVkRGF0YXNldEluZGljZXMoY2hhcnQsIHRydWUpLFxuICAgICAgICAgICAgdmFsdWVzOiBwYXJzZWQuX3N0YWNrc1tzY2FsZS5heGlzXS5fdmlzdWFsVmFsdWVzXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBhcHBseVN0YWNrKHN0YWNrLCB2YWx1ZSwgbWV0YS5pbmRleCwge1xuICAgICAgICAgICAgbW9kZVxuICAgICAgICB9KTtcbiAgICB9XG4gdXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjaykge1xuICAgICAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHBhcnNlZFtzY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkVmFsdWUgPT09IG51bGwgPyBOYU4gOiBwYXJzZWRWYWx1ZTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gc3RhY2sgJiYgcGFyc2VkLl9zdGFja3Nbc2NhbGUuYXhpc107XG4gICAgICAgIGlmIChzdGFjayAmJiB2YWx1ZXMpIHtcbiAgICAgICAgICAgIHN0YWNrLnZhbHVlcyA9IHZhbHVlcztcbiAgICAgICAgICAgIHZhbHVlID0gYXBwbHlTdGFjayhzdGFjaywgcGFyc2VkVmFsdWUsIHRoaXMuX2NhY2hlZE1ldGEuaW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgdmFsdWUpO1xuICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIHZhbHVlKTtcbiAgICB9XG4gZ2V0TWluTWF4KHNjYWxlLCBjYW5TdGFjaykge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgX3BhcnNlZCA9IG1ldGEuX3BhcnNlZDtcbiAgICAgICAgY29uc3Qgc29ydGVkID0gbWV0YS5fc29ydGVkICYmIHNjYWxlID09PSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgaWxlbiA9IF9wYXJzZWQubGVuZ3RoO1xuICAgICAgICBjb25zdCBvdGhlclNjYWxlID0gdGhpcy5fZ2V0T3RoZXJTY2FsZShzY2FsZSk7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gY3JlYXRlU3RhY2soY2FuU3RhY2ssIG1ldGEsIHRoaXMuY2hhcnQpO1xuICAgICAgICBjb25zdCByYW5nZSA9IHtcbiAgICAgICAgICAgIG1pbjogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgbWF4OiBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBtaW46IG90aGVyTWluICwgbWF4OiBvdGhlck1heCAgfSA9IGdldFVzZXJCb3VuZHMob3RoZXJTY2FsZSk7XG4gICAgICAgIGxldCBpLCBwYXJzZWQ7XG4gICAgICAgIGZ1bmN0aW9uIF9za2lwKCkge1xuICAgICAgICAgICAgcGFyc2VkID0gX3BhcnNlZFtpXTtcbiAgICAgICAgICAgIGNvbnN0IG90aGVyVmFsdWUgPSBwYXJzZWRbb3RoZXJTY2FsZS5heGlzXTtcbiAgICAgICAgICAgIHJldHVybiAhaXNOdW1iZXJGaW5pdGUocGFyc2VkW3NjYWxlLmF4aXNdKSB8fCBvdGhlck1pbiA+IG90aGVyVmFsdWUgfHwgb3RoZXJNYXggPCBvdGhlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAoX3NraXAoKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKTtcbiAgICAgICAgICAgIGlmIChzb3J0ZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc29ydGVkKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGlsZW4gLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICAgICAgaWYgKF9za2lwKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2VGcm9tUGFyc2VkKHJhbmdlLCBzY2FsZSwgcGFyc2VkLCBzdGFjayk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJhbmdlO1xuICAgIH1cbiAgICBnZXRBbGxQYXJzZWRWYWx1ZXMoc2NhbGUpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5fY2FjaGVkTWV0YS5fcGFyc2VkO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBwYXJzZWQubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VkW2ldW3NjYWxlLmF4aXNdO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiBnZXRMYWJlbEFuZFZhbHVlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBpU2NhbGUgPSBtZXRhLmlTY2FsZTtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gbWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBpU2NhbGUgPyAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pIDogJycsXG4gICAgICAgICAgICB2YWx1ZTogdlNjYWxlID8gJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKSA6ICcnXG4gICAgICAgIH07XG4gICAgfVxuIF91cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGUobW9kZSB8fCAnZGVmYXVsdCcpO1xuICAgICAgICBtZXRhLl9jbGlwID0gdG9DbGlwKHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5jbGlwLCBkZWZhdWx0Q2xpcChtZXRhLnhTY2FsZSwgbWV0YS55U2NhbGUsIHRoaXMuZ2V0TWF4T3ZlcmZsb3coKSkpKTtcbiAgICB9XG4gdXBkYXRlKG1vZGUpIHt9XG4gICAgZHJhdygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgYXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gW107XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5fZHJhd1N0YXJ0IHx8IDA7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gdGhpcy5fZHJhd0NvdW50IHx8IGVsZW1lbnRzLmxlbmd0aCAtIHN0YXJ0O1xuICAgICAgICBjb25zdCBkcmF3QWN0aXZlRWxlbWVudHNPblRvcCA9IHRoaXMub3B0aW9ucy5kcmF3QWN0aXZlRWxlbWVudHNPblRvcDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChtZXRhLmRhdGFzZXQpIHtcbiAgICAgICAgICAgIG1ldGEuZGF0YXNldC5kcmF3KGN0eCwgYXJlYSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgc3RhcnQgKyBjb3VudDsgKytpKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmhpZGRlbikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuYWN0aXZlICYmIGRyYXdBY3RpdmVFbGVtZW50c09uVG9wKSB7XG4gICAgICAgICAgICAgICAgYWN0aXZlLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGFjdGl2ZS5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBhY3RpdmVbaV0uZHJhdyhjdHgsIGFyZWEpO1xuICAgICAgICB9XG4gICAgfVxuIGdldFN0eWxlKGluZGV4LCBhY3RpdmUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2RlZmF1bHQnO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQgPyB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSkgOiB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaW5kZXggfHwgMCwgbW9kZSk7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgbW9kZSkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5nZXREYXRhc2V0KCk7XG4gICAgICAgIGxldCBjb250ZXh0O1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRoaXMuX2NhY2hlZE1ldGEuZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dCA9IGVsZW1lbnQuJGNvbnRleHQgfHwgKGVsZW1lbnQuJGNvbnRleHQgPSBjcmVhdGVEYXRhQ29udGV4dCh0aGlzLmdldENvbnRleHQoKSwgaW5kZXgsIGVsZW1lbnQpKTtcbiAgICAgICAgICAgIGNvbnRleHQucGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICAgICAgY29udGV4dC5yYXcgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YUluZGV4ID0gaW5kZXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb250ZXh0ID0gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZURhdGFzZXRDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLmluZGV4KSk7XG4gICAgICAgICAgICBjb250ZXh0LmRhdGFzZXQgPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29udGV4dC5pbmRleCA9IGNvbnRleHQuZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LmFjdGl2ZSA9ICEhYWN0aXZlO1xuICAgICAgICBjb250ZXh0Lm1vZGUgPSBtb2RlO1xuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG4gcmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhc2V0RWxlbWVudFR5cGUuaWQsIG1vZGUpO1xuICAgIH1cbiByZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlRWxlbWVudE9wdGlvbnModGhpcy5kYXRhRWxlbWVudFR5cGUuaWQsIG1vZGUsIGluZGV4KTtcbiAgICB9XG4gX3Jlc29sdmVFbGVtZW50T3B0aW9ucyhlbGVtZW50VHlwZSwgbW9kZSA9ICdkZWZhdWx0JywgaW5kZXgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gbW9kZSA9PT0gJ2FjdGl2ZSc7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gZWxlbWVudFR5cGUgKyAnLScgKyBtb2RlO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZVtjYWNoZUtleV07XG4gICAgICAgIGNvbnN0IHNoYXJpbmcgPSB0aGlzLmVuYWJsZU9wdGlvblNoYXJpbmcgJiYgZGVmaW5lZChpbmRleCk7XG4gICAgICAgIGlmIChjYWNoZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjbG9uZUlmTm90U2hhcmVkKGNhY2hlZCwgc2hhcmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29uZmlnID0gdGhpcy5jaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0RWxlbWVudFNjb3BlS2V5cyh0aGlzLl90eXBlLCBlbGVtZW50VHlwZSk7XG4gICAgICAgIGNvbnN0IHByZWZpeGVzID0gYWN0aXZlID8gW1xuICAgICAgICAgICAgYCR7ZWxlbWVudFR5cGV9SG92ZXJgLFxuICAgICAgICAgICAgJ2hvdmVyJyxcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXSA6IFtcbiAgICAgICAgICAgIGVsZW1lbnRUeXBlLFxuICAgICAgICAgICAgJydcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyhkZWZhdWx0cy5lbGVtZW50c1tlbGVtZW50VHlwZV0pO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gKCk9PnRoaXMuZ2V0Q29udGV4dChpbmRleCwgYWN0aXZlLCBtb2RlKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gY29uZmlnLnJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMpO1xuICAgICAgICBpZiAodmFsdWVzLiRzaGFyZWQpIHtcbiAgICAgICAgICAgIHZhbHVlcy4kc2hhcmVkID0gc2hhcmluZztcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoY2xvbmVJZk5vdFNoYXJlZCh2YWx1ZXMsIHNoYXJpbmcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiBfcmVzb2x2ZUFuaW1hdGlvbnMoaW5kZXgsIHRyYW5zaXRpb24sIGFjdGl2ZSkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fY2FjaGVkRGF0YU9wdHM7XG4gICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYGFuaW1hdGlvbi0ke3RyYW5zaXRpb259YDtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gY2FjaGVbY2FjaGVLZXldO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGxldCBvcHRpb25zO1xuICAgICAgICBpZiAoY2hhcnQub3B0aW9ucy5hbmltYXRpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNoYXJ0LmNvbmZpZztcbiAgICAgICAgICAgIGNvbnN0IHNjb3BlS2V5cyA9IGNvbmZpZy5kYXRhc2V0QW5pbWF0aW9uU2NvcGVLZXlzKHRoaXMuX3R5cGUsIHRyYW5zaXRpb24pO1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVzID0gY29uZmlnLmdldE9wdGlvblNjb3Blcyh0aGlzLmdldERhdGFzZXQoKSwgc2NvcGVLZXlzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBjb25maWcuY3JlYXRlUmVzb2x2ZXIoc2NvcGVzLCB0aGlzLmdldENvbnRleHQoaW5kZXgsIGFjdGl2ZSwgdHJhbnNpdGlvbikpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBuZXcgQW5pbWF0aW9ucyhjaGFydCwgb3B0aW9ucyAmJiBvcHRpb25zLmFuaW1hdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IE9iamVjdC5mcmVlemUoYW5pbWF0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuIGdldFNoYXJlZE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMuJHNoYXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFyZWRPcHRpb25zIHx8ICh0aGlzLl9zaGFyZWRPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucykpO1xuICAgIH1cbiBpbmNsdWRlT3B0aW9ucyhtb2RlLCBzaGFyZWRPcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAhc2hhcmVkT3B0aW9ucyB8fCBpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkgfHwgdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgIH1cbiBfZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSkge1xuICAgICAgICBjb25zdCBmaXJzdE9wdHMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBwcmV2aW91c2x5U2hhcmVkT3B0aW9ucyA9IHRoaXMuX3NoYXJlZE9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNoYXJlZE9wdGlvbnMgPSB0aGlzLmdldFNoYXJlZE9wdGlvbnMoZmlyc3RPcHRzKTtcbiAgICAgICAgY29uc3QgaW5jbHVkZU9wdGlvbnMgPSB0aGlzLmluY2x1ZGVPcHRpb25zKG1vZGUsIHNoYXJlZE9wdGlvbnMpIHx8IHNoYXJlZE9wdGlvbnMgIT09IHByZXZpb3VzbHlTaGFyZWRPcHRpb25zO1xuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNoYXJlZE9wdGlvbnMsXG4gICAgICAgICAgICBpbmNsdWRlT3B0aW9uc1xuICAgICAgICB9O1xuICAgIH1cbiB1cGRhdGVFbGVtZW50KGVsZW1lbnQsIGluZGV4LCBwcm9wZXJ0aWVzLCBtb2RlKSB7XG4gICAgICAgIGlmIChpc0RpcmVjdFVwZGF0ZU1vZGUobW9kZSkpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudCwgcHJvcGVydGllcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyhpbmRleCwgbW9kZSkudXBkYXRlKGVsZW1lbnQsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgfVxuIHVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgbmV3T3B0aW9ucykge1xuICAgICAgICBpZiAoc2hhcmVkT3B0aW9ucyAmJiAhaXNEaXJlY3RVcGRhdGVNb2RlKG1vZGUpKSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpLnVwZGF0ZShzaGFyZWRPcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiBfc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsIG1vZGUsIGFjdGl2ZSkge1xuICAgICAgICBlbGVtZW50LmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMuZ2V0U3R5bGUoaW5kZXgsIGFjdGl2ZSk7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKGluZGV4LCBtb2RlLCBhY3RpdmUpLnVwZGF0ZShlbGVtZW50LCB7XG4gICAgICAgICAgICBvcHRpb25zOiAhYWN0aXZlICYmIHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhvcHRpb25zKSB8fCBvcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZW1vdmVIb3ZlclN0eWxlKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgaW5kZXgsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgfVxuICAgIHNldEhvdmVyU3R5bGUoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCkge1xuICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCBpbmRleCwgJ2FjdGl2ZScsIHRydWUpO1xuICAgIH1cbiBfcmVtb3ZlRGF0YXNldEhvdmVyU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9jYWNoZWRNZXRhLmRhdGFzZXQ7XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9zZXRTdHlsZShlbGVtZW50LCB1bmRlZmluZWQsICdhY3RpdmUnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3NldERhdGFzZXRIb3ZlclN0eWxlKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhc2V0O1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fc2V0U3R5bGUoZWxlbWVudCwgdW5kZWZpbmVkLCAnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gX3Jlc3luY0VsZW1lbnRzKHJlc2V0TmV3RWxlbWVudHMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICBmb3IgKGNvbnN0IFttZXRob2QsIGFyZzEsIGFyZzJdIG9mIHRoaXMuX3N5bmNMaXN0KXtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXShhcmcxLCBhcmcyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zeW5jTGlzdCA9IFtdO1xuICAgICAgICBjb25zdCBudW1NZXRhID0gZWxlbWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5taW4obnVtRGF0YSwgbnVtTWV0YSk7XG4gICAgICAgIGlmIChjb3VudCkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZSgwLCBjb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bURhdGEgPiBudW1NZXRhKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRFbGVtZW50cyhudW1NZXRhLCBudW1EYXRhIC0gbnVtTWV0YSwgcmVzZXROZXdFbGVtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAobnVtRGF0YSA8IG51bU1ldGEpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUVsZW1lbnRzKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcbiAgICAgICAgfVxuICAgIH1cbiBfaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGNvdW50LCByZXNldE5ld0VsZW1lbnRzID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGNvbnN0IG1vdmUgPSAoYXJyKT0+e1xuICAgICAgICAgICAgYXJyLmxlbmd0aCArPSBjb3VudDtcbiAgICAgICAgICAgIGZvcihpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gZW5kOyBpLS0pe1xuICAgICAgICAgICAgICAgIGFycltpXSA9IGFycltpIC0gY291bnRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBtb3ZlKGRhdGEpO1xuICAgICAgICBmb3IoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpe1xuICAgICAgICAgICAgZGF0YVtpXSA9IG5ldyB0aGlzLmRhdGFFbGVtZW50VHlwZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICBtb3ZlKG1ldGEuX3BhcnNlZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYXJzZShzdGFydCwgY291bnQpO1xuICAgICAgICBpZiAocmVzZXROZXdFbGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhkYXRhLCBzdGFydCwgY291bnQsICdyZXNldCcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGVsZW1lbnQsIHN0YXJ0LCBjb3VudCwgbW9kZSkge31cbiBfcmVtb3ZlRWxlbWVudHMoc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBpZiAodGhpcy5fcGFyc2luZykge1xuICAgICAgICAgICAgY29uc3QgcmVtb3ZlZCA9IG1ldGEuX3BhcnNlZC5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcbiAgICAgICAgICAgIGlmIChtZXRhLl9zdGFja2VkKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJTdGFja3MobWV0YSwgcmVtb3ZlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbWV0YS5kYXRhLnNwbGljZShzdGFydCwgY291bnQpO1xuICAgIH1cbiBfc3luYyhhcmdzKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9zeW5jTGlzdC5wdXNoKGFyZ3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgW21ldGhvZCwgYXJnMSwgYXJnMl0gPSBhcmdzO1xuICAgICAgICAgICAgdGhpc1ttZXRob2RdKGFyZzEsIGFyZzIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcnQuX2RhdGFDaGFuZ2VzLnB1c2goW1xuICAgICAgICAgICAgdGhpcy5pbmRleCxcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQdXNoKCkge1xuICAgICAgICBjb25zdCBjb3VudCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19pbnNlcnRFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIGNvdW50LFxuICAgICAgICAgICAgY291bnRcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFQb3AoKSB7XG4gICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgJ19yZW1vdmVFbGVtZW50cycsXG4gICAgICAgICAgICB0aGlzLl9jYWNoZWRNZXRhLmRhdGEubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIF9vbkRhdGFTaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX3JlbW92ZUVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAxXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfb25EYXRhU3BsaWNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfcmVtb3ZlRWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGNvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdDb3VudCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgICAgICBpZiAobmV3Q291bnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N5bmMoW1xuICAgICAgICAgICAgICAgICdfaW5zZXJ0RWxlbWVudHMnLFxuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIG5ld0NvdW50XG4gICAgICAgICAgICBdKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfb25EYXRhVW5zaGlmdCgpIHtcbiAgICAgICAgdGhpcy5fc3luYyhbXG4gICAgICAgICAgICAnX2luc2VydEVsZW1lbnRzJyxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAgIF0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIHR5cGUpIHtcbiAgICBpZiAoIXNjYWxlLl9jYWNoZS4kYmFyKSB7XG4gICAgICAgIGNvbnN0IHZpc2libGVNZXRhcyA9IHNjYWxlLmdldE1hdGNoaW5nVmlzaWJsZU1ldGFzKHR5cGUpO1xuICAgICAgICBsZXQgdmFsdWVzID0gW107XG4gICAgICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSB2aXNpYmxlTWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQodmlzaWJsZU1ldGFzW2ldLmNvbnRyb2xsZXIuZ2V0QWxsUGFyc2VkVmFsdWVzKHNjYWxlKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUuX2NhY2hlLiRiYXIgPSBfYXJyYXlVbmlxdWUodmFsdWVzLnNvcnQoKGEsIGIpPT5hIC0gYikpO1xuICAgIH1cbiAgICByZXR1cm4gc2NhbGUuX2NhY2hlLiRiYXI7XG59XG4gZnVuY3Rpb24gY29tcHV0ZU1pblNhbXBsZVNpemUobWV0YSkge1xuICAgIGNvbnN0IHNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgY29uc3QgdmFsdWVzID0gZ2V0QWxsU2NhbGVWYWx1ZXMoc2NhbGUsIG1ldGEudHlwZSk7XG4gICAgbGV0IG1pbiA9IHNjYWxlLl9sZW5ndGg7XG4gICAgbGV0IGksIGlsZW4sIGN1cnIsIHByZXY7XG4gICAgY29uc3QgdXBkYXRlTWluQW5kUHJldiA9ICgpPT57XG4gICAgICAgIGlmIChjdXJyID09PSAzMjc2NyB8fCBjdXJyID09PSAtMzI3NjgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGVmaW5lZChwcmV2KSkge1xuICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBNYXRoLmFicyhjdXJyIC0gcHJldikgfHwgbWluKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY3VycjtcbiAgICB9O1xuICAgIGZvcihpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgICB1cGRhdGVNaW5BbmRQcmV2KCk7XG4gICAgfVxuICAgIHByZXYgPSB1bmRlZmluZWQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gc2NhbGUudGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VyciA9IHNjYWxlLmdldFBpeGVsRm9yVGljayhpKTtcbiAgICAgICAgdXBkYXRlTWluQW5kUHJldigpO1xuICAgIH1cbiAgICByZXR1cm4gbWluO1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMsIHN0YWNrQ291bnQpIHtcbiAgICBjb25zdCB0aGlja25lc3MgPSBvcHRpb25zLmJhclRoaWNrbmVzcztcbiAgICBsZXQgc2l6ZSwgcmF0aW87XG4gICAgaWYgKGlzTnVsbE9yVW5kZWYodGhpY2tuZXNzKSkge1xuICAgICAgICBzaXplID0gcnVsZXIubWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgICAgIHJhdGlvID0gb3B0aW9ucy5iYXJQZXJjZW50YWdlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSB0aGlja25lc3MgKiBzdGFja0NvdW50O1xuICAgICAgICByYXRpbyA9IDE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNodW5rOiBzaXplIC8gc3RhY2tDb3VudCxcbiAgICAgICAgcmF0aW8sXG4gICAgICAgIHN0YXJ0OiBydWxlci5waXhlbHNbaW5kZXhdIC0gc2l6ZSAvIDJcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KSB7XG4gICAgY29uc3QgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuICAgIGNvbnN0IGN1cnIgPSBwaXhlbHNbaW5kZXhdO1xuICAgIGxldCBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuICAgIGxldCBuZXh0ID0gaW5kZXggPCBwaXhlbHMubGVuZ3RoIC0gMSA/IHBpeGVsc1tpbmRleCArIDFdIDogbnVsbDtcbiAgICBjb25zdCBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG4gICAgaWYgKHByZXYgPT09IG51bGwpIHtcbiAgICAgICAgcHJldiA9IGN1cnIgLSAobmV4dCA9PT0gbnVsbCA/IHJ1bGVyLmVuZCAtIHJ1bGVyLnN0YXJ0IDogbmV4dCAtIGN1cnIpO1xuICAgIH1cbiAgICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgICAgICBuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuICAgIH1cbiAgICBjb25zdCBzdGFydCA9IGN1cnIgLSAoY3VyciAtIE1hdGgubWluKHByZXYsIG5leHQpKSAvIDIgKiBwZXJjZW50O1xuICAgIGNvbnN0IHNpemUgPSBNYXRoLmFicyhuZXh0IC0gcHJldikgLyAyICogcGVyY2VudDtcbiAgICByZXR1cm4ge1xuICAgICAgICBjaHVuazogc2l6ZSAvIHN0YWNrQ291bnQsXG4gICAgICAgIHJhdGlvOiBvcHRpb25zLmJhclBlcmNlbnRhZ2UsXG4gICAgICAgIHN0YXJ0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHBhcnNlRmxvYXRCYXIoZW50cnksIGl0ZW0sIHZTY2FsZSwgaSkge1xuICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSB2U2NhbGUucGFyc2UoZW50cnlbMF0sIGkpO1xuICAgIGNvbnN0IGVuZFZhbHVlID0gdlNjYWxlLnBhcnNlKGVudHJ5WzFdLCBpKTtcbiAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG4gICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgIGxldCBiYXJTdGFydCA9IG1pbjtcbiAgICBsZXQgYmFyRW5kID0gbWF4O1xuICAgIGlmIChNYXRoLmFicyhtaW4pID4gTWF0aC5hYnMobWF4KSkge1xuICAgICAgICBiYXJTdGFydCA9IG1heDtcbiAgICAgICAgYmFyRW5kID0gbWluO1xuICAgIH1cbiAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IGJhckVuZDtcbiAgICBpdGVtLl9jdXN0b20gPSB7XG4gICAgICAgIGJhclN0YXJ0LFxuICAgICAgICBiYXJFbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydFZhbHVlLFxuICAgICAgICBlbmQ6IGVuZFZhbHVlLFxuICAgICAgICBtaW4sXG4gICAgICAgIG1heFxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpIHtcbiAgICBpZiAoaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgcGFyc2VGbG9hdEJhcihlbnRyeSwgaXRlbSwgdlNjYWxlLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtW3ZTY2FsZS5heGlzXSA9IHZTY2FsZS5wYXJzZShlbnRyeSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuZnVuY3Rpb24gcGFyc2VBcnJheU9yUHJpbWl0aXZlKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IGlTY2FsZSA9IG1ldGEuaVNjYWxlO1xuICAgIGNvbnN0IHZTY2FsZSA9IG1ldGEudlNjYWxlO1xuICAgIGNvbnN0IGxhYmVscyA9IGlTY2FsZS5nZXRMYWJlbHMoKTtcbiAgICBjb25zdCBzaW5nbGVTY2FsZSA9IGlTY2FsZSA9PT0gdlNjYWxlO1xuICAgIGNvbnN0IHBhcnNlZCA9IFtdO1xuICAgIGxldCBpLCBpbGVuLCBpdGVtLCBlbnRyeTtcbiAgICBmb3IoaSA9IHN0YXJ0LCBpbGVuID0gc3RhcnQgKyBjb3VudDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGVudHJ5ID0gZGF0YVtpXTtcbiAgICAgICAgaXRlbSA9IHt9O1xuICAgICAgICBpdGVtW2lTY2FsZS5heGlzXSA9IHNpbmdsZVNjYWxlIHx8IGlTY2FsZS5wYXJzZShsYWJlbHNbaV0sIGkpO1xuICAgICAgICBwYXJzZWQucHVzaChwYXJzZVZhbHVlKGVudHJ5LCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cbmZ1bmN0aW9uIGlzRmxvYXRCYXIoY3VzdG9tKSB7XG4gICAgcmV0dXJuIGN1c3RvbSAmJiBjdXN0b20uYmFyU3RhcnQgIT09IHVuZGVmaW5lZCAmJiBjdXN0b20uYmFyRW5kICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkge1xuICAgIGlmIChzaXplICE9PSAwKSB7XG4gICAgICAgIHJldHVybiBzaWduKHNpemUpO1xuICAgIH1cbiAgICByZXR1cm4gKHZTY2FsZS5pc0hvcml6b250YWwoKSA/IDEgOiAtMSkgKiAodlNjYWxlLm1pbiA+PSBhY3R1YWxCYXNlID8gMSA6IC0xKTtcbn1cbmZ1bmN0aW9uIGJvcmRlclByb3BzKHByb3BlcnRpZXMpIHtcbiAgICBsZXQgcmV2ZXJzZSwgc3RhcnQsIGVuZCwgdG9wLCBib3R0b207XG4gICAgaWYgKHByb3BlcnRpZXMuaG9yaXpvbnRhbCkge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlID4gcHJvcGVydGllcy54O1xuICAgICAgICBzdGFydCA9ICdsZWZ0JztcbiAgICAgICAgZW5kID0gJ3JpZ2h0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXZlcnNlID0gcHJvcGVydGllcy5iYXNlIDwgcHJvcGVydGllcy55O1xuICAgICAgICBzdGFydCA9ICdib3R0b20nO1xuICAgICAgICBlbmQgPSAndG9wJztcbiAgICB9XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgdG9wID0gJ2VuZCc7XG4gICAgICAgIGJvdHRvbSA9ICdzdGFydCc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdG9wID0gJ3N0YXJ0JztcbiAgICAgICAgYm90dG9tID0gJ2VuZCc7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIHJldmVyc2UsXG4gICAgICAgIHRvcCxcbiAgICAgICAgYm90dG9tXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KSB7XG4gICAgbGV0IGVkZ2UgPSBvcHRpb25zLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgcmVzID0ge307XG4gICAgaWYgKCFlZGdlKSB7XG4gICAgICAgIHByb3BlcnRpZXMuYm9yZGVyU2tpcHBlZCA9IHJlcztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZWRnZSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSB7XG4gICAgICAgICAgICB0b3A6IHRydWUsXG4gICAgICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgICAgIGJvdHRvbTogdHJ1ZSxcbiAgICAgICAgICAgIGxlZnQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICwgcmV2ZXJzZSAsIHRvcCAsIGJvdHRvbSAgfSA9IGJvcmRlclByb3BzKHByb3BlcnRpZXMpO1xuICAgIGlmIChlZGdlID09PSAnbWlkZGxlJyAmJiBzdGFjaykge1xuICAgICAgICBwcm9wZXJ0aWVzLmVuYWJsZUJvcmRlclJhZGl1cyA9IHRydWU7XG4gICAgICAgIGlmICgoc3RhY2suX3RvcCB8fCAwKSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIGVkZ2UgPSB0b3A7XG4gICAgICAgIH0gZWxzZSBpZiAoKHN0YWNrLl9ib3R0b20gfHwgMCkgPT09IGluZGV4KSB7XG4gICAgICAgICAgICBlZGdlID0gYm90dG9tO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzW3BhcnNlRWRnZShib3R0b20sIHN0YXJ0LCBlbmQsIHJldmVyc2UpXSA9IHRydWU7XG4gICAgICAgICAgICBlZGdlID0gdG9wO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJlc1twYXJzZUVkZ2UoZWRnZSwgc3RhcnQsIGVuZCwgcmV2ZXJzZSldID0gdHJ1ZTtcbiAgICBwcm9wZXJ0aWVzLmJvcmRlclNraXBwZWQgPSByZXM7XG59XG5mdW5jdGlvbiBwYXJzZUVkZ2UoZWRnZSwgYSwgYiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgIGVkZ2UgPSBzd2FwKGVkZ2UsIGEsIGIpO1xuICAgICAgICBlZGdlID0gc3RhcnRFbmQoZWRnZSwgYiwgYSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZWRnZSA9IHN0YXJ0RW5kKGVkZ2UsIGEsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gZWRnZTtcbn1cbmZ1bmN0aW9uIHN3YXAob3JpZywgdjEsIHYyKSB7XG4gICAgcmV0dXJuIG9yaWcgPT09IHYxID8gdjIgOiBvcmlnID09PSB2MiA/IHYxIDogb3JpZztcbn1cbmZ1bmN0aW9uIHN0YXJ0RW5kKHYsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gdiA9PT0gJ3N0YXJ0JyA/IHN0YXJ0IDogdiA9PT0gJ2VuZCcgPyBlbmQgOiB2O1xufVxuZnVuY3Rpb24gc2V0SW5mbGF0ZUFtb3VudChwcm9wZXJ0aWVzLCB7IGluZmxhdGVBbW91bnQgIH0sIHJhdGlvKSB7XG4gICAgcHJvcGVydGllcy5pbmZsYXRlQW1vdW50ID0gaW5mbGF0ZUFtb3VudCA9PT0gJ2F1dG8nID8gcmF0aW8gPT09IDEgPyAwLjMzIDogMCA6IGluZmxhdGVBbW91bnQ7XG59XG5jbGFzcyBCYXJDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdiYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYmFyJyxcbiAgICAgICAgY2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG4gICAgICAgIGJhclBlcmNlbnRhZ2U6IDAuOSxcbiAgICAgICAgZ3JvdXBlZDogdHJ1ZSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICdiYXNlJyxcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgX2luZGV4Xzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF92YWx1ZV86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiBwYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUFycmF5T3JQcmltaXRpdmUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCB7IGlTY2FsZSAsIHZTY2FsZSAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IHsgeEF4aXNLZXkgPSd4JyAsIHlBeGlzS2V5ID0neScgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgICAgICBjb25zdCBpQXhpc0tleSA9IGlTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCB2QXhpc0tleSA9IHZTY2FsZS5heGlzID09PSAneCcgPyB4QXhpc0tleSA6IHlBeGlzS2V5O1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIGl0ZW0sIG9iajtcbiAgICAgICAgZm9yKGkgPSBzdGFydCwgaWxlbiA9IHN0YXJ0ICsgY291bnQ7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgb2JqID0gZGF0YVtpXTtcbiAgICAgICAgICAgIGl0ZW0gPSB7fTtcbiAgICAgICAgICAgIGl0ZW1baVNjYWxlLmF4aXNdID0gaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkob2JqLCBpQXhpc0tleSksIGkpO1xuICAgICAgICAgICAgcGFyc2VkLnB1c2gocGFyc2VWYWx1ZShyZXNvbHZlT2JqZWN0S2V5KG9iaiwgdkF4aXNLZXkpLCBpdGVtLCB2U2NhbGUsIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiB1cGRhdGVSYW5nZUZyb21QYXJzZWQocmFuZ2UsIHNjYWxlLCBwYXJzZWQsIHN0YWNrKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZVJhbmdlRnJvbVBhcnNlZChyYW5nZSwgc2NhbGUsIHBhcnNlZCwgc3RhY2spO1xuICAgICAgICBjb25zdCBjdXN0b20gPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgaWYgKGN1c3RvbSAmJiBzY2FsZSA9PT0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGUpIHtcbiAgICAgICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY3VzdG9tLm1pbik7XG4gICAgICAgICAgICByYW5nZS5tYXggPSBNYXRoLm1heChyYW5nZS5tYXgsIGN1c3RvbS5tYXgpO1xuICAgICAgICB9XG4gICAgfVxuIGdldE1heE92ZXJmbG93KCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGlzRmxvYXRCYXIoY3VzdG9tKSA/ICdbJyArIGN1c3RvbS5zdGFydCArICcsICcgKyBjdXN0b20uZW5kICsgJ10nIDogJycgKyB2U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWRbdlNjYWxlLmF4aXNdKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiAnJyArIGlTY2FsZS5nZXRMYWJlbEZvclZhbHVlKHBhcnNlZFtpU2NhbGUuYXhpc10pLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5zdGFjayA9IHRoaXMuZ2V0RGF0YXNldCgpLnN0YWNrO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhtZXRhLmRhdGEsIDAsIG1ldGEuZGF0YS5sZW5ndGgsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhiYXJzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgX2NhY2hlZE1ldGE6IHsgdlNjYWxlICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYmFzZSA9IHZTY2FsZS5nZXRCYXNlUGl4ZWwoKTtcbiAgICAgICAgY29uc3QgaG9yaXpvbnRhbCA9IHZTY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgcnVsZXIgPSB0aGlzLl9nZXRSdWxlcigpO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHZwaXhlbHMgPSByZXNldCB8fCBpc051bGxPclVuZGVmKHBhcnNlZFt2U2NhbGUuYXhpc10pID8ge1xuICAgICAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICAgICAgaGVhZDogYmFzZVxuICAgICAgICAgICAgfSA6IHRoaXMuX2NhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKGkpO1xuICAgICAgICAgICAgY29uc3QgaXBpeGVscyA9IHRoaXMuX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGksIHJ1bGVyKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gKHBhcnNlZC5fc3RhY2tzIHx8IHt9KVt2U2NhbGUuYXhpc107XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgYmFzZTogdnBpeGVscy5iYXNlLFxuICAgICAgICAgICAgICAgIGVuYWJsZUJvcmRlclJhZGl1czogIXN0YWNrIHx8IGlzRmxvYXRCYXIocGFyc2VkLl9jdXN0b20pIHx8IGluZGV4ID09PSBzdGFjay5fdG9wIHx8IGluZGV4ID09PSBzdGFjay5fYm90dG9tLFxuICAgICAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyB2cGl4ZWxzLmhlYWQgOiBpcGl4ZWxzLmNlbnRlcixcbiAgICAgICAgICAgICAgICB5OiBob3Jpem9udGFsID8gaXBpeGVscy5jZW50ZXIgOiB2cGl4ZWxzLmhlYWQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBob3Jpem9udGFsID8gaXBpeGVscy5zaXplIDogTWF0aC5hYnModnBpeGVscy5zaXplKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogaG9yaXpvbnRhbCA/IE1hdGguYWJzKHZwaXhlbHMuc2l6ZSkgOiBpcGl4ZWxzLnNpemVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBiYXJzW2ldLmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gcHJvcGVydGllcy5vcHRpb25zIHx8IGJhcnNbaV0ub3B0aW9ucztcbiAgICAgICAgICAgIHNldEJvcmRlclNraXBwZWQocHJvcGVydGllcywgb3B0aW9ucywgc3RhY2ssIGluZGV4KTtcbiAgICAgICAgICAgIHNldEluZmxhdGVBbW91bnQocHJvcGVydGllcywgb3B0aW9ucywgcnVsZXIucmF0aW8pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGJhcnNbaV0sIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRTdGFja3MobGFzdCwgZGF0YUluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSBpU2NhbGUuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXModGhpcy5fdHlwZSkuZmlsdGVyKChtZXRhKT0+bWV0YS5jb250cm9sbGVyLm9wdGlvbnMuZ3JvdXBlZCk7XG4gICAgICAgIGNvbnN0IHN0YWNrZWQgPSBpU2NhbGUub3B0aW9ucy5zdGFja2VkO1xuICAgICAgICBjb25zdCBzdGFja3MgPSBbXTtcbiAgICAgICAgY29uc3Qgc2tpcE51bGwgPSAobWV0YSk9PntcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IG1ldGEuY29udHJvbGxlci5nZXRQYXJzZWQoZGF0YUluZGV4KTtcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHBhcnNlZCAmJiBwYXJzZWRbbWV0YS52U2NhbGUuYXhpc107XG4gICAgICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZih2YWwpIHx8IGlzTmFOKHZhbCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChjb25zdCBtZXRhIG9mIG1ldGFzZXRzKXtcbiAgICAgICAgICAgIGlmIChkYXRhSW5kZXggIT09IHVuZGVmaW5lZCAmJiBza2lwTnVsbChtZXRhKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YWNrZWQgPT09IGZhbHNlIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSB8fCBzdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhY2tzLnB1c2gobWV0YS5zdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWV0YS5pbmRleCA9PT0gbGFzdCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc3RhY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgc3RhY2tzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhY2tzO1xuICAgIH1cbiBfZ2V0U3RhY2tDb3VudChpbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U3RhY2tzKHVuZGVmaW5lZCwgaW5kZXgpLmxlbmd0aDtcbiAgICB9XG4gX2dldFN0YWNrSW5kZXgoZGF0YXNldEluZGV4LCBuYW1lLCBkYXRhSW5kZXgpIHtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gdGhpcy5fZ2V0U3RhY2tzKGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBuYW1lICE9PSB1bmRlZmluZWQgPyBzdGFja3MuaW5kZXhPZihuYW1lKSA6IC0xO1xuICAgICAgICByZXR1cm4gaW5kZXggPT09IC0xID8gc3RhY2tzLmxlbmd0aCAtIDEgOiBpbmRleDtcbiAgICB9XG4gX2dldFJ1bGVyKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgaVNjYWxlID0gbWV0YS5pU2NhbGU7XG4gICAgICAgIGNvbnN0IHBpeGVscyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwaXhlbHMucHVzaChpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLmdldFBhcnNlZChpKVtpU2NhbGUuYXhpc10sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBiYXJUaGlja25lc3MgPSBvcHRzLmJhclRoaWNrbmVzcztcbiAgICAgICAgY29uc3QgbWluID0gYmFyVGhpY2tuZXNzIHx8IGNvbXB1dGVNaW5TYW1wbGVTaXplKG1ldGEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgcGl4ZWxzLFxuICAgICAgICAgICAgc3RhcnQ6IGlTY2FsZS5fc3RhcnRQaXhlbCxcbiAgICAgICAgICAgIGVuZDogaVNjYWxlLl9lbmRQaXhlbCxcbiAgICAgICAgICAgIHN0YWNrQ291bnQ6IHRoaXMuX2dldFN0YWNrQ291bnQoKSxcbiAgICAgICAgICAgIHNjYWxlOiBpU2NhbGUsXG4gICAgICAgICAgICBncm91cGVkOiBvcHRzLmdyb3VwZWQsXG4gICAgICAgICAgICByYXRpbzogYmFyVGhpY2tuZXNzID8gMSA6IG9wdHMuY2F0ZWdvcnlQZXJjZW50YWdlICogb3B0cy5iYXJQZXJjZW50YWdlXG4gICAgICAgIH07XG4gICAgfVxuIF9jYWxjdWxhdGVCYXJWYWx1ZVBpeGVscyhpbmRleCkge1xuICAgICAgICBjb25zdCB7IF9jYWNoZWRNZXRhOiB7IHZTY2FsZSAsIF9zdGFja2VkICwgaW5kZXg6IGRhdGFzZXRJbmRleCAgfSAsIG9wdGlvbnM6IHsgYmFzZTogYmFzZVZhbHVlICwgbWluQmFyTGVuZ3RoICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWN0dWFsQmFzZSA9IGJhc2VWYWx1ZSB8fCAwO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IGN1c3RvbSA9IHBhcnNlZC5fY3VzdG9tO1xuICAgICAgICBjb25zdCBmbG9hdGluZyA9IGlzRmxvYXRCYXIoY3VzdG9tKTtcbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VkW3ZTY2FsZS5heGlzXTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgbGV0IGxlbmd0aCA9IF9zdGFja2VkID8gdGhpcy5hcHBseVN0YWNrKHZTY2FsZSwgcGFyc2VkLCBfc3RhY2tlZCkgOiB2YWx1ZTtcbiAgICAgICAgbGV0IGhlYWQsIHNpemU7XG4gICAgICAgIGlmIChsZW5ndGggIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFydCA9IGxlbmd0aCAtIHZhbHVlO1xuICAgICAgICAgICAgbGVuZ3RoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZsb2F0aW5nKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGN1c3RvbS5iYXJTdGFydDtcbiAgICAgICAgICAgIGxlbmd0aCA9IGN1c3RvbS5iYXJFbmQgLSBjdXN0b20uYmFyU3RhcnQ7XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IDAgJiYgc2lnbih2YWx1ZSkgIT09IHNpZ24oY3VzdG9tLmJhckVuZCkpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFydCArPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydFZhbHVlID0gIWlzTnVsbE9yVW5kZWYoYmFzZVZhbHVlKSAmJiAhZmxvYXRpbmcgPyBiYXNlVmFsdWUgOiBzdGFydDtcbiAgICAgICAgbGV0IGJhc2UgPSB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdGFydFZhbHVlKTtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpKSB7XG4gICAgICAgICAgICBoZWFkID0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyBsZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGVhZCA9IGJhc2U7XG4gICAgICAgIH1cbiAgICAgICAgc2l6ZSA9IGhlYWQgLSBiYXNlO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc2l6ZSkgPCBtaW5CYXJMZW5ndGgpIHtcbiAgICAgICAgICAgIHNpemUgPSBiYXJTaWduKHNpemUsIHZTY2FsZSwgYWN0dWFsQmFzZSkgKiBtaW5CYXJMZW5ndGg7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IGFjdHVhbEJhc2UpIHtcbiAgICAgICAgICAgICAgICBiYXNlIC09IHNpemUgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc3RhcnRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMCk7XG4gICAgICAgICAgICBjb25zdCBlbmRQaXhlbCA9IHZTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMSk7XG4gICAgICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFBpeGVsLCBlbmRQaXhlbCk7XG4gICAgICAgICAgICBiYXNlID0gTWF0aC5tYXgoTWF0aC5taW4oYmFzZSwgbWF4KSwgbWluKTtcbiAgICAgICAgICAgIGhlYWQgPSBiYXNlICsgc2l6ZTtcbiAgICAgICAgICAgIGlmIChfc3RhY2tlZCAmJiAhZmxvYXRpbmcpIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQuX3N0YWNrc1t2U2NhbGUuYXhpc10uX3Zpc3VhbFZhbHVlc1tkYXRhc2V0SW5kZXhdID0gdlNjYWxlLmdldFZhbHVlRm9yUGl4ZWwoaGVhZCkgLSB2U2NhbGUuZ2V0VmFsdWVGb3JQaXhlbChiYXNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoYmFzZSA9PT0gdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoYWN0dWFsQmFzZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhbGZHcmlkID0gc2lnbihzaXplKSAqIHZTY2FsZS5nZXRMaW5lV2lkdGhGb3JWYWx1ZShhY3R1YWxCYXNlKSAvIDI7XG4gICAgICAgICAgICBiYXNlICs9IGhhbGZHcmlkO1xuICAgICAgICAgICAgc2l6ZSAtPSBoYWxmR3JpZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIGJhc2UsXG4gICAgICAgICAgICBoZWFkLFxuICAgICAgICAgICAgY2VudGVyOiBoZWFkICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9XG4gX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKGluZGV4LCBydWxlcikge1xuICAgICAgICBjb25zdCBzY2FsZSA9IHJ1bGVyLnNjYWxlO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBza2lwTnVsbCA9IG9wdGlvbnMuc2tpcE51bGw7XG4gICAgICAgIGNvbnN0IG1heEJhclRoaWNrbmVzcyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSk7XG4gICAgICAgIGxldCBjZW50ZXIsIHNpemU7XG4gICAgICAgIGlmIChydWxlci5ncm91cGVkKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFja0NvdW50ID0gc2tpcE51bGwgPyB0aGlzLl9nZXRTdGFja0NvdW50KGluZGV4KSA6IHJ1bGVyLnN0YWNrQ291bnQ7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCcgPyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucywgc3RhY2tDb3VudCkgOiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zLCBzdGFja0NvdW50KTtcbiAgICAgICAgICAgIGNvbnN0IHN0YWNrSW5kZXggPSB0aGlzLl9nZXRTdGFja0luZGV4KHRoaXMuaW5kZXgsIHRoaXMuX2NhY2hlZE1ldGEuc3RhY2ssIHNraXBOdWxsID8gaW5kZXggOiB1bmRlZmluZWQpO1xuICAgICAgICAgICAgY2VudGVyID0gcmFuZ2Uuc3RhcnQgKyByYW5nZS5jaHVuayAqIHN0YWNrSW5kZXggKyByYW5nZS5jaHVuayAvIDI7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCByYW5nZS5jaHVuayAqIHJhbmdlLnJhdGlvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNlbnRlciA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRQYXJzZWQoaW5kZXgpW3NjYWxlLmF4aXNdLCBpbmRleCk7XG4gICAgICAgICAgICBzaXplID0gTWF0aC5taW4obWF4QmFyVGhpY2tuZXNzLCBydWxlci5taW4gKiBydWxlci5yYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGJhc2U6IGNlbnRlciAtIHNpemUgLyAyLFxuICAgICAgICAgICAgaGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG4gICAgICAgICAgICBjZW50ZXIsXG4gICAgICAgICAgICBzaXplXG4gICAgICAgIH07XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB2U2NhbGUgPSBtZXRhLnZTY2FsZTtcbiAgICAgICAgY29uc3QgcmVjdHMgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IGlsZW4gPSByZWN0cy5sZW5ndGg7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZm9yKDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5nZXRQYXJzZWQoaSlbdlNjYWxlLmF4aXNdICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVjdHNbaV0uZHJhdyh0aGlzLl9jdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBCdWJibGVDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdidWJibGUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICBudW1iZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3JhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHN1cGVyLmluaXRpYWxpemUoKTtcbiAgICB9XG4gcGFyc2VQcmltaXRpdmVEYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSBzdXBlci5wYXJzZVByaW1pdGl2ZURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBwYXJzZWRbaV0uX2N1c3RvbSA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpICsgc3RhcnQpLnJhZGl1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBwYXJzZUFycmF5RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VBcnJheURhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHBhcnNlZC5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gZGF0YVtzdGFydCArIGldO1xuICAgICAgICAgICAgcGFyc2VkW2ldLl9jdXN0b20gPSB2YWx1ZU9yRGVmYXVsdChpdGVtWzJdLCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSArIHN0YXJ0KS5yYWRpdXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuIHBhcnNlT2JqZWN0RGF0YShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gc3VwZXIucGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBwYXJzZWQubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIHBhcnNlZFtpXS5fY3VzdG9tID0gdmFsdWVPckRlZmF1bHQoaXRlbSAmJiBpdGVtLnIgJiYgK2l0ZW0uciwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkgKyBzdGFydCkucmFkaXVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cbiBnZXRNYXhPdmVyZmxvdygpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2NhY2hlZE1ldGEuZGF0YTtcbiAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCBkYXRhW2ldLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpKSAvIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXggPiAwICYmIG1heDtcbiAgICB9XG4gZ2V0TGFiZWxBbmRWYWx1ZShpbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5jaGFydC5kYXRhLmxhYmVscyB8fCBbXTtcbiAgICAgICAgY29uc3QgeyB4U2NhbGUgLCB5U2NhbGUgIH0gPSBtZXRhO1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGNvbnN0IHggPSB4U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueCk7XG4gICAgICAgIGNvbnN0IHkgPSB5U2NhbGUuZ2V0TGFiZWxGb3JWYWx1ZShwYXJzZWQueSk7XG4gICAgICAgIGNvbnN0IHIgPSBwYXJzZWQuX2N1c3RvbTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWU6ICcoJyArIHggKyAnLCAnICsgeSArIChyID8gJywgJyArIHIgOiAnJykgKyAnKSdcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKHBvaW50cywgMCwgcG9pbnRzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgIH0gPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBjb25zdCBpQXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB2QXhpcyA9IHZTY2FsZS5heGlzO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9ICFyZXNldCAmJiB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gcmVzZXQgPyBpU2NhbGUuZ2V0UGl4ZWxGb3JEZWNpbWFsKDAuNSkgOiBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IGlzTmFOKGlQaXhlbCkgfHwgaXNOYU4odlBpeGVsKTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIHBvaW50LmFjdGl2ZSA/ICdhY3RpdmUnIDogbW9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucy5yYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChwb2ludCwgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gcmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpbmRleCwgbW9kZSkge1xuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCk7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBzdXBlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKTtcbiAgICAgICAgaWYgKHZhbHVlcy4kc2hhcmVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZXMsIHtcbiAgICAgICAgICAgICAgICAkc2hhcmVkOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmFkaXVzID0gdmFsdWVzLnJhZGl1cztcbiAgICAgICAgaWYgKG1vZGUgIT09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICB2YWx1ZXMucmFkaXVzID0gMDtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXMucmFkaXVzICs9IHZhbHVlT3JEZWZhdWx0KHBhcnNlZCAmJiBwYXJzZWQuX2N1c3RvbSwgcmFkaXVzKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldFJhdGlvQW5kT2Zmc2V0KHJvdGF0aW9uLCBjaXJjdW1mZXJlbmNlLCBjdXRvdXQpIHtcbiAgICBsZXQgcmF0aW9YID0gMTtcbiAgICBsZXQgcmF0aW9ZID0gMTtcbiAgICBsZXQgb2Zmc2V0WCA9IDA7XG4gICAgbGV0IG9mZnNldFkgPSAwO1xuICAgIGlmIChjaXJjdW1mZXJlbmNlIDwgVEFVKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSByb3RhdGlvbjtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgY2lyY3VtZmVyZW5jZTtcbiAgICAgICAgY29uc3Qgc3RhcnRYID0gTWF0aC5jb3Moc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0WSA9IE1hdGguc2luKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRYID0gTWF0aC5jb3MoZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRZID0gTWF0aC5zaW4oZW5kQW5nbGUpO1xuICAgICAgICBjb25zdCBjYWxjTWF4ID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gMSA6IE1hdGgubWF4KGEsIGEgKiBjdXRvdXQsIGIsIGIgKiBjdXRvdXQpO1xuICAgICAgICBjb25zdCBjYWxjTWluID0gKGFuZ2xlLCBhLCBiKT0+X2FuZ2xlQmV0d2VlbihhbmdsZSwgc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRydWUpID8gLTEgOiBNYXRoLm1pbihhLCBhICogY3V0b3V0LCBiLCBiICogY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4WCA9IGNhbGNNYXgoMCwgc3RhcnRYLCBlbmRYKTtcbiAgICAgICAgY29uc3QgbWF4WSA9IGNhbGNNYXgoSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgY29uc3QgbWluWCA9IGNhbGNNaW4oUEksIHN0YXJ0WCwgZW5kWCk7XG4gICAgICAgIGNvbnN0IG1pblkgPSBjYWxjTWluKFBJICsgSEFMRl9QSSwgc3RhcnRZLCBlbmRZKTtcbiAgICAgICAgcmF0aW9YID0gKG1heFggLSBtaW5YKSAvIDI7XG4gICAgICAgIHJhdGlvWSA9IChtYXhZIC0gbWluWSkgLyAyO1xuICAgICAgICBvZmZzZXRYID0gLShtYXhYICsgbWluWCkgLyAyO1xuICAgICAgICBvZmZzZXRZID0gLShtYXhZICsgbWluWSkgLyAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICByYXRpb1gsXG4gICAgICAgIHJhdGlvWSxcbiAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgb2Zmc2V0WVxuICAgIH07XG59XG5jbGFzcyBEb3VnaG51dENvbnRyb2xsZXIgZXh0ZW5kcyBEYXRhc2V0Q29udHJvbGxlciB7XG4gICAgc3RhdGljIGlkID0gJ2RvdWdobnV0JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGRhdGFzZXRFbGVtZW50VHlwZTogZmFsc2UsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ2FyYycsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgYW5pbWF0ZVJvdGF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGVTY2FsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ2NpcmN1bWZlcmVuY2UnLFxuICAgICAgICAgICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnb3V0ZXJSYWRpdXMnLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgJ2JvcmRlcldpZHRoJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NwYWNpbmcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjdXRvdXQ6ICc1MCUnLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJyxcbiAgICAgICAgc3BhY2luZzogMCxcbiAgICAgICAgaW5kZXhBeGlzOiAncidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ3NwYWNpbmcnLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdzcGFjaW5nJyAmJiAhbmFtZS5zdGFydHNXaXRoKCdib3JkZXJEYXNoJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnaG92ZXJCb3JkZXJEYXNoJylcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGFzcGVjdFJhdGlvOiAxLFxuICAgICAgICBwbHVnaW5zOiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVMYWJlbHMgKGNoYXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gY2hhcnQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxhYmVscy5sZW5ndGggJiYgZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyBwb2ludFN0eWxlICwgY29sb3IgIH0gIH0gPSBjaGFydC5sZWdlbmQub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS5sYWJlbHMubWFwKChsYWJlbCwgaSk9PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHlsZSA9IG1ldGEuY29udHJvbGxlci5nZXRTdHlsZShpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBzdHlsZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogc3R5bGUuYm9yZGVyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250Q29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiBzdHlsZS5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudG9nZ2xlRGF0YVZpc2liaWxpdHkobGVnZW5kSXRlbS5pbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZC5jaGFydC51cGRhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0LCBkYXRhc2V0SW5kZXgpe1xuICAgICAgICBzdXBlcihjaGFydCwgZGF0YXNldEluZGV4KTtcbiAgICAgICAgdGhpcy5lbmFibGVPcHRpb25TaGFyaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGxpbmtTY2FsZXMoKSB7fVxuIHBhcnNlKHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhc2V0KCkuZGF0YTtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGlmICh0aGlzLl9wYXJzaW5nID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWV0YS5fcGFyc2VkID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBnZXR0ZXIgPSAoaSk9PitkYXRhW2ldO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGFbc3RhcnRdKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsga2V5ID0ndmFsdWUnICB9ID0gdGhpcy5fcGFyc2luZztcbiAgICAgICAgICAgICAgICBnZXR0ZXIgPSAoaSk9PityZXNvbHZlT2JqZWN0S2V5KGRhdGFbaV0sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgICAgIGZvcihpID0gc3RhcnQsIGlsZW4gPSBzdGFydCArIGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBtZXRhLl9wYXJzZWRbaV0gPSBnZXR0ZXIoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gX2dldFJvdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdG9SYWRpYW5zKHRoaXMub3B0aW9ucy5yb3RhdGlvbiAtIDkwKTtcbiAgICB9XG4gX2dldENpcmN1bWZlcmVuY2UoKSB7XG4gICAgICAgIHJldHVybiB0b1JhZGlhbnModGhpcy5vcHRpb25zLmNpcmN1bWZlcmVuY2UpO1xuICAgIH1cbiBfZ2V0Um90YXRpb25FeHRlbnRzKCkge1xuICAgICAgICBsZXQgbWluID0gVEFVO1xuICAgICAgICBsZXQgbWF4ID0gLVRBVTtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpICYmIHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSkudHlwZSA9PT0gdGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXIgPSB0aGlzLmNoYXJ0LmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRpb24gPSBjb250cm9sbGVyLl9nZXRSb3RhdGlvbigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSBjb250cm9sbGVyLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByb3RhdGlvbik7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByb3RhdGlvbiArIGNpcmN1bWZlcmVuY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByb3RhdGlvbjogbWluLFxuICAgICAgICAgICAgY2lyY3VtZmVyZW5jZTogbWF4IC0gbWluXG4gICAgICAgIH07XG4gICAgfVxuIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgeyBjaGFydEFyZWEgIH0gPSBjaGFydDtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGFyY3MgPSBtZXRhLmRhdGE7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSB0aGlzLmdldE1heEJvcmRlcldpZHRoKCkgKyB0aGlzLmdldE1heE9mZnNldChhcmNzKSArIHRoaXMub3B0aW9ucy5zcGFjaW5nO1xuICAgICAgICBjb25zdCBtYXhTaXplID0gTWF0aC5tYXgoKE1hdGgubWluKGNoYXJ0QXJlYS53aWR0aCwgY2hhcnRBcmVhLmhlaWdodCkgLSBzcGFjaW5nKSAvIDIsIDApO1xuICAgICAgICBjb25zdCBjdXRvdXQgPSBNYXRoLm1pbih0b1BlcmNlbnRhZ2UodGhpcy5vcHRpb25zLmN1dG91dCwgbWF4U2l6ZSksIDEpO1xuICAgICAgICBjb25zdCBjaGFydFdlaWdodCA9IHRoaXMuX2dldFJpbmdXZWlnaHQodGhpcy5pbmRleCk7XG4gICAgICAgIGNvbnN0IHsgY2lyY3VtZmVyZW5jZSAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZ2V0Um90YXRpb25FeHRlbnRzKCk7XG4gICAgICAgIGNvbnN0IHsgcmF0aW9YICwgcmF0aW9ZICwgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBnZXRSYXRpb0FuZE9mZnNldChyb3RhdGlvbiwgY2lyY3VtZmVyZW5jZSwgY3V0b3V0KTtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSAoY2hhcnRBcmVhLndpZHRoIC0gc3BhY2luZykgLyByYXRpb1g7XG4gICAgICAgIGNvbnN0IG1heEhlaWdodCA9IChjaGFydEFyZWEuaGVpZ2h0IC0gc3BhY2luZykgLyByYXRpb1k7XG4gICAgICAgIGNvbnN0IG1heFJhZGl1cyA9IE1hdGgubWF4KE1hdGgubWluKG1heFdpZHRoLCBtYXhIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gdG9EaW1lbnNpb24odGhpcy5vcHRpb25zLnJhZGl1cywgbWF4UmFkaXVzKTtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvdXRlclJhZGl1cyAqIGN1dG91dCwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIHRoaXMuX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKTtcbiAgICAgICAgdGhpcy5vZmZzZXRYID0gb2Zmc2V0WCAqIG91dGVyUmFkaXVzO1xuICAgICAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZICogb3V0ZXJSYWRpdXM7XG4gICAgICAgIG1ldGEudG90YWwgPSB0aGlzLmNhbGN1bGF0ZVRvdGFsKCk7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSBvdXRlclJhZGl1cyAtIHJhZGl1c0xlbmd0aCAqIHRoaXMuX2dldFJpbmdXZWlnaHRPZmZzZXQodGhpcy5pbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSBNYXRoLm1heCh0aGlzLm91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogY2hhcnRXZWlnaHQsIDApO1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnRzKGFyY3MsIDAsIGFyY3MubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gX2NpcmN1bWZlcmVuY2UoaSwgcmVzZXQpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNpcmN1bWZlcmVuY2UgPSB0aGlzLl9nZXRDaXJjdW1mZXJlbmNlKCk7XG4gICAgICAgIGlmIChyZXNldCAmJiBvcHRzLmFuaW1hdGlvbi5hbmltYXRlUm90YXRlIHx8ICF0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGkpIHx8IG1ldGEuX3BhcnNlZFtpXSA9PT0gbnVsbCB8fCBtZXRhLmRhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKG1ldGEuX3BhcnNlZFtpXSAqIGNpcmN1bWZlcmVuY2UgLyBUQVUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhhcmNzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IGNoYXJ0LmNoYXJ0QXJlYTtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IChjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS5yaWdodCkgLyAyO1xuICAgICAgICBjb25zdCBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG4gICAgICAgIGNvbnN0IGFuaW1hdGVTY2FsZSA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLmlubmVyUmFkaXVzO1xuICAgICAgICBjb25zdCBvdXRlclJhZGl1cyA9IGFuaW1hdGVTY2FsZSA/IDAgOiB0aGlzLm91dGVyUmFkaXVzO1xuICAgICAgICBjb25zdCB7IHNoYXJlZE9wdGlvbnMgLCBpbmNsdWRlT3B0aW9ucyAgfSA9IHRoaXMuX2dldFNoYXJlZE9wdGlvbnMoc3RhcnQsIG1vZGUpO1xuICAgICAgICBsZXQgc3RhcnRBbmdsZSA9IHRoaXMuX2dldFJvdGF0aW9uKCk7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBzdGFydDsgKytpKXtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgKz0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBjaXJjdW1mZXJlbmNlID0gdGhpcy5fY2lyY3VtZmVyZW5jZShpLCByZXNldCk7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICB4OiBjZW50ZXJYICsgdGhpcy5vZmZzZXRYLFxuICAgICAgICAgICAgICAgIHk6IGNlbnRlclkgKyB0aGlzLm9mZnNldFksXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZSxcbiAgICAgICAgICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIGNpcmN1bWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgY2lyY3VtZmVyZW5jZSxcbiAgICAgICAgICAgICAgICBvdXRlclJhZGl1cyxcbiAgICAgICAgICAgICAgICBpbm5lclJhZGl1c1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpbmNsdWRlT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMub3B0aW9ucyA9IHNoYXJlZE9wdGlvbnMgfHwgdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnRBbmdsZSArPSBjaXJjdW1mZXJlbmNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2FsY3VsYXRlVG90YWwoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBtZXRhRGF0YSA9IG1ldGEuZGF0YTtcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IG1ldGFEYXRhLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbWV0YS5fcGFyc2VkW2ldO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmICFpc05hTih2YWx1ZSkgJiYgdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSAmJiAhbWV0YURhdGFbaV0uaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgdG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG4gICAgY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCB0b3RhbCA9IHRoaXMuX2NhY2hlZE1ldGEudG90YWw7XG4gICAgICAgIGlmICh0b3RhbCA+IDAgJiYgIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRBVSAqIChNYXRoLmFicyh2YWx1ZSkgLyB0b3RhbCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0sIGNoYXJ0Lm9wdGlvbnMubG9jYWxlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbHNbaW5kZXhdIHx8ICcnLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0TWF4Qm9yZGVyV2lkdGgoYXJjcykge1xuICAgICAgICBsZXQgbWF4ID0gMDtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLmNoYXJ0O1xuICAgICAgICBsZXQgaSwgaWxlbiwgbWV0YSwgY29udHJvbGxlciwgb3B0aW9ucztcbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICAgICAgaWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgICAgICAgICBhcmNzID0gbWV0YS5kYXRhO1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyID0gbWV0YS5jb250cm9sbGVyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmNzKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBhcmNzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBvcHRpb25zID0gY29udHJvbGxlci5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm9yZGVyQWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIG9wdGlvbnMuYm9yZGVyV2lkdGggfHwgMCwgb3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoIHx8IDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXg7XG4gICAgfVxuICAgIGdldE1heE9mZnNldChhcmNzKSB7XG4gICAgICAgIGxldCBtYXggPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gYXJjcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgb3B0aW9ucy5vZmZzZXQgfHwgMCwgb3B0aW9ucy5ob3Zlck9mZnNldCB8fCAwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4O1xuICAgIH1cbiBfZ2V0UmluZ1dlaWdodE9mZnNldChkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgbGV0IHJpbmdXZWlnaHRPZmZzZXQgPSAwO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpe1xuICAgICAgICAgICAgaWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuICAgICAgICAgICAgICAgIHJpbmdXZWlnaHRPZmZzZXQgKz0gdGhpcy5fZ2V0UmluZ1dlaWdodChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmluZ1dlaWdodE9mZnNldDtcbiAgICB9XG4gX2dldFJpbmdXZWlnaHQoZGF0YXNldEluZGV4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh2YWx1ZU9yRGVmYXVsdCh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS53ZWlnaHQsIDEpLCAwKTtcbiAgICB9XG4gX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRSaW5nV2VpZ2h0T2Zmc2V0KHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGgpIHx8IDE7XG4gICAgfVxufVxuXG5jbGFzcyBMaW5lQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnbGluZSc7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6ICdsaW5lJyxcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAncG9pbnQnLFxuICAgICAgICBzaG93TGluZTogdHJ1ZSxcbiAgICAgICAgc3BhbkdhcHM6IGZhbHNlXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIF9pbmRleF86IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgX3ZhbHVlXzoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGluaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMuZW5hYmxlT3B0aW9uU2hhcmluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuc3VwcG9ydHNEZWNpbWF0aW9uID0gdHJ1ZTtcbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgeyBkYXRhc2V0OiBsaW5lICwgZGF0YTogcG9pbnRzID0gW10gLCBfZGF0YXNldCAgfSA9IG1ldGE7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnNEaXNhYmxlZCA9IHRoaXMuY2hhcnQuX2FuaW1hdGlvbnNEaXNhYmxlZDtcbiAgICAgICAgbGV0IHsgc3RhcnQgLCBjb3VudCAgfSA9IF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKTtcbiAgICAgICAgdGhpcy5fZHJhd1N0YXJ0ID0gc3RhcnQ7XG4gICAgICAgIHRoaXMuX2RyYXdDb3VudCA9IGNvdW50O1xuICAgICAgICBpZiAoX3NjYWxlUmFuZ2VzQ2hhbmdlZChtZXRhKSkge1xuICAgICAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICAgICAgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgbGluZS5fZGF0YXNldEluZGV4ID0gdGhpcy5pbmRleDtcbiAgICAgICAgbGluZS5fZGVjaW1hdGVkID0gISFfZGF0YXNldC5fZGVjaW1hdGVkO1xuICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucmVzb2x2ZURhdGFzZXRFbGVtZW50T3B0aW9ucyhtb2RlKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuc2hvd0xpbmUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc2VnbWVudCA9IHRoaXMub3B0aW9ucy5zZWdtZW50O1xuICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQobGluZSwgdW5kZWZpbmVkLCB7XG4gICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgfSwgbW9kZSk7XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IHsgaVNjYWxlICwgdlNjYWxlICwgX3N0YWNrZWQgLCBfZGF0YXNldCAgfSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHsgc2hhcmVkT3B0aW9ucyAsIGluY2x1ZGVPcHRpb25zICB9ID0gdGhpcy5fZ2V0U2hhcmVkT3B0aW9ucyhzdGFydCwgbW9kZSk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgY29uc3QgZW5kID0gc3RhcnQgKyBjb3VudDtcbiAgICAgICAgY29uc3QgcG9pbnRzQ291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgICAgICBsZXQgcHJldlBhcnNlZCA9IHN0YXJ0ID4gMCAmJiB0aGlzLmdldFBhcnNlZChzdGFydCAtIDEpO1xuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgcG9pbnRzQ291bnQ7ICsraSl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgaWYgKGkgPCBzdGFydCB8fCBpID49IGVuZCkge1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMuc2tpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IG51bGxEYXRhID0gaXNOdWxsT3JVbmRlZihwYXJzZWRbdkF4aXNdKTtcbiAgICAgICAgICAgIGNvbnN0IGlQaXhlbCA9IHByb3BlcnRpZXNbaUF4aXNdID0gaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUocGFyc2VkW2lBeGlzXSwgaSk7XG4gICAgICAgICAgICBjb25zdCB2UGl4ZWwgPSBwcm9wZXJ0aWVzW3ZBeGlzXSA9IHJlc2V0IHx8IG51bGxEYXRhID8gdlNjYWxlLmdldEJhc2VQaXhlbCgpIDogdlNjYWxlLmdldFBpeGVsRm9yVmFsdWUoX3N0YWNrZWQgPyB0aGlzLmFwcGx5U3RhY2sodlNjYWxlLCBwYXJzZWQsIF9zdGFja2VkKSA6IHBhcnNlZFt2QXhpc10sIGkpO1xuICAgICAgICAgICAgcHJvcGVydGllcy5za2lwID0gaXNOYU4oaVBpeGVsKSB8fCBpc05hTih2UGl4ZWwpIHx8IG51bGxEYXRhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5zdG9wID0gaSA+IDAgJiYgTWF0aC5hYnMocGFyc2VkW2lBeGlzXSAtIHByZXZQYXJzZWRbaUF4aXNdKSA+IG1heEdhcExlbmd0aDtcbiAgICAgICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5wYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5yYXcgPSBfZGF0YXNldC5kYXRhW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluY2x1ZGVPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5vcHRpb25zID0gc2hhcmVkT3B0aW9ucyB8fCB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghZGlyZWN0VXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KHBvaW50LCBpLCBwcm9wZXJ0aWVzLCBtb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXZQYXJzZWQgPSBwYXJzZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gbWV0YS5kYXRhc2V0O1xuICAgICAgICBjb25zdCBib3JkZXIgPSBkYXRhc2V0Lm9wdGlvbnMgJiYgZGF0YXNldC5vcHRpb25zLmJvcmRlcldpZHRoIHx8IDA7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBtZXRhLmRhdGEgfHwgW107XG4gICAgICAgIGlmICghZGF0YS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBib3JkZXI7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IGRhdGFbMF0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoMCkpO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBkYXRhW2RhdGEubGVuZ3RoIC0gMV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoZGF0YS5sZW5ndGggLSAxKSk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChib3JkZXIsIGZpcnN0UG9pbnQsIGxhc3RQb2ludCkgLyAyO1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgbWV0YS5kYXRhc2V0LnVwZGF0ZUNvbnRyb2xQb2ludHModGhpcy5jaGFydC5jaGFydEFyZWEsIG1ldGEuaVNjYWxlLmF4aXMpO1xuICAgICAgICBzdXBlci5kcmF3KCk7XG4gICAgfVxufVxuXG5jbGFzcyBQb2xhckFyZWFDb250cm9sbGVyIGV4dGVuZHMgRGF0YXNldENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwb2xhckFyZWEnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YUVsZW1lbnRUeXBlOiAnYXJjJyxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICBhbmltYXRlUm90YXRlOiB0cnVlLFxuICAgICAgICAgICAgYW5pbWF0ZVNjYWxlOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIGFuaW1hdGlvbnM6IHtcbiAgICAgICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICAgICAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICAgICAgICAgJ3knLFxuICAgICAgICAgICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAgICAgICAgICdpbm5lclJhZGl1cycsXG4gICAgICAgICAgICAgICAgICAgICdvdXRlclJhZGl1cydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGluZGV4QXhpczogJ3InLFxuICAgICAgICBzdGFydEFuZ2xlOiAwXG4gICAgfTtcbiBzdGF0aWMgb3ZlcnJpZGVzID0ge1xuICAgICAgICBhc3BlY3RSYXRpbzogMSxcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sYWJlbHMubGVuZ3RoICYmIGRhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBsYWJlbHM6IHsgcG9pbnRTdHlsZSAsIGNvbG9yICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGEubGFiZWxzLm1hcCgobGFiZWwsIGkpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3R5bGUgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUoaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBsYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxTdHlsZTogc3R5bGUuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IHN0eWxlLmJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udENvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogc3R5bGUuYm9yZGVyV2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFN0eWxlOiBwb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZGVuOiAhY2hhcnQuZ2V0RGF0YVZpc2liaWxpdHkoaSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleDogaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvbkNsaWNrIChlLCBsZWdlbmRJdGVtLCBsZWdlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kLmNoYXJ0LnRvZ2dsZURhdGFWaXNpYmlsaXR5KGxlZ2VuZEl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmQuY2hhcnQudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsTGluZWFyJyxcbiAgICAgICAgICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBiZWdpbkF0WmVybzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgICAgIGNpcmN1bGFyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwb2ludExhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgZGF0YXNldEluZGV4KXtcbiAgICAgICAgc3VwZXIoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG4gICAgICAgIHRoaXMuaW5uZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMub3V0ZXJSYWRpdXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybWF0TnVtYmVyKG1ldGEuX3BhcnNlZFtpbmRleF0uciwgY2hhcnQub3B0aW9ucy5sb2NhbGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBwYXJzZU9iamVjdERhdGEobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIHJldHVybiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUuYmluZCh0aGlzKShtZXRhLCBkYXRhLCBzdGFydCwgY291bnQpO1xuICAgIH1cbiAgICB1cGRhdGUobW9kZSkge1xuICAgICAgICBjb25zdCBhcmNzID0gdGhpcy5fY2FjaGVkTWV0YS5kYXRhO1xuICAgICAgICB0aGlzLl91cGRhdGVSYWRpdXMoKTtcbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhhcmNzLCAwLCBhcmNzLmxlbmd0aCwgbW9kZSk7XG4gICAgfVxuIGdldE1pbk1heCgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IHJhbmdlID0ge1xuICAgICAgICAgICAgbWluOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICAgICAgICBtYXg6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICB9O1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpbmRleCkucjtcbiAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VkKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQgPCByYW5nZS5taW4pIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UubWluID0gcGFyc2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkID4gcmFuZ2UubWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLm1heCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxuIF91cGRhdGVSYWRpdXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBvcHRzID0gY2hhcnQub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWluU2l6ZSA9IE1hdGgubWluKGNoYXJ0QXJlYS5yaWdodCAtIGNoYXJ0QXJlYS5sZWZ0LCBjaGFydEFyZWEuYm90dG9tIC0gY2hhcnRBcmVhLnRvcCk7XG4gICAgICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgobWluU2l6ZSAvIDIsIDApO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KG9wdHMuY3V0b3V0UGVyY2VudGFnZSA/IG91dGVyUmFkaXVzIC8gMTAwICogb3B0cy5jdXRvdXRQZXJjZW50YWdlIDogMSwgMCk7XG4gICAgICAgIGNvbnN0IHJhZGl1c0xlbmd0aCA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IG91dGVyUmFkaXVzIC0gcmFkaXVzTGVuZ3RoICogdGhpcy5pbmRleDtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHRoaXMub3V0ZXJSYWRpdXMgLSByYWRpdXNMZW5ndGg7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKGFyY3MsIHN0YXJ0LCBjb3VudCwgbW9kZSkge1xuICAgICAgICBjb25zdCByZXNldCA9IG1vZGUgPT09ICdyZXNldCc7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdHMgPSBvcHRzLmFuaW1hdGlvbjtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgY2VudGVyWCA9IHNjYWxlLnhDZW50ZXI7XG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSBzY2FsZS55Q2VudGVyO1xuICAgICAgICBjb25zdCBkYXRhc2V0U3RhcnRBbmdsZSA9IHNjYWxlLmdldEluZGV4QW5nbGUoMCkgLSAwLjUgKiBQSTtcbiAgICAgICAgbGV0IGFuZ2xlID0gZGF0YXNldFN0YXJ0QW5nbGU7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBjb25zdCBkZWZhdWx0QW5nbGUgPSAzNjAgLyB0aGlzLmNvdW50VmlzaWJsZUVsZW1lbnRzKCk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHN0YXJ0OyArK2kpe1xuICAgICAgICAgICAgYW5nbGUgKz0gdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBhcmMgPSBhcmNzW2ldO1xuICAgICAgICAgICAgbGV0IHN0YXJ0QW5nbGUgPSBhbmdsZTtcbiAgICAgICAgICAgIGxldCBlbmRBbmdsZSA9IGFuZ2xlICsgdGhpcy5fY29tcHV0ZUFuZ2xlKGksIG1vZGUsIGRlZmF1bHRBbmdsZSk7XG4gICAgICAgICAgICBsZXQgb3V0ZXJSYWRpdXMgPSBjaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSA/IHNjYWxlLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuZ2V0UGFyc2VkKGkpLnIpIDogMDtcbiAgICAgICAgICAgIGFuZ2xlID0gZW5kQW5nbGU7XG4gICAgICAgICAgICBpZiAocmVzZXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlU2NhbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJSYWRpdXMgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUgPSBlbmRBbmdsZSA9IGRhdGFzZXRTdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeDogY2VudGVyWCxcbiAgICAgICAgICAgICAgICB5OiBjZW50ZXJZLFxuICAgICAgICAgICAgICAgIGlubmVyUmFkaXVzOiAwLFxuICAgICAgICAgICAgICAgIG91dGVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICAgICAgZW5kQW5nbGUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGksIGFyYy5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50KGFyYywgaSwgcHJvcGVydGllcywgbW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY291bnRWaXNpYmxlRWxlbWVudHMoKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICBtZXRhLmRhdGEuZm9yRWFjaCgoZWxlbWVudCwgaW5kZXgpPT57XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHRoaXMuZ2V0UGFyc2VkKGluZGV4KS5yKSAmJiB0aGlzLmNoYXJ0LmdldERhdGFWaXNpYmlsaXR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuIF9jb21wdXRlQW5nbGUoaW5kZXgsIG1vZGUsIGRlZmF1bHRBbmdsZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpbmRleCkgPyB0b1JhZGlhbnModGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGluZGV4LCBtb2RlKS5hbmdsZSB8fCBkZWZhdWx0QW5nbGUpIDogMDtcbiAgICB9XG59XG5cbmNsYXNzIFBpZUNvbnRyb2xsZXIgZXh0ZW5kcyBEb3VnaG51dENvbnRyb2xsZXIge1xuICAgIHN0YXRpYyBpZCA9ICdwaWUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgY3V0b3V0OiAwLFxuICAgICAgICByb3RhdGlvbjogMCxcbiAgICAgICAgY2lyY3VtZmVyZW5jZTogMzYwLFxuICAgICAgICByYWRpdXM6ICcxMDAlJ1xuICAgIH07XG59XG5cbmNsYXNzIFJhZGFyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAncmFkYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGF0YXNldEVsZW1lbnRUeXBlOiAnbGluZScsXG4gICAgICAgIGRhdGFFbGVtZW50VHlwZTogJ3BvaW50JyxcbiAgICAgICAgaW5kZXhBeGlzOiAncicsXG4gICAgICAgIHNob3dMaW5lOiB0cnVlLFxuICAgICAgICBlbGVtZW50czoge1xuICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgIGZpbGw6ICdzdGFydCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gc3RhdGljIG92ZXJyaWRlcyA9IHtcbiAgICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdyYWRpYWxMaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdlNjYWxlID0gdGhpcy5fY2FjaGVkTWV0YS52U2NhbGU7XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IHRoaXMuZ2V0UGFyc2VkKGluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxhYmVsOiB2U2NhbGUuZ2V0TGFiZWxzKClbaW5kZXhdLFxuICAgICAgICAgICAgdmFsdWU6ICcnICsgdlNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkW3ZTY2FsZS5heGlzXSlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcGFyc2VPYmplY3REYXRhKG1ldGEsIGRhdGEsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICByZXR1cm4gX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlLmJpbmQodGhpcykobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KTtcbiAgICB9XG4gICAgdXBkYXRlKG1vZGUpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBtZXRhLmRhdGFzZXQ7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IG1ldGEuZGF0YSB8fCBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gbWV0YS5pU2NhbGUuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxpbmUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICBpZiAobW9kZSAhPT0gJ3Jlc2l6ZScpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuYm9yZGVyV2lkdGggPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcHJvcGVydGllcyA9IHtcbiAgICAgICAgICAgICAgICBfbG9vcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBfZnVsbExvb3A6IGxhYmVscy5sZW5ndGggPT09IHBvaW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlRWxlbWVudHMocG9pbnRzLCAwLCBwb2ludHMubGVuZ3RoLCBtb2RlKTtcbiAgICB9XG4gICAgdXBkYXRlRWxlbWVudHMocG9pbnRzLCBzdGFydCwgY291bnQsIG1vZGUpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLl9jYWNoZWRNZXRhLnJTY2FsZTtcbiAgICAgICAgY29uc3QgcmVzZXQgPSBtb2RlID09PSAncmVzZXQnO1xuICAgICAgICBmb3IobGV0IGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSwgcG9pbnQuYWN0aXZlID8gJ2FjdGl2ZScgOiBtb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaSwgdGhpcy5nZXRQYXJzZWQoaSkucik7XG4gICAgICAgICAgICBjb25zdCB4ID0gcmVzZXQgPyBzY2FsZS54Q2VudGVyIDogcG9pbnRQb3NpdGlvbi54O1xuICAgICAgICAgICAgY29uc3QgeSA9IHJlc2V0ID8gc2NhbGUueUNlbnRlciA6IHBvaW50UG9zaXRpb24ueTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5LFxuICAgICAgICAgICAgICAgIGFuZ2xlOiBwb2ludFBvc2l0aW9uLmFuZ2xlLFxuICAgICAgICAgICAgICAgIHNraXA6IGlzTmFOKHgpIHx8IGlzTmFOKHkpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBTY2F0dGVyQ29udHJvbGxlciBleHRlbmRzIERhdGFzZXRDb250cm9sbGVyIHtcbiAgICBzdGF0aWMgaWQgPSAnc2NhdHRlcic7XG4gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGZhbHNlLFxuICAgICAgICBkYXRhRWxlbWVudFR5cGU6ICdwb2ludCcsXG4gICAgICAgIHNob3dMaW5lOiBmYWxzZSxcbiAgICAgICAgZmlsbDogZmFsc2VcbiAgICB9O1xuIHN0YXRpYyBvdmVycmlkZXMgPSB7XG4gICAgICAgIGludGVyYWN0aW9uOiB7XG4gICAgICAgICAgICBtb2RlOiAncG9pbnQnXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlczoge1xuICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdsaW5lYXInXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGdldExhYmVsQW5kVmFsdWUoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuX2NhY2hlZE1ldGE7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMuY2hhcnQuZGF0YS5sYWJlbHMgfHwgW107XG4gICAgICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gdGhpcy5nZXRQYXJzZWQoaW5kZXgpO1xuICAgICAgICBjb25zdCB4ID0geFNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLngpO1xuICAgICAgICBjb25zdCB5ID0geVNjYWxlLmdldExhYmVsRm9yVmFsdWUocGFyc2VkLnkpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGFiZWw6IGxhYmVsc1tpbmRleF0gfHwgJycsXG4gICAgICAgICAgICB2YWx1ZTogJygnICsgeCArICcsICcgKyB5ICsgJyknXG4gICAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCB7IGRhdGE6IHBvaW50cyA9IFtdICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uc0Rpc2FibGVkID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkO1xuICAgICAgICBsZXQgeyBzdGFydCAsIGNvdW50ICB9ID0gX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMobWV0YSwgcG9pbnRzLCBhbmltYXRpb25zRGlzYWJsZWQpO1xuICAgICAgICB0aGlzLl9kcmF3U3RhcnQgPSBzdGFydDtcbiAgICAgICAgdGhpcy5fZHJhd0NvdW50ID0gY291bnQ7XG4gICAgICAgIGlmIChfc2NhbGVSYW5nZXNDaGFuZ2VkKG1ldGEpKSB7XG4gICAgICAgICAgICBzdGFydCA9IDA7XG4gICAgICAgICAgICBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRWxlbWVudHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHsgZGF0YXNldDogbGluZSAsIF9kYXRhc2V0ICB9ID0gbWV0YTtcbiAgICAgICAgICAgIGxpbmUuX2NoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgICAgIGxpbmUuX2RhdGFzZXRJbmRleCA9IHRoaXMuaW5kZXg7XG4gICAgICAgICAgICBsaW5lLl9kZWNpbWF0ZWQgPSAhIV9kYXRhc2V0Ll9kZWNpbWF0ZWQ7XG4gICAgICAgICAgICBsaW5lLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMobW9kZSk7XG4gICAgICAgICAgICBvcHRpb25zLnNlZ21lbnQgPSB0aGlzLm9wdGlvbnMuc2VnbWVudDtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRWxlbWVudChsaW5lLCB1bmRlZmluZWQsIHtcbiAgICAgICAgICAgICAgICBhbmltYXRlZDogIWFuaW1hdGlvbnNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICAgICB9LCBtb2RlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSkge1xuICAgICAgICAgICAgZGVsZXRlIG1ldGEuZGF0YXNldDtcbiAgICAgICAgICAgIHRoaXMuZGF0YXNldEVsZW1lbnRUeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVFbGVtZW50cyhwb2ludHMsIHN0YXJ0LCBjb3VudCwgbW9kZSk7XG4gICAgfVxuICAgIGFkZEVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCB7IHNob3dMaW5lICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIXRoaXMuZGF0YXNldEVsZW1lbnRUeXBlICYmIHNob3dMaW5lKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFzZXRFbGVtZW50VHlwZSA9IHRoaXMuY2hhcnQucmVnaXN0cnkuZ2V0RWxlbWVudCgnbGluZScpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmFkZEVsZW1lbnRzKCk7XG4gICAgfVxuICAgIHVwZGF0ZUVsZW1lbnRzKHBvaW50cywgc3RhcnQsIGNvdW50LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IHJlc2V0ID0gbW9kZSA9PT0gJ3Jlc2V0JztcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCB2U2NhbGUgLCBfc3RhY2tlZCAsIF9kYXRhc2V0ICB9ID0gdGhpcy5fY2FjaGVkTWV0YTtcbiAgICAgICAgY29uc3QgZmlyc3RPcHRzID0gdGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKHN0YXJ0LCBtb2RlKTtcbiAgICAgICAgY29uc3Qgc2hhcmVkT3B0aW9ucyA9IHRoaXMuZ2V0U2hhcmVkT3B0aW9ucyhmaXJzdE9wdHMpO1xuICAgICAgICBjb25zdCBpbmNsdWRlT3B0aW9ucyA9IHRoaXMuaW5jbHVkZU9wdGlvbnMobW9kZSwgc2hhcmVkT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGlBeGlzID0gaVNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHZBeGlzID0gdlNjYWxlLmF4aXM7XG4gICAgICAgIGNvbnN0IHsgc3BhbkdhcHMgLCBzZWdtZW50ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXhHYXBMZW5ndGggPSBpc051bWJlcihzcGFuR2FwcykgPyBzcGFuR2FwcyA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICAgICAgY29uc3QgZGlyZWN0VXBkYXRlID0gdGhpcy5jaGFydC5fYW5pbWF0aW9uc0Rpc2FibGVkIHx8IHJlc2V0IHx8IG1vZGUgPT09ICdub25lJztcbiAgICAgICAgbGV0IHByZXZQYXJzZWQgPSBzdGFydCA+IDAgJiYgdGhpcy5nZXRQYXJzZWQoc3RhcnQgLSAxKTtcbiAgICAgICAgZm9yKGxldCBpID0gc3RhcnQ7IGkgPCBzdGFydCArIGNvdW50OyArK2kpe1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLmdldFBhcnNlZChpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSBkaXJlY3RVcGRhdGUgPyBwb2ludCA6IHt9O1xuICAgICAgICAgICAgY29uc3QgbnVsbERhdGEgPSBpc051bGxPclVuZGVmKHBhcnNlZFt2QXhpc10pO1xuICAgICAgICAgICAgY29uc3QgaVBpeGVsID0gcHJvcGVydGllc1tpQXhpc10gPSBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShwYXJzZWRbaUF4aXNdLCBpKTtcbiAgICAgICAgICAgIGNvbnN0IHZQaXhlbCA9IHByb3BlcnRpZXNbdkF4aXNdID0gcmVzZXQgfHwgbnVsbERhdGEgPyB2U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB2U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShfc3RhY2tlZCA/IHRoaXMuYXBwbHlTdGFjayh2U2NhbGUsIHBhcnNlZCwgX3N0YWNrZWQpIDogcGFyc2VkW3ZBeGlzXSwgaSk7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnNraXAgPSBpc05hTihpUGl4ZWwpIHx8IGlzTmFOKHZQaXhlbCkgfHwgbnVsbERhdGE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLnN0b3AgPSBpID4gMCAmJiBNYXRoLmFicyhwYXJzZWRbaUF4aXNdIC0gcHJldlBhcnNlZFtpQXhpc10pID4gbWF4R2FwTGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHNlZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLnJhdyA9IF9kYXRhc2V0LmRhdGFbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW5jbHVkZU9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm9wdGlvbnMgPSBzaGFyZWRPcHRpb25zIHx8IHRoaXMucmVzb2x2ZURhdGFFbGVtZW50T3B0aW9ucyhpLCBwb2ludC5hY3RpdmUgPyAnYWN0aXZlJyA6IG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGksIHByb3BlcnRpZXMsIG1vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJldlBhcnNlZCA9IHBhcnNlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZVNoYXJlZE9wdGlvbnMoc2hhcmVkT3B0aW9ucywgbW9kZSwgZmlyc3RPcHRzKTtcbiAgICB9XG4gZ2V0TWF4T3ZlcmZsb3coKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLl9jYWNoZWRNZXRhO1xuICAgICAgICBjb25zdCBkYXRhID0gbWV0YS5kYXRhIHx8IFtdO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaG93TGluZSkge1xuICAgICAgICAgICAgbGV0IG1heCA9IDA7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBkYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKXtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGRhdGFbaV0uc2l6ZSh0aGlzLnJlc29sdmVEYXRhRWxlbWVudE9wdGlvbnMoaSkpIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWF4ID4gMCAmJiBtYXg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YXNldCA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gZGF0YXNldC5vcHRpb25zICYmIGRhdGFzZXQub3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICBpZiAoIWRhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gYm9yZGVyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBkYXRhWzBdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKDApKTtcbiAgICAgICAgY29uc3QgbGFzdFBvaW50ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdLnNpemUodGhpcy5yZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zKGRhdGEubGVuZ3RoIC0gMSkpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoYm9yZGVyLCBmaXJzdFBvaW50LCBsYXN0UG9pbnQpIC8gMjtcbiAgICB9XG59XG5cbnZhciBjb250cm9sbGVycyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkJhckNvbnRyb2xsZXI6IEJhckNvbnRyb2xsZXIsXG5CdWJibGVDb250cm9sbGVyOiBCdWJibGVDb250cm9sbGVyLFxuRG91Z2hudXRDb250cm9sbGVyOiBEb3VnaG51dENvbnRyb2xsZXIsXG5MaW5lQ29udHJvbGxlcjogTGluZUNvbnRyb2xsZXIsXG5QaWVDb250cm9sbGVyOiBQaWVDb250cm9sbGVyLFxuUG9sYXJBcmVhQ29udHJvbGxlcjogUG9sYXJBcmVhQ29udHJvbGxlcixcblJhZGFyQ29udHJvbGxlcjogUmFkYXJDb250cm9sbGVyLFxuU2NhdHRlckNvbnRyb2xsZXI6IFNjYXR0ZXJDb250cm9sbGVyXG59KTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0Ll9hZGFwdGVyc1xuICogQHNpbmNlIDIuOC4wXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIGFic3RyYWN0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBtZXRob2QgaXMgbm90IGltcGxlbWVudGVkOiBDaGVjayB0aGF0IGEgY29tcGxldGUgZGF0ZSBhZGFwdGVyIGlzIHByb3ZpZGVkLicpO1xufVxuLyoqXG4gKiBEYXRlIGFkYXB0ZXIgKGN1cnJlbnQgdXNlZCBieSB0aGUgdGltZSBzY2FsZSlcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlXG4gKiBAbWVtYmVyb2YgQ2hhcnQuX2FkYXB0ZXJzXG4gKiBAcHJpdmF0ZVxuICovIGNsYXNzIERhdGVBZGFwdGVyQmFzZSB7XG4gICAgLyoqXG4gICAqIE92ZXJyaWRlIGRlZmF1bHQgZGF0ZSBhZGFwdGVyIG1ldGhvZHMuXG4gICAqIEFjY2VwdHMgdHlwZSBwYXJhbWV0ZXIgdG8gZGVmaW5lIG9wdGlvbnMgdHlwZS5cbiAgICogQGV4YW1wbGVcbiAgICogQ2hhcnQuX2FkYXB0ZXJzLl9kYXRlLm92ZXJyaWRlPHtteUFkYXB0ZXJPcHRpb246IHN0cmluZ30+KHtcbiAgICogICBpbml0KCkge1xuICAgKiAgICAgY29uc29sZS5sb2codGhpcy5vcHRpb25zLm15QWRhcHRlck9wdGlvbik7XG4gICAqICAgfVxuICAgKiB9KVxuICAgKi8gc3RhdGljIG92ZXJyaWRlKG1lbWJlcnMpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihEYXRlQWRhcHRlckJhc2UucHJvdG90eXBlLCBtZW1iZXJzKTtcbiAgICB9XG4gICAgb3B0aW9ucztcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKXtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAgIGluaXQoKSB7fVxuICAgIGZvcm1hdHMoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBwYXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGFkZCgpIHtcbiAgICAgICAgcmV0dXJuIGFic3RyYWN0KCk7XG4gICAgfVxuICAgIGRpZmYoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbiAgICBzdGFydE9mKCkge1xuICAgICAgICByZXR1cm4gYWJzdHJhY3QoKTtcbiAgICB9XG4gICAgZW5kT2YoKSB7XG4gICAgICAgIHJldHVybiBhYnN0cmFjdCgpO1xuICAgIH1cbn1cbnZhciBhZGFwdGVycyA9IHtcbiAgICBfZGF0ZTogRGF0ZUFkYXB0ZXJCYXNlXG59O1xuXG5mdW5jdGlvbiBiaW5hcnlTZWFyY2gobWV0YXNldCwgYXhpcywgdmFsdWUsIGludGVyc2VjdCkge1xuICAgIGNvbnN0IHsgY29udHJvbGxlciAsIGRhdGEgLCBfc29ydGVkICB9ID0gbWV0YXNldDtcbiAgICBjb25zdCBpU2NhbGUgPSBjb250cm9sbGVyLl9jYWNoZWRNZXRhLmlTY2FsZTtcbiAgICBpZiAoaVNjYWxlICYmIGF4aXMgPT09IGlTY2FsZS5heGlzICYmIGF4aXMgIT09ICdyJyAmJiBfc29ydGVkICYmIGRhdGEubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGxvb2t1cE1ldGhvZCA9IGlTY2FsZS5fcmV2ZXJzZVBpeGVscyA/IF9ybG9va3VwQnlLZXkgOiBfbG9va3VwQnlLZXk7XG4gICAgICAgIGlmICghaW50ZXJzZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyLl9zaGFyZWRPcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGRhdGFbMF07XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHR5cGVvZiBlbC5nZXRSYW5nZSA9PT0gJ2Z1bmN0aW9uJyAmJiBlbC5nZXRSYW5nZShheGlzKTtcbiAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gbG9va3VwTWV0aG9kKGRhdGEsIGF4aXMsIHZhbHVlIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IGxvb2t1cE1ldGhvZChkYXRhLCBheGlzLCB2YWx1ZSArIHJhbmdlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsbzogc3RhcnQubG8sXG4gICAgICAgICAgICAgICAgICAgIGhpOiBlbmQuaGlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvOiAwLFxuICAgICAgICBoaTogZGF0YS5sZW5ndGggLSAxXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBoYW5kbGVyLCBpbnRlcnNlY3QpIHtcbiAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW2F4aXNdO1xuICAgIGZvcihsZXQgaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBjb25zdCB7IGluZGV4ICwgZGF0YSAgfSA9IG1ldGFzZXRzW2ldO1xuICAgICAgICBjb25zdCB7IGxvICwgaGkgIH0gPSBiaW5hcnlTZWFyY2gobWV0YXNldHNbaV0sIGF4aXMsIHZhbHVlLCBpbnRlcnNlY3QpO1xuICAgICAgICBmb3IobGV0IGogPSBsbzsgaiA8PSBoaTsgKytqKXtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkYXRhW2pdO1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50LnNraXApIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyKGVsZW1lbnQsIGluZGV4LCBqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMoYXhpcykge1xuICAgIGNvbnN0IHVzZVggPSBheGlzLmluZGV4T2YoJ3gnKSAhPT0gLTE7XG4gICAgY29uc3QgdXNlWSA9IGF4aXMuaW5kZXhPZigneScpICE9PSAtMTtcbiAgICByZXR1cm4gZnVuY3Rpb24ocHQxLCBwdDIpIHtcbiAgICAgICAgY29uc3QgZGVsdGFYID0gdXNlWCA/IE1hdGguYWJzKHB0MS54IC0gcHQyLngpIDogMDtcbiAgICAgICAgY29uc3QgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhkZWx0YVgsIDIpICsgTWF0aC5wb3coZGVsdGFZLCAyKSk7XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgIGlmICghaW5jbHVkZUludmlzaWJsZSAmJiAhY2hhcnQuaXNQb2ludEluQXJlYShwb3NpdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBjb25zdCBldmFsdWF0aW9uRnVuYyA9IGZ1bmN0aW9uKGVsZW1lbnQsIGRhdGFzZXRJbmRleCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKCFpbmNsdWRlSW52aXNpYmxlICYmICFfaXNQb2ludEluQXJlYShlbGVtZW50LCBjaGFydC5jaGFydEFyZWEsIDApKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55LCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYywgdHJ1ZSk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RSYWRpYWxJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBsZXQgaXRlbXMgPSBbXTtcbiAgICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIGVuZEFuZ2xlICB9ID0gZWxlbWVudC5nZXRQcm9wcyhbXG4gICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAnZW5kQW5nbGUnXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IGFuZ2xlICB9ID0gZ2V0QW5nbGVGcm9tUG9pbnQoZWxlbWVudCwge1xuICAgICAgICAgICAgeDogcG9zaXRpb24ueCxcbiAgICAgICAgICAgIHk6IHBvc2l0aW9uLnlcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChfYW5nbGVCZXR3ZWVuKGFuZ2xlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSkpIHtcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCBldmFsdWF0aW9uRnVuYyk7XG4gICAgcmV0dXJuIGl0ZW1zO1xufVxuIGZ1bmN0aW9uIGdldE5lYXJlc3RDYXJ0ZXNpYW5JdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkge1xuICAgIGxldCBpdGVtcyA9IFtdO1xuICAgIGNvbnN0IGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKGF4aXMpO1xuICAgIGxldCBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICBmdW5jdGlvbiBldmFsdWF0aW9uRnVuYyhlbGVtZW50LCBkYXRhc2V0SW5kZXgsIGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGluUmFuZ2UgPSBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGlmIChpbnRlcnNlY3QgJiYgIWluUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZW50ZXIgPSBlbGVtZW50LmdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCBwb2ludEluQXJlYSA9ICEhaW5jbHVkZUludmlzaWJsZSB8fCBjaGFydC5pc1BvaW50SW5BcmVhKGNlbnRlcik7XG4gICAgICAgIGlmICghcG9pbnRJbkFyZWEgJiYgIWluUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGRpc3RhbmNlTWV0cmljKHBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuICAgICAgICAgICAgaXRlbXMgPSBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIG1pbkRpc3RhbmNlID0gZGlzdGFuY2U7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2UgPT09IG1pbkRpc3RhbmNlKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleCxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zKGNoYXJ0LCBheGlzLCBwb3NpdGlvbiwgZXZhbHVhdGlvbkZ1bmMpO1xuICAgIHJldHVybiBpdGVtcztcbn1cbiBmdW5jdGlvbiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIHtcbiAgICBpZiAoIWluY2x1ZGVJbnZpc2libGUgJiYgIWNoYXJ0LmlzUG9pbnRJbkFyZWEocG9zaXRpb24pKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIGF4aXMgPT09ICdyJyAmJiAhaW50ZXJzZWN0ID8gZ2V0TmVhcmVzdFJhZGlhbEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbikgOiBnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBpbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xufVxuIGZ1bmN0aW9uIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIGludGVyc2VjdCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgY29uc3QgcmFuZ2VNZXRob2QgPSBheGlzID09PSAneCcgPyAnaW5YUmFuZ2UnIDogJ2luWVJhbmdlJztcbiAgICBsZXQgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcbiAgICBldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMoY2hhcnQsIGF4aXMsIHBvc2l0aW9uLCAoZWxlbWVudCwgZGF0YXNldEluZGV4LCBpbmRleCk9PntcbiAgICAgICAgaWYgKGVsZW1lbnRbcmFuZ2VNZXRob2RdKHBvc2l0aW9uW2F4aXNdLCB1c2VGaW5hbFBvc2l0aW9uKSkge1xuICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaW50ZXJzZWN0c0l0ZW0gPSBpbnRlcnNlY3RzSXRlbSB8fCBlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoaW50ZXJzZWN0ICYmICFpbnRlcnNlY3RzSXRlbSkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIHJldHVybiBpdGVtcztcbn1cbiB2YXIgSW50ZXJhY3Rpb24gPSB7XG4gICAgZXZhbHVhdGVJbnRlcmFjdGlvbkl0ZW1zLFxuICAgIG1vZGVzOiB7XG4gaW5kZXggKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneCc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBvcHRpb25zLmludGVyc2VjdCA/IGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSkgOiBnZXROZWFyZXN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCBmYWxzZSwgdXNlRmluYWxQb3NpdGlvbiwgaW5jbHVkZUludmlzaWJsZSk7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50cyA9IFtdO1xuICAgICAgICAgICAgaWYgKCFpdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCkuZm9yRWFjaCgobWV0YSk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1zWzBdLmluZGV4O1xuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBtZXRhLmRhdGFbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICYmICFlbGVtZW50LnNraXApIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBtZXRhLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgICAgIH0sXG4gZGF0YXNldCAoY2hhcnQsIGUsIG9wdGlvbnMsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG4gICAgICAgICAgICBjb25zdCBpbmNsdWRlSW52aXNpYmxlID0gb3B0aW9ucy5pbmNsdWRlSW52aXNpYmxlIHx8IGZhbHNlO1xuICAgICAgICAgICAgbGV0IGl0ZW1zID0gb3B0aW9ucy5pbnRlcnNlY3QgPyBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGF4aXMsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpIDogZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgZmFsc2UsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICAgICAgaWYgKGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhc2V0SW5kZXggPSBpdGVtc1swXS5kYXRhc2V0SW5kZXg7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuZGF0YTtcbiAgICAgICAgICAgICAgICBpdGVtcyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiBkYXRhW2ldLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGlcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgICAgICB9LFxuIHBvaW50IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uLCBheGlzLCB1c2VGaW5hbFBvc2l0aW9uLCBpbmNsdWRlSW52aXNpYmxlKTtcbiAgICAgICAgfSxcbiBuZWFyZXN0IChjaGFydCwgZSwgb3B0aW9ucywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBvcHRpb25zLmF4aXMgfHwgJ3h5JztcbiAgICAgICAgICAgIGNvbnN0IGluY2x1ZGVJbnZpc2libGUgPSBvcHRpb25zLmluY2x1ZGVJbnZpc2libGUgfHwgZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgYXhpcywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24sIGluY2x1ZGVJbnZpc2libGUpO1xuICAgICAgICB9LFxuIHggKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd4Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9LFxuIHkgKGNoYXJ0LCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNJdGVtcyhjaGFydCwgcG9zaXRpb24sICd5Jywgb3B0aW9ucy5pbnRlcnNlY3QsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3QgU1RBVElDX1BPU0lUSU9OUyA9IFtcbiAgICAnbGVmdCcsXG4gICAgJ3RvcCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnYm90dG9tJ1xuXTtcbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oYXJyYXksIHBvc2l0aW9uKSB7XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigodik9PnYucG9zID09PSBwb3NpdGlvbik7XG59XG5mdW5jdGlvbiBmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMoYXJyYXksIGF4aXMpIHtcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKCh2KT0+U1RBVElDX1BPU0lUSU9OUy5pbmRleE9mKHYucG9zKSA9PT0gLTEgJiYgdi5ib3guYXhpcyA9PT0gYXhpcyk7XG59XG5mdW5jdGlvbiBzb3J0QnlXZWlnaHQoYXJyYXksIHJldmVyc2UpIHtcbiAgICByZXR1cm4gYXJyYXkuc29ydCgoYSwgYik9PntcbiAgICAgICAgY29uc3QgdjAgPSByZXZlcnNlID8gYiA6IGE7XG4gICAgICAgIGNvbnN0IHYxID0gcmV2ZXJzZSA/IGEgOiBiO1xuICAgICAgICByZXR1cm4gdjAud2VpZ2h0ID09PSB2MS53ZWlnaHQgPyB2MC5pbmRleCAtIHYxLmluZGV4IDogdjAud2VpZ2h0IC0gdjEud2VpZ2h0O1xuICAgIH0pO1xufVxuZnVuY3Rpb24gd3JhcEJveGVzKGJveGVzKSB7XG4gICAgY29uc3QgbGF5b3V0Qm94ZXMgPSBbXTtcbiAgICBsZXQgaSwgaWxlbiwgYm94LCBwb3MsIHN0YWNrLCBzdGFja1dlaWdodDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSAoYm94ZXMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGJveCA9IGJveGVzW2ldO1xuICAgICAgICAoeyBwb3NpdGlvbjogcG9zICwgb3B0aW9uczogeyBzdGFjayAsIHN0YWNrV2VpZ2h0ID0xICB9ICB9ID0gYm94KTtcbiAgICAgICAgbGF5b3V0Qm94ZXMucHVzaCh7XG4gICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgIGJveCxcbiAgICAgICAgICAgIHBvcyxcbiAgICAgICAgICAgIGhvcml6b250YWw6IGJveC5pc0hvcml6b250YWwoKSxcbiAgICAgICAgICAgIHdlaWdodDogYm94LndlaWdodCxcbiAgICAgICAgICAgIHN0YWNrOiBzdGFjayAmJiBwb3MgKyBzdGFjayxcbiAgICAgICAgICAgIHN0YWNrV2VpZ2h0XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbGF5b3V0Qm94ZXM7XG59XG5mdW5jdGlvbiBidWlsZFN0YWNrcyhsYXlvdXRzKSB7XG4gICAgY29uc3Qgc3RhY2tzID0ge307XG4gICAgZm9yIChjb25zdCB3cmFwIG9mIGxheW91dHMpe1xuICAgICAgICBjb25zdCB7IHN0YWNrICwgcG9zICwgc3RhY2tXZWlnaHQgIH0gPSB3cmFwO1xuICAgICAgICBpZiAoIXN0YWNrIHx8ICFTVEFUSUNfUE9TSVRJT05TLmluY2x1ZGVzKHBvcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IF9zdGFjayA9IHN0YWNrc1tzdGFja10gfHwgKHN0YWNrc1tzdGFja10gPSB7XG4gICAgICAgICAgICBjb3VudDogMCxcbiAgICAgICAgICAgIHBsYWNlZDogMCxcbiAgICAgICAgICAgIHdlaWdodDogMCxcbiAgICAgICAgICAgIHNpemU6IDBcbiAgICAgICAgfSk7XG4gICAgICAgIF9zdGFjay5jb3VudCsrO1xuICAgICAgICBfc3RhY2sud2VpZ2h0ICs9IHN0YWNrV2VpZ2h0O1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2tzO1xufVxuIGZ1bmN0aW9uIHNldExheW91dERpbXMobGF5b3V0cywgcGFyYW1zKSB7XG4gICAgY29uc3Qgc3RhY2tzID0gYnVpbGRTdGFja3MobGF5b3V0cyk7XG4gICAgY29uc3QgeyB2Qm94TWF4V2lkdGggLCBoQm94TWF4SGVpZ2h0ICB9ID0gcGFyYW1zO1xuICAgIGxldCBpLCBpbGVuLCBsYXlvdXQ7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gbGF5b3V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICBsYXlvdXQgPSBsYXlvdXRzW2ldO1xuICAgICAgICBjb25zdCB7IGZ1bGxTaXplICB9ID0gbGF5b3V0LmJveDtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzdGFja3NbbGF5b3V0LnN0YWNrXTtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gc3RhY2sgJiYgbGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0O1xuICAgICAgICBpZiAobGF5b3V0Lmhvcml6b250YWwpIHtcbiAgICAgICAgICAgIGxheW91dC53aWR0aCA9IGZhY3RvciA/IGZhY3RvciAqIHZCb3hNYXhXaWR0aCA6IGZ1bGxTaXplICYmIHBhcmFtcy5hdmFpbGFibGVXaWR0aDtcbiAgICAgICAgICAgIGxheW91dC5oZWlnaHQgPSBoQm94TWF4SGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGF5b3V0LndpZHRoID0gdkJveE1heFdpZHRoO1xuICAgICAgICAgICAgbGF5b3V0LmhlaWdodCA9IGZhY3RvciA/IGZhY3RvciAqIGhCb3hNYXhIZWlnaHQgOiBmdWxsU2l6ZSAmJiBwYXJhbXMuYXZhaWxhYmxlSGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGFja3M7XG59XG5mdW5jdGlvbiBidWlsZExheW91dEJveGVzKGJveGVzKSB7XG4gICAgY29uc3QgbGF5b3V0Qm94ZXMgPSB3cmFwQm94ZXMoYm94ZXMpO1xuICAgIGNvbnN0IGZ1bGxTaXplID0gc29ydEJ5V2VpZ2h0KGxheW91dEJveGVzLmZpbHRlcigod3JhcCk9PndyYXAuYm94LmZ1bGxTaXplKSwgdHJ1ZSk7XG4gICAgY29uc3QgbGVmdCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAnbGVmdCcpLCB0cnVlKTtcbiAgICBjb25zdCByaWdodCA9IHNvcnRCeVdlaWdodChmaWx0ZXJCeVBvc2l0aW9uKGxheW91dEJveGVzLCAncmlnaHQnKSk7XG4gICAgY29uc3QgdG9wID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICd0b3AnKSwgdHJ1ZSk7XG4gICAgY29uc3QgYm90dG9tID0gc29ydEJ5V2VpZ2h0KGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdib3R0b20nKSk7XG4gICAgY29uc3QgY2VudGVySG9yaXpvbnRhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3gnKTtcbiAgICBjb25zdCBjZW50ZXJWZXJ0aWNhbCA9IGZpbHRlckR5bmFtaWNQb3NpdGlvbkJ5QXhpcyhsYXlvdXRCb3hlcywgJ3knKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBmdWxsU2l6ZSxcbiAgICAgICAgbGVmdEFuZFRvcDogbGVmdC5jb25jYXQodG9wKSxcbiAgICAgICAgcmlnaHRBbmRCb3R0b206IHJpZ2h0LmNvbmNhdChjZW50ZXJWZXJ0aWNhbCkuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpLFxuICAgICAgICBjaGFydEFyZWE6IGZpbHRlckJ5UG9zaXRpb24obGF5b3V0Qm94ZXMsICdjaGFydEFyZWEnKSxcbiAgICAgICAgdmVydGljYWw6IGxlZnQuY29uY2F0KHJpZ2h0KS5jb25jYXQoY2VudGVyVmVydGljYWwpLFxuICAgICAgICBob3Jpem9udGFsOiB0b3AuY29uY2F0KGJvdHRvbSkuY29uY2F0KGNlbnRlckhvcml6b250YWwpXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldENvbWJpbmVkTWF4KG1heFBhZGRpbmcsIGNoYXJ0QXJlYSwgYSwgYikge1xuICAgIHJldHVybiBNYXRoLm1heChtYXhQYWRkaW5nW2FdLCBjaGFydEFyZWFbYV0pICsgTWF0aC5tYXgobWF4UGFkZGluZ1tiXSwgY2hhcnRBcmVhW2JdKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgYm94UGFkZGluZykge1xuICAgIG1heFBhZGRpbmcudG9wID0gTWF0aC5tYXgobWF4UGFkZGluZy50b3AsIGJveFBhZGRpbmcudG9wKTtcbiAgICBtYXhQYWRkaW5nLmxlZnQgPSBNYXRoLm1heChtYXhQYWRkaW5nLmxlZnQsIGJveFBhZGRpbmcubGVmdCk7XG4gICAgbWF4UGFkZGluZy5ib3R0b20gPSBNYXRoLm1heChtYXhQYWRkaW5nLmJvdHRvbSwgYm94UGFkZGluZy5ib3R0b20pO1xuICAgIG1heFBhZGRpbmcucmlnaHQgPSBNYXRoLm1heChtYXhQYWRkaW5nLnJpZ2h0LCBib3hQYWRkaW5nLnJpZ2h0KTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZURpbXMoY2hhcnRBcmVhLCBwYXJhbXMsIGxheW91dCwgc3RhY2tzKSB7XG4gICAgY29uc3QgeyBwb3MgLCBib3ggIH0gPSBsYXlvdXQ7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGlmICghaXNPYmplY3QocG9zKSkge1xuICAgICAgICBpZiAobGF5b3V0LnNpemUpIHtcbiAgICAgICAgICAgIGNoYXJ0QXJlYVtwb3NdIC09IGxheW91dC5zaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge1xuICAgICAgICAgICAgc2l6ZTogMCxcbiAgICAgICAgICAgIGNvdW50OiAxXG4gICAgICAgIH07XG4gICAgICAgIHN0YWNrLnNpemUgPSBNYXRoLm1heChzdGFjay5zaXplLCBsYXlvdXQuaG9yaXpvbnRhbCA/IGJveC5oZWlnaHQgOiBib3gud2lkdGgpO1xuICAgICAgICBsYXlvdXQuc2l6ZSA9IHN0YWNrLnNpemUgLyBzdGFjay5jb3VudDtcbiAgICAgICAgY2hhcnRBcmVhW3Bvc10gKz0gbGF5b3V0LnNpemU7XG4gICAgfVxuICAgIGlmIChib3guZ2V0UGFkZGluZykge1xuICAgICAgICB1cGRhdGVNYXhQYWRkaW5nKG1heFBhZGRpbmcsIGJveC5nZXRQYWRkaW5nKCkpO1xuICAgIH1cbiAgICBjb25zdCBuZXdXaWR0aCA9IE1hdGgubWF4KDAsIHBhcmFtcy5vdXRlcldpZHRoIC0gZ2V0Q29tYmluZWRNYXgobWF4UGFkZGluZywgY2hhcnRBcmVhLCAnbGVmdCcsICdyaWdodCcpKTtcbiAgICBjb25zdCBuZXdIZWlnaHQgPSBNYXRoLm1heCgwLCBwYXJhbXMub3V0ZXJIZWlnaHQgLSBnZXRDb21iaW5lZE1heChtYXhQYWRkaW5nLCBjaGFydEFyZWEsICd0b3AnLCAnYm90dG9tJykpO1xuICAgIGNvbnN0IHdpZHRoQ2hhbmdlZCA9IG5ld1dpZHRoICE9PSBjaGFydEFyZWEudztcbiAgICBjb25zdCBoZWlnaHRDaGFuZ2VkID0gbmV3SGVpZ2h0ICE9PSBjaGFydEFyZWEuaDtcbiAgICBjaGFydEFyZWEudyA9IG5ld1dpZHRoO1xuICAgIGNoYXJ0QXJlYS5oID0gbmV3SGVpZ2h0O1xuICAgIHJldHVybiBsYXlvdXQuaG9yaXpvbnRhbCA/IHtcbiAgICAgICAgc2FtZTogd2lkdGhDaGFuZ2VkLFxuICAgICAgICBvdGhlcjogaGVpZ2h0Q2hhbmdlZFxuICAgIH0gOiB7XG4gICAgICAgIHNhbWU6IGhlaWdodENoYW5nZWQsXG4gICAgICAgIG90aGVyOiB3aWR0aENoYW5nZWRcbiAgICB9O1xufVxuZnVuY3Rpb24gaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpIHtcbiAgICBjb25zdCBtYXhQYWRkaW5nID0gY2hhcnRBcmVhLm1heFBhZGRpbmc7XG4gICAgZnVuY3Rpb24gdXBkYXRlUG9zKHBvcykge1xuICAgICAgICBjb25zdCBjaGFuZ2UgPSBNYXRoLm1heChtYXhQYWRkaW5nW3Bvc10gLSBjaGFydEFyZWFbcG9zXSwgMCk7XG4gICAgICAgIGNoYXJ0QXJlYVtwb3NdICs9IGNoYW5nZTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZTtcbiAgICB9XG4gICAgY2hhcnRBcmVhLnkgKz0gdXBkYXRlUG9zKCd0b3AnKTtcbiAgICBjaGFydEFyZWEueCArPSB1cGRhdGVQb3MoJ2xlZnQnKTtcbiAgICB1cGRhdGVQb3MoJ3JpZ2h0Jyk7XG4gICAgdXBkYXRlUG9zKCdib3R0b20nKTtcbn1cbmZ1bmN0aW9uIGdldE1hcmdpbnMoaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSB7XG4gICAgY29uc3QgbWF4UGFkZGluZyA9IGNoYXJ0QXJlYS5tYXhQYWRkaW5nO1xuICAgIGZ1bmN0aW9uIG1hcmdpbkZvclBvc2l0aW9ucyhwb3NpdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWFyZ2luID0ge1xuICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgYm90dG9tOiAwXG4gICAgICAgIH07XG4gICAgICAgIHBvc2l0aW9ucy5mb3JFYWNoKChwb3MpPT57XG4gICAgICAgICAgICBtYXJnaW5bcG9zXSA9IE1hdGgubWF4KGNoYXJ0QXJlYVtwb3NdLCBtYXhQYWRkaW5nW3Bvc10pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG1hcmdpbjtcbiAgICB9XG4gICAgcmV0dXJuIGhvcml6b250YWwgPyBtYXJnaW5Gb3JQb3NpdGlvbnMoW1xuICAgICAgICAnbGVmdCcsXG4gICAgICAgICdyaWdodCdcbiAgICBdKSA6IG1hcmdpbkZvclBvc2l0aW9ucyhbXG4gICAgICAgICd0b3AnLFxuICAgICAgICAnYm90dG9tJ1xuICAgIF0pO1xufVxuZnVuY3Rpb24gZml0Qm94ZXMoYm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpIHtcbiAgICBjb25zdCByZWZpdEJveGVzID0gW107XG4gICAgbGV0IGksIGlsZW4sIGxheW91dCwgYm94LCByZWZpdCwgY2hhbmdlZDtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSBib3hlcy5sZW5ndGgsIHJlZml0ID0gMDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGxheW91dCA9IGJveGVzW2ldO1xuICAgICAgICBib3ggPSBsYXlvdXQuYm94O1xuICAgICAgICBib3gudXBkYXRlKGxheW91dC53aWR0aCB8fCBjaGFydEFyZWEudywgbGF5b3V0LmhlaWdodCB8fCBjaGFydEFyZWEuaCwgZ2V0TWFyZ2lucyhsYXlvdXQuaG9yaXpvbnRhbCwgY2hhcnRBcmVhKSk7XG4gICAgICAgIGNvbnN0IHsgc2FtZSAsIG90aGVyICB9ID0gdXBkYXRlRGltcyhjaGFydEFyZWEsIHBhcmFtcywgbGF5b3V0LCBzdGFja3MpO1xuICAgICAgICByZWZpdCB8PSBzYW1lICYmIHJlZml0Qm94ZXMubGVuZ3RoO1xuICAgICAgICBjaGFuZ2VkID0gY2hhbmdlZCB8fCBvdGhlcjtcbiAgICAgICAgaWYgKCFib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgIHJlZml0Qm94ZXMucHVzaChsYXlvdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZWZpdCAmJiBmaXRCb3hlcyhyZWZpdEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB8fCBjaGFuZ2VkO1xufVxuZnVuY3Rpb24gc2V0Qm94RGltcyhib3gsIGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCkge1xuICAgIGJveC50b3AgPSB0b3A7XG4gICAgYm94LmxlZnQgPSBsZWZ0O1xuICAgIGJveC5yaWdodCA9IGxlZnQgKyB3aWR0aDtcbiAgICBib3guYm90dG9tID0gdG9wICsgaGVpZ2h0O1xuICAgIGJveC53aWR0aCA9IHdpZHRoO1xuICAgIGJveC5oZWlnaHQgPSBoZWlnaHQ7XG59XG5mdW5jdGlvbiBwbGFjZUJveGVzKGJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSB7XG4gICAgY29uc3QgdXNlclBhZGRpbmcgPSBwYXJhbXMucGFkZGluZztcbiAgICBsZXQgeyB4ICwgeSAgfSA9IGNoYXJ0QXJlYTtcbiAgICBmb3IgKGNvbnN0IGxheW91dCBvZiBib3hlcyl7XG4gICAgICAgIGNvbnN0IGJveCA9IGxheW91dC5ib3g7XG4gICAgICAgIGNvbnN0IHN0YWNrID0gc3RhY2tzW2xheW91dC5zdGFja10gfHwge1xuICAgICAgICAgICAgY291bnQ6IDEsXG4gICAgICAgICAgICBwbGFjZWQ6IDAsXG4gICAgICAgICAgICB3ZWlnaHQ6IDFcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgd2VpZ2h0ID0gbGF5b3V0LnN0YWNrV2VpZ2h0IC8gc3RhY2sud2VpZ2h0IHx8IDE7XG4gICAgICAgIGlmIChsYXlvdXQuaG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBjaGFydEFyZWEudyAqIHdlaWdodDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHN0YWNrLnNpemUgfHwgYm94LmhlaWdodDtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIHkgPSBzdGFjay5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgdXNlclBhZGRpbmcubGVmdCwgeSwgcGFyYW1zLm91dGVyV2lkdGggLSB1c2VyUGFkZGluZy5yaWdodCAtIHVzZXJQYWRkaW5nLmxlZnQsIGhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEJveERpbXMoYm94LCBjaGFydEFyZWEubGVmdCArIHN0YWNrLnBsYWNlZCwgeSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5zdGFydCA9IHk7XG4gICAgICAgICAgICBzdGFjay5wbGFjZWQgKz0gd2lkdGg7XG4gICAgICAgICAgICB5ID0gYm94LmJvdHRvbTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IGNoYXJ0QXJlYS5oICogd2VpZ2h0O1xuICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBzdGFjay5zaXplIHx8IGJveC53aWR0aDtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHN0YWNrLnN0YXJ0KSkge1xuICAgICAgICAgICAgICAgIHggPSBzdGFjay5zdGFydDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guZnVsbFNpemUpIHtcbiAgICAgICAgICAgICAgICBzZXRCb3hEaW1zKGJveCwgeCwgdXNlclBhZGRpbmcudG9wLCB3aWR0aCwgcGFyYW1zLm91dGVySGVpZ2h0IC0gdXNlclBhZGRpbmcuYm90dG9tIC0gdXNlclBhZGRpbmcudG9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0Qm94RGltcyhib3gsIHgsIGNoYXJ0QXJlYS50b3AgKyBzdGFjay5wbGFjZWQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2suc3RhcnQgPSB4O1xuICAgICAgICAgICAgc3RhY2sucGxhY2VkICs9IGhlaWdodDtcbiAgICAgICAgICAgIHggPSBib3gucmlnaHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2hhcnRBcmVhLnggPSB4O1xuICAgIGNoYXJ0QXJlYS55ID0geTtcbn1cbnZhciBsYXlvdXRzID0ge1xuIGFkZEJveCAoY2hhcnQsIGl0ZW0pIHtcbiAgICAgICAgaWYgKCFjaGFydC5ib3hlcykge1xuICAgICAgICAgICAgY2hhcnQuYm94ZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpdGVtLmZ1bGxTaXplID0gaXRlbS5mdWxsU2l6ZSB8fCBmYWxzZTtcbiAgICAgICAgaXRlbS5wb3NpdGlvbiA9IGl0ZW0ucG9zaXRpb24gfHwgJ3RvcCc7XG4gICAgICAgIGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcbiAgICAgICAgaXRlbS5fbGF5ZXJzID0gaXRlbS5fbGF5ZXJzIHx8IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHo6IDAsXG4gICAgICAgICAgICAgICAgICAgIGRyYXcgKGNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kcmF3KGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdO1xuICAgICAgICB9O1xuICAgICAgICBjaGFydC5ib3hlcy5wdXNoKGl0ZW0pO1xuICAgIH0sXG4gcmVtb3ZlQm94IChjaGFydCwgbGF5b3V0SXRlbSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IGNoYXJ0LmJveGVzID8gY2hhcnQuYm94ZXMuaW5kZXhPZihsYXlvdXRJdGVtKSA6IC0xO1xuICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICBjaGFydC5ib3hlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfSxcbiBjb25maWd1cmUgKGNoYXJ0LCBpdGVtLCBvcHRpb25zKSB7XG4gICAgICAgIGl0ZW0uZnVsbFNpemUgPSBvcHRpb25zLmZ1bGxTaXplO1xuICAgICAgICBpdGVtLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgaXRlbS53ZWlnaHQgPSBvcHRpb25zLndlaWdodDtcbiAgICB9LFxuIHVwZGF0ZSAoY2hhcnQsIHdpZHRoLCBoZWlnaHQsIG1pblBhZGRpbmcpIHtcbiAgICAgICAgaWYgKCFjaGFydCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcoY2hhcnQub3B0aW9ucy5sYXlvdXQucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZVdpZHRoID0gTWF0aC5tYXgod2lkdGggLSBwYWRkaW5nLndpZHRoLCAwKTtcbiAgICAgICAgY29uc3QgYXZhaWxhYmxlSGVpZ2h0ID0gTWF0aC5tYXgoaGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQsIDApO1xuICAgICAgICBjb25zdCBib3hlcyA9IGJ1aWxkTGF5b3V0Qm94ZXMoY2hhcnQuYm94ZXMpO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbEJveGVzID0gYm94ZXMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWxCb3hlcyA9IGJveGVzLmhvcml6b250YWw7XG4gICAgICAgIGVhY2goY2hhcnQuYm94ZXMsIChib3gpPT57XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJveC5iZWZvcmVMYXlvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBib3guYmVmb3JlTGF5b3V0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB2aXNpYmxlVmVydGljYWxCb3hDb3VudCA9IHZlcnRpY2FsQm94ZXMucmVkdWNlKCh0b3RhbCwgd3JhcCk9PndyYXAuYm94Lm9wdGlvbnMgJiYgd3JhcC5ib3gub3B0aW9ucy5kaXNwbGF5ID09PSBmYWxzZSA/IHRvdGFsIDogdG90YWwgKyAxLCAwKSB8fCAxO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuZnJlZXplKHtcbiAgICAgICAgICAgIG91dGVyV2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgb3V0ZXJIZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgIHBhZGRpbmcsXG4gICAgICAgICAgICBhdmFpbGFibGVXaWR0aCxcbiAgICAgICAgICAgIGF2YWlsYWJsZUhlaWdodCxcbiAgICAgICAgICAgIHZCb3hNYXhXaWR0aDogYXZhaWxhYmxlV2lkdGggLyAyIC8gdmlzaWJsZVZlcnRpY2FsQm94Q291bnQsXG4gICAgICAgICAgICBoQm94TWF4SGVpZ2h0OiBhdmFpbGFibGVIZWlnaHQgLyAyXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBtYXhQYWRkaW5nID0gT2JqZWN0LmFzc2lnbih7fSwgcGFkZGluZyk7XG4gICAgICAgIHVwZGF0ZU1heFBhZGRpbmcobWF4UGFkZGluZywgdG9QYWRkaW5nKG1pblBhZGRpbmcpKTtcbiAgICAgICAgY29uc3QgY2hhcnRBcmVhID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBtYXhQYWRkaW5nLFxuICAgICAgICAgICAgdzogYXZhaWxhYmxlV2lkdGgsXG4gICAgICAgICAgICBoOiBhdmFpbGFibGVIZWlnaHQsXG4gICAgICAgICAgICB4OiBwYWRkaW5nLmxlZnQsXG4gICAgICAgICAgICB5OiBwYWRkaW5nLnRvcFxuICAgICAgICB9LCBwYWRkaW5nKTtcbiAgICAgICAgY29uc3Qgc3RhY2tzID0gc2V0TGF5b3V0RGltcyh2ZXJ0aWNhbEJveGVzLmNvbmNhdChob3Jpem9udGFsQm94ZXMpLCBwYXJhbXMpO1xuICAgICAgICBmaXRCb3hlcyhib3hlcy5mdWxsU2l6ZSwgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIGZpdEJveGVzKHZlcnRpY2FsQm94ZXMsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBpZiAoZml0Qm94ZXMoaG9yaXpvbnRhbEJveGVzLCBjaGFydEFyZWEsIHBhcmFtcywgc3RhY2tzKSkge1xuICAgICAgICAgICAgZml0Qm94ZXModmVydGljYWxCb3hlcywgY2hhcnRBcmVhLCBwYXJhbXMsIHN0YWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgaGFuZGxlTWF4UGFkZGluZyhjaGFydEFyZWEpO1xuICAgICAgICBwbGFjZUJveGVzKGJveGVzLmxlZnRBbmRUb3AsIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBjaGFydEFyZWEueCArPSBjaGFydEFyZWEudztcbiAgICAgICAgY2hhcnRBcmVhLnkgKz0gY2hhcnRBcmVhLmg7XG4gICAgICAgIHBsYWNlQm94ZXMoYm94ZXMucmlnaHRBbmRCb3R0b20sIGNoYXJ0QXJlYSwgcGFyYW1zLCBzdGFja3MpO1xuICAgICAgICBjaGFydC5jaGFydEFyZWEgPSB7XG4gICAgICAgICAgICBsZWZ0OiBjaGFydEFyZWEubGVmdCxcbiAgICAgICAgICAgIHRvcDogY2hhcnRBcmVhLnRvcCxcbiAgICAgICAgICAgIHJpZ2h0OiBjaGFydEFyZWEubGVmdCArIGNoYXJ0QXJlYS53LFxuICAgICAgICAgICAgYm90dG9tOiBjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmgsXG4gICAgICAgICAgICBoZWlnaHQ6IGNoYXJ0QXJlYS5oLFxuICAgICAgICAgICAgd2lkdGg6IGNoYXJ0QXJlYS53XG4gICAgICAgIH07XG4gICAgICAgIGVhY2goYm94ZXMuY2hhcnRBcmVhLCAobGF5b3V0KT0+e1xuICAgICAgICAgICAgY29uc3QgYm94ID0gbGF5b3V0LmJveDtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oYm94LCBjaGFydC5jaGFydEFyZWEpO1xuICAgICAgICAgICAgYm94LnVwZGF0ZShjaGFydEFyZWEudywgY2hhcnRBcmVhLmgsIHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xuXG5jbGFzcyBCYXNlUGxhdGZvcm0ge1xuIGFjcXVpcmVDb250ZXh0KGNhbnZhcywgYXNwZWN0UmF0aW8pIHt9XG4gcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuIHJlbW92ZUV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7fVxuIGdldERldmljZVBpeGVsUmF0aW8oKSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cbiBnZXRNYXhpbXVtU2l6ZShlbGVtZW50LCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbykge1xuICAgICAgICB3aWR0aCA9IE1hdGgubWF4KDAsIHdpZHRoIHx8IGVsZW1lbnQud2lkdGgpO1xuICAgICAgICBoZWlnaHQgPSBoZWlnaHQgfHwgZWxlbWVudC5oZWlnaHQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogTWF0aC5tYXgoMCwgYXNwZWN0UmF0aW8gPyBNYXRoLmZsb29yKHdpZHRoIC8gYXNwZWN0UmF0aW8pIDogaGVpZ2h0KVxuICAgICAgICB9O1xuICAgIH1cbiBpc0F0dGFjaGVkKGNhbnZhcykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gdXBkYXRlQ29uZmlnKGNvbmZpZykge1xuICAgIH1cbn1cblxuY2xhc3MgQmFzaWNQbGF0Zm9ybSBleHRlbmRzIEJhc2VQbGF0Zm9ybSB7XG4gICAgYWNxdWlyZUNvbnRleHQoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAmJiBpdGVtLmdldENvbnRleHQgJiYgaXRlbS5nZXRDb250ZXh0KCcyZCcpIHx8IG51bGw7XG4gICAgfVxuICAgIHVwZGF0ZUNvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uZmlnLm9wdGlvbnMuYW5pbWF0aW9uID0gZmFsc2U7XG4gICAgfVxufVxuXG5jb25zdCBFWFBBTkRPX0tFWSA9ICckY2hhcnRqcyc7XG4gY29uc3QgRVZFTlRfVFlQRVMgPSB7XG4gICAgdG91Y2hzdGFydDogJ21vdXNlZG93bicsXG4gICAgdG91Y2htb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICB0b3VjaGVuZDogJ21vdXNldXAnLFxuICAgIHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuICAgIHBvaW50ZXJkb3duOiAnbW91c2Vkb3duJyxcbiAgICBwb2ludGVybW92ZTogJ21vdXNlbW92ZScsXG4gICAgcG9pbnRlcnVwOiAnbW91c2V1cCcsXG4gICAgcG9pbnRlcmxlYXZlOiAnbW91c2VvdXQnLFxuICAgIHBvaW50ZXJvdXQ6ICdtb3VzZW91dCdcbn07XG5jb25zdCBpc051bGxPckVtcHR5ID0gKHZhbHVlKT0+dmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09ICcnO1xuIGZ1bmN0aW9uIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IHN0eWxlID0gY2FudmFzLnN0eWxlO1xuICAgIGNvbnN0IHJlbmRlckhlaWdodCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpO1xuICAgIGNvbnN0IHJlbmRlcldpZHRoID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKTtcbiAgICBjYW52YXNbRVhQQU5ET19LRVldID0ge1xuICAgICAgICBpbml0aWFsOiB7XG4gICAgICAgICAgICBoZWlnaHQ6IHJlbmRlckhlaWdodCxcbiAgICAgICAgICAgIHdpZHRoOiByZW5kZXJXaWR0aCxcbiAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogc3R5bGUuZGlzcGxheSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHN0eWxlLmhlaWdodCxcbiAgICAgICAgICAgICAgICB3aWR0aDogc3R5bGUud2lkdGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgc3R5bGUuZGlzcGxheSA9IHN0eWxlLmRpc3BsYXkgfHwgJ2Jsb2NrJztcbiAgICBzdHlsZS5ib3hTaXppbmcgPSBzdHlsZS5ib3hTaXppbmcgfHwgJ2JvcmRlci1ib3gnO1xuICAgIGlmIChpc051bGxPckVtcHR5KHJlbmRlcldpZHRoKSkge1xuICAgICAgICBjb25zdCBkaXNwbGF5V2lkdGggPSByZWFkVXNlZFNpemUoY2FudmFzLCAnd2lkdGgnKTtcbiAgICAgICAgaWYgKGRpc3BsYXlXaWR0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjYW52YXMud2lkdGggPSBkaXNwbGF5V2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVsbE9yRW1wdHkocmVuZGVySGVpZ2h0KSkge1xuICAgICAgICBpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBjYW52YXMud2lkdGggLyAoYXNwZWN0UmF0aW8gfHwgMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5SGVpZ2h0ID0gcmVhZFVzZWRTaXplKGNhbnZhcywgJ2hlaWdodCcpO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXlIZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkaXNwbGF5SGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjYW52YXM7XG59XG5jb25zdCBldmVudExpc3RlbmVyT3B0aW9ucyA9IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPyB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxufSA6IGZhbHNlO1xuZnVuY3Rpb24gYWRkTGlzdGVuZXIobm9kZSwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIGV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNoYXJ0LmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBldmVudExpc3RlbmVyT3B0aW9ucyk7XG59XG5mdW5jdGlvbiBmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSB7XG4gICAgY29uc3QgdHlwZSA9IEVWRU5UX1RZUEVTW2V2ZW50LnR5cGVdIHx8IGV2ZW50LnR5cGU7XG4gICAgY29uc3QgeyB4ICwgeSAgfSA9IGdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlLFxuICAgICAgICBjaGFydCxcbiAgICAgICAgbmF0aXZlOiBldmVudCxcbiAgICAgICAgeDogeCAhPT0gdW5kZWZpbmVkID8geCA6IG51bGwsXG4gICAgICAgIHk6IHkgIT09IHVuZGVmaW5lZCA/IHkgOiBudWxsXG4gICAgfTtcbn1cbmZ1bmN0aW9uIG5vZGVMaXN0Q29udGFpbnMobm9kZUxpc3QsIGNhbnZhcykge1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2RlTGlzdCl7XG4gICAgICAgIGlmIChub2RlID09PSBjYW52YXMgfHwgbm9kZS5jb250YWlucyhjYW52YXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUF0dGFjaE9ic2VydmVyKGNoYXJ0LCB0eXBlLCBsaXN0ZW5lcikge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBsZXQgdHJpZ2dlciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIGVudHJpZXMpe1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgfHwgbm9kZUxpc3RDb250YWlucyhlbnRyeS5hZGRlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudCwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gb2JzZXJ2ZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXRhY2hPYnNlcnZlcihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigoZW50cmllcyk9PntcbiAgICAgICAgbGV0IHRyaWdnZXIgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBlbnRyeSBvZiBlbnRyaWVzKXtcbiAgICAgICAgICAgIHRyaWdnZXIgPSB0cmlnZ2VyIHx8IG5vZGVMaXN0Q29udGFpbnMoZW50cnkucmVtb3ZlZE5vZGVzLCBjYW52YXMpO1xuICAgICAgICAgICAgdHJpZ2dlciA9IHRyaWdnZXIgJiYgIW5vZGVMaXN0Q29udGFpbnMoZW50cnkuYWRkZWROb2RlcywgY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJpZ2dlcikge1xuICAgICAgICAgICAgbGlzdGVuZXIoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHtcbiAgICAgICAgY2hpbGRMaXN0OiB0cnVlLFxuICAgICAgICBzdWJ0cmVlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuY29uc3QgZHJwTGlzdGVuaW5nQ2hhcnRzID0gbmV3IE1hcCgpO1xubGV0IG9sZERldmljZVBpeGVsUmF0aW8gPSAwO1xuZnVuY3Rpb24gb25XaW5kb3dSZXNpemUoKSB7XG4gICAgY29uc3QgZHByID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XG4gICAgaWYgKGRwciA9PT0gb2xkRGV2aWNlUGl4ZWxSYXRpbykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIG9sZERldmljZVBpeGVsUmF0aW8gPSBkcHI7XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLmZvckVhY2goKHJlc2l6ZSwgY2hhcnQpPT57XG4gICAgICAgIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gZHByKSB7XG4gICAgICAgICAgICByZXNpemUoKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZnVuY3Rpb24gbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSkge1xuICAgIGlmICghZHJwTGlzdGVuaW5nQ2hhcnRzLnNpemUpIHtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIG9uV2luZG93UmVzaXplKTtcbiAgICB9XG4gICAgZHJwTGlzdGVuaW5nQ2hhcnRzLnNldChjaGFydCwgcmVzaXplKTtcbn1cbmZ1bmN0aW9uIHVubGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQpIHtcbiAgICBkcnBMaXN0ZW5pbmdDaGFydHMuZGVsZXRlKGNoYXJ0KTtcbiAgICBpZiAoIWRycExpc3RlbmluZ0NoYXJ0cy5zaXplKSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvbldpbmRvd1Jlc2l6ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlUmVzaXplT2JzZXJ2ZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGNhbnZhcyAmJiBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgIGlmICghY29udGFpbmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmVzaXplID0gdGhyb3R0bGVkKCh3aWR0aCwgaGVpZ2h0KT0+e1xuICAgICAgICBjb25zdCB3ID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICAgICAgICBsaXN0ZW5lcih3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgaWYgKHcgPCBjb250YWluZXIuY2xpZW50V2lkdGgpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIH1cbiAgICB9LCB3aW5kb3cpO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChlbnRyaWVzKT0+e1xuICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbMF07XG4gICAgICAgIGNvbnN0IHdpZHRoID0gZW50cnkuY29udGVudFJlY3Qud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGVudHJ5LmNvbnRlbnRSZWN0LmhlaWdodDtcbiAgICAgICAgaWYgKHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGNvbnRhaW5lcik7XG4gICAgbGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMoY2hhcnQsIHJlc2l6ZSk7XG4gICAgcmV0dXJuIG9ic2VydmVyO1xufVxuZnVuY3Rpb24gcmVsZWFzZU9ic2VydmVyKGNoYXJ0LCB0eXBlLCBvYnNlcnZlcikge1xuICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAncmVzaXplJykge1xuICAgICAgICB1bmxpc3RlbkRldmljZVBpeGVsUmF0aW9DaGFuZ2VzKGNoYXJ0KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQcm94eUFuZExpc3RlbihjaGFydCwgdHlwZSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBjYW52YXMgPSBjaGFydC5jYW52YXM7XG4gICAgY29uc3QgcHJveHkgPSB0aHJvdHRsZWQoKGV2ZW50KT0+e1xuICAgICAgICBpZiAoY2hhcnQuY3R4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSk7XG4gICAgICAgIH1cbiAgICB9LCBjaGFydCk7XG4gICAgYWRkTGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG4gICAgcmV0dXJuIHByb3h5O1xufVxuIGNsYXNzIERvbVBsYXRmb3JtIGV4dGVuZHMgQmFzZVBsYXRmb3JtIHtcbiBhY3F1aXJlQ29udGV4dChjYW52YXMsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMgJiYgY2FudmFzLmdldENvbnRleHQgJiYgY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuY2FudmFzID09PSBjYW52YXMpIHtcbiAgICAgICAgICAgIGluaXRDYW52YXMoY2FudmFzLCBhc3BlY3RSYXRpbyk7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gcmVsZWFzZUNvbnRleHQoY29udGV4dCkge1xuICAgICAgICBjb25zdCBjYW52YXMgPSBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgaWYgKCFjYW52YXNbRVhQQU5ET19LRVldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5pdGlhbCA9IGNhbnZhc1tFWFBBTkRPX0tFWV0uaW5pdGlhbDtcbiAgICAgICAgW1xuICAgICAgICAgICAgJ2hlaWdodCcsXG4gICAgICAgICAgICAnd2lkdGgnXG4gICAgICAgIF0uZm9yRWFjaCgocHJvcCk9PntcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW5pdGlhbFtwcm9wXTtcbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5yZW1vdmVBdHRyaWJ1dGUocHJvcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBpbml0aWFsLnN0eWxlIHx8IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhzdHlsZSkuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICAgICAgY2FudmFzLnN0eWxlW2tleV0gPSBzdHlsZVtrZXldO1xuICAgICAgICB9KTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuICAgICAgICBkZWxldGUgY2FudmFzW0VYUEFORE9fS0VZXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuIGFkZEV2ZW50TGlzdGVuZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSk7XG4gICAgICAgIGNvbnN0IHByb3hpZXMgPSBjaGFydC4kcHJveGllcyB8fCAoY2hhcnQuJHByb3hpZXMgPSB7fSk7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0ge1xuICAgICAgICAgICAgYXR0YWNoOiBjcmVhdGVBdHRhY2hPYnNlcnZlcixcbiAgICAgICAgICAgIGRldGFjaDogY3JlYXRlRGV0YWNoT2JzZXJ2ZXIsXG4gICAgICAgICAgICByZXNpemU6IGNyZWF0ZVJlc2l6ZU9ic2VydmVyXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1t0eXBlXSB8fCBjcmVhdGVQcm94eUFuZExpc3RlbjtcbiAgICAgICAgcHJveGllc1t0eXBlXSA9IGhhbmRsZXIoY2hhcnQsIHR5cGUsIGxpc3RlbmVyKTtcbiAgICB9XG4gcmVtb3ZlRXZlbnRMaXN0ZW5lcihjaGFydCwgdHlwZSkge1xuICAgICAgICBjb25zdCBwcm94aWVzID0gY2hhcnQuJHByb3hpZXMgfHwgKGNoYXJ0LiRwcm94aWVzID0ge30pO1xuICAgICAgICBjb25zdCBwcm94eSA9IHByb3hpZXNbdHlwZV07XG4gICAgICAgIGlmICghcHJveHkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHtcbiAgICAgICAgICAgIGF0dGFjaDogcmVsZWFzZU9ic2VydmVyLFxuICAgICAgICAgICAgZGV0YWNoOiByZWxlYXNlT2JzZXJ2ZXIsXG4gICAgICAgICAgICByZXNpemU6IHJlbGVhc2VPYnNlcnZlclxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV0gfHwgcmVtb3ZlTGlzdGVuZXI7XG4gICAgICAgIGhhbmRsZXIoY2hhcnQsIHR5cGUsIHByb3h5KTtcbiAgICAgICAgcHJveGllc1t0eXBlXSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0RGV2aWNlUGl4ZWxSYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIH1cbiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKSB7XG4gICAgICAgIHJldHVybiBnZXRNYXhpbXVtU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQsIGFzcGVjdFJhdGlvKTtcbiAgICB9XG4gaXNBdHRhY2hlZChjYW52YXMpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gX2dldFBhcmVudE5vZGUoY2FudmFzKTtcbiAgICAgICAgcmV0dXJuICEhKGNvbnRhaW5lciAmJiBjb250YWluZXIuaXNDb25uZWN0ZWQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RldGVjdFBsYXRmb3JtKGNhbnZhcykge1xuICAgIGlmICghX2lzRG9tU3VwcG9ydGVkKCkgfHwgdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FudmFzIGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzKSB7XG4gICAgICAgIHJldHVybiBCYXNpY1BsYXRmb3JtO1xuICAgIH1cbiAgICByZXR1cm4gRG9tUGxhdGZvcm07XG59XG5cbmNsYXNzIEVsZW1lbnQge1xuICAgIHN0YXRpYyBkZWZhdWx0cyA9IHt9O1xuICAgIHN0YXRpYyBkZWZhdWx0Um91dGVzID0gdW5kZWZpbmVkO1xuICAgIHg7XG4gICAgeTtcbiAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICBvcHRpb25zO1xuICAgICRhbmltYXRpb25zO1xuICAgIHRvb2x0aXBQb3NpdGlvbih1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IHsgeCAsIHkgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5J1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHgsXG4gICAgICAgICAgICB5XG4gICAgICAgIH07XG4gICAgfVxuICAgIGhhc1ZhbHVlKCkge1xuICAgICAgICByZXR1cm4gaXNOdW1iZXIodGhpcy54KSAmJiBpc051bWJlcih0aGlzLnkpO1xuICAgIH1cbiAgICBnZXRQcm9wcyhwcm9wcywgZmluYWwpIHtcbiAgICAgICAgY29uc3QgYW5pbXMgPSB0aGlzLiRhbmltYXRpb25zO1xuICAgICAgICBpZiAoIWZpbmFsIHx8ICFhbmltcykge1xuICAgICAgICAgICAgLy8gbGV0J3Mgbm90IGNyZWF0ZSBhbiBvYmplY3QsIGlmIG5vdCBuZWVkZWRcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJldCA9IHt9O1xuICAgICAgICBwcm9wcy5mb3JFYWNoKChwcm9wKT0+e1xuICAgICAgICAgICAgcmV0W3Byb3BdID0gYW5pbXNbcHJvcF0gJiYgYW5pbXNbcHJvcF0uYWN0aXZlKCkgPyBhbmltc1twcm9wXS5fdG8gOiB0aGlzW3Byb3BdO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGF1dG9Ta2lwKHNjYWxlLCB0aWNrcykge1xuICAgIGNvbnN0IHRpY2tPcHRzID0gc2NhbGUub3B0aW9ucy50aWNrcztcbiAgICBjb25zdCBkZXRlcm1pbmVkTWF4VGlja3MgPSBkZXRlcm1pbmVNYXhUaWNrcyhzY2FsZSk7XG4gICAgY29uc3QgdGlja3NMaW1pdCA9IE1hdGgubWluKHRpY2tPcHRzLm1heFRpY2tzTGltaXQgfHwgZGV0ZXJtaW5lZE1heFRpY2tzLCBkZXRlcm1pbmVkTWF4VGlja3MpO1xuICAgIGNvbnN0IG1ham9ySW5kaWNlcyA9IHRpY2tPcHRzLm1ham9yLmVuYWJsZWQgPyBnZXRNYWpvckluZGljZXModGlja3MpIDogW107XG4gICAgY29uc3QgbnVtTWFqb3JJbmRpY2VzID0gbWFqb3JJbmRpY2VzLmxlbmd0aDtcbiAgICBjb25zdCBmaXJzdCA9IG1ham9ySW5kaWNlc1swXTtcbiAgICBjb25zdCBsYXN0ID0gbWFqb3JJbmRpY2VzW251bU1ham9ySW5kaWNlcyAtIDFdO1xuICAgIGNvbnN0IG5ld1RpY2tzID0gW107XG4gICAgaWYgKG51bU1ham9ySW5kaWNlcyA+IHRpY2tzTGltaXQpIHtcbiAgICAgICAgc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgbnVtTWFqb3JJbmRpY2VzIC8gdGlja3NMaW1pdCk7XG4gICAgICAgIHJldHVybiBuZXdUaWNrcztcbiAgICB9XG4gICAgY29uc3Qgc3BhY2luZyA9IGNhbGN1bGF0ZVNwYWNpbmcobWFqb3JJbmRpY2VzLCB0aWNrcywgdGlja3NMaW1pdCk7XG4gICAgaWYgKG51bU1ham9ySW5kaWNlcyA+IDApIHtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGNvbnN0IGF2Z01ham9yU3BhY2luZyA9IG51bU1ham9ySW5kaWNlcyA+IDEgPyBNYXRoLnJvdW5kKChsYXN0IC0gZmlyc3QpIC8gKG51bU1ham9ySW5kaWNlcyAtIDEpKSA6IG51bGw7XG4gICAgICAgIHNraXAodGlja3MsIG5ld1RpY2tzLCBzcGFjaW5nLCBpc051bGxPclVuZGVmKGF2Z01ham9yU3BhY2luZykgPyAwIDogZmlyc3QgLSBhdmdNYWpvclNwYWNpbmcsIGZpcnN0KTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbnVtTWFqb3JJbmRpY2VzIC0gMTsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbWFqb3JJbmRpY2VzW2ldLCBtYWpvckluZGljZXNbaSArIDFdKTtcbiAgICAgICAgfVxuICAgICAgICBza2lwKHRpY2tzLCBuZXdUaWNrcywgc3BhY2luZywgbGFzdCwgaXNOdWxsT3JVbmRlZihhdmdNYWpvclNwYWNpbmcpID8gdGlja3MubGVuZ3RoIDogbGFzdCArIGF2Z01ham9yU3BhY2luZyk7XG4gICAgICAgIHJldHVybiBuZXdUaWNrcztcbiAgICB9XG4gICAgc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcpO1xuICAgIHJldHVybiBuZXdUaWNrcztcbn1cbmZ1bmN0aW9uIGRldGVybWluZU1heFRpY2tzKHNjYWxlKSB7XG4gICAgY29uc3Qgb2Zmc2V0ID0gc2NhbGUub3B0aW9ucy5vZmZzZXQ7XG4gICAgY29uc3QgdGlja0xlbmd0aCA9IHNjYWxlLl90aWNrU2l6ZSgpO1xuICAgIGNvbnN0IG1heFNjYWxlID0gc2NhbGUuX2xlbmd0aCAvIHRpY2tMZW5ndGggKyAob2Zmc2V0ID8gMCA6IDEpO1xuICAgIGNvbnN0IG1heENoYXJ0ID0gc2NhbGUuX21heExlbmd0aCAvIHRpY2tMZW5ndGg7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5taW4obWF4U2NhbGUsIG1heENoYXJ0KSk7XG59XG4gZnVuY3Rpb24gY2FsY3VsYXRlU3BhY2luZyhtYWpvckluZGljZXMsIHRpY2tzLCB0aWNrc0xpbWl0KSB7XG4gICAgY29uc3QgZXZlbk1ham9yU3BhY2luZyA9IGdldEV2ZW5TcGFjaW5nKG1ham9ySW5kaWNlcyk7XG4gICAgY29uc3Qgc3BhY2luZyA9IHRpY2tzLmxlbmd0aCAvIHRpY2tzTGltaXQ7XG4gICAgaWYgKCFldmVuTWFqb3JTcGFjaW5nKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbiAgICB9XG4gICAgY29uc3QgZmFjdG9ycyA9IF9mYWN0b3JpemUoZXZlbk1ham9yU3BhY2luZyk7XG4gICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IGZhY3RvcnMubGVuZ3RoIC0gMTsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IGZhY3RvcnNbaV07XG4gICAgICAgIGlmIChmYWN0b3IgPiBzcGFjaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFjdG9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBNYXRoLm1heChzcGFjaW5nLCAxKTtcbn1cbiBmdW5jdGlvbiBnZXRNYWpvckluZGljZXModGlja3MpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaSwgaWxlbjtcbiAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICBpZiAodGlja3NbaV0ubWFqb3IpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gc2tpcE1ham9ycyh0aWNrcywgbmV3VGlja3MsIG1ham9ySW5kaWNlcywgc3BhY2luZykge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgbGV0IG5leHQgPSBtYWpvckluZGljZXNbMF07XG4gICAgbGV0IGk7XG4gICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgICBmb3IoaSA9IDA7IGkgPCB0aWNrcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGlmIChpID09PSBuZXh0KSB7XG4gICAgICAgICAgICBuZXdUaWNrcy5wdXNoKHRpY2tzW2ldKTtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICBuZXh0ID0gbWFqb3JJbmRpY2VzW2NvdW50ICogc3BhY2luZ107XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gc2tpcCh0aWNrcywgbmV3VGlja3MsIHNwYWNpbmcsIG1ham9yU3RhcnQsIG1ham9yRW5kKSB7XG4gICAgY29uc3Qgc3RhcnQgPSB2YWx1ZU9yRGVmYXVsdChtYWpvclN0YXJ0LCAwKTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih2YWx1ZU9yRGVmYXVsdChtYWpvckVuZCwgdGlja3MubGVuZ3RoKSwgdGlja3MubGVuZ3RoKTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGxldCBsZW5ndGgsIGksIG5leHQ7XG4gICAgc3BhY2luZyA9IE1hdGguY2VpbChzcGFjaW5nKTtcbiAgICBpZiAobWFqb3JFbmQpIHtcbiAgICAgICAgbGVuZ3RoID0gbWFqb3JFbmQgLSBtYWpvclN0YXJ0O1xuICAgICAgICBzcGFjaW5nID0gbGVuZ3RoIC8gTWF0aC5mbG9vcihsZW5ndGggLyBzcGFjaW5nKTtcbiAgICB9XG4gICAgbmV4dCA9IHN0YXJ0O1xuICAgIHdoaWxlKG5leHQgPCAwKXtcbiAgICAgICAgY291bnQrKztcbiAgICAgICAgbmV4dCA9IE1hdGgucm91bmQoc3RhcnQgKyBjb3VudCAqIHNwYWNpbmcpO1xuICAgIH1cbiAgICBmb3IoaSA9IE1hdGgubWF4KHN0YXJ0LCAwKTsgaSA8IGVuZDsgaSsrKXtcbiAgICAgICAgaWYgKGkgPT09IG5leHQpIHtcbiAgICAgICAgICAgIG5ld1RpY2tzLnB1c2godGlja3NbaV0pO1xuICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgIG5leHQgPSBNYXRoLnJvdW5kKHN0YXJ0ICsgY291bnQgKiBzcGFjaW5nKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiBmdW5jdGlvbiBnZXRFdmVuU3BhY2luZyhhcnIpIHtcbiAgICBjb25zdCBsZW4gPSBhcnIubGVuZ3RoO1xuICAgIGxldCBpLCBkaWZmO1xuICAgIGlmIChsZW4gPCAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGRpZmYgPSBhcnJbMF0sIGkgPSAxOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICBpZiAoYXJyW2ldIC0gYXJyW2kgLSAxXSAhPT0gZGlmZikge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkaWZmO1xufVxuXG5jb25zdCByZXZlcnNlQWxpZ24gPSAoYWxpZ24pPT5hbGlnbiA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6IGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogYWxpZ247XG5jb25zdCBvZmZzZXRGcm9tRWRnZSA9IChzY2FsZSwgZWRnZSwgb2Zmc2V0KT0+ZWRnZSA9PT0gJ3RvcCcgfHwgZWRnZSA9PT0gJ2xlZnQnID8gc2NhbGVbZWRnZV0gKyBvZmZzZXQgOiBzY2FsZVtlZGdlXSAtIG9mZnNldDtcbmNvbnN0IGdldFRpY2tzTGltaXQgPSAodGlja3NMZW5ndGgsIG1heFRpY2tzTGltaXQpPT5NYXRoLm1pbihtYXhUaWNrc0xpbWl0IHx8IHRpY2tzTGVuZ3RoLCB0aWNrc0xlbmd0aCk7XG4gZnVuY3Rpb24gc2FtcGxlKGFyciwgbnVtSXRlbXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBhcnIubGVuZ3RoIC8gbnVtSXRlbXM7XG4gICAgY29uc3QgbGVuID0gYXJyLmxlbmd0aDtcbiAgICBsZXQgaSA9IDA7XG4gICAgZm9yKDsgaSA8IGxlbjsgaSArPSBpbmNyZW1lbnQpe1xuICAgICAgICByZXN1bHQucHVzaChhcnJbTWF0aC5mbG9vcihpKV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIGdldFBpeGVsRm9yR3JpZExpbmUoc2NhbGUsIGluZGV4LCBvZmZzZXRHcmlkTGluZXMpIHtcbiAgICBjb25zdCBsZW5ndGggPSBzY2FsZS50aWNrcy5sZW5ndGg7XG4gICAgY29uc3QgdmFsaWRJbmRleCA9IE1hdGgubWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICBjb25zdCBzdGFydCA9IHNjYWxlLl9zdGFydFBpeGVsO1xuICAgIGNvbnN0IGVuZCA9IHNjYWxlLl9lbmRQaXhlbDtcbiAgICBjb25zdCBlcHNpbG9uID0gMWUtNjtcbiAgICBsZXQgbGluZVZhbHVlID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKHZhbGlkSW5kZXgpO1xuICAgIGxldCBvZmZzZXQ7XG4gICAgaWYgKG9mZnNldEdyaWRMaW5lcykge1xuICAgICAgICBpZiAobGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSBNYXRoLm1heChsaW5lVmFsdWUgLSBzdGFydCwgZW5kIC0gbGluZVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gKHNjYWxlLmdldFBpeGVsRm9yVGljaygxKSAtIGxpbmVWYWx1ZSkgLyAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2Zmc2V0ID0gKGxpbmVWYWx1ZSAtIHNjYWxlLmdldFBpeGVsRm9yVGljayh2YWxpZEluZGV4IC0gMSkpIC8gMjtcbiAgICAgICAgfVxuICAgICAgICBsaW5lVmFsdWUgKz0gdmFsaWRJbmRleCA8IGluZGV4ID8gb2Zmc2V0IDogLW9mZnNldDtcbiAgICAgICAgaWYgKGxpbmVWYWx1ZSA8IHN0YXJ0IC0gZXBzaWxvbiB8fCBsaW5lVmFsdWUgPiBlbmQgKyBlcHNpbG9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpbmVWYWx1ZTtcbn1cbiBmdW5jdGlvbiBnYXJiYWdlQ29sbGVjdChjYWNoZXMsIGxlbmd0aCkge1xuICAgIGVhY2goY2FjaGVzLCAoY2FjaGUpPT57XG4gICAgICAgIGNvbnN0IGdjID0gY2FjaGUuZ2M7XG4gICAgICAgIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgICAgICAgbGV0IGk7XG4gICAgICAgIGlmIChnY0xlbiA+IGxlbmd0aCkge1xuICAgICAgICAgICAgZm9yKGkgPSAwOyBpIDwgZ2NMZW47ICsraSl7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGNhY2hlLmRhdGFbZ2NbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2Muc3BsaWNlKDAsIGdjTGVuKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuIGZ1bmN0aW9uIGdldFRpY2tNYXJrTGVuZ3RoKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5kcmF3VGlja3MgPyBvcHRpb25zLnRpY2tMZW5ndGggOiAwO1xufVxuIGZ1bmN0aW9uIGdldFRpdGxlSGVpZ2h0KG9wdGlvbnMsIGZhbGxiYWNrKSB7XG4gICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGNvbnN0IGZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb250LCBmYWxsYmFjayk7XG4gICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRpb25zLnBhZGRpbmcpO1xuICAgIGNvbnN0IGxpbmVzID0gaXNBcnJheShvcHRpb25zLnRleHQpID8gb3B0aW9ucy50ZXh0Lmxlbmd0aCA6IDE7XG4gICAgcmV0dXJuIGxpbmVzICogZm9udC5saW5lSGVpZ2h0ICsgcGFkZGluZy5oZWlnaHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVTY2FsZUNvbnRleHQocGFyZW50LCBzY2FsZSkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBzY2FsZSxcbiAgICAgICAgdHlwZTogJ3NjYWxlJ1xuICAgIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlVGlja0NvbnRleHQocGFyZW50LCBpbmRleCwgdGljaykge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICB0aWNrLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgdHlwZTogJ3RpY2snXG4gICAgfSk7XG59XG5mdW5jdGlvbiB0aXRsZUFsaWduKGFsaWduLCBwb3NpdGlvbiwgcmV2ZXJzZSkge1xuICAgICBsZXQgcmV0ID0gX3RvTGVmdFJpZ2h0Q2VudGVyKGFsaWduKTtcbiAgICBpZiAocmV2ZXJzZSAmJiBwb3NpdGlvbiAhPT0gJ3JpZ2h0JyB8fCAhcmV2ZXJzZSAmJiBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICByZXQgPSByZXZlcnNlQWxpZ24ocmV0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbmZ1bmN0aW9uIHRpdGxlQXJncyhzY2FsZSwgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pIHtcbiAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIGNoYXJ0ICB9ID0gc2NhbGU7XG4gICAgY29uc3QgeyBjaGFydEFyZWEgLCBzY2FsZXMgIH0gPSBjaGFydDtcbiAgICBsZXQgcm90YXRpb24gPSAwO1xuICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm90dG9tIC0gdG9wO1xuICAgIGNvbnN0IHdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIGlmIChzY2FsZS5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgdGl0bGVZID0gc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKSArIGhlaWdodCAtIG9mZnNldDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHRpdGxlWSA9IChjaGFydEFyZWEuYm90dG9tICsgY2hhcnRBcmVhLnRvcCkgLyAyICsgaGVpZ2h0IC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVZID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIG1heFdpZHRoID0gcmlnaHQgLSBsZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICB0aXRsZVggPSBzY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpIC0gd2lkdGggKyBvZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICB0aXRsZVggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMiAtIHdpZHRoICsgb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGl0bGVYID0gb2Zmc2V0RnJvbUVkZ2Uoc2NhbGUsIHBvc2l0aW9uLCBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIHRpdGxlWSA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCBib3R0b20sIHRvcCk7XG4gICAgICAgIHJvdGF0aW9uID0gcG9zaXRpb24gPT09ICdsZWZ0JyA/IC1IQUxGX1BJIDogSEFMRl9QSTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGl0bGVYLFxuICAgICAgICB0aXRsZVksXG4gICAgICAgIG1heFdpZHRoLFxuICAgICAgICByb3RhdGlvblxuICAgIH07XG59XG5jbGFzcyBTY2FsZSBleHRlbmRzIEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgICB0aGlzLmlkID0gY2ZnLmlkO1xuICAgICAgICAgdGhpcy50eXBlID0gY2ZnLnR5cGU7XG4gICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmN0eCA9IGNmZy5jdHg7XG4gICAgICAgICB0aGlzLmNoYXJ0ID0gY2ZnLmNoYXJ0O1xuICAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmJvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX21hcmdpbnMgPSB7XG4gICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICBib3R0b206IDBcbiAgICAgICAgfTtcbiAgICAgICAgIHRoaXMubWF4V2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuYXhpcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMubGFiZWxSb3RhdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5taW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9yYW5nZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMudGlja3MgPSBbXTtcbiAgICAgICAgIHRoaXMuX2dyaWRMaW5lSXRlbXMgPSBudWxsO1xuICAgICAgICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5fbG9uZ2VzdFRleHRDYWNoZSA9IHt9O1xuICAgICAgICAgdGhpcy5fc3RhcnRQaXhlbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX2VuZFBpeGVsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9yZXZlcnNlUGl4ZWxzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3VzZXJNYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3VzZXJNaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90aWNrc0xlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX2JvcmRlclZhbHVlID0gMDtcbiAgICAgICAgdGhpcy5fY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5fZGF0YUxpbWl0c0NhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLiRjb250ZXh0ID0gdW5kZWZpbmVkO1xuICAgIH1cbiBpbml0KG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgdGhpcy5heGlzID0gb3B0aW9ucy5heGlzO1xuICAgICAgICB0aGlzLl91c2VyTWluID0gdGhpcy5wYXJzZShvcHRpb25zLm1pbik7XG4gICAgICAgIHRoaXMuX3VzZXJNYXggPSB0aGlzLnBhcnNlKG9wdGlvbnMubWF4KTtcbiAgICAgICAgdGhpcy5fc3VnZ2VzdGVkTWluID0gdGhpcy5wYXJzZShvcHRpb25zLnN1Z2dlc3RlZE1pbik7XG4gICAgICAgIHRoaXMuX3N1Z2dlc3RlZE1heCA9IHRoaXMucGFyc2Uob3B0aW9ucy5zdWdnZXN0ZWRNYXgpO1xuICAgIH1cbiBwYXJzZShyYXcsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuIGdldFVzZXJCb3VuZHMoKSB7XG4gICAgICAgIGxldCB7IF91c2VyTWluICwgX3VzZXJNYXggLCBfc3VnZ2VzdGVkTWluICwgX3N1Z2dlc3RlZE1heCAgfSA9IHRoaXM7XG4gICAgICAgIF91c2VyTWluID0gZmluaXRlT3JEZWZhdWx0KF91c2VyTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfdXNlck1heCA9IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcbiAgICAgICAgX3N1Z2dlc3RlZE1pbiA9IGZpbml0ZU9yRGVmYXVsdChfc3VnZ2VzdGVkTWluLCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgICAgICBfc3VnZ2VzdGVkTWF4ID0gZmluaXRlT3JEZWZhdWx0KF9zdWdnZXN0ZWRNYXgsIE51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IGZpbml0ZU9yRGVmYXVsdChfdXNlck1pbiwgX3N1Z2dlc3RlZE1pbiksXG4gICAgICAgICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChfdXNlck1heCwgX3N1Z2dlc3RlZE1heCksXG4gICAgICAgICAgICBtaW5EZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1pbiksXG4gICAgICAgICAgICBtYXhEZWZpbmVkOiBpc051bWJlckZpbml0ZShfdXNlck1heClcbiAgICAgICAgfTtcbiAgICB9XG4gZ2V0TWluTWF4KGNhblN0YWNrKSB7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCByYW5nZTtcbiAgICAgICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICAgICAgbWF4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHJhbmdlID0gbWV0YXNbaV0uY29udHJvbGxlci5nZXRNaW5NYXgodGhpcywgY2FuU3RhY2spO1xuICAgICAgICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCByYW5nZS5taW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFtYXhEZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCByYW5nZS5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbiA9IG1heERlZmluZWQgJiYgbWluID4gbWF4ID8gbWF4IDogbWluO1xuICAgICAgICBtYXggPSBtaW5EZWZpbmVkICYmIG1pbiA+IG1heCA/IG1pbiA6IG1heDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogZmluaXRlT3JEZWZhdWx0KG1pbiwgZmluaXRlT3JEZWZhdWx0KG1heCwgbWluKSksXG4gICAgICAgICAgICBtYXg6IGZpbml0ZU9yRGVmYXVsdChtYXgsIGZpbml0ZU9yRGVmYXVsdChtaW4sIG1heCkpXG4gICAgICAgIH07XG4gICAgfVxuIGdldFBhZGRpbmcoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiB0aGlzLnBhZGRpbmdMZWZ0IHx8IDAsXG4gICAgICAgICAgICB0b3A6IHRoaXMucGFkZGluZ1RvcCB8fCAwLFxuICAgICAgICAgICAgcmlnaHQ6IHRoaXMucGFkZGluZ1JpZ2h0IHx8IDAsXG4gICAgICAgICAgICBib3R0b206IHRoaXMucGFkZGluZ0JvdHRvbSB8fCAwXG4gICAgICAgIH07XG4gICAgfVxuIGdldFRpY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50aWNrcztcbiAgICB9XG4gZ2V0TGFiZWxzKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmxhYmVscyB8fCAodGhpcy5pc0hvcml6b250YWwoKSA/IGRhdGEueExhYmVscyA6IGRhdGEueUxhYmVscykgfHwgZGF0YS5sYWJlbHMgfHwgW107XG4gICAgfVxuIGdldExhYmVsSXRlbXMoY2hhcnRBcmVhID0gdGhpcy5jaGFydC5jaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLl9sYWJlbEl0ZW1zIHx8ICh0aGlzLl9sYWJlbEl0ZW1zID0gdGhpcy5fY29tcHV0ZUxhYmVsSXRlbXMoY2hhcnRBcmVhKSk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgYmVmb3JlTGF5b3V0KCkge1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9kYXRhTGltaXRzQ2FjaGVkID0gZmFsc2U7XG4gICAgfVxuICAgIGJlZm9yZVVwZGF0ZSgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVVwZGF0ZSwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICAgICAgY29uc3QgeyBiZWdpbkF0WmVybyAsIGdyYWNlICwgdGlja3M6IHRpY2tPcHRzICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzYW1wbGVTaXplID0gdGlja09wdHMuc2FtcGxlU2l6ZTtcbiAgICAgICAgdGhpcy5iZWZvcmVVcGRhdGUoKTtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9LCBtYXJnaW5zKTtcbiAgICAgICAgdGhpcy50aWNrcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2xhYmVsU2l6ZXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9ncmlkTGluZUl0ZW1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbGFiZWxJdGVtcyA9IG51bGw7XG4gICAgICAgIHRoaXMuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLnNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5hZnRlclNldERpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5fbWF4TGVuZ3RoID0gdGhpcy5pc0hvcml6b250YWwoKSA/IHRoaXMud2lkdGggKyBtYXJnaW5zLmxlZnQgKyBtYXJnaW5zLnJpZ2h0IDogdGhpcy5oZWlnaHQgKyBtYXJnaW5zLnRvcCArIG1hcmdpbnMuYm90dG9tO1xuICAgICAgICBpZiAoIXRoaXMuX2RhdGFMaW1pdHNDYWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlRGF0YUxpbWl0cygpO1xuICAgICAgICAgICAgdGhpcy5kZXRlcm1pbmVEYXRhTGltaXRzKCk7XG4gICAgICAgICAgICB0aGlzLmFmdGVyRGF0YUxpbWl0cygpO1xuICAgICAgICAgICAgdGhpcy5fcmFuZ2UgPSBfYWRkR3JhY2UodGhpcywgZ3JhY2UsIGJlZ2luQXRaZXJvKTtcbiAgICAgICAgICAgIHRoaXMuX2RhdGFMaW1pdHNDYWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYmVmb3JlQnVpbGRUaWNrcygpO1xuICAgICAgICB0aGlzLnRpY2tzID0gdGhpcy5idWlsZFRpY2tzKCkgfHwgW107XG4gICAgICAgIHRoaXMuYWZ0ZXJCdWlsZFRpY2tzKCk7XG4gICAgICAgIGNvbnN0IHNhbXBsaW5nRW5hYmxlZCA9IHNhbXBsZVNpemUgPCB0aGlzLnRpY2tzLmxlbmd0aDtcbiAgICAgICAgdGhpcy5fY29udmVydFRpY2tzVG9MYWJlbHMoc2FtcGxpbmdFbmFibGVkID8gc2FtcGxlKHRoaXMudGlja3MsIHNhbXBsZVNpemUpIDogdGhpcy50aWNrcyk7XG4gICAgICAgIHRoaXMuY29uZmlndXJlKCk7XG4gICAgICAgIHRoaXMuYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICAgICAgdGhpcy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKTtcbiAgICAgICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgKHRpY2tPcHRzLmF1dG9Ta2lwIHx8IHRpY2tPcHRzLnNvdXJjZSA9PT0gJ2F1dG8nKSkge1xuICAgICAgICAgICAgdGhpcy50aWNrcyA9IGF1dG9Ta2lwKHRoaXMsIHRoaXMudGlja3MpO1xuICAgICAgICAgICAgdGhpcy5fbGFiZWxTaXplcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmFmdGVyQXV0b1NraXAoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2FtcGxpbmdFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jb252ZXJ0VGlja3NUb0xhYmVscyh0aGlzLnRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJlZm9yZUZpdCgpO1xuICAgICAgICB0aGlzLmZpdCgpO1xuICAgICAgICB0aGlzLmFmdGVyRml0KCk7XG4gICAgICAgIHRoaXMuYWZ0ZXJVcGRhdGUoKTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBsZXQgcmV2ZXJzZVBpeGVscyA9IHRoaXMub3B0aW9ucy5yZXZlcnNlO1xuICAgICAgICBsZXQgc3RhcnRQaXhlbCwgZW5kUGl4ZWw7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBzdGFydFBpeGVsID0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgZW5kUGl4ZWwgPSB0aGlzLnJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRQaXhlbCA9IHRoaXMudG9wO1xuICAgICAgICAgICAgZW5kUGl4ZWwgPSB0aGlzLmJvdHRvbTtcbiAgICAgICAgICAgIHJldmVyc2VQaXhlbHMgPSAhcmV2ZXJzZVBpeGVscztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFydFBpeGVsID0gc3RhcnRQaXhlbDtcbiAgICAgICAgdGhpcy5fZW5kUGl4ZWwgPSBlbmRQaXhlbDtcbiAgICAgICAgdGhpcy5fcmV2ZXJzZVBpeGVscyA9IHJldmVyc2VQaXhlbHM7XG4gICAgICAgIHRoaXMuX2xlbmd0aCA9IGVuZFBpeGVsIC0gc3RhcnRQaXhlbDtcbiAgICAgICAgdGhpcy5fYWxpZ25Ub1BpeGVscyA9IHRoaXMub3B0aW9ucy5hbGlnblRvUGl4ZWxzO1xuICAgIH1cbiAgICBhZnRlclVwZGF0ZSgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVTZXREaW1lbnNpb25zKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlU2V0RGltZW5zaW9ucywgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgc2V0RGltZW5zaW9ucygpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLm1heFdpZHRoO1xuICAgICAgICAgICAgdGhpcy5sZWZ0ID0gMDtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudG9wID0gMDtcbiAgICAgICAgICAgIHRoaXMuYm90dG9tID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wYWRkaW5nTGVmdCA9IDA7XG4gICAgICAgIHRoaXMucGFkZGluZ1RvcCA9IDA7XG4gICAgICAgIHRoaXMucGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5wYWRkaW5nQm90dG9tID0gMDtcbiAgICB9XG4gICAgYWZ0ZXJTZXREaW1lbnNpb25zKCkge1xuICAgICAgICBjYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBfY2FsbEhvb2tzKG5hbWUpIHtcbiAgICAgICAgdGhpcy5jaGFydC5ub3RpZnlQbHVnaW5zKG5hbWUsIHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zW25hbWVdLCBbXG4gICAgICAgICAgICB0aGlzXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBiZWZvcmVEYXRhTGltaXRzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZURhdGFMaW1pdHMnKTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHt9XG4gICAgYWZ0ZXJEYXRhTGltaXRzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2FmdGVyRGF0YUxpbWl0cycpO1xuICAgIH1cbiAgICBiZWZvcmVCdWlsZFRpY2tzKCkge1xuICAgICAgICB0aGlzLl9jYWxsSG9va3MoJ2JlZm9yZUJ1aWxkVGlja3MnKTtcbiAgICB9XG4gYnVpbGRUaWNrcygpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBhZnRlckJ1aWxkVGlja3MoKSB7XG4gICAgICAgIHRoaXMuX2NhbGxIb29rcygnYWZ0ZXJCdWlsZFRpY2tzJyk7XG4gICAgfVxuICAgIGJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gZ2VuZXJhdGVUaWNrTGFiZWxzKHRpY2tzKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaztcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgICAgICAgIHRpY2subGFiZWwgPSBjYWxsYmFjayh0aWNrT3B0cy5jYWxsYmFjaywgW1xuICAgICAgICAgICAgICAgIHRpY2sudmFsdWUsXG4gICAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgICB0aWNrc1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgYmVmb3JlQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbigpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3QgbnVtVGlja3MgPSBnZXRUaWNrc0xpbWl0KHRoaXMudGlja3MubGVuZ3RoLCBvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQpO1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRpY2tPcHRzLm1pblJvdGF0aW9uIHx8IDA7XG4gICAgICAgIGNvbnN0IG1heFJvdGF0aW9uID0gdGlja09wdHMubWF4Um90YXRpb247XG4gICAgICAgIGxldCBsYWJlbFJvdGF0aW9uID0gbWluUm90YXRpb247XG4gICAgICAgIGxldCB0aWNrV2lkdGgsIG1heEhlaWdodCwgbWF4TGFiZWxEaWFnb25hbDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhdGlja09wdHMuZGlzcGxheSB8fCBtaW5Sb3RhdGlvbiA+PSBtYXhSb3RhdGlvbiB8fCBudW1UaWNrcyA8PSAxIHx8ICF0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBtaW5Sb3RhdGlvbjtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCBtYXhMYWJlbFdpZHRoID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgICAgIGNvbnN0IG1heExhYmVsSGVpZ2h0ID0gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodDtcbiAgICAgICAgY29uc3QgbWF4V2lkdGggPSBfbGltaXRWYWx1ZSh0aGlzLmNoYXJ0LndpZHRoIC0gbWF4TGFiZWxXaWR0aCwgMCwgdGhpcy5tYXhXaWR0aCk7XG4gICAgICAgIHRpY2tXaWR0aCA9IG9wdGlvbnMub2Zmc2V0ID8gdGhpcy5tYXhXaWR0aCAvIG51bVRpY2tzIDogbWF4V2lkdGggLyAobnVtVGlja3MgLSAxKTtcbiAgICAgICAgaWYgKG1heExhYmVsV2lkdGggKyA2ID4gdGlja1dpZHRoKSB7XG4gICAgICAgICAgICB0aWNrV2lkdGggPSBtYXhXaWR0aCAvIChudW1UaWNrcyAtIChvcHRpb25zLm9mZnNldCA/IDAuNSA6IDEpKTtcbiAgICAgICAgICAgIG1heEhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKSAtIHRpY2tPcHRzLnBhZGRpbmcgLSBnZXRUaXRsZUhlaWdodChvcHRpb25zLnRpdGxlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICAgICAgICBtYXhMYWJlbERpYWdvbmFsID0gTWF0aC5zcXJ0KG1heExhYmVsV2lkdGggKiBtYXhMYWJlbFdpZHRoICsgbWF4TGFiZWxIZWlnaHQgKiBtYXhMYWJlbEhlaWdodCk7XG4gICAgICAgICAgICBsYWJlbFJvdGF0aW9uID0gdG9EZWdyZWVzKE1hdGgubWluKE1hdGguYXNpbihfbGltaXRWYWx1ZSgobGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIDYpIC8gdGlja1dpZHRoLCAtMSwgMSkpLCBNYXRoLmFzaW4oX2xpbWl0VmFsdWUobWF4SGVpZ2h0IC8gbWF4TGFiZWxEaWFnb25hbCwgLTEsIDEpKSAtIE1hdGguYXNpbihfbGltaXRWYWx1ZShtYXhMYWJlbEhlaWdodCAvIG1heExhYmVsRGlhZ29uYWwsIC0xLCAxKSkpKTtcbiAgICAgICAgICAgIGxhYmVsUm90YXRpb24gPSBNYXRoLm1heChtaW5Sb3RhdGlvbiwgTWF0aC5taW4obWF4Um90YXRpb24sIGxhYmVsUm90YXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxhYmVsUm90YXRpb24gPSBsYWJlbFJvdGF0aW9uO1xuICAgIH1cbiAgICBhZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24oKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckNhbGN1bGF0ZUxhYmVsUm90YXRpb24sIFtcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGFmdGVyQXV0b1NraXAoKSB7fVxuICAgIGJlZm9yZUZpdCgpIHtcbiAgICAgICAgY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUZpdCwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gICAgZml0KCkge1xuICAgICAgICBjb25zdCBtaW5TaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICBoZWlnaHQ6IDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBjaGFydCAsIG9wdGlvbnM6IHsgdGlja3M6IHRpY2tPcHRzICwgdGl0bGU6IHRpdGxlT3B0cyAsIGdyaWQ6IGdyaWRPcHRzICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZGlzcGxheSA9IHRoaXMuX2lzVmlzaWJsZSgpO1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBpZiAoZGlzcGxheSkge1xuICAgICAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSBnZXRUaXRsZUhlaWdodCh0aXRsZU9wdHMsIGNoYXJ0Lm9wdGlvbnMuZm9udCk7XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS53aWR0aCA9IHRoaXMubWF4V2lkdGg7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSBnZXRUaWNrTWFya0xlbmd0aChncmlkT3B0cykgKyB0aXRsZUhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluU2l6ZS5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgICAgICBtaW5TaXplLndpZHRoID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZE9wdHMpICsgdGl0bGVIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGlja09wdHMuZGlzcGxheSAmJiB0aGlzLnRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZmlyc3QgLCBsYXN0ICwgd2lkZXN0ICwgaGlnaGVzdCAgfSA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWNrUGFkZGluZyA9IHRpY2tPcHRzLnBhZGRpbmcgKiAyO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IHRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvcyA9IE1hdGguY29zKGFuZ2xlUmFkaWFucyk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2luID0gTWF0aC5zaW4oYW5nbGVSYWRpYW5zKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gdGlja09wdHMubWlycm9yID8gMCA6IHNpbiAqIHdpZGVzdC53aWR0aCArIGNvcyAqIGhpZ2hlc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBtaW5TaXplLmhlaWdodCA9IE1hdGgubWluKHRoaXMubWF4SGVpZ2h0LCBtaW5TaXplLmhlaWdodCArIGxhYmVsSGVpZ2h0ICsgdGlja1BhZGRpbmcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxhYmVsV2lkdGggPSB0aWNrT3B0cy5taXJyb3IgPyAwIDogY29zICogd2lkZXN0LndpZHRoICsgc2luICogaGlnaGVzdC5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIG1pblNpemUud2lkdGggPSBNYXRoLm1pbih0aGlzLm1heFdpZHRoLCBtaW5TaXplLndpZHRoICsgbGFiZWxXaWR0aCArIHRpY2tQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2hhbmRsZU1hcmdpbnMoKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuX2xlbmd0aCA9IGNoYXJ0LndpZHRoIC0gdGhpcy5fbWFyZ2lucy5sZWZ0IC0gdGhpcy5fbWFyZ2lucy5yaWdodDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gbWluU2l6ZS53aWR0aDtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5fbGVuZ3RoID0gY2hhcnQuaGVpZ2h0IC0gdGhpcy5fbWFyZ2lucy50b3AgLSB0aGlzLl9tYXJnaW5zLmJvdHRvbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfY2FsY3VsYXRlUGFkZGluZyhmaXJzdCwgbGFzdCwgc2luLCBjb3MpIHtcbiAgICAgICAgY29uc3QgeyB0aWNrczogeyBhbGlnbiAsIHBhZGRpbmcgIH0gLCBwb3NpdGlvbiAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgaXNSb3RhdGVkID0gdGhpcy5sYWJlbFJvdGF0aW9uICE9PSAwO1xuICAgICAgICBjb25zdCBsYWJlbHNCZWxvd1RpY2tzID0gcG9zaXRpb24gIT09ICd0b3AnICYmIHRoaXMuYXhpcyA9PT0gJ3gnO1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0TGVmdCA9IHRoaXMuZ2V0UGl4ZWxGb3JUaWNrKDApIC0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0UmlnaHQgPSB0aGlzLnJpZ2h0IC0gdGhpcy5nZXRQaXhlbEZvclRpY2sodGhpcy50aWNrcy5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nTGVmdCA9IDA7XG4gICAgICAgICAgICBsZXQgcGFkZGluZ1JpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmIChpc1JvdGF0ZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzQmVsb3dUaWNrcykge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGNvcyAqIGZpcnN0LndpZHRoO1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBzaW4gKiBsYXN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IHNpbiAqIGZpcnN0LmhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gY29zICogbGFzdC53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1JpZ2h0ID0gbGFzdC53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgPSBmaXJzdC53aWR0aDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gIT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IGZpcnN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICBwYWRkaW5nUmlnaHQgPSBsYXN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0xlZnQgPSBNYXRoLm1heCgocGFkZGluZ0xlZnQgLSBvZmZzZXRMZWZ0ICsgcGFkZGluZykgKiB0aGlzLndpZHRoIC8gKHRoaXMud2lkdGggLSBvZmZzZXRMZWZ0KSwgMCk7XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KChwYWRkaW5nUmlnaHQgLSBvZmZzZXRSaWdodCArIHBhZGRpbmcpICogdGhpcy53aWR0aCAvICh0aGlzLndpZHRoIC0gb2Zmc2V0UmlnaHQpLCAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBwYWRkaW5nVG9wID0gbGFzdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgbGV0IHBhZGRpbmdCb3R0b20gPSBmaXJzdC5oZWlnaHQgLyAyO1xuICAgICAgICAgICAgaWYgKGFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcCA9IDA7XG4gICAgICAgICAgICAgICAgcGFkZGluZ0JvdHRvbSA9IGZpcnN0LmhlaWdodDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZ1RvcCA9IGxhc3QuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHBhZGRpbmdCb3R0b20gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nVG9wID0gcGFkZGluZ1RvcCArIHBhZGRpbmc7XG4gICAgICAgICAgICB0aGlzLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nQm90dG9tICsgcGFkZGluZztcbiAgICAgICAgfVxuICAgIH1cbiBfaGFuZGxlTWFyZ2lucygpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hcmdpbnMpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMubGVmdCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ0xlZnQsIHRoaXMuX21hcmdpbnMubGVmdCk7XG4gICAgICAgICAgICB0aGlzLl9tYXJnaW5zLnRvcCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1RvcCwgdGhpcy5fbWFyZ2lucy50b3ApO1xuICAgICAgICAgICAgdGhpcy5fbWFyZ2lucy5yaWdodCA9IE1hdGgubWF4KHRoaXMucGFkZGluZ1JpZ2h0LCB0aGlzLl9tYXJnaW5zLnJpZ2h0KTtcbiAgICAgICAgICAgIHRoaXMuX21hcmdpbnMuYm90dG9tID0gTWF0aC5tYXgodGhpcy5wYWRkaW5nQm90dG9tLCB0aGlzLl9tYXJnaW5zLmJvdHRvbSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWZ0ZXJGaXQoKSB7XG4gICAgICAgIGNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW1xuICAgICAgICAgICAgdGhpc1xuICAgICAgICBdKTtcbiAgICB9XG4gaXNIb3Jpem9udGFsKCkge1xuICAgICAgICBjb25zdCB7IGF4aXMgLCBwb3NpdGlvbiAgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uID09PSAndG9wJyB8fCBwb3NpdGlvbiA9PT0gJ2JvdHRvbScgfHwgYXhpcyA9PT0gJ3gnO1xuICAgIH1cbiBpc0Z1bGxTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmZ1bGxTaXplO1xuICAgIH1cbiBfY29udmVydFRpY2tzVG9MYWJlbHModGlja3MpIHtcbiAgICAgICAgdGhpcy5iZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgICAgICAgdGhpcy5nZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgaSsrKXtcbiAgICAgICAgICAgIGlmIChpc051bGxPclVuZGVmKHRpY2tzW2ldLmxhYmVsKSkge1xuICAgICAgICAgICAgICAgIHRpY2tzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpbGVuLS07XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24oKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZXMoKSB7XG4gICAgICAgIGxldCBsYWJlbFNpemVzID0gdGhpcy5fbGFiZWxTaXplcztcbiAgICAgICAgaWYgKCFsYWJlbFNpemVzKSB7XG4gICAgICAgICAgICBjb25zdCBzYW1wbGVTaXplID0gdGhpcy5vcHRpb25zLnRpY2tzLnNhbXBsZVNpemU7XG4gICAgICAgICAgICBsZXQgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICAgICAgaWYgKHNhbXBsZVNpemUgPCB0aWNrcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aWNrcyA9IHNhbXBsZSh0aWNrcywgc2FtcGxlU2l6ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sYWJlbFNpemVzID0gbGFiZWxTaXplcyA9IHRoaXMuX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCB0aWNrcy5sZW5ndGgsIHRoaXMub3B0aW9ucy50aWNrcy5tYXhUaWNrc0xpbWl0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFiZWxTaXplcztcbiAgICB9XG4gX2NvbXB1dGVMYWJlbFNpemVzKHRpY2tzLCBsZW5ndGgsIG1heFRpY2tzTGltaXQpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBfbG9uZ2VzdFRleHRDYWNoZTogY2FjaGVzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgd2lkdGhzID0gW107XG4gICAgICAgIGNvbnN0IGhlaWdodHMgPSBbXTtcbiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gTWF0aC5mbG9vcihsZW5ndGggLyBnZXRUaWNrc0xpbWl0KGxlbmd0aCwgbWF4VGlja3NMaW1pdCkpO1xuICAgICAgICBsZXQgd2lkZXN0TGFiZWxTaXplID0gMDtcbiAgICAgICAgbGV0IGhpZ2hlc3RMYWJlbFNpemUgPSAwO1xuICAgICAgICBsZXQgaSwgaiwgamxlbiwgbGFiZWwsIHRpY2tGb250LCBmb250U3RyaW5nLCBjYWNoZSwgbGluZUhlaWdodCwgd2lkdGgsIGhlaWdodCwgbmVzdGVkTGFiZWw7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBpbmNyZW1lbnQpe1xuICAgICAgICAgICAgbGFiZWwgPSB0aWNrc1tpXS5sYWJlbDtcbiAgICAgICAgICAgIHRpY2tGb250ID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucyhpKTtcbiAgICAgICAgICAgIGN0eC5mb250ID0gZm9udFN0cmluZyA9IHRpY2tGb250LnN0cmluZztcbiAgICAgICAgICAgIGNhY2hlID0gY2FjaGVzW2ZvbnRTdHJpbmddID0gY2FjaGVzW2ZvbnRTdHJpbmddIHx8IHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7fSxcbiAgICAgICAgICAgICAgICBnYzogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gdGlja0ZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ID0gMDtcbiAgICAgICAgICAgIGlmICghaXNOdWxsT3JVbmRlZihsYWJlbCkgJiYgIWlzQXJyYXkobGFiZWwpKSB7XG4gICAgICAgICAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIGxhYmVsKTtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGxhYmVsKSkge1xuICAgICAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IGxhYmVsLmxlbmd0aDsgaiA8IGpsZW47ICsrail7XG4gICAgICAgICAgICAgICAgICAgIG5lc3RlZExhYmVsID0gIGxhYmVsW2pdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYobmVzdGVkTGFiZWwpICYmICFpc0FycmF5KG5lc3RlZExhYmVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBfbWVhc3VyZVRleHQoY3R4LCBjYWNoZS5kYXRhLCBjYWNoZS5nYywgd2lkdGgsIG5lc3RlZExhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2lkdGhzLnB1c2god2lkdGgpO1xuICAgICAgICAgICAgaGVpZ2h0cy5wdXNoKGhlaWdodCk7XG4gICAgICAgICAgICB3aWRlc3RMYWJlbFNpemUgPSBNYXRoLm1heCh3aWR0aCwgd2lkZXN0TGFiZWxTaXplKTtcbiAgICAgICAgICAgIGhpZ2hlc3RMYWJlbFNpemUgPSBNYXRoLm1heChoZWlnaHQsIGhpZ2hlc3RMYWJlbFNpemUpO1xuICAgICAgICB9XG4gICAgICAgIGdhcmJhZ2VDb2xsZWN0KGNhY2hlcywgbGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgd2lkZXN0ID0gd2lkdGhzLmluZGV4T2Yod2lkZXN0TGFiZWxTaXplKTtcbiAgICAgICAgY29uc3QgaGlnaGVzdCA9IGhlaWdodHMuaW5kZXhPZihoaWdoZXN0TGFiZWxTaXplKTtcbiAgICAgICAgY29uc3QgdmFsdWVBdCA9IChpZHgpPT4oe1xuICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aHNbaWR4XSB8fCAwLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0c1tpZHhdIHx8IDBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZmlyc3Q6IHZhbHVlQXQoMCksXG4gICAgICAgICAgICBsYXN0OiB2YWx1ZUF0KGxlbmd0aCAtIDEpLFxuICAgICAgICAgICAgd2lkZXN0OiB2YWx1ZUF0KHdpZGVzdCksXG4gICAgICAgICAgICBoaWdoZXN0OiB2YWx1ZUF0KGhpZ2hlc3QpLFxuICAgICAgICAgICAgd2lkdGhzLFxuICAgICAgICAgICAgaGVpZ2h0c1xuICAgICAgICB9O1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gZ2V0VmFsdWVGb3JQaXhlbChwaXhlbCkge31cbiBnZXRQaXhlbEZvclRpY2soaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gdGlja3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aWNrc1tpbmRleF0udmFsdWUpO1xuICAgIH1cbiBnZXRQaXhlbEZvckRlY2ltYWwoZGVjaW1hbCkge1xuICAgICAgICBpZiAodGhpcy5fcmV2ZXJzZVBpeGVscykge1xuICAgICAgICAgICAgZGVjaW1hbCA9IDEgLSBkZWNpbWFsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBpeGVsID0gdGhpcy5fc3RhcnRQaXhlbCArIGRlY2ltYWwgKiB0aGlzLl9sZW5ndGg7XG4gICAgICAgIHJldHVybiBfaW50MTZSYW5nZSh0aGlzLl9hbGlnblRvUGl4ZWxzID8gX2FsaWduUGl4ZWwodGhpcy5jaGFydCwgcGl4ZWwsIDApIDogcGl4ZWwpO1xuICAgIH1cbiBnZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IChwaXhlbCAtIHRoaXMuX3N0YXJ0UGl4ZWwpIC8gdGhpcy5fbGVuZ3RoO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmV2ZXJzZVBpeGVscyA/IDEgLSBkZWNpbWFsIDogZGVjaW1hbDtcbiAgICB9XG4gZ2V0QmFzZVBpeGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRoaXMuZ2V0QmFzZVZhbHVlKCkpO1xuICAgIH1cbiBnZXRCYXNlVmFsdWUoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG1pbiA8IDAgJiYgbWF4IDwgMCA/IG1heCA6IG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6IDA7XG4gICAgfVxuIGdldENvbnRleHQoaW5kZXgpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzIHx8IFtdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdGljayA9IHRpY2tzW2luZGV4XTtcbiAgICAgICAgICAgIHJldHVybiB0aWNrLiRjb250ZXh0IHx8ICh0aWNrLiRjb250ZXh0ID0gY3JlYXRlVGlja0NvbnRleHQodGhpcy5nZXRDb250ZXh0KCksIGluZGV4LCB0aWNrKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuJGNvbnRleHQgfHwgKHRoaXMuJGNvbnRleHQgPSBjcmVhdGVTY2FsZUNvbnRleHQodGhpcy5jaGFydC5nZXRDb250ZXh0KCksIHRoaXMpKTtcbiAgICB9XG4gX3RpY2tTaXplKCkge1xuICAgICAgICBjb25zdCBvcHRpb25UaWNrcyA9IHRoaXMub3B0aW9ucy50aWNrcztcbiAgICAgICAgY29uc3Qgcm90ID0gdG9SYWRpYW5zKHRoaXMubGFiZWxSb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IGNvcyA9IE1hdGguYWJzKE1hdGguY29zKHJvdCkpO1xuICAgICAgICBjb25zdCBzaW4gPSBNYXRoLmFicyhNYXRoLnNpbihyb3QpKTtcbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IG9wdGlvblRpY2tzLmF1dG9Ta2lwUGFkZGluZyB8fCAwO1xuICAgICAgICBjb25zdCB3ID0gbGFiZWxTaXplcyA/IGxhYmVsU2l6ZXMud2lkZXN0LndpZHRoICsgcGFkZGluZyA6IDA7XG4gICAgICAgIGNvbnN0IGggPSBsYWJlbFNpemVzID8gbGFiZWxTaXplcy5oaWdoZXN0LmhlaWdodCArIHBhZGRpbmcgOiAwO1xuICAgICAgICByZXR1cm4gdGhpcy5pc0hvcml6b250YWwoKSA/IGggKiBjb3MgPiB3ICogc2luID8gdyAvIGNvcyA6IGggLyBzaW4gOiBoICogc2luIDwgdyAqIGNvcyA/IGggLyBjb3MgOiB3IC8gc2luO1xuICAgIH1cbiBfaXNWaXNpYmxlKCkge1xuICAgICAgICBjb25zdCBkaXNwbGF5ID0gdGhpcy5vcHRpb25zLmRpc3BsYXk7XG4gICAgICAgIGlmIChkaXNwbGF5ICE9PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHJldHVybiAhIWRpc3BsYXk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMoKS5sZW5ndGggPiAwO1xuICAgIH1cbiBfY29tcHV0ZUdyaWRMaW5lSXRlbXMoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydDtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBncmlkICwgcG9zaXRpb24gLCBib3JkZXIgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBncmlkLm9mZnNldDtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGlja3MgPSB0aGlzLnRpY2tzO1xuICAgICAgICBjb25zdCB0aWNrc0xlbmd0aCA9IHRpY2tzLmxlbmd0aCArIChvZmZzZXQgPyAxIDogMCk7XG4gICAgICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgoZ3JpZCk7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgICAgIGNvbnN0IGJvcmRlck9wdHMgPSBib3JkZXIuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGF4aXNXaWR0aCA9IGJvcmRlck9wdHMuZGlzcGxheSA/IGJvcmRlck9wdHMud2lkdGggOiAwO1xuICAgICAgICBjb25zdCBheGlzSGFsZldpZHRoID0gYXhpc1dpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgYWxpZ25Cb3JkZXJWYWx1ZSA9IGZ1bmN0aW9uKHBpeGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCBheGlzV2lkdGgpO1xuICAgICAgICB9O1xuICAgICAgICBsZXQgYm9yZGVyVmFsdWUsIGksIGxpbmVWYWx1ZSwgYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgbGV0IHR4MSwgdHkxLCB0eDIsIHR5MiwgeDEsIHkxLCB4MiwgeTI7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmJvdHRvbSk7XG4gICAgICAgICAgICB0eTEgPSB0aGlzLmJvdHRvbSAtIHRsO1xuICAgICAgICAgICAgdHkyID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgeTEgPSBhbGlnbkJvcmRlclZhbHVlKGNoYXJ0QXJlYS50b3ApICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLnRvcCk7XG4gICAgICAgICAgICB5MSA9IGNoYXJ0QXJlYS50b3A7XG4gICAgICAgICAgICB5MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmJvdHRvbSkgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkxID0gYm9yZGVyVmFsdWUgKyBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHkyID0gdGhpcy50b3AgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5yaWdodCk7XG4gICAgICAgICAgICB0eDEgPSB0aGlzLnJpZ2h0IC0gdGw7XG4gICAgICAgICAgICB0eDIgPSBib3JkZXJWYWx1ZSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB4MSA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLmxlZnQpICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHgyID0gY2hhcnRBcmVhLnJpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5sZWZ0KTtcbiAgICAgICAgICAgIHgxID0gY2hhcnRBcmVhLmxlZnQ7XG4gICAgICAgICAgICB4MiA9IGFsaWduQm9yZGVyVmFsdWUoY2hhcnRBcmVhLnJpZ2h0KSAtIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDEgPSBib3JkZXJWYWx1ZSArIGF4aXNIYWxmV2lkdGg7XG4gICAgICAgICAgICB0eDIgPSB0aGlzLmxlZnQgKyB0bDtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneCcpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUoKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDIgKyAwLjUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXNJRCA9IE9iamVjdC5rZXlzKHBvc2l0aW9uKVswXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHBvc2l0aW9uW3Bvc2l0aW9uQXhpc0lEXTtcbiAgICAgICAgICAgICAgICBib3JkZXJWYWx1ZSA9IGFsaWduQm9yZGVyVmFsdWUodGhpcy5jaGFydC5zY2FsZXNbcG9zaXRpb25BeGlzSURdLmdldFBpeGVsRm9yVmFsdWUodmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHkxID0gY2hhcnRBcmVhLnRvcDtcbiAgICAgICAgICAgIHkyID0gY2hhcnRBcmVhLmJvdHRvbTtcbiAgICAgICAgICAgIHR5MSA9IGJvcmRlclZhbHVlICsgYXhpc0hhbGZXaWR0aDtcbiAgICAgICAgICAgIHR5MiA9IHR5MSArIHRsO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSgoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIGJvcmRlclZhbHVlID0gYWxpZ25Cb3JkZXJWYWx1ZSh0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHgxID0gYm9yZGVyVmFsdWUgLSBheGlzSGFsZldpZHRoO1xuICAgICAgICAgICAgdHgyID0gdHgxIC0gdGw7XG4gICAgICAgICAgICB4MSA9IGNoYXJ0QXJlYS5sZWZ0O1xuICAgICAgICAgICAgeDIgPSBjaGFydEFyZWEucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLm1heFRpY2tzTGltaXQsIHRpY2tzTGVuZ3RoKTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IE1hdGgubWF4KDEsIE1hdGguY2VpbCh0aWNrc0xlbmd0aCAvIGxpbWl0KSk7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IHRpY2tzTGVuZ3RoOyBpICs9IHN0ZXApe1xuICAgICAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuZ2V0Q29udGV4dChpKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gZ3JpZC5zZXRDb250ZXh0KGNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXhCb3JkZXIgPSBib3JkZXIuc2V0Q29udGV4dChjb250ZXh0KTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IG9wdHNBdEluZGV4LmxpbmVXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVDb2xvciA9IG9wdHNBdEluZGV4LmNvbG9yO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyRGFzaCA9IG9wdHNBdEluZGV4Qm9yZGVyLmRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCBib3JkZXJEYXNoT2Zmc2V0ID0gb3B0c0F0SW5kZXhCb3JkZXIuZGFzaE9mZnNldDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tXaWR0aCA9IG9wdHNBdEluZGV4LnRpY2tXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tDb2xvciA9IG9wdHNBdEluZGV4LnRpY2tDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tCb3JkZXJEYXNoID0gb3B0c0F0SW5kZXgudGlja0JvcmRlckRhc2ggfHwgW107XG4gICAgICAgICAgICBjb25zdCB0aWNrQm9yZGVyRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LnRpY2tCb3JkZXJEYXNoT2Zmc2V0O1xuICAgICAgICAgICAgbGluZVZhbHVlID0gZ2V0UGl4ZWxGb3JHcmlkTGluZSh0aGlzLCBpLCBvZmZzZXQpO1xuICAgICAgICAgICAgaWYgKGxpbmVWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbGlnbmVkTGluZVZhbHVlID0gX2FsaWduUGl4ZWwoY2hhcnQsIGxpbmVWYWx1ZSwgbGluZVdpZHRoKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICB0eDEgPSB0eDIgPSB4MSA9IHgyID0gYWxpZ25lZExpbmVWYWx1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHkxID0gdHkyID0geTEgPSB5MiA9IGFsaWduZWRMaW5lVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0eDEsXG4gICAgICAgICAgICAgICAgdHkxLFxuICAgICAgICAgICAgICAgIHR4MixcbiAgICAgICAgICAgICAgICB0eTIsXG4gICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgeTEsXG4gICAgICAgICAgICAgICAgeDIsXG4gICAgICAgICAgICAgICAgeTIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGxpbmVXaWR0aCxcbiAgICAgICAgICAgICAgICBjb2xvcjogbGluZUNvbG9yLFxuICAgICAgICAgICAgICAgIGJvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgICAgICB0aWNrV2lkdGgsXG4gICAgICAgICAgICAgICAgdGlja0NvbG9yLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgIHRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aWNrc0xlbmd0aCA9IHRpY2tzTGVuZ3RoO1xuICAgICAgICB0aGlzLl9ib3JkZXJWYWx1ZSA9IGJvcmRlclZhbHVlO1xuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuIF9jb21wdXRlTGFiZWxJdGVtcyhjaGFydEFyZWEpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzOiBvcHRpb25UaWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgY29uc3QgeyBhbGlnbiAsIGNyb3NzQWxpZ24gLCBwYWRkaW5nICwgbWlycm9yICB9ID0gb3B0aW9uVGlja3M7XG4gICAgICAgIGNvbnN0IHRsID0gZ2V0VGlja01hcmtMZW5ndGgob3B0aW9ucy5ncmlkKTtcbiAgICAgICAgY29uc3QgdGlja0FuZFBhZGRpbmcgPSB0bCArIHBhZGRpbmc7XG4gICAgICAgIGNvbnN0IGhUaWNrQW5kUGFkZGluZyA9IG1pcnJvciA/IC1wYWRkaW5nIDogdGlja0FuZFBhZGRpbmc7XG4gICAgICAgIGNvbnN0IHJvdGF0aW9uID0gLXRvUmFkaWFucyh0aGlzLmxhYmVsUm90YXRpb24pO1xuICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbiwgdGljaywgbGFiZWwsIHgsIHksIHRleHRBbGlnbiwgcGl4ZWwsIGZvbnQsIGxpbmVIZWlnaHQsIGxpbmVDb3VudCwgdGV4dE9mZnNldDtcbiAgICAgICAgbGV0IHRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy5ib3R0b20gLSBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyBoVGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSB0aGlzLl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50KCk7XG4gICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgY29uc3QgcmV0ID0gdGhpcy5fZ2V0WUF4aXNMYWJlbEFsaWdubWVudCh0bCk7XG4gICAgICAgICAgICB0ZXh0QWxpZ24gPSByZXQudGV4dEFsaWduO1xuICAgICAgICAgICAgeCA9IHJldC54O1xuICAgICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgICAgICBjb25zdCByZXQgPSB0aGlzLl9nZXRZQXhpc0xhYmVsQWxpZ25tZW50KHRsKTtcbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHJldC50ZXh0QWxpZ247XG4gICAgICAgICAgICB4ID0gcmV0Lng7XG4gICAgICAgIH0gZWxzZSBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgeSA9IChjaGFydEFyZWEudG9wICsgY2hhcnRBcmVhLmJvdHRvbSkgLyAyICsgdGlja0FuZFBhZGRpbmc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQXhpc0lEID0gT2JqZWN0LmtleXMocG9zaXRpb24pWzBdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9zaXRpb25bcG9zaXRpb25BeGlzSURdO1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLmNoYXJ0LnNjYWxlc1twb3NpdGlvbkF4aXNJRF0uZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFhBeGlzTGFiZWxBbGlnbm1lbnQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChheGlzID09PSAneScpIHtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgICAgICB4ID0gKGNoYXJ0QXJlYS5sZWZ0ICsgY2hhcnRBcmVhLnJpZ2h0KSAvIDIgLSB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9zaXRpb25BeGlzSUQgPSBPYmplY3Qua2V5cyhwb3NpdGlvbilbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb3NpdGlvbltwb3NpdGlvbkF4aXNJRF07XG4gICAgICAgICAgICAgICAgeCA9IHRoaXMuY2hhcnQuc2NhbGVzW3Bvc2l0aW9uQXhpc0lEXS5nZXRQaXhlbEZvclZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRleHRBbGlnbiA9IHRoaXMuX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpLnRleHRBbGlnbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdzdGFydCcpIHtcbiAgICAgICAgICAgICAgICB0ZXh0QmFzZWxpbmUgPSAndG9wJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxpZ24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgdGV4dEJhc2VsaW5lID0gJ2JvdHRvbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxTaXplcyA9IHRoaXMuX2dldExhYmVsU2l6ZXMoKTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpY2sgPSB0aWNrc1tpXTtcbiAgICAgICAgICAgIGxhYmVsID0gdGljay5sYWJlbDtcbiAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gb3B0aW9uVGlja3Muc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaSkpO1xuICAgICAgICAgICAgcGl4ZWwgPSB0aGlzLmdldFBpeGVsRm9yVGljayhpKSArIG9wdGlvblRpY2tzLmxhYmVsT2Zmc2V0O1xuICAgICAgICAgICAgZm9udCA9IHRoaXMuX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaSk7XG4gICAgICAgICAgICBsaW5lSGVpZ2h0ID0gZm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgbGluZUNvdW50ID0gaXNBcnJheShsYWJlbCkgPyBsYWJlbC5sZW5ndGggOiAxO1xuICAgICAgICAgICAgY29uc3QgaGFsZkNvdW50ID0gbGluZUNvdW50IC8gMjtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gb3B0c0F0SW5kZXguY29sb3I7XG4gICAgICAgICAgICBjb25zdCBzdHJva2VDb2xvciA9IG9wdHNBdEluZGV4LnRleHRTdHJva2VDb2xvcjtcbiAgICAgICAgICAgIGNvbnN0IHN0cm9rZVdpZHRoID0gb3B0c0F0SW5kZXgudGV4dFN0cm9rZVdpZHRoO1xuICAgICAgICAgICAgbGV0IHRpY2tUZXh0QWxpZ24gPSB0ZXh0QWxpZ247XG4gICAgICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgICAgICAgeCA9IHBpeGVsO1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdpbm5lcicpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGlsZW4gLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrVGV4dEFsaWduID0gIXRoaXMub3B0aW9ucy5yZXZlcnNlID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tUZXh0QWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSAtbGluZUNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodCArIGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gLWxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgKyBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicgfHwgcm90YXRpb24gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsaW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjcm9zc0FsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dE9mZnNldCA9IGxhYmVsU2l6ZXMuaGlnaGVzdC5oZWlnaHQgLyAyIC0gaGFsZkNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgPSBsYWJlbFNpemVzLmhpZ2hlc3QuaGVpZ2h0IC0gbGluZUNvdW50ICogbGluZUhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWlycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQgKj0gLTE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyb3RhdGlvbiAhPT0gMCAmJiAhb3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgeCArPSBsaW5lSGVpZ2h0IC8gMiAqIE1hdGguc2luKHJvdGF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHkgPSBwaXhlbDtcbiAgICAgICAgICAgICAgICB0ZXh0T2Zmc2V0ID0gKDEgLSBsaW5lQ291bnQpICogbGluZUhlaWdodCAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgYmFja2Ryb3A7XG4gICAgICAgICAgICBpZiAob3B0c0F0SW5kZXguc2hvd0xhYmVsQmFja2Ryb3ApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbFBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBsYWJlbFNpemVzLmhlaWdodHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBsYWJlbFNpemVzLndpZHRoc1tpXTtcbiAgICAgICAgICAgICAgICBsZXQgdG9wID0gdGV4dE9mZnNldCAtIGxhYmVsUGFkZGluZy50b3A7XG4gICAgICAgICAgICAgICAgbGV0IGxlZnQgPSAwIC0gbGFiZWxQYWRkaW5nLmxlZnQ7XG4gICAgICAgICAgICAgICAgc3dpdGNoKHRleHRCYXNlbGluZSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ21pZGRsZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AgLT0gaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wIC09IGhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2godGV4dEFsaWduKXtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gd2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQgLT0gd2lkdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmFja2Ryb3AgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcCxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgbGFiZWxQYWRkaW5nLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCArIGxhYmVsUGFkZGluZy5oZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgIGxhYmVsLFxuICAgICAgICAgICAgICAgIGZvbnQsXG4gICAgICAgICAgICAgICAgdGV4dE9mZnNldCxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHRpY2tUZXh0QWxpZ24sXG4gICAgICAgICAgICAgICAgICAgIHRleHRCYXNlbGluZSxcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb246IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zO1xuICAgIH1cbiAgICBfZ2V0WEF4aXNMYWJlbEFsaWdubWVudCgpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IC10b1JhZGlhbnModGhpcy5sYWJlbFJvdGF0aW9uKTtcbiAgICAgICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICBsZXQgYWxpZ24gPSAnY2VudGVyJztcbiAgICAgICAgaWYgKHRpY2tzLmFsaWduID09PSAnc3RhcnQnKSB7XG4gICAgICAgICAgICBhbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICAgIGFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIGlmICh0aWNrcy5hbGlnbiA9PT0gJ2lubmVyJykge1xuICAgICAgICAgICAgYWxpZ24gPSAnaW5uZXInO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGlnbjtcbiAgICB9XG4gICAgX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQodGwpIHtcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiAsIHRpY2tzOiB7IGNyb3NzQWxpZ24gLCBtaXJyb3IgLCBwYWRkaW5nICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsYWJlbFNpemVzID0gdGhpcy5fZ2V0TGFiZWxTaXplcygpO1xuICAgICAgICBjb25zdCB0aWNrQW5kUGFkZGluZyA9IHRsICsgcGFkZGluZztcbiAgICAgICAgY29uc3Qgd2lkZXN0ID0gbGFiZWxTaXplcy53aWRlc3Qud2lkdGg7XG4gICAgICAgIGxldCB0ZXh0QWxpZ247XG4gICAgICAgIGxldCB4O1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLnJpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgeCArPSB3aWRlc3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5yaWdodCAtIHRpY2tBbmRQYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5sZWZ0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGlmIChjcm9zc0FsaWduID09PSAnbmVhcicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICAgICAgICAgICAgICB4IC09IHdpZGVzdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLmxlZnQgKyB0aWNrQW5kUGFkZGluZztcbiAgICAgICAgICAgICAgICBpZiAoY3Jvc3NBbGlnbiA9PT0gJ25lYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNyb3NzQWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbiA9ICdjZW50ZXInO1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHdpZGVzdCAvIDI7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMucmlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dEFsaWduLFxuICAgICAgICAgICAgeFxuICAgICAgICB9O1xuICAgIH1cbiBfY29tcHV0ZUxhYmVsQXJlYSgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50aWNrcy5taXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICBpZiAocG9zaXRpb24gPT09ICdsZWZ0JyB8fCBwb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgbGVmdDogdGhpcy5sZWZ0LFxuICAgICAgICAgICAgICAgIGJvdHRvbTogY2hhcnQuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0aGlzLnJpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHRvcDogdGhpcy50b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IHRoaXMuYm90dG9tLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBjaGFydC53aWR0aFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBjdHggLCBvcHRpb25zOiB7IGJhY2tncm91bmRDb2xvciAgfSAsIGxlZnQgLCB0b3AgLCB3aWR0aCAsIGhlaWdodCAgfSA9IHRoaXM7XG4gICAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldExpbmVXaWR0aEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCAhZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGlja3MuZmluZEluZGV4KCh0KT0+dC52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgY29uc3Qgb3B0cyA9IGdyaWQuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoaW5kZXgpKTtcbiAgICAgICAgICAgIHJldHVybiBvcHRzLmxpbmVXaWR0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gZHJhd0dyaWQoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSB0aGlzLm9wdGlvbnMuZ3JpZDtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5fZ3JpZExpbmVJdGVtcyB8fCAodGhpcy5fZ3JpZExpbmVJdGVtcyA9IHRoaXMuX2NvbXB1dGVHcmlkTGluZUl0ZW1zKGNoYXJ0QXJlYSkpO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgY29uc3QgZHJhd0xpbmUgPSAocDEsIHAyLCBzdHlsZSk9PntcbiAgICAgICAgICAgIGlmICghc3R5bGUud2lkdGggfHwgIXN0eWxlLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBzdHlsZS53aWR0aDtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IHN0eWxlLmNvbG9yO1xuICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKHN0eWxlLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gc3R5bGUuYm9yZGVyRGFzaE9mZnNldDtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8ocDEueCwgcDEueSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHAyLngsIHAyLnkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGdyaWQuZGlzcGxheSkge1xuICAgICAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKGdyaWQuZHJhd09uQ2hhcnRBcmVhKSB7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdMaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0ueDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnkxXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGl0ZW0ueDIsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnkyXG4gICAgICAgICAgICAgICAgICAgIH0sIGl0ZW0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ3JpZC5kcmF3VGlja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgZHJhd0xpbmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgeDogaXRlbS50eDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBpdGVtLnR5MVxuICAgICAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBpdGVtLnR4MixcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGl0ZW0udHkyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpdGVtLnRpY2tDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtLnRpY2tXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlckRhc2g6IGl0ZW0udGlja0JvcmRlckRhc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBpdGVtLnRpY2tCb3JkZXJEYXNoT2Zmc2V0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBkcmF3Qm9yZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoYXJ0ICwgY3R4ICwgb3B0aW9uczogeyBib3JkZXIgLCBncmlkICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYm9yZGVyT3B0cyA9IGJvcmRlci5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYXhpc1dpZHRoID0gYm9yZGVyLmRpc3BsYXkgPyBib3JkZXJPcHRzLndpZHRoIDogMDtcbiAgICAgICAgaWYgKCFheGlzV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYXN0TGluZVdpZHRoID0gZ3JpZC5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgwKSkubGluZVdpZHRoO1xuICAgICAgICBjb25zdCBib3JkZXJWYWx1ZSA9IHRoaXMuX2JvcmRlclZhbHVlO1xuICAgICAgICBsZXQgeDEsIHgyLCB5MSwgeTI7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB4MSA9IF9hbGlnblBpeGVsKGNoYXJ0LCB0aGlzLmxlZnQsIGF4aXNXaWR0aCkgLSBheGlzV2lkdGggLyAyO1xuICAgICAgICAgICAgeDIgPSBfYWxpZ25QaXhlbChjaGFydCwgdGhpcy5yaWdodCwgbGFzdExpbmVXaWR0aCkgKyBsYXN0TGluZVdpZHRoIC8gMjtcbiAgICAgICAgICAgIHkxID0geTIgPSBib3JkZXJWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHkxID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMudG9wLCBheGlzV2lkdGgpIC0gYXhpc1dpZHRoIC8gMjtcbiAgICAgICAgICAgIHkyID0gX2FsaWduUGl4ZWwoY2hhcnQsIHRoaXMuYm90dG9tLCBsYXN0TGluZVdpZHRoKSArIGxhc3RMaW5lV2lkdGggLyAyO1xuICAgICAgICAgICAgeDEgPSB4MiA9IGJvcmRlclZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJPcHRzLndpZHRoO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBib3JkZXJPcHRzLmNvbG9yO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8oeDEsIHkxKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4MiwgeTIpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuIGRyYXdMYWJlbHMoY2hhcnRBcmVhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvblRpY2tzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBpZiAoIW9wdGlvblRpY2tzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuX2NvbXB1dGVMYWJlbEFyZWEoKTtcbiAgICAgICAgaWYgKGFyZWEpIHtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwgYXJlYSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbXMgPSB0aGlzLmdldExhYmVsSXRlbXMoY2hhcnRBcmVhKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKXtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlclRleHRPcHRpb25zID0gaXRlbS5vcHRpb25zO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSBpdGVtLmZvbnQ7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGl0ZW0ubGFiZWw7XG4gICAgICAgICAgICBjb25zdCB5ID0gaXRlbS50ZXh0T2Zmc2V0O1xuICAgICAgICAgICAgcmVuZGVyVGV4dChjdHgsIGxhYmVsLCAwLCB5LCB0aWNrRm9udCwgcmVuZGVyVGV4dE9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmVhKSB7XG4gICAgICAgICAgICB1bmNsaXBBcmVhKGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd1RpdGxlKCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG9wdGlvbnM6IHsgcG9zaXRpb24gLCB0aXRsZSAsIHJldmVyc2UgIH0gIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIXRpdGxlLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb250ID0gdG9Gb250KHRpdGxlLmZvbnQpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdG9QYWRkaW5nKHRpdGxlLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCBhbGlnbiA9IHRpdGxlLmFsaWduO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gZm9udC5saW5lSGVpZ2h0IC8gMjtcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnYm90dG9tJyB8fCBwb3NpdGlvbiA9PT0gJ2NlbnRlcicgfHwgaXNPYmplY3QocG9zaXRpb24pKSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gcGFkZGluZy5ib3R0b207XG4gICAgICAgICAgICBpZiAoaXNBcnJheSh0aXRsZS50ZXh0KSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBmb250LmxpbmVIZWlnaHQgKiAodGl0bGUudGV4dC5sZW5ndGggLSAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9mZnNldCArPSBwYWRkaW5nLnRvcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IHRpdGxlWCAsIHRpdGxlWSAsIG1heFdpZHRoICwgcm90YXRpb24gIH0gPSB0aXRsZUFyZ3ModGhpcywgb2Zmc2V0LCBwb3NpdGlvbiwgYWxpZ24pO1xuICAgICAgICByZW5kZXJUZXh0KGN0eCwgdGl0bGUudGV4dCwgMCwgMCwgZm9udCwge1xuICAgICAgICAgICAgY29sb3I6IHRpdGxlLmNvbG9yLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogdGl0bGVBbGlnbihhbGlnbiwgcG9zaXRpb24sIHJldmVyc2UpLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgICAgIHRpdGxlWVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZHJhdyhjaGFydEFyZWEpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZHJhd0JhY2tncm91bmQoKTtcbiAgICAgICAgdGhpcy5kcmF3R3JpZChjaGFydEFyZWEpO1xuICAgICAgICB0aGlzLmRyYXdCb3JkZXIoKTtcbiAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gICAgfVxuIF9sYXllcnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHR6ID0gb3B0cy50aWNrcyAmJiBvcHRzLnRpY2tzLnogfHwgMDtcbiAgICAgICAgY29uc3QgZ3ogPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmdyaWQgJiYgb3B0cy5ncmlkLnosIC0xKTtcbiAgICAgICAgY29uc3QgYnogPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmJvcmRlciAmJiBvcHRzLmJvcmRlci56LCAwKTtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1Zpc2libGUoKSB8fCB0aGlzLmRyYXcgIT09IFNjYWxlLnByb3RvdHlwZS5kcmF3KSB7XG4gICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgejogdHosXG4gICAgICAgICAgICAgICAgICAgIGRyYXc6IChjaGFydEFyZWEpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXcoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB6OiBneixcbiAgICAgICAgICAgICAgICBkcmF3OiAoY2hhcnRBcmVhKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0dyaWQoY2hhcnRBcmVhKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHo6IGJ6LFxuICAgICAgICAgICAgICAgIGRyYXc6ICgpPT57XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZHJhd0JvcmRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgejogdHosXG4gICAgICAgICAgICAgICAgZHJhdzogKGNoYXJ0QXJlYSk9PntcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3TGFiZWxzKGNoYXJ0QXJlYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICBdO1xuICAgIH1cbiBnZXRNYXRjaGluZ1Zpc2libGVNZXRhcyh0eXBlKSB7XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5jaGFydC5nZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzKCk7XG4gICAgICAgIGNvbnN0IGF4aXNJRCA9IHRoaXMuYXhpcyArICdBeGlzSUQnO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IG1ldGFzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gbWV0YXNbaV07XG4gICAgICAgICAgICBpZiAobWV0YVtheGlzSURdID09PSB0aGlzLmlkICYmICghdHlwZSB8fCBtZXRhLnR5cGUgPT09IHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWV0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gX3Jlc29sdmVUaWNrRm9udE9wdGlvbnMoaW5kZXgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucy50aWNrcy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICByZXR1cm4gdG9Gb250KG9wdHMuZm9udCk7XG4gICAgfVxuIF9tYXhEaWdpdHMoKSB7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5fcmVzb2x2ZVRpY2tGb250T3B0aW9ucygwKS5saW5lSGVpZ2h0O1xuICAgICAgICByZXR1cm4gKHRoaXMuaXNIb3Jpem9udGFsKCkgPyB0aGlzLndpZHRoIDogdGhpcy5oZWlnaHQpIC8gZm9udFNpemU7XG4gICAgfVxufVxuXG5jbGFzcyBUeXBlZFJlZ2lzdHJ5IHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBzY29wZSwgb3ZlcnJpZGUpe1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIGlzRm9yVHlwZSh0eXBlKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmlzUHJvdG90eXBlT2YuY2FsbCh0aGlzLnR5cGUucHJvdG90eXBlLCB0eXBlLnByb3RvdHlwZSk7XG4gICAgfVxuIHJlZ2lzdGVyKGl0ZW0pIHtcbiAgICAgICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoaXRlbSk7XG4gICAgICAgIGxldCBwYXJlbnRTY29wZTtcbiAgICAgICAgaWYgKGlzSUNoYXJ0Q29tcG9uZW50KHByb3RvKSkge1xuICAgICAgICAgICAgcGFyZW50U2NvcGUgPSB0aGlzLnJlZ2lzdGVyKHByb3RvKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlICsgJy4nICsgaWQ7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2xhc3MgZG9lcyBub3QgaGF2ZSBpZDogJyArIGl0ZW0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpZCBpbiBpdGVtcykge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlO1xuICAgICAgICB9XG4gICAgICAgIGl0ZW1zW2lkXSA9IGl0ZW07XG4gICAgICAgIHJlZ2lzdGVyRGVmYXVsdHMoaXRlbSwgc2NvcGUsIHBhcmVudFNjb3BlKTtcbiAgICAgICAgaWYgKHRoaXMub3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGRlZmF1bHRzLm92ZXJyaWRlKGl0ZW0uaWQsIGl0ZW0ub3ZlcnJpZGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2NvcGU7XG4gICAgfVxuIGdldChpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1tpZF07XG4gICAgfVxuIHVucmVnaXN0ZXIoaXRlbSkge1xuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGNvbnN0IGlkID0gaXRlbS5pZDtcbiAgICAgICAgY29uc3Qgc2NvcGUgPSB0aGlzLnNjb3BlO1xuICAgICAgICBpZiAoaWQgaW4gaXRlbXMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBpdGVtc1tpZF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjb3BlICYmIGlkIGluIGRlZmF1bHRzW3Njb3BlXSkge1xuICAgICAgICAgICAgZGVsZXRlIGRlZmF1bHRzW3Njb3BlXVtpZF07XG4gICAgICAgICAgICBpZiAodGhpcy5vdmVycmlkZSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBvdmVycmlkZXNbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJEZWZhdWx0cyhpdGVtLCBzY29wZSwgcGFyZW50U2NvcGUpIHtcbiAgICBjb25zdCBpdGVtRGVmYXVsdHMgPSBtZXJnZShPYmplY3QuY3JlYXRlKG51bGwpLCBbXG4gICAgICAgIHBhcmVudFNjb3BlID8gZGVmYXVsdHMuZ2V0KHBhcmVudFNjb3BlKSA6IHt9LFxuICAgICAgICBkZWZhdWx0cy5nZXQoc2NvcGUpLFxuICAgICAgICBpdGVtLmRlZmF1bHRzXG4gICAgXSk7XG4gICAgZGVmYXVsdHMuc2V0KHNjb3BlLCBpdGVtRGVmYXVsdHMpO1xuICAgIGlmIChpdGVtLmRlZmF1bHRSb3V0ZXMpIHtcbiAgICAgICAgcm91dGVEZWZhdWx0cyhzY29wZSwgaXRlbS5kZWZhdWx0Um91dGVzKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0uZGVzY3JpcHRvcnMpIHtcbiAgICAgICAgZGVmYXVsdHMuZGVzY3JpYmUoc2NvcGUsIGl0ZW0uZGVzY3JpcHRvcnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJvdXRlRGVmYXVsdHMoc2NvcGUsIHJvdXRlcykge1xuICAgIE9iamVjdC5rZXlzKHJvdXRlcykuZm9yRWFjaCgocHJvcGVydHkpPT57XG4gICAgICAgIGNvbnN0IHByb3BlcnR5UGFydHMgPSBwcm9wZXJ0eS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBzb3VyY2VOYW1lID0gcHJvcGVydHlQYXJ0cy5wb3AoKTtcbiAgICAgICAgY29uc3Qgc291cmNlU2NvcGUgPSBbXG4gICAgICAgICAgICBzY29wZVxuICAgICAgICBdLmNvbmNhdChwcm9wZXJ0eVBhcnRzKS5qb2luKCcuJyk7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gcm91dGVzW3Byb3BlcnR5XS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCB0YXJnZXROYW1lID0gcGFydHMucG9wKCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNjb3BlID0gcGFydHMuam9pbignLicpO1xuICAgICAgICBkZWZhdWx0cy5yb3V0ZShzb3VyY2VTY29wZSwgc291cmNlTmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaXNJQ2hhcnRDb21wb25lbnQocHJvdG8pIHtcbiAgICByZXR1cm4gJ2lkJyBpbiBwcm90byAmJiAnZGVmYXVsdHMnIGluIHByb3RvO1xufVxuXG5jbGFzcyBSZWdpc3RyeSB7XG4gICAgY29uc3RydWN0b3IoKXtcbiAgICAgICAgdGhpcy5jb250cm9sbGVycyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KERhdGFzZXRDb250cm9sbGVyLCAnZGF0YXNldHMnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IG5ldyBUeXBlZFJlZ2lzdHJ5KEVsZW1lbnQsICdlbGVtZW50cycpO1xuICAgICAgICB0aGlzLnBsdWdpbnMgPSBuZXcgVHlwZWRSZWdpc3RyeShPYmplY3QsICdwbHVnaW5zJyk7XG4gICAgICAgIHRoaXMuc2NhbGVzID0gbmV3IFR5cGVkUmVnaXN0cnkoU2NhbGUsICdzY2FsZXMnKTtcbiAgICAgICAgdGhpcy5fdHlwZWRSZWdpc3RyaWVzID0gW1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVycyxcbiAgICAgICAgICAgIHRoaXMuc2NhbGVzLFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50c1xuICAgICAgICBdO1xuICAgIH1cbiBhZGQoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MpO1xuICAgIH1cbiAgICByZW1vdmUoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncyk7XG4gICAgfVxuIGFkZENvbnRyb2xsZXJzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgICB9XG4gYWRkRWxlbWVudHMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuZWxlbWVudHMpO1xuICAgIH1cbiBhZGRQbHVnaW5zKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgncmVnaXN0ZXInLCBhcmdzLCB0aGlzLnBsdWdpbnMpO1xuICAgIH1cbiBhZGRTY2FsZXMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCdyZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgICB9XG4gZ2V0Q29udHJvbGxlcihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLmNvbnRyb2xsZXJzLCAnY29udHJvbGxlcicpO1xuICAgIH1cbiBnZXRFbGVtZW50KGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXQoaWQsIHRoaXMuZWxlbWVudHMsICdlbGVtZW50Jyk7XG4gICAgfVxuIGdldFBsdWdpbihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KGlkLCB0aGlzLnBsdWdpbnMsICdwbHVnaW4nKTtcbiAgICB9XG4gZ2V0U2NhbGUoaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChpZCwgdGhpcy5zY2FsZXMsICdzY2FsZScpO1xuICAgIH1cbiByZW1vdmVDb250cm9sbGVycyguLi5hcmdzKSB7XG4gICAgICAgIHRoaXMuX2VhY2goJ3VucmVnaXN0ZXInLCBhcmdzLCB0aGlzLmNvbnRyb2xsZXJzKTtcbiAgICB9XG4gcmVtb3ZlRWxlbWVudHMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5lbGVtZW50cyk7XG4gICAgfVxuIHJlbW92ZVBsdWdpbnMoLi4uYXJncykge1xuICAgICAgICB0aGlzLl9lYWNoKCd1bnJlZ2lzdGVyJywgYXJncywgdGhpcy5wbHVnaW5zKTtcbiAgICB9XG4gcmVtb3ZlU2NhbGVzKC4uLmFyZ3MpIHtcbiAgICAgICAgdGhpcy5fZWFjaCgndW5yZWdpc3RlcicsIGFyZ3MsIHRoaXMuc2NhbGVzKTtcbiAgICB9XG4gX2VhY2gobWV0aG9kLCBhcmdzLCB0eXBlZFJlZ2lzdHJ5KSB7XG4gICAgICAgIFtcbiAgICAgICAgICAgIC4uLmFyZ3NcbiAgICAgICAgXS5mb3JFYWNoKChhcmcpPT57XG4gICAgICAgICAgICBjb25zdCByZWcgPSB0eXBlZFJlZ2lzdHJ5IHx8IHRoaXMuX2dldFJlZ2lzdHJ5Rm9yVHlwZShhcmcpO1xuICAgICAgICAgICAgaWYgKHR5cGVkUmVnaXN0cnkgfHwgcmVnLmlzRm9yVHlwZShhcmcpIHx8IHJlZyA9PT0gdGhpcy5wbHVnaW5zICYmIGFyZy5pZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWMobWV0aG9kLCByZWcsIGFyZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGVhY2goYXJnLCAoaXRlbSk9PntcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbVJlZyA9IHR5cGVkUmVnaXN0cnkgfHwgdGhpcy5fZ2V0UmVnaXN0cnlGb3JUeXBlKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9leGVjKG1ldGhvZCwgaXRlbVJlZywgaXRlbSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiBfZXhlYyhtZXRob2QsIHJlZ2lzdHJ5LCBjb21wb25lbnQpIHtcbiAgICAgICAgY29uc3QgY2FtZWxNZXRob2QgPSBfY2FwaXRhbGl6ZShtZXRob2QpO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnRbJ2JlZm9yZScgKyBjYW1lbE1ldGhvZF0sIFtdLCBjb21wb25lbnQpO1xuICAgICAgICByZWdpc3RyeVttZXRob2RdKGNvbXBvbmVudCk7XG4gICAgICAgIGNhbGxiYWNrKGNvbXBvbmVudFsnYWZ0ZXInICsgY2FtZWxNZXRob2RdLCBbXSwgY29tcG9uZW50KTtcbiAgICB9XG4gX2dldFJlZ2lzdHJ5Rm9yVHlwZSh0eXBlKSB7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLl90eXBlZFJlZ2lzdHJpZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgcmVnID0gdGhpcy5fdHlwZWRSZWdpc3RyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKHJlZy5pc0ZvclR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbnM7XG4gICAgfVxuIF9nZXQoaWQsIHR5cGVkUmVnaXN0cnksIHR5cGUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHR5cGVkUmVnaXN0cnkuZ2V0KGlkKTtcbiAgICAgICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyBpZCArICdcIiBpcyBub3QgYSByZWdpc3RlcmVkICcgKyB0eXBlICsgJy4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG59XG52YXIgcmVnaXN0cnkgPSAvKiAjX19QVVJFX18gKi8gbmV3IFJlZ2lzdHJ5KCk7XG5cbmNsYXNzIFBsdWdpblNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuX2luaXQgPSBbXTtcbiAgICB9XG4gbm90aWZ5KGNoYXJ0LCBob29rLCBhcmdzLCBmaWx0ZXIpIHtcbiAgICAgICAgaWYgKGhvb2sgPT09ICdiZWZvcmVJbml0Jykge1xuICAgICAgICAgICAgdGhpcy5faW5pdCA9IHRoaXMuX2NyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ2luc3RhbGwnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IGZpbHRlciA/IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KS5maWx0ZXIoZmlsdGVyKSA6IHRoaXMuX2Rlc2NyaXB0b3JzKGNoYXJ0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgaG9vaywgYXJncyk7XG4gICAgICAgIGlmIChob29rID09PSAnYWZ0ZXJEZXN0cm95Jykge1xuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGRlc2NyaXB0b3JzLCBjaGFydCwgJ3N0b3AnKTtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSh0aGlzLl9pbml0LCBjaGFydCwgJ3VuaW5zdGFsbCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIF9ub3RpZnkoZGVzY3JpcHRvcnMsIGNoYXJ0LCBob29rLCBhcmdzKSB7XG4gICAgICAgIGFyZ3MgPSBhcmdzIHx8IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGRlc2NyaXB0b3Igb2YgZGVzY3JpcHRvcnMpe1xuICAgICAgICAgICAgY29uc3QgcGx1Z2luID0gZGVzY3JpcHRvci5wbHVnaW47XG4gICAgICAgICAgICBjb25zdCBtZXRob2QgPSBwbHVnaW5baG9va107XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBbXG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgYXJncyxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLm9wdGlvbnNcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sobWV0aG9kLCBwYXJhbXMsIHBsdWdpbikgPT09IGZhbHNlICYmIGFyZ3MuY2FuY2VsYWJsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKHRoaXMuX2NhY2hlKSkge1xuICAgICAgICAgICAgdGhpcy5fb2xkQ2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuIF9kZXNjcmlwdG9ycyhjaGFydCkge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkZXNjcmlwdG9ycyA9IHRoaXMuX2NhY2hlID0gdGhpcy5fY3JlYXRlRGVzY3JpcHRvcnMoY2hhcnQpO1xuICAgICAgICB0aGlzLl9ub3RpZnlTdGF0ZUNoYW5nZXMoY2hhcnQpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRvcnM7XG4gICAgfVxuICAgIF9jcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgYWxsKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IGNoYXJ0ICYmIGNoYXJ0LmNvbmZpZztcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHZhbHVlT3JEZWZhdWx0KGNvbmZpZy5vcHRpb25zICYmIGNvbmZpZy5vcHRpb25zLnBsdWdpbnMsIHt9KTtcbiAgICAgICAgY29uc3QgcGx1Z2lucyA9IGFsbFBsdWdpbnMoY29uZmlnKTtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMgPT09IGZhbHNlICYmICFhbGwgPyBbXSA6IGNyZWF0ZURlc2NyaXB0b3JzKGNoYXJ0LCBwbHVnaW5zLCBvcHRpb25zLCBhbGwpO1xuICAgIH1cbiBfbm90aWZ5U3RhdGVDaGFuZ2VzKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzRGVzY3JpcHRvcnMgPSB0aGlzLl9vbGRDYWNoZSB8fCBbXTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRvcnMgPSB0aGlzLl9jYWNoZTtcbiAgICAgICAgY29uc3QgZGlmZiA9IChhLCBiKT0+YS5maWx0ZXIoKHgpPT4hYi5zb21lKCh5KT0+eC5wbHVnaW4uaWQgPT09IHkucGx1Z2luLmlkKSk7XG4gICAgICAgIHRoaXMuX25vdGlmeShkaWZmKHByZXZpb3VzRGVzY3JpcHRvcnMsIGRlc2NyaXB0b3JzKSwgY2hhcnQsICdzdG9wJyk7XG4gICAgICAgIHRoaXMuX25vdGlmeShkaWZmKGRlc2NyaXB0b3JzLCBwcmV2aW91c0Rlc2NyaXB0b3JzKSwgY2hhcnQsICdzdGFydCcpO1xuICAgIH1cbn1cbiBmdW5jdGlvbiBhbGxQbHVnaW5zKGNvbmZpZykge1xuICAgIGNvbnN0IGxvY2FsSWRzID0ge307XG4gICAgY29uc3QgcGx1Z2lucyA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhyZWdpc3RyeS5wbHVnaW5zLml0ZW1zKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHBsdWdpbnMucHVzaChyZWdpc3RyeS5nZXRQbHVnaW4oa2V5c1tpXSkpO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbCA9IGNvbmZpZy5wbHVnaW5zIHx8IFtdO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsb2NhbC5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHBsdWdpbiA9IGxvY2FsW2ldO1xuICAgICAgICBpZiAocGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPT09IC0xKSB7XG4gICAgICAgICAgICBwbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICAgICAgICAgIGxvY2FsSWRzW3BsdWdpbi5pZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHBsdWdpbnMsXG4gICAgICAgIGxvY2FsSWRzXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldE9wdHMob3B0aW9ucywgYWxsKSB7XG4gICAgaWYgKCFhbGwgJiYgb3B0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChvcHRpb25zID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBjcmVhdGVEZXNjcmlwdG9ycyhjaGFydCwgeyBwbHVnaW5zICwgbG9jYWxJZHMgIH0sIG9wdGlvbnMsIGFsbCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IGNvbnRleHQgPSBjaGFydC5nZXRDb250ZXh0KCk7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucyl7XG4gICAgICAgIGNvbnN0IGlkID0gcGx1Z2luLmlkO1xuICAgICAgICBjb25zdCBvcHRzID0gZ2V0T3B0cyhvcHRpb25zW2lkXSwgYWxsKTtcbiAgICAgICAgaWYgKG9wdHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgIHBsdWdpbixcbiAgICAgICAgICAgIG9wdGlvbnM6IHBsdWdpbk9wdHMoY2hhcnQuY29uZmlnLCB7XG4gICAgICAgICAgICAgICAgcGx1Z2luLFxuICAgICAgICAgICAgICAgIGxvY2FsOiBsb2NhbElkc1tpZF1cbiAgICAgICAgICAgIH0sIG9wdHMsIGNvbnRleHQpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcGx1Z2luT3B0cyhjb25maWcsIHsgcGx1Z2luICwgbG9jYWwgIH0sIG9wdHMsIGNvbnRleHQpIHtcbiAgICBjb25zdCBrZXlzID0gY29uZmlnLnBsdWdpblNjb3BlS2V5cyhwbHVnaW4pO1xuICAgIGNvbnN0IHNjb3BlcyA9IGNvbmZpZy5nZXRPcHRpb25TY29wZXMob3B0cywga2V5cyk7XG4gICAgaWYgKGxvY2FsICYmIHBsdWdpbi5kZWZhdWx0cykge1xuICAgICAgICBzY29wZXMucHVzaChwbHVnaW4uZGVmYXVsdHMpO1xuICAgIH1cbiAgICByZXR1cm4gY29uZmlnLmNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgW1xuICAgICAgICAnJ1xuICAgIF0sIHtcbiAgICAgICAgc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgIGluZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIGFsbEtleXM6IHRydWVcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBkZWZhdWx0cy5kYXRhc2V0c1t0eXBlXSB8fCB7fTtcbiAgICBjb25zdCBkYXRhc2V0T3B0aW9ucyA9IChvcHRpb25zLmRhdGFzZXRzIHx8IHt9KVt0eXBlXSB8fCB7fTtcbiAgICByZXR1cm4gZGF0YXNldE9wdGlvbnMuaW5kZXhBeGlzIHx8IG9wdGlvbnMuaW5kZXhBeGlzIHx8IGRhdGFzZXREZWZhdWx0cy5pbmRleEF4aXMgfHwgJ3gnO1xufVxuZnVuY3Rpb24gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChpZCwgaW5kZXhBeGlzKSB7XG4gICAgbGV0IGF4aXMgPSBpZDtcbiAgICBpZiAoaWQgPT09ICdfaW5kZXhfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzO1xuICAgIH0gZWxzZSBpZiAoaWQgPT09ICdfdmFsdWVfJykge1xuICAgICAgICBheGlzID0gaW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG4gICAgfVxuICAgIHJldHVybiBheGlzO1xufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdFNjYWxlSURGcm9tQXhpcyhheGlzLCBpbmRleEF4aXMpIHtcbiAgICByZXR1cm4gYXhpcyA9PT0gaW5kZXhBeGlzID8gJ19pbmRleF8nIDogJ192YWx1ZV8nO1xufVxuZnVuY3Rpb24gaWRNYXRjaGVzQXhpcyhpZCkge1xuICAgIGlmIChpZCA9PT0gJ3gnIHx8IGlkID09PSAneScgfHwgaWQgPT09ICdyJykge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxufVxuZnVuY3Rpb24gYXhpc0Zyb21Qb3NpdGlvbihwb3NpdGlvbikge1xuICAgIGlmIChwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHJldHVybiAneCc7XG4gICAgfVxuICAgIGlmIChwb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHJldHVybiAneSc7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0ZXJtaW5lQXhpcyhpZCwgLi4uc2NhbGVPcHRpb25zKSB7XG4gICAgaWYgKGlkTWF0Y2hlc0F4aXMoaWQpKSB7XG4gICAgICAgIHJldHVybiBpZDtcbiAgICB9XG4gICAgZm9yIChjb25zdCBvcHRzIG9mIHNjYWxlT3B0aW9ucyl7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBvcHRzLmF4aXMgfHwgYXhpc0Zyb21Qb3NpdGlvbihvcHRzLnBvc2l0aW9uKSB8fCBpZC5sZW5ndGggPiAxICYmIGlkTWF0Y2hlc0F4aXMoaWRbMF0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChheGlzKSB7XG4gICAgICAgICAgICByZXR1cm4gYXhpcztcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBkZXRlcm1pbmUgdHlwZSBvZiAnJHtpZH0nIGF4aXMuIFBsZWFzZSBwcm92aWRlICdheGlzJyBvciAncG9zaXRpb24nIG9wdGlvbi5gKTtcbn1cbmZ1bmN0aW9uIGdldEF4aXNGcm9tRGF0YXNldChpZCwgYXhpcywgZGF0YXNldCkge1xuICAgIGlmIChkYXRhc2V0W2F4aXMgKyAnQXhpc0lEJ10gPT09IGlkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBheGlzXG4gICAgICAgIH07XG4gICAgfVxufVxuZnVuY3Rpb24gcmV0cmlldmVBeGlzRnJvbURhdGFzZXRzKGlkLCBjb25maWcpIHtcbiAgICBpZiAoY29uZmlnLmRhdGEgJiYgY29uZmlnLmRhdGEuZGF0YXNldHMpIHtcbiAgICAgICAgY29uc3QgYm91bmREcyA9IGNvbmZpZy5kYXRhLmRhdGFzZXRzLmZpbHRlcigoZCk9PmQueEF4aXNJRCA9PT0gaWQgfHwgZC55QXhpc0lEID09PSBpZCk7XG4gICAgICAgIGlmIChib3VuZERzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGdldEF4aXNGcm9tRGF0YXNldChpZCwgJ3gnLCBib3VuZERzWzBdKSB8fCBnZXRBeGlzRnJvbURhdGFzZXQoaWQsICd5JywgYm91bmREc1swXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufVxuZnVuY3Rpb24gbWVyZ2VTY2FsZUNvbmZpZyhjb25maWcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydERlZmF1bHRzID0gb3ZlcnJpZGVzW2NvbmZpZy50eXBlXSB8fCB7XG4gICAgICAgIHNjYWxlczoge31cbiAgICB9O1xuICAgIGNvbnN0IGNvbmZpZ1NjYWxlcyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgIGNvbnN0IGNoYXJ0SW5kZXhBeGlzID0gZ2V0SW5kZXhBeGlzKGNvbmZpZy50eXBlLCBvcHRpb25zKTtcbiAgICBjb25zdCBzY2FsZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZ1NjYWxlcykuZm9yRWFjaCgoaWQpPT57XG4gICAgICAgIGNvbnN0IHNjYWxlQ29uZiA9IGNvbmZpZ1NjYWxlc1tpZF07XG4gICAgICAgIGlmICghaXNPYmplY3Qoc2NhbGVDb25mKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgc2NhbGUgY29uZmlndXJhdGlvbiBmb3Igc2NhbGU6ICR7aWR9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjYWxlQ29uZi5fcHJveHkpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zb2xlLndhcm4oYElnbm9yaW5nIHJlc29sdmVyIHBhc3NlZCBhcyBvcHRpb25zIGZvciBzY2FsZTogJHtpZH1gKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBheGlzID0gZGV0ZXJtaW5lQXhpcyhpZCwgc2NhbGVDb25mLCByZXRyaWV2ZUF4aXNGcm9tRGF0YXNldHMoaWQsIGNvbmZpZyksIGRlZmF1bHRzLnNjYWxlc1tzY2FsZUNvbmYudHlwZV0pO1xuICAgICAgICBjb25zdCBkZWZhdWx0SWQgPSBnZXREZWZhdWx0U2NhbGVJREZyb21BeGlzKGF4aXMsIGNoYXJ0SW5kZXhBeGlzKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdFNjYWxlT3B0aW9ucyA9IGNoYXJ0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBzY2FsZXNbaWRdID0gbWVyZ2VJZihPYmplY3QuY3JlYXRlKG51bGwpLCBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXhpc1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNjYWxlQ29uZixcbiAgICAgICAgICAgIGRlZmF1bHRTY2FsZU9wdGlvbnNbYXhpc10sXG4gICAgICAgICAgICBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJZF1cbiAgICAgICAgXSk7XG4gICAgfSk7XG4gICAgY29uZmlnLmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCk9PntcbiAgICAgICAgY29uc3QgdHlwZSA9IGRhdGFzZXQudHlwZSB8fCBjb25maWcudHlwZTtcbiAgICAgICAgY29uc3QgaW5kZXhBeGlzID0gZGF0YXNldC5pbmRleEF4aXMgfHwgZ2V0SW5kZXhBeGlzKHR5cGUsIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBkYXRhc2V0RGVmYXVsdHMgPSBvdmVycmlkZXNbdHlwZV0gfHwge307XG4gICAgICAgIGNvbnN0IGRlZmF1bHRTY2FsZU9wdGlvbnMgPSBkYXRhc2V0RGVmYXVsdHMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0U2NhbGVPcHRpb25zKS5mb3JFYWNoKChkZWZhdWx0SUQpPT57XG4gICAgICAgICAgICBjb25zdCBheGlzID0gZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRChkZWZhdWx0SUQsIGluZGV4QXhpcyk7XG4gICAgICAgICAgICBjb25zdCBpZCA9IGRhdGFzZXRbYXhpcyArICdBeGlzSUQnXSB8fCBheGlzO1xuICAgICAgICAgICAgc2NhbGVzW2lkXSA9IHNjYWxlc1tpZF0gfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICAgIG1lcmdlSWYoc2NhbGVzW2lkXSwgW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29uZmlnU2NhbGVzW2lkXSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0U2NhbGVPcHRpb25zW2RlZmF1bHRJRF1cbiAgICAgICAgICAgIF0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhzY2FsZXMpLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBzY2FsZXNba2V5XTtcbiAgICAgICAgbWVyZ2VJZihzY2FsZSwgW1xuICAgICAgICAgICAgZGVmYXVsdHMuc2NhbGVzW3NjYWxlLnR5cGVdLFxuICAgICAgICAgICAgZGVmYXVsdHMuc2NhbGVcbiAgICAgICAgXSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjYWxlcztcbn1cbmZ1bmN0aW9uIGluaXRPcHRpb25zKGNvbmZpZykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBjb25maWcub3B0aW9ucyB8fCAoY29uZmlnLm9wdGlvbnMgPSB7fSk7XG4gICAgb3B0aW9ucy5wbHVnaW5zID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5wbHVnaW5zLCB7fSk7XG4gICAgb3B0aW9ucy5zY2FsZXMgPSBtZXJnZVNjYWxlQ29uZmlnKGNvbmZpZywgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBpbml0RGF0YShkYXRhKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG4gICAgZGF0YS5sYWJlbHMgPSBkYXRhLmxhYmVscyB8fCBbXTtcbiAgICByZXR1cm4gZGF0YTtcbn1cbmZ1bmN0aW9uIGluaXRDb25maWcoY29uZmlnKSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICAgIGNvbmZpZy5kYXRhID0gaW5pdERhdGEoY29uZmlnLmRhdGEpO1xuICAgIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gICAgcmV0dXJuIGNvbmZpZztcbn1cbmNvbnN0IGtleUNhY2hlID0gbmV3IE1hcCgpO1xuY29uc3Qga2V5c0NhY2hlZCA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGNhY2hlZEtleXMoY2FjaGVLZXksIGdlbmVyYXRlKSB7XG4gICAgbGV0IGtleXMgPSBrZXlDYWNoZS5nZXQoY2FjaGVLZXkpO1xuICAgIGlmICgha2V5cykge1xuICAgICAgICBrZXlzID0gZ2VuZXJhdGUoKTtcbiAgICAgICAga2V5Q2FjaGUuc2V0KGNhY2hlS2V5LCBrZXlzKTtcbiAgICAgICAga2V5c0NhY2hlZC5hZGQoa2V5cyk7XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuY29uc3QgYWRkSWZGb3VuZCA9IChzZXQsIG9iaiwga2V5KT0+e1xuICAgIGNvbnN0IG9wdHMgPSByZXNvbHZlT2JqZWN0S2V5KG9iaiwga2V5KTtcbiAgICBpZiAob3B0cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNldC5hZGQob3B0cyk7XG4gICAgfVxufTtcbmNsYXNzIENvbmZpZyB7XG4gICAgY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9zY29wZUNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlckNhY2hlID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICBnZXQgcGxhdGZvcm0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWcucGxhdGZvcm07XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLnR5cGU7XG4gICAgfVxuICAgIHNldCB0eXBlKHR5cGUpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBnZXQgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5kYXRhO1xuICAgIH1cbiAgICBzZXQgZGF0YShkYXRhKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZy5kYXRhID0gaW5pdERhdGEoZGF0YSk7XG4gICAgfVxuICAgIGdldCBvcHRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnLm9wdGlvbnM7XG4gICAgfVxuICAgIHNldCBvcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5fY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgcGx1Z2lucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5wbHVnaW5zO1xuICAgIH1cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuX2NvbmZpZztcbiAgICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgICAgIGluaXRPcHRpb25zKGNvbmZpZyk7XG4gICAgfVxuICAgIGNsZWFyQ2FjaGUoKSB7XG4gICAgICAgIHRoaXMuX3Njb3BlQ2FjaGUuY2xlYXIoKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJDYWNoZS5jbGVhcigpO1xuICAgIH1cbiBkYXRhc2V0U2NvcGVLZXlzKGRhdGFzZXRUeXBlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWRLZXlzKGRhdGFzZXRUeXBlLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gZGF0YXNldEFuaW1hdGlvblNjb3BlS2V5cyhkYXRhc2V0VHlwZSwgdHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0udHJhbnNpdGlvbi4ke3RyYW5zaXRpb259YCwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfS50cmFuc2l0aW9ucy4ke3RyYW5zaXRpb259YCxcbiAgICAgICAgICAgICAgICAgICAgYHRyYW5zaXRpb25zLiR7dHJhbnNpdGlvbn1gXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBkYXRhc2V0cy4ke2RhdGFzZXRUeXBlfWAsXG4gICAgICAgICAgICAgICAgICAgICcnXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgXSk7XG4gICAgfVxuIGRhdGFzZXRFbGVtZW50U2NvcGVLZXlzKGRhdGFzZXRUeXBlLCBlbGVtZW50VHlwZSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkS2V5cyhgJHtkYXRhc2V0VHlwZX0tJHtlbGVtZW50VHlwZX1gLCAoKT0+W1xuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9LmVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgYGRhdGFzZXRzLiR7ZGF0YXNldFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgYGVsZW1lbnRzLiR7ZWxlbWVudFR5cGV9YCxcbiAgICAgICAgICAgICAgICAgICAgJydcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gcGx1Z2luU2NvcGVLZXlzKHBsdWdpbikge1xuICAgICAgICBjb25zdCBpZCA9IHBsdWdpbi5pZDtcbiAgICAgICAgY29uc3QgdHlwZSA9IHRoaXMudHlwZTtcbiAgICAgICAgcmV0dXJuIGNhY2hlZEtleXMoYCR7dHlwZX0tcGx1Z2luLSR7aWR9YCwgKCk9PltcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIGBwbHVnaW5zLiR7aWR9YCxcbiAgICAgICAgICAgICAgICAgICAgLi4ucGx1Z2luLmFkZGl0aW9uYWxPcHRpb25TY29wZXMgfHwgW11cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICBdKTtcbiAgICB9XG4gX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpIHtcbiAgICAgICAgY29uc3QgX3Njb3BlQ2FjaGUgPSB0aGlzLl9zY29wZUNhY2hlO1xuICAgICAgICBsZXQgY2FjaGUgPSBfc2NvcGVDYWNoZS5nZXQobWFpblNjb3BlKTtcbiAgICAgICAgaWYgKCFjYWNoZSB8fCByZXNldENhY2hlKSB7XG4gICAgICAgICAgICBjYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIF9zY29wZUNhY2hlLnNldChtYWluU2NvcGUsIGNhY2hlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuIGdldE9wdGlvblNjb3BlcyhtYWluU2NvcGUsIGtleUxpc3RzLCByZXNldENhY2hlKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIHR5cGUgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlZFNjb3BlcyhtYWluU2NvcGUsIHJlc2V0Q2FjaGUpO1xuICAgICAgICBjb25zdCBjYWNoZWQgPSBjYWNoZS5nZXQoa2V5TGlzdHMpO1xuICAgICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IG5ldyBTZXQoKTtcbiAgICAgICAga2V5TGlzdHMuZm9yRWFjaCgoa2V5cyk9PntcbiAgICAgICAgICAgIGlmIChtYWluU2NvcGUpIHtcbiAgICAgICAgICAgICAgICBzY29wZXMuYWRkKG1haW5TY29wZSk7XG4gICAgICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3BlcywgbWFpblNjb3BlLCBrZXkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIG9wdGlvbnMsIGtleSkpO1xuICAgICAgICAgICAga2V5cy5mb3JFYWNoKChrZXkpPT5hZGRJZkZvdW5kKHNjb3Blcywgb3ZlcnJpZGVzW3R5cGVdIHx8IHt9LCBrZXkpKTtcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIGRlZmF1bHRzLCBrZXkpKTtcbiAgICAgICAgICAgIGtleXMuZm9yRWFjaCgoa2V5KT0+YWRkSWZGb3VuZChzY29wZXMsIGRlc2NyaXB0b3JzLCBrZXkpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFycmF5ID0gQXJyYXkuZnJvbShzY29wZXMpO1xuICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBhcnJheS5wdXNoKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrZXlzQ2FjaGVkLmhhcyhrZXlMaXN0cykpIHtcbiAgICAgICAgICAgIGNhY2hlLnNldChrZXlMaXN0cywgYXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gY2hhcnRPcHRpb25TY29wZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyAsIHR5cGUgIH0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIG92ZXJyaWRlc1t0eXBlXSB8fCB7fSxcbiAgICAgICAgICAgIGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdIHx8IHt9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWZhdWx0cyxcbiAgICAgICAgICAgIGRlc2NyaXB0b3JzXG4gICAgICAgIF07XG4gICAgfVxuIHJlc29sdmVOYW1lZE9wdGlvbnMoc2NvcGVzLCBuYW1lcywgY29udGV4dCwgcHJlZml4ZXMgPSBbXG4gICAgICAgICcnXG4gICAgXSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICAgICAgICAkc2hhcmVkOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgLCBzdWJQcmVmaXhlcyAgfSA9IGdldFJlc29sdmVyKHRoaXMuX3Jlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpO1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHJlc29sdmVyO1xuICAgICAgICBpZiAobmVlZENvbnRleHQocmVzb2x2ZXIsIG5hbWVzKSkge1xuICAgICAgICAgICAgcmVzdWx0LiRzaGFyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnRleHQgPSBpc0Z1bmN0aW9uKGNvbnRleHQpID8gY29udGV4dCgpIDogY29udGV4dDtcbiAgICAgICAgICAgIGNvbnN0IHN1YlJlc29sdmVyID0gdGhpcy5jcmVhdGVSZXNvbHZlcihzY29wZXMsIGNvbnRleHQsIHN1YlByZWZpeGVzKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBfYXR0YWNoQ29udGV4dChyZXNvbHZlciwgY29udGV4dCwgc3ViUmVzb2x2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBvZiBuYW1lcyl7XG4gICAgICAgICAgICByZXN1bHRbcHJvcF0gPSBvcHRpb25zW3Byb3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIGNyZWF0ZVJlc29sdmVyKHNjb3BlcywgY29udGV4dCwgcHJlZml4ZXMgPSBbXG4gICAgICAgICcnXG4gICAgXSwgZGVzY3JpcHRvckRlZmF1bHRzKSB7XG4gICAgICAgIGNvbnN0IHsgcmVzb2x2ZXIgIH0gPSBnZXRSZXNvbHZlcih0aGlzLl9yZXNvbHZlckNhY2hlLCBzY29wZXMsIHByZWZpeGVzKTtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KGNvbnRleHQpID8gX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIGNvbnRleHQsIHVuZGVmaW5lZCwgZGVzY3JpcHRvckRlZmF1bHRzKSA6IHJlc29sdmVyO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldFJlc29sdmVyKHJlc29sdmVyQ2FjaGUsIHNjb3BlcywgcHJlZml4ZXMpIHtcbiAgICBsZXQgY2FjaGUgPSByZXNvbHZlckNhY2hlLmdldChzY29wZXMpO1xuICAgIGlmICghY2FjaGUpIHtcbiAgICAgICAgY2FjaGUgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJlc29sdmVyQ2FjaGUuc2V0KHNjb3BlcywgY2FjaGUpO1xuICAgIH1cbiAgICBjb25zdCBjYWNoZUtleSA9IHByZWZpeGVzLmpvaW4oKTtcbiAgICBsZXQgY2FjaGVkID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcbiAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgICBjb25zdCByZXNvbHZlciA9IF9jcmVhdGVSZXNvbHZlcihzY29wZXMsIHByZWZpeGVzKTtcbiAgICAgICAgY2FjaGVkID0ge1xuICAgICAgICAgICAgcmVzb2x2ZXIsXG4gICAgICAgICAgICBzdWJQcmVmaXhlczogcHJlZml4ZXMuZmlsdGVyKChwKT0+IXAudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnaG92ZXInKSlcbiAgICAgICAgfTtcbiAgICAgICAgY2FjaGUuc2V0KGNhY2hlS2V5LCBjYWNoZWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2FjaGVkO1xufVxuY29uc3QgaGFzRnVuY3Rpb24gPSAodmFsdWUpPT5pc09iamVjdCh2YWx1ZSkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModmFsdWUpLnJlZHVjZSgoYWNjLCBrZXkpPT5hY2MgfHwgaXNGdW5jdGlvbih2YWx1ZVtrZXldKSwgZmFsc2UpO1xuZnVuY3Rpb24gbmVlZENvbnRleHQocHJveHksIG5hbWVzKSB7XG4gICAgY29uc3QgeyBpc1NjcmlwdGFibGUgLCBpc0luZGV4YWJsZSAgfSA9IF9kZXNjcmlwdG9ycyhwcm94eSk7XG4gICAgZm9yIChjb25zdCBwcm9wIG9mIG5hbWVzKXtcbiAgICAgICAgY29uc3Qgc2NyaXB0YWJsZSA9IGlzU2NyaXB0YWJsZShwcm9wKTtcbiAgICAgICAgY29uc3QgaW5kZXhhYmxlID0gaXNJbmRleGFibGUocHJvcCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gKGluZGV4YWJsZSB8fCBzY3JpcHRhYmxlKSAmJiBwcm94eVtwcm9wXTtcbiAgICAgICAgaWYgKHNjcmlwdGFibGUgJiYgKGlzRnVuY3Rpb24odmFsdWUpIHx8IGhhc0Z1bmN0aW9uKHZhbHVlKSkgfHwgaW5kZXhhYmxlICYmIGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciB2ZXJzaW9uID0gXCI0LjQuMFwiO1xuXG5jb25zdCBLTk9XTl9QT1NJVElPTlMgPSBbXG4gICAgJ3RvcCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2xlZnQnLFxuICAgICdyaWdodCcsXG4gICAgJ2NoYXJ0QXJlYSdcbl07XG5mdW5jdGlvbiBwb3NpdGlvbklzSG9yaXpvbnRhbChwb3NpdGlvbiwgYXhpcykge1xuICAgIHJldHVybiBwb3NpdGlvbiA9PT0gJ3RvcCcgfHwgcG9zaXRpb24gPT09ICdib3R0b20nIHx8IEtOT1dOX1BPU0lUSU9OUy5pbmRleE9mKHBvc2l0aW9uKSA9PT0gLTEgJiYgYXhpcyA9PT0gJ3gnO1xufVxuZnVuY3Rpb24gY29tcGFyZTJMZXZlbChsMSwgbDIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gYVtsMV0gPT09IGJbbDFdID8gYVtsMl0gLSBiW2wyXSA6IGFbbDFdIC0gYltsMV07XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uc0NvbXBsZXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCBjaGFydCA9IGNvbnRleHQuY2hhcnQ7XG4gICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyUmVuZGVyJyk7XG4gICAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uQ29tcGxldGUsIFtcbiAgICAgICAgY29udGV4dFxuICAgIF0sIGNoYXJ0KTtcbn1cbmZ1bmN0aW9uIG9uQW5pbWF0aW9uUHJvZ3Jlc3MoY29udGV4dCkge1xuICAgIGNvbnN0IGNoYXJ0ID0gY29udGV4dC5jaGFydDtcbiAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gY2hhcnQub3B0aW9ucy5hbmltYXRpb247XG4gICAgY2FsbGJhY2soYW5pbWF0aW9uT3B0aW9ucyAmJiBhbmltYXRpb25PcHRpb25zLm9uUHJvZ3Jlc3MsIFtcbiAgICAgICAgY29udGV4dFxuICAgIF0sIGNoYXJ0KTtcbn1cbiBmdW5jdGlvbiBnZXRDYW52YXMoaXRlbSkge1xuICAgIGlmIChfaXNEb21TdXBwb3J0ZWQoKSAmJiB0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGl0ZW0pO1xuICAgIH0gZWxzZSBpZiAoaXRlbSAmJiBpdGVtLmxlbmd0aCkge1xuICAgICAgICBpdGVtID0gaXRlbVswXTtcbiAgICB9XG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5jYW52YXMpIHtcbiAgICAgICAgaXRlbSA9IGl0ZW0uY2FudmFzO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn1cbmNvbnN0IGluc3RhbmNlcyA9IHt9O1xuY29uc3QgZ2V0Q2hhcnQgPSAoa2V5KT0+e1xuICAgIGNvbnN0IGNhbnZhcyA9IGdldENhbnZhcyhrZXkpO1xuICAgIHJldHVybiBPYmplY3QudmFsdWVzKGluc3RhbmNlcykuZmlsdGVyKChjKT0+Yy5jYW52YXMgPT09IGNhbnZhcykucG9wKCk7XG59O1xuZnVuY3Rpb24gbW92ZU51bWVyaWNLZXlzKG9iaiwgc3RhcnQsIG1vdmUpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKXtcbiAgICAgICAgY29uc3QgaW50S2V5ID0gK2tleTtcbiAgICAgICAgaWYgKGludEtleSA+PSBzdGFydCkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGRlbGV0ZSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmIChtb3ZlID4gMCB8fCBpbnRLZXkgPiBzdGFydCkge1xuICAgICAgICAgICAgICAgIG9ialtpbnRLZXkgKyBtb3ZlXSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIGZ1bmN0aW9uIGRldGVybWluZUxhc3RFdmVudChlLCBsYXN0RXZlbnQsIGluQ2hhcnRBcmVhLCBpc0NsaWNrKSB7XG4gICAgaWYgKCFpbkNoYXJ0QXJlYSB8fCBlLnR5cGUgPT09ICdtb3VzZW91dCcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpc0NsaWNrKSB7XG4gICAgICAgIHJldHVybiBsYXN0RXZlbnQ7XG4gICAgfVxuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gZ2V0U2l6ZUZvckFyZWEoc2NhbGUsIGNoYXJ0QXJlYSwgZmllbGQpIHtcbiAgICByZXR1cm4gc2NhbGUub3B0aW9ucy5jbGlwID8gc2NhbGVbZmllbGRdIDogY2hhcnRBcmVhW2ZpZWxkXTtcbn1cbmZ1bmN0aW9uIGdldERhdGFzZXRBcmVhKG1ldGEsIGNoYXJ0QXJlYSkge1xuICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICB9ID0gbWV0YTtcbiAgICBpZiAoeFNjYWxlICYmIHlTY2FsZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogZ2V0U2l6ZUZvckFyZWEoeFNjYWxlLCBjaGFydEFyZWEsICdsZWZ0JyksXG4gICAgICAgICAgICByaWdodDogZ2V0U2l6ZUZvckFyZWEoeFNjYWxlLCBjaGFydEFyZWEsICdyaWdodCcpLFxuICAgICAgICAgICAgdG9wOiBnZXRTaXplRm9yQXJlYSh5U2NhbGUsIGNoYXJ0QXJlYSwgJ3RvcCcpLFxuICAgICAgICAgICAgYm90dG9tOiBnZXRTaXplRm9yQXJlYSh5U2NhbGUsIGNoYXJ0QXJlYSwgJ2JvdHRvbScpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBjaGFydEFyZWE7XG59XG5jbGFzcyBDaGFydCB7XG4gICAgc3RhdGljIGRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgc3RhdGljIGluc3RhbmNlcyA9IGluc3RhbmNlcztcbiAgICBzdGF0aWMgb3ZlcnJpZGVzID0gb3ZlcnJpZGVzO1xuICAgIHN0YXRpYyByZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICAgIHN0YXRpYyB2ZXJzaW9uID0gdmVyc2lvbjtcbiAgICBzdGF0aWMgZ2V0Q2hhcnQgPSBnZXRDaGFydDtcbiAgICBzdGF0aWMgcmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkuYWRkKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgc3RhdGljIHVucmVnaXN0ZXIoLi4uaXRlbXMpIHtcbiAgICAgICAgcmVnaXN0cnkucmVtb3ZlKC4uLml0ZW1zKTtcbiAgICAgICAgaW52YWxpZGF0ZVBsdWdpbnMoKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoaXRlbSwgdXNlckNvbmZpZyl7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnID0gbmV3IENvbmZpZyh1c2VyQ29uZmlnKTtcbiAgICAgICAgY29uc3QgaW5pdGlhbENhbnZhcyA9IGdldENhbnZhcyhpdGVtKTtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdDaGFydCA9IGdldENoYXJ0KGluaXRpYWxDYW52YXMpO1xuICAgICAgICBpZiAoZXhpc3RpbmdDaGFydCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW52YXMgaXMgYWxyZWFkeSBpbiB1c2UuIENoYXJ0IHdpdGggSUQgXFwnJyArIGV4aXN0aW5nQ2hhcnQuaWQgKyAnXFwnJyArICcgbXVzdCBiZSBkZXN0cm95ZWQgYmVmb3JlIHRoZSBjYW52YXMgd2l0aCBJRCBcXCcnICsgZXhpc3RpbmdDaGFydC5jYW52YXMuaWQgKyAnXFwnIGNhbiBiZSByZXVzZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGNvbmZpZy5jcmVhdGVSZXNvbHZlcihjb25maWcuY2hhcnRPcHRpb25TY29wZXMoKSwgdGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtID0gbmV3IChjb25maWcucGxhdGZvcm0gfHwgX2RldGVjdFBsYXRmb3JtKGluaXRpYWxDYW52YXMpKSgpO1xuICAgICAgICB0aGlzLnBsYXRmb3JtLnVwZGF0ZUNvbmZpZyhjb25maWcpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dChpbml0aWFsQ2FudmFzLCBvcHRpb25zLmFzcGVjdFJhdGlvKTtcbiAgICAgICAgY29uc3QgY2FudmFzID0gY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcztcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY2FudmFzICYmIGNhbnZhcy5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gY2FudmFzICYmIGNhbnZhcy53aWR0aDtcbiAgICAgICAgdGhpcy5pZCA9IHVpZCgpO1xuICAgICAgICB0aGlzLmN0eCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5fYXNwZWN0UmF0aW8gPSB0aGlzLmFzcGVjdFJhdGlvO1xuICAgICAgICB0aGlzLl9sYXllcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fbWV0YXNldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fc3RhY2tzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJveGVzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2hhcnRBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBbXTtcbiAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgIHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gW107XG4gICAgICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgUGx1Z2luU2VydmljZSgpO1xuICAgICAgICB0aGlzLiRwcm94aWVzID0ge307XG4gICAgICAgIHRoaXMuX2hpZGRlbkluZGljZXMgPSB7fTtcbiAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2RvUmVzaXplID0gZGVib3VuY2UoKG1vZGUpPT50aGlzLnVwZGF0ZShtb2RlKSwgb3B0aW9ucy5yZXNpemVEZWxheSB8fCAwKTtcbiAgICAgICAgdGhpcy5fZGF0YUNoYW5nZXMgPSBbXTtcbiAgICAgICAgaW5zdGFuY2VzW3RoaXMuaWRdID0gdGhpcztcbiAgICAgICAgaWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gY3JlYXRlIGNoYXJ0OiBjYW4ndCBhY3F1aXJlIGNvbnRleHQgZnJvbSB0aGUgZ2l2ZW4gaXRlbVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ2NvbXBsZXRlJywgb25BbmltYXRpb25zQ29tcGxldGUpO1xuICAgICAgICBhbmltYXRvci5saXN0ZW4odGhpcywgJ3Byb2dyZXNzJywgb25BbmltYXRpb25Qcm9ncmVzcyk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpemUoKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGFzcGVjdFJhdGlvKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgYXNwZWN0UmF0aW8gLCBtYWludGFpbkFzcGVjdFJhdGlvICB9ICwgd2lkdGggLCBoZWlnaHQgLCBfYXNwZWN0UmF0aW8gIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWlzTnVsbE9yVW5kZWYoYXNwZWN0UmF0aW8pKSB7XG4gICAgICAgICAgICByZXR1cm4gYXNwZWN0UmF0aW87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1haW50YWluQXNwZWN0UmF0aW8gJiYgX2FzcGVjdFJhdGlvKSB7XG4gICAgICAgICAgICByZXR1cm4gX2FzcGVjdFJhdGlvO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcuZGF0YTtcbiAgICB9XG4gICAgc2V0IGRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmNvbmZpZy5kYXRhID0gZGF0YTtcbiAgICB9XG4gICAgZ2V0IG9wdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zO1xuICAgIH1cbiAgICBzZXQgb3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuY29uZmlnLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgICAgIHJldHVybiByZWdpc3RyeTtcbiAgICB9XG4gX2luaXRpYWxpemUoKSB7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlSW5pdCcpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRpbmFTY2FsZSh0aGlzLCB0aGlzLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJJbml0Jyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgY2xlYXJDYW52YXModGhpcy5jYW52YXMsIHRoaXMuY3R4KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHN0b3AoKSB7XG4gICAgICAgIGFuaW1hdG9yLnN0b3AodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiByZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBpZiAoIWFuaW1hdG9yLnJ1bm5pbmcodGhpcykpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXcgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIF9yZXNpemUod2lkdGgsIGhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjYW52YXMgPSB0aGlzLmNhbnZhcztcbiAgICAgICAgY29uc3QgYXNwZWN0UmF0aW8gPSBvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgdGhpcy5hc3BlY3RSYXRpbztcbiAgICAgICAgY29uc3QgbmV3U2l6ZSA9IHRoaXMucGxhdGZvcm0uZ2V0TWF4aW11bVNpemUoY2FudmFzLCB3aWR0aCwgaGVpZ2h0LCBhc3BlY3RSYXRpbyk7XG4gICAgICAgIGNvbnN0IG5ld1JhdGlvID0gb3B0aW9ucy5kZXZpY2VQaXhlbFJhdGlvIHx8IHRoaXMucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgICAgICBjb25zdCBtb2RlID0gdGhpcy53aWR0aCA/ICdyZXNpemUnIDogJ2F0dGFjaCc7XG4gICAgICAgIHRoaXMud2lkdGggPSBuZXdTaXplLndpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IG5ld1NpemUuaGVpZ2h0O1xuICAgICAgICB0aGlzLl9hc3BlY3RSYXRpbyA9IHRoaXMuYXNwZWN0UmF0aW87XG4gICAgICAgIGlmICghcmV0aW5hU2NhbGUodGhpcywgbmV3UmF0aW8sIHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub3RpZnlQbHVnaW5zKCdyZXNpemUnLCB7XG4gICAgICAgICAgICBzaXplOiBuZXdTaXplXG4gICAgICAgIH0pO1xuICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uUmVzaXplLCBbXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgbmV3U2l6ZVxuICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuYXR0YWNoZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kb1Jlc2l6ZShtb2RlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW5zdXJlU2NhbGVzSGF2ZUlEcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2NhbGVzT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuICAgICAgICBlYWNoKHNjYWxlc09wdGlvbnMsIChheGlzT3B0aW9ucywgYXhpc0lEKT0+e1xuICAgICAgICAgICAgYXhpc09wdGlvbnMuaWQgPSBheGlzSUQ7XG4gICAgICAgIH0pO1xuICAgIH1cbiBidWlsZE9yVXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzY2FsZU9wdHMgPSBvcHRpb25zLnNjYWxlcztcbiAgICAgICAgY29uc3Qgc2NhbGVzID0gdGhpcy5zY2FsZXM7XG4gICAgICAgIGNvbnN0IHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZSgob2JqLCBpZCk9PntcbiAgICAgICAgICAgIG9ialtpZF0gPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgIH0sIHt9KTtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIGlmIChzY2FsZU9wdHMpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KE9iamVjdC5rZXlzKHNjYWxlT3B0cykubWFwKChpZCk9PntcbiAgICAgICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBzY2FsZU9wdHNbaWRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzUmFkaWFsID0gYXhpcyA9PT0gJ3InO1xuICAgICAgICAgICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IGF4aXMgPT09ICd4JztcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGRwb3NpdGlvbjogaXNSYWRpYWwgPyAnY2hhcnRBcmVhJyA6IGlzSG9yaXpvbnRhbCA/ICdib3R0b20nIDogJ2xlZnQnLFxuICAgICAgICAgICAgICAgICAgICBkdHlwZTogaXNSYWRpYWwgPyAncmFkaWFsTGluZWFyJyA6IGlzSG9yaXpvbnRhbCA/ICdjYXRlZ29yeScgOiAnbGluZWFyJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWFjaChpdGVtcywgKGl0ZW0pPT57XG4gICAgICAgICAgICBjb25zdCBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZXRlcm1pbmVBeGlzKGlkLCBzY2FsZU9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3Qgc2NhbGVUeXBlID0gdmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuICAgICAgICAgICAgaWYgKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uSXNIb3Jpem9udGFsKHNjYWxlT3B0aW9ucy5wb3NpdGlvbiwgYXhpcykgIT09IHBvc2l0aW9uSXNIb3Jpem9udGFsKGl0ZW0uZHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgIHNjYWxlT3B0aW9ucy5wb3NpdGlvbiA9IGl0ZW0uZHBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdXBkYXRlZFtpZF0gPSB0cnVlO1xuICAgICAgICAgICAgbGV0IHNjYWxlID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpZCBpbiBzY2FsZXMgJiYgc2NhbGVzW2lkXS50eXBlID09PSBzY2FsZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBzY2FsZSA9IHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxlQ2xhc3MgPSByZWdpc3RyeS5nZXRTY2FsZShzY2FsZVR5cGUpO1xuICAgICAgICAgICAgICAgIHNjYWxlID0gbmV3IHNjYWxlQ2xhc3Moe1xuICAgICAgICAgICAgICAgICAgICBpZCxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogc2NhbGVUeXBlLFxuICAgICAgICAgICAgICAgICAgICBjdHg6IHRoaXMuY3R4LFxuICAgICAgICAgICAgICAgICAgICBjaGFydDogdGhpc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjYWxlLmluaXQoc2NhbGVPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGVhY2godXBkYXRlZCwgKGhhc1VwZGF0ZWQsIGlkKT0+e1xuICAgICAgICAgICAgaWYgKCFoYXNVcGRhdGVkKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHNjYWxlc1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBlYWNoKHNjYWxlcywgKHNjYWxlKT0+e1xuICAgICAgICAgICAgbGF5b3V0cy5jb25maWd1cmUodGhpcywgc2NhbGUsIHNjYWxlLm9wdGlvbnMpO1xuICAgICAgICAgICAgbGF5b3V0cy5hZGRCb3godGhpcywgc2NhbGUpO1xuICAgICAgICB9KTtcbiAgICB9XG4gX3VwZGF0ZU1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IHRoaXMuX21ldGFzZXRzO1xuICAgICAgICBjb25zdCBudW1EYXRhID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbnVtTWV0YSA9IG1ldGFzZXRzLmxlbmd0aDtcbiAgICAgICAgbWV0YXNldHMuc29ydCgoYSwgYik9PmEuaW5kZXggLSBiLmluZGV4KTtcbiAgICAgICAgaWYgKG51bU1ldGEgPiBudW1EYXRhKSB7XG4gICAgICAgICAgICBmb3IobGV0IGkgPSBudW1EYXRhOyBpIDwgbnVtTWV0YTsgKytpKXtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRhc2V0cy5zcGxpY2UobnVtRGF0YSwgbnVtTWV0YSAtIG51bURhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NvcnRlZE1ldGFzZXRzID0gbWV0YXNldHMuc2xpY2UoMCkuc29ydChjb21wYXJlMkxldmVsKCdvcmRlcicsICdpbmRleCcpKTtcbiAgICB9XG4gX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCkge1xuICAgICAgICBjb25zdCB7IF9tZXRhc2V0czogbWV0YXNldHMgLCBkYXRhOiB7IGRhdGFzZXRzICB9ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKG1ldGFzZXRzLmxlbmd0aCA+IGRhdGFzZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0YWNrcztcbiAgICAgICAgfVxuICAgICAgICBtZXRhc2V0cy5mb3JFYWNoKChtZXRhLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChkYXRhc2V0cy5maWx0ZXIoKHgpPT54ID09PSBtZXRhLl9kYXRhc2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCkge1xuICAgICAgICBjb25zdCBuZXdDb250cm9sbGVycyA9IFtdO1xuICAgICAgICBjb25zdCBkYXRhc2V0cyA9IHRoaXMuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIHRoaXMuX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzKCk7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBkYXRhc2V0ID0gZGF0YXNldHNbaV07XG4gICAgICAgICAgICBsZXQgbWV0YSA9IHRoaXMuZ2V0RGF0YXNldE1ldGEoaSk7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gZGF0YXNldC50eXBlIHx8IHRoaXMuY29uZmlnLnR5cGU7XG4gICAgICAgICAgICBpZiAobWV0YS50eXBlICYmIG1ldGEudHlwZSAhPT0gdHlwZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgICAgICBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldGEudHlwZSA9IHR5cGU7XG4gICAgICAgICAgICBtZXRhLmluZGV4QXhpcyA9IGRhdGFzZXQuaW5kZXhBeGlzIHx8IGdldEluZGV4QXhpcyh0eXBlLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgbWV0YS5vcmRlciA9IGRhdGFzZXQub3JkZXIgfHwgMDtcbiAgICAgICAgICAgIG1ldGEuaW5kZXggPSBpO1xuICAgICAgICAgICAgbWV0YS5sYWJlbCA9ICcnICsgZGF0YXNldC5sYWJlbDtcbiAgICAgICAgICAgIG1ldGEudmlzaWJsZSA9IHRoaXMuaXNEYXRhc2V0VmlzaWJsZShpKTtcbiAgICAgICAgICAgIGlmIChtZXRhLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIudXBkYXRlSW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgbWV0YS5jb250cm9sbGVyLmxpbmtTY2FsZXMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgQ29udHJvbGxlckNsYXNzID0gcmVnaXN0cnkuZ2V0Q29udHJvbGxlcih0eXBlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGRhdGFzZXRFbGVtZW50VHlwZSAsIGRhdGFFbGVtZW50VHlwZSAgfSA9IGRlZmF1bHRzLmRhdGFzZXRzW3R5cGVdO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oQ29udHJvbGxlckNsYXNzLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGFFbGVtZW50VHlwZTogcmVnaXN0cnkuZ2V0RWxlbWVudChkYXRhRWxlbWVudFR5cGUpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhc2V0RWxlbWVudFR5cGU6IGRhdGFzZXRFbGVtZW50VHlwZSAmJiByZWdpc3RyeS5nZXRFbGVtZW50KGRhdGFzZXRFbGVtZW50VHlwZSlcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIgPSBuZXcgQ29udHJvbGxlckNsYXNzKHRoaXMsIGkpO1xuICAgICAgICAgICAgICAgIG5ld0NvbnRyb2xsZXJzLnB1c2gobWV0YS5jb250cm9sbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVNZXRhc2V0cygpO1xuICAgICAgICByZXR1cm4gbmV3Q29udHJvbGxlcnM7XG4gICAgfVxuIF9yZXNldEVsZW1lbnRzKCkge1xuICAgICAgICBlYWNoKHRoaXMuZGF0YS5kYXRhc2V0cywgKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgICAgIHRoaXMuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KS5jb250cm9sbGVyLnJlc2V0KCk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgIH1cbiByZXNldCgpIHtcbiAgICAgICAgdGhpcy5fcmVzZXRFbGVtZW50cygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ3Jlc2V0Jyk7XG4gICAgfVxuICAgIHVwZGF0ZShtb2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xuICAgICAgICBjb25maWcudXBkYXRlKCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLl9vcHRpb25zID0gY29uZmlnLmNyZWF0ZVJlc29sdmVyKGNvbmZpZy5jaGFydE9wdGlvblNjb3BlcygpLCB0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IGFuaW1zRGlzYWJsZWQgPSB0aGlzLl9hbmltYXRpb25zRGlzYWJsZWQgPSAhb3B0aW9ucy5hbmltYXRpb247XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNjYWxlcygpO1xuICAgICAgICB0aGlzLl9jaGVja0V2ZW50QmluZGluZ3MoKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGlkZGVuSW5kaWNlcygpO1xuICAgICAgICB0aGlzLl9wbHVnaW5zLmludmFsaWRhdGUoKTtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlVXBkYXRlJywge1xuICAgICAgICAgICAgbW9kZSxcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3Q29udHJvbGxlcnMgPSB0aGlzLmJ1aWxkT3JVcGRhdGVDb250cm9sbGVycygpO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZUVsZW1lbnRzVXBkYXRlJyk7XG4gICAgICAgIGxldCBtaW5QYWRkaW5nID0gMDtcbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICAgICAgY29uc3QgeyBjb250cm9sbGVyICB9ID0gdGhpcy5nZXREYXRhc2V0TWV0YShpKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc2V0ID0gIWFuaW1zRGlzYWJsZWQgJiYgbmV3Q29udHJvbGxlcnMuaW5kZXhPZihjb250cm9sbGVyKSA9PT0gLTE7XG4gICAgICAgICAgICBjb250cm9sbGVyLmJ1aWxkT3JVcGRhdGVFbGVtZW50cyhyZXNldCk7XG4gICAgICAgICAgICBtaW5QYWRkaW5nID0gTWF0aC5tYXgoK2NvbnRyb2xsZXIuZ2V0TWF4T3ZlcmZsb3coKSwgbWluUGFkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgbWluUGFkZGluZyA9IHRoaXMuX21pblBhZGRpbmcgPSBvcHRpb25zLmxheW91dC5hdXRvUGFkZGluZyA/IG1pblBhZGRpbmcgOiAwO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXlvdXQobWluUGFkZGluZyk7XG4gICAgICAgIGlmICghYW5pbXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgZWFjaChuZXdDb250cm9sbGVycywgKGNvbnRyb2xsZXIpPT57XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5yZXNldCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldHMobW9kZSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9sYXllcnMuc29ydChjb21wYXJlMkxldmVsKCd6JywgJ19pZHgnKSk7XG4gICAgICAgIGNvbnN0IHsgX2FjdGl2ZSAsIF9sYXN0RXZlbnQgIH0gPSB0aGlzO1xuICAgICAgICBpZiAoX2xhc3RFdmVudCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyKF9sYXN0RXZlbnQsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKF9hY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhfYWN0aXZlLCBfYWN0aXZlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cbiBfdXBkYXRlU2NhbGVzKCkge1xuICAgICAgICBlYWNoKHRoaXMuc2NhbGVzLCAoc2NhbGUpPT57XG4gICAgICAgICAgICBsYXlvdXRzLnJlbW92ZUJveCh0aGlzLCBzY2FsZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcbiAgICAgICAgdGhpcy5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG4gICAgfVxuIF9jaGVja0V2ZW50QmluZGluZ3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nRXZlbnRzID0gbmV3IFNldChPYmplY3Qua2V5cyh0aGlzLl9saXN0ZW5lcnMpKTtcbiAgICAgICAgY29uc3QgbmV3RXZlbnRzID0gbmV3IFNldChvcHRpb25zLmV2ZW50cyk7XG4gICAgICAgIGlmICghc2V0c0VxdWFsKGV4aXN0aW5nRXZlbnRzLCBuZXdFdmVudHMpIHx8ICEhdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyAhPT0gb3B0aW9ucy5yZXNwb25zaXZlKSB7XG4gICAgICAgICAgICB0aGlzLnVuYmluZEV2ZW50cygpO1xuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gX3VwZGF0ZUhpZGRlbkluZGljZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgX2hpZGRlbkluZGljZXMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjaGFuZ2VzID0gdGhpcy5fZ2V0VW5pZm9ybURhdGFDaGFuZ2VzKCkgfHwgW107XG4gICAgICAgIGZvciAoY29uc3QgeyBtZXRob2QgLCBzdGFydCAsIGNvdW50ICB9IG9mIGNoYW5nZXMpe1xuICAgICAgICAgICAgY29uc3QgbW92ZSA9IG1ldGhvZCA9PT0gJ19yZW1vdmVFbGVtZW50cycgPyAtY291bnQgOiBjb3VudDtcbiAgICAgICAgICAgIG1vdmVOdW1lcmljS2V5cyhfaGlkZGVuSW5kaWNlcywgc3RhcnQsIG1vdmUpO1xuICAgICAgICB9XG4gICAgfVxuIF9nZXRVbmlmb3JtRGF0YUNoYW5nZXMoKSB7XG4gICAgICAgIGNvbnN0IF9kYXRhQ2hhbmdlcyA9IHRoaXMuX2RhdGFDaGFuZ2VzO1xuICAgICAgICBpZiAoIV9kYXRhQ2hhbmdlcyB8fCAhX2RhdGFDaGFuZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RhdGFDaGFuZ2VzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFzZXRDb3VudCA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IG1ha2VTZXQgPSAoaWR4KT0+bmV3IFNldChfZGF0YUNoYW5nZXMuZmlsdGVyKChjKT0+Y1swXSA9PT0gaWR4KS5tYXAoKGMsIGkpPT5pICsgJywnICsgYy5zcGxpY2UoMSkuam9pbignLCcpKSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZVNldCA9IG1ha2VTZXQoMCk7XG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPCBkYXRhc2V0Q291bnQ7IGkrKyl7XG4gICAgICAgICAgICBpZiAoIXNldHNFcXVhbChjaGFuZ2VTZXQsIG1ha2VTZXQoaSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGNoYW5nZVNldCkubWFwKChjKT0+Yy5zcGxpdCgnLCcpKS5tYXAoKGEpPT4oe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogYVsxXSxcbiAgICAgICAgICAgICAgICBzdGFydDogK2FbMl0sXG4gICAgICAgICAgICAgICAgY291bnQ6ICthWzNdXG4gICAgICAgICAgICB9KSk7XG4gICAgfVxuIF91cGRhdGVMYXlvdXQobWluUGFkZGluZykge1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVMYXlvdXQnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxheW91dHMudXBkYXRlKHRoaXMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBtaW5QYWRkaW5nKTtcbiAgICAgICAgY29uc3QgYXJlYSA9IHRoaXMuY2hhcnRBcmVhO1xuICAgICAgICBjb25zdCBub0FyZWEgPSBhcmVhLndpZHRoIDw9IDAgfHwgYXJlYS5oZWlnaHQgPD0gMDtcbiAgICAgICAgdGhpcy5fbGF5ZXJzID0gW107XG4gICAgICAgIGVhY2godGhpcy5ib3hlcywgKGJveCk9PntcbiAgICAgICAgICAgIGlmIChub0FyZWEgJiYgYm94LnBvc2l0aW9uID09PSAnY2hhcnRBcmVhJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChib3guY29uZmlndXJlKSB7XG4gICAgICAgICAgICAgICAgYm94LmNvbmZpZ3VyZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbGF5ZXJzLnB1c2goLi4uYm94Ll9sYXllcnMoKSk7XG4gICAgICAgIH0sIHRoaXMpO1xuICAgICAgICB0aGlzLl9sYXllcnMuZm9yRWFjaCgoaXRlbSwgaW5kZXgpPT57XG4gICAgICAgICAgICBpdGVtLl9pZHggPSBpbmRleDtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJMYXlvdXQnKTtcbiAgICB9XG4gX3VwZGF0ZURhdGFzZXRzKG1vZGUpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlRGF0YXNldHNVcGRhdGUnLCB7XG4gICAgICAgICAgICBtb2RlLFxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IobGV0IGkgPSAwLCBpbGVuID0gdGhpcy5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aGlzLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIuY29uZmlndXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpID0gMCwgaWxlbiA9IHRoaXMuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlRGF0YXNldChpLCBpc0Z1bmN0aW9uKG1vZGUpID8gbW9kZSh7XG4gICAgICAgICAgICAgICAgZGF0YXNldEluZGV4OiBpXG4gICAgICAgICAgICB9KSA6IG1vZGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c1VwZGF0ZScsIHtcbiAgICAgICAgICAgIG1vZGVcbiAgICAgICAgfSk7XG4gICAgfVxuIF91cGRhdGVEYXRhc2V0KGluZGV4LCBtb2RlKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGluZGV4KTtcbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIG1ldGEsXG4gICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRVcGRhdGUnLCBhcmdzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvbnRyb2xsZXIuX3VwZGF0ZShtb2RlKTtcbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgYXJncyk7XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMubm90aWZ5UGx1Z2lucygnYmVmb3JlUmVuZGVyJywge1xuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5pbWF0b3IuaGFzKHRoaXMpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhYW5pbWF0b3IucnVubmluZyh0aGlzKSkge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yLnN0YXJ0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgICAgICBvbkFuaW1hdGlvbnNDb21wbGV0ZSh7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGxldCBpO1xuICAgICAgICBpZiAodGhpcy5fcmVzaXplQmVmb3JlRHJhdykge1xuICAgICAgICAgICAgY29uc3QgeyB3aWR0aCAsIGhlaWdodCAgfSA9IHRoaXMuX3Jlc2l6ZUJlZm9yZURyYXc7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUod2lkdGgsIGhlaWdodCk7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemVCZWZvcmVEcmF3ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIGlmICh0aGlzLndpZHRoIDw9IDAgfHwgdGhpcy5oZWlnaHQgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURyYXcnLCB7XG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH0pID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxheWVycyA9IHRoaXMuX2xheWVycztcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgbGF5ZXJzLmxlbmd0aCAmJiBsYXllcnNbaV0ueiA8PSAwOyArK2kpe1xuICAgICAgICAgICAgbGF5ZXJzW2ldLmRyYXcodGhpcy5jaGFydEFyZWEpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2RyYXdEYXRhc2V0cygpO1xuICAgICAgICBmb3IoOyBpIDwgbGF5ZXJzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgIGxheWVyc1tpXS5kcmF3KHRoaXMuY2hhcnRBcmVhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRHJhdycpO1xuICAgIH1cbiBfZ2V0U29ydGVkRGF0YXNldE1ldGFzKGZpbHRlclZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLl9zb3J0ZWRNZXRhc2V0cztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBtZXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IG1ldGFzZXRzW2ldO1xuICAgICAgICAgICAgaWYgKCFmaWx0ZXJWaXNpYmxlIHx8IG1ldGEudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1ldGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuIGdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRTb3J0ZWREYXRhc2V0TWV0YXModHJ1ZSk7XG4gICAgfVxuIF9kcmF3RGF0YXNldHMoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXRzRHJhdycsIHtcbiAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbWV0YXNldHMgPSB0aGlzLmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgZm9yKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgdGhpcy5fZHJhd0RhdGFzZXQobWV0YXNldHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJEYXRhc2V0c0RyYXcnKTtcbiAgICB9XG4gX2RyYXdEYXRhc2V0KG1ldGEpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IGNsaXAgPSBtZXRhLl9jbGlwO1xuICAgICAgICBjb25zdCB1c2VDbGlwID0gIWNsaXAuZGlzYWJsZWQ7XG4gICAgICAgIGNvbnN0IGFyZWEgPSBnZXREYXRhc2V0QXJlYShtZXRhLCB0aGlzLmNoYXJ0QXJlYSk7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB7XG4gICAgICAgICAgICBtZXRhLFxuICAgICAgICAgICAgaW5kZXg6IG1ldGEuaW5kZXgsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURhdGFzZXREcmF3JywgYXJncykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVzZUNsaXApIHtcbiAgICAgICAgICAgIGNsaXBBcmVhKGN0eCwge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGNsaXAubGVmdCA9PT0gZmFsc2UgPyAwIDogYXJlYS5sZWZ0IC0gY2xpcC5sZWZ0LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiBjbGlwLnJpZ2h0ID09PSBmYWxzZSA/IHRoaXMud2lkdGggOiBhcmVhLnJpZ2h0ICsgY2xpcC5yaWdodCxcbiAgICAgICAgICAgICAgICB0b3A6IGNsaXAudG9wID09PSBmYWxzZSA/IDAgOiBhcmVhLnRvcCAtIGNsaXAudG9wLFxuICAgICAgICAgICAgICAgIGJvdHRvbTogY2xpcC5ib3R0b20gPT09IGZhbHNlID8gdGhpcy5oZWlnaHQgOiBhcmVhLmJvdHRvbSArIGNsaXAuYm90dG9tXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBtZXRhLmNvbnRyb2xsZXIuZHJhdygpO1xuICAgICAgICBpZiAodXNlQ2xpcCkge1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MuY2FuY2VsYWJsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGF0YXNldERyYXcnLCBhcmdzKTtcbiAgICB9XG4gaXNQb2ludEluQXJlYShwb2ludCkge1xuICAgICAgICByZXR1cm4gX2lzUG9pbnRJbkFyZWEocG9pbnQsIHRoaXMuY2hhcnRBcmVhLCB0aGlzLl9taW5QYWRkaW5nKTtcbiAgICB9XG4gICAgZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBtb2RlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IG1ldGhvZCA9IEludGVyYWN0aW9uLm1vZGVzW21vZGVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG1ldGhvZCh0aGlzLCBlLCBvcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBkYXRhc2V0ID0gdGhpcy5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF07XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gdGhpcy5fbWV0YXNldHM7XG4gICAgICAgIGxldCBtZXRhID0gbWV0YXNldHMuZmlsdGVyKCh4KT0+eCAmJiB4Ll9kYXRhc2V0ID09PSBkYXRhc2V0KS5wb3AoKTtcbiAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICBtZXRhID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZGF0YTogW10sXG4gICAgICAgICAgICAgICAgZGF0YXNldDogbnVsbCxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGhpZGRlbjogbnVsbCxcbiAgICAgICAgICAgICAgICB4QXhpc0lEOiBudWxsLFxuICAgICAgICAgICAgICAgIHlBeGlzSUQ6IG51bGwsXG4gICAgICAgICAgICAgICAgb3JkZXI6IGRhdGFzZXQgJiYgZGF0YXNldC5vcmRlciB8fCAwLFxuICAgICAgICAgICAgICAgIGluZGV4OiBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgX2RhdGFzZXQ6IGRhdGFzZXQsXG4gICAgICAgICAgICAgICAgX3BhcnNlZDogW10sXG4gICAgICAgICAgICAgICAgX3NvcnRlZDogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtZXRhc2V0cy5wdXNoKG1ldGEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRhO1xuICAgIH1cbiAgICBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZUNvbnRleHQobnVsbCwge1xuICAgICAgICAgICAgY2hhcnQ6IHRoaXMsXG4gICAgICAgICAgICB0eXBlOiAnY2hhcnQnXG4gICAgICAgIH0pKTtcbiAgICB9XG4gICAgZ2V0VmlzaWJsZURhdGFzZXRDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpLmxlbmd0aDtcbiAgICB9XG4gICAgaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpIHtcbiAgICAgICAgY29uc3QgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuICAgICAgICBpZiAoIWRhdGFzZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG1ldGEuaGlkZGVuID09PSAnYm9vbGVhbicgPyAhbWV0YS5oaWRkZW4gOiAhZGF0YXNldC5oaWRkZW47XG4gICAgfVxuICAgIHNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICBtZXRhLmhpZGRlbiA9ICF2aXNpYmxlO1xuICAgIH1cbiAgICB0b2dnbGVEYXRhVmlzaWJpbGl0eShpbmRleCkge1xuICAgICAgICB0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XSA9ICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gICAgZ2V0RGF0YVZpc2liaWxpdHkoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLl9oaWRkZW5JbmRpY2VzW2luZGV4XTtcbiAgICB9XG4gX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHZpc2libGUpIHtcbiAgICAgICAgY29uc3QgbW9kZSA9IHZpc2libGUgPyAnc2hvdycgOiAnaGlkZSc7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gbWV0YS5jb250cm9sbGVyLl9yZXNvbHZlQW5pbWF0aW9ucyh1bmRlZmluZWQsIG1vZGUpO1xuICAgICAgICBpZiAoZGVmaW5lZChkYXRhSW5kZXgpKSB7XG4gICAgICAgICAgICBtZXRhLmRhdGFbZGF0YUluZGV4XS5oaWRkZW4gPSAhdmlzaWJsZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldERhdGFzZXRWaXNpYmlsaXR5KGRhdGFzZXRJbmRleCwgdmlzaWJsZSk7XG4gICAgICAgICAgICBhbmltcy51cGRhdGUobWV0YSwge1xuICAgICAgICAgICAgICAgIHZpc2libGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUoKGN0eCk9PmN0eC5kYXRhc2V0SW5kZXggPT09IGRhdGFzZXRJbmRleCA/IG1vZGUgOiB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGhpZGUoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlVmlzaWJpbGl0eShkYXRhc2V0SW5kZXgsIGRhdGFJbmRleCwgZmFsc2UpO1xuICAgIH1cbiAgICBzaG93KGRhdGFzZXRJbmRleCwgZGF0YUluZGV4KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVZpc2liaWxpdHkoZGF0YXNldEluZGV4LCBkYXRhSW5kZXgsIHRydWUpO1xuICAgIH1cbiBfZGVzdHJveURhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkge1xuICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICAgICAgaWYgKG1ldGEgJiYgbWV0YS5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXIuX2Rlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgdGhpcy5fbWV0YXNldHNbZGF0YXNldEluZGV4XTtcbiAgICB9XG4gICAgX3N0b3AoKSB7XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgYW5pbWF0b3IucmVtb3ZlKHRoaXMpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lEYXRhc2V0TWV0YShpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2JlZm9yZURlc3Ryb3knKTtcbiAgICAgICAgY29uc3QgeyBjYW52YXMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICB0aGlzLl9zdG9wKCk7XG4gICAgICAgIHRoaXMuY29uZmlnLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgaWYgKGNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy51bmJpbmRFdmVudHMoKTtcbiAgICAgICAgICAgIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KTtcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQoY3R4KTtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuY3R4ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBkZWxldGUgaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgICAgICB0aGlzLm5vdGlmeVBsdWdpbnMoJ2FmdGVyRGVzdHJveScpO1xuICAgIH1cbiAgICB0b0Jhc2U2NEltYWdlKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLnRvRGF0YVVSTCguLi5hcmdzKTtcbiAgICB9XG4gYmluZEV2ZW50cygpIHtcbiAgICAgICAgdGhpcy5iaW5kVXNlckV2ZW50cygpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYmluZFJlc3BvbnNpdmVFdmVudHMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuIGJpbmRVc2VyRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gKGUsIHgsIHkpPT57XG4gICAgICAgICAgICBlLm9mZnNldFggPSB4O1xuICAgICAgICAgICAgZS5vZmZzZXRZID0geTtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50SGFuZGxlcihlKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWFjaCh0aGlzLm9wdGlvbnMuZXZlbnRzLCAodHlwZSk9Pl9hZGQodHlwZSwgbGlzdGVuZXIpKTtcbiAgICB9XG4gYmluZFJlc3BvbnNpdmVFdmVudHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycykge1xuICAgICAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMuX3Jlc3BvbnNpdmVMaXN0ZW5lcnM7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtID0gdGhpcy5wbGF0Zm9ybTtcbiAgICAgICAgY29uc3QgX2FkZCA9ICh0eXBlLCBsaXN0ZW5lcik9PntcbiAgICAgICAgICAgIHBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICAgICAgbGlzdGVuZXJzW3R5cGVdID0gbGlzdGVuZXI7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IF9yZW1vdmUgPSAodHlwZSwgbGlzdGVuZXIpPT57XG4gICAgICAgICAgICBpZiAobGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICAgICAgcGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGxpc3RlbmVyc1t0eXBlXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAod2lkdGgsIGhlaWdodCk9PntcbiAgICAgICAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBsZXQgZGV0YWNoZWQ7XG4gICAgICAgIGNvbnN0IGF0dGFjaGVkID0gKCk9PntcbiAgICAgICAgICAgIF9yZW1vdmUoJ2F0dGFjaCcsIGF0dGFjaGVkKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yZXNpemUoKTtcbiAgICAgICAgICAgIF9hZGQoJ3Jlc2l6ZScsIGxpc3RlbmVyKTtcbiAgICAgICAgICAgIF9hZGQoJ2RldGFjaCcsIGRldGFjaGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgZGV0YWNoZWQgPSAoKT0+e1xuICAgICAgICAgICAgdGhpcy5hdHRhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgX3JlbW92ZSgncmVzaXplJywgbGlzdGVuZXIpO1xuICAgICAgICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgICAgICAgdGhpcy5fcmVzaXplKDAsIDApO1xuICAgICAgICAgICAgX2FkZCgnYXR0YWNoJywgYXR0YWNoZWQpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAocGxhdGZvcm0uaXNBdHRhY2hlZCh0aGlzLmNhbnZhcykpIHtcbiAgICAgICAgICAgIGF0dGFjaGVkKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXRhY2hlZCgpO1xuICAgICAgICB9XG4gICAgfVxuIHVuYmluZEV2ZW50cygpIHtcbiAgICAgICAgZWFjaCh0aGlzLl9saXN0ZW5lcnMsIChsaXN0ZW5lciwgdHlwZSk9PntcbiAgICAgICAgICAgIHRoaXMucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgZWFjaCh0aGlzLl9yZXNwb25zaXZlTGlzdGVuZXJzLCAobGlzdGVuZXIsIHR5cGUpPT57XG4gICAgICAgICAgICB0aGlzLnBsYXRmb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2l2ZUxpc3RlbmVycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlSG92ZXJTdHlsZShpdGVtcywgbW9kZSwgZW5hYmxlZCkge1xuICAgICAgICBjb25zdCBwcmVmaXggPSBlbmFibGVkID8gJ3NldCcgOiAncmVtb3ZlJztcbiAgICAgICAgbGV0IG1ldGEsIGl0ZW0sIGksIGlsZW47XG4gICAgICAgIGlmIChtb2RlID09PSAnZGF0YXNldCcpIHtcbiAgICAgICAgICAgIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGl0ZW1zWzBdLmRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBtZXRhLmNvbnRyb2xsZXJbJ18nICsgcHJlZml4ICsgJ0RhdGFzZXRIb3ZlclN0eWxlJ10oKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICAgICAgY29uc3QgY29udHJvbGxlciA9IGl0ZW0gJiYgdGhpcy5nZXREYXRhc2V0TWV0YShpdGVtLmRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgICAgICAgIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlcltwcmVmaXggKyAnSG92ZXJTdHlsZSddKGl0ZW0uZWxlbWVudCwgaXRlbS5kYXRhc2V0SW5kZXgsIGl0ZW0uaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIGdldEFjdGl2ZUVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgIH1cbiBzZXRBY3RpdmVFbGVtZW50cyhhY3RpdmVFbGVtZW50cykge1xuICAgICAgICBjb25zdCBsYXN0QWN0aXZlID0gdGhpcy5fYWN0aXZlIHx8IFtdO1xuICAgICAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmVFbGVtZW50cy5tYXAoKHsgZGF0YXNldEluZGV4ICwgaW5kZXggIH0pPT57XG4gICAgICAgICAgICBjb25zdCBtZXRhID0gdGhpcy5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgaWYgKCFtZXRhKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBkYXRhc2V0IGZvdW5kIGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwoYWN0aXZlLCBsYXN0QWN0aXZlKTtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RFdmVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIb3ZlclN0eWxlcyhhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICB9XG4gICAgfVxuIG5vdGlmeVBsdWdpbnMoaG9vaywgYXJncywgZmlsdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLm5vdGlmeSh0aGlzLCBob29rLCBhcmdzLCBmaWx0ZXIpO1xuICAgIH1cbiBpc1BsdWdpbkVuYWJsZWQocGx1Z2luSWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BsdWdpbnMuX2NhY2hlLmZpbHRlcigocCk9PnAucGx1Z2luLmlkID09PSBwbHVnaW5JZCkubGVuZ3RoID09PSAxO1xuICAgIH1cbiBfdXBkYXRlSG92ZXJTdHlsZXMoYWN0aXZlLCBsYXN0QWN0aXZlLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3QgaG92ZXJPcHRpb25zID0gdGhpcy5vcHRpb25zLmhvdmVyO1xuICAgICAgICBjb25zdCBkaWZmID0gKGEsIGIpPT5hLmZpbHRlcigoeCk9PiFiLnNvbWUoKHkpPT54LmRhdGFzZXRJbmRleCA9PT0geS5kYXRhc2V0SW5kZXggJiYgeC5pbmRleCA9PT0geS5pbmRleCkpO1xuICAgICAgICBjb25zdCBkZWFjdGl2YXRlZCA9IGRpZmYobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgYWN0aXZhdGVkID0gcmVwbGF5ID8gYWN0aXZlIDogZGlmZihhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoZGVhY3RpdmF0ZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUhvdmVyU3R5bGUoZGVhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2YXRlZC5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlSG92ZXJTdHlsZShhY3RpdmF0ZWQsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgIH1cbiBfZXZlbnRIYW5kbGVyKGUsIHJlcGxheSkge1xuICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgZXZlbnQ6IGUsXG4gICAgICAgICAgICByZXBsYXksXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICAgICAgaW5DaGFydEFyZWE6IHRoaXMuaXNQb2ludEluQXJlYShlKVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBldmVudEZpbHRlciA9IChwbHVnaW4pPT4ocGx1Z2luLm9wdGlvbnMuZXZlbnRzIHx8IHRoaXMub3B0aW9ucy5ldmVudHMpLmluY2x1ZGVzKGUubmF0aXZlLnR5cGUpO1xuICAgICAgICBpZiAodGhpcy5ub3RpZnlQbHVnaW5zKCdiZWZvcmVFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5faGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBhcmdzLmluQ2hhcnRBcmVhKTtcbiAgICAgICAgYXJncy5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm90aWZ5UGx1Z2lucygnYWZ0ZXJFdmVudCcsIGFyZ3MsIGV2ZW50RmlsdGVyKTtcbiAgICAgICAgaWYgKGNoYW5nZWQgfHwgYXJncy5jaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiBfaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCB7IF9hY3RpdmU6IGxhc3RBY3RpdmUgPSBbXSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB1c2VGaW5hbFBvc2l0aW9uID0gcmVwbGF5O1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9nZXRBY3RpdmVFbGVtZW50cyhlLCBsYXN0QWN0aXZlLCBpbkNoYXJ0QXJlYSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IGlzQ2xpY2sgPSBfaXNDbGlja0V2ZW50KGUpO1xuICAgICAgICBjb25zdCBsYXN0RXZlbnQgPSBkZXRlcm1pbmVMYXN0RXZlbnQoZSwgdGhpcy5fbGFzdEV2ZW50LCBpbkNoYXJ0QXJlYSwgaXNDbGljayk7XG4gICAgICAgIGlmIChpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgdGhpcy5fbGFzdEV2ZW50ID0gbnVsbDtcbiAgICAgICAgICAgIGNhbGxiYWNrKG9wdGlvbnMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgaWYgKGlzQ2xpY2spIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhvcHRpb25zLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICAgICAgZSxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhbmdlZCA9ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpO1xuICAgICAgICBpZiAoY2hhbmdlZCB8fCByZXBsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUhvdmVyU3R5bGVzKGFjdGl2ZSwgbGFzdEFjdGl2ZSwgcmVwbGF5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9sYXN0RXZlbnQgPSBsYXN0RXZlbnQ7XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgaW5DaGFydEFyZWEsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5DaGFydEFyZWEpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0QWN0aXZlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyT3B0aW9ucyA9IHRoaXMub3B0aW9ucy5ob3ZlcjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZShlLCBob3Zlck9wdGlvbnMubW9kZSwgaG92ZXJPcHRpb25zLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnZhbGlkYXRlUGx1Z2lucygpIHtcbiAgICByZXR1cm4gZWFjaChDaGFydC5pbnN0YW5jZXMsIChjaGFydCk9PmNoYXJ0Ll9wbHVnaW5zLmludmFsaWRhdGUoKSk7XG59XG5cbmZ1bmN0aW9uIGNsaXBBcmMoY3R4LCBlbGVtZW50LCBlbmRBbmdsZSkge1xuICAgIGNvbnN0IHsgc3RhcnRBbmdsZSAsIHBpeGVsTWFyZ2luICwgeCAsIHkgLCBvdXRlclJhZGl1cyAsIGlubmVyUmFkaXVzICB9ID0gZWxlbWVudDtcbiAgICBsZXQgYW5nbGVNYXJnaW4gPSBwaXhlbE1hcmdpbiAvIG91dGVyUmFkaXVzO1xuICAgIC8vIERyYXcgYW4gaW5uZXIgYm9yZGVyIGJ5IGNsaXBwaW5nIHRoZSBhcmMgYW5kIGRyYXdpbmcgYSBkb3VibGUtd2lkdGggYm9yZGVyXG4gICAgLy8gRW5sYXJnZSB0aGUgY2xpcHBpbmcgYXJjIGJ5IDAuMzMgcGl4ZWxzIHRvIGVsaW1pbmF0ZSBnbGl0Y2hlcyBiZXR3ZWVuIGJvcmRlcnNcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgc3RhcnRBbmdsZSAtIGFuZ2xlTWFyZ2luLCBlbmRBbmdsZSArIGFuZ2xlTWFyZ2luKTtcbiAgICBpZiAoaW5uZXJSYWRpdXMgPiBwaXhlbE1hcmdpbikge1xuICAgICAgICBhbmdsZU1hcmdpbiA9IHBpeGVsTWFyZ2luIC8gaW5uZXJSYWRpdXM7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGVuZEFuZ2xlICsgYW5nbGVNYXJnaW4sIHN0YXJ0QW5nbGUgLSBhbmdsZU1hcmdpbiwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBwaXhlbE1hcmdpbiwgZW5kQW5nbGUgKyBIQUxGX1BJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgfVxuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdG9SYWRpdXNDb3JuZXJzKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCBbXG4gICAgICAgICdvdXRlclN0YXJ0JyxcbiAgICAgICAgJ291dGVyRW5kJyxcbiAgICAgICAgJ2lubmVyU3RhcnQnLFxuICAgICAgICAnaW5uZXJFbmQnXG4gICAgXSk7XG59XG4vKipcbiAqIFBhcnNlIGJvcmRlciByYWRpdXMgZnJvbSB0aGUgcHJvdmlkZWQgb3B0aW9uc1xuICovIGZ1bmN0aW9uIHBhcnNlQm9yZGVyUmFkaXVzJDEoYXJjLCBpbm5lclJhZGl1cywgb3V0ZXJSYWRpdXMsIGFuZ2xlRGVsdGEpIHtcbiAgICBjb25zdCBvID0gdG9SYWRpdXNDb3JuZXJzKGFyYy5vcHRpb25zLmJvcmRlclJhZGl1cyk7XG4gICAgY29uc3QgaGFsZlRoaWNrbmVzcyA9IChvdXRlclJhZGl1cyAtIGlubmVyUmFkaXVzKSAvIDI7XG4gICAgY29uc3QgaW5uZXJMaW1pdCA9IE1hdGgubWluKGhhbGZUaGlja25lc3MsIGFuZ2xlRGVsdGEgKiBpbm5lclJhZGl1cyAvIDIpO1xuICAgIC8vIE91dGVyIGxpbWl0cyBhcmUgY29tcGxpY2F0ZWQuIFdlIHdhbnQgdG8gY29tcHV0ZSB0aGUgYXZhaWxhYmxlIGFuZ3VsYXIgZGlzdGFuY2UgYXRcbiAgICAvLyBhIHJhZGl1cyBvZiBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIGZvciBzbWFsbCBhbmd1bGFyIGRpc3RhbmNlcywgdGhpcyB0ZXJtIGxpbWl0cy5cbiAgICAvLyBXZSBjb21wdXRlIGF0IHIgPSBvdXRlclJhZGl1cyAtIGJvcmRlclJhZGl1cyBiZWNhdXNlIHRoaXMgY2lyY2xlIGRlZmluZXMgdGhlIGNlbnRlciBvZiB0aGUgYm9yZGVyIGNvcm5lcnMuXG4gICAgLy9cbiAgICAvLyBJZiB0aGUgYm9yZGVyUmFkaXVzIGlzIGxhcmdlLCB0aGF0IHZhbHVlIGNhbiBiZWNvbWUgbmVnYXRpdmUuXG4gICAgLy8gVGhpcyBjYXVzZXMgdGhlIG91dGVyIGJvcmRlcnMgdG8gbG9zZSB0aGVpciByYWRpdXMgZW50aXJlbHksIHdoaWNoIGlzIHJhdGhlciB1bmV4cGVjdGVkLiBUbyBzb2x2ZSB0aGF0LCBpZiBib3JkZXJSYWRpdXMgPiBvdXRlclJhZGl1c1xuICAgIC8vIHdlIGtub3cgdGhhdCB0aGUgdGhpY2tuZXNzIHRlcm0gd2lsbCBkb21pbmF0ZSBhbmQgY29tcHV0ZSB0aGUgbGltaXRzIGF0IHRoYXQgcG9pbnRcbiAgICBjb25zdCBjb21wdXRlT3V0ZXJMaW1pdCA9ICh2YWwpPT57XG4gICAgICAgIGNvbnN0IG91dGVyQXJjTGltaXQgPSAob3V0ZXJSYWRpdXMgLSBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCB2YWwpKSAqIGFuZ2xlRGVsdGEgLyAyO1xuICAgICAgICByZXR1cm4gX2xpbWl0VmFsdWUodmFsLCAwLCBNYXRoLm1pbihoYWxmVGhpY2tuZXNzLCBvdXRlckFyY0xpbWl0KSk7XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBvdXRlclN0YXJ0OiBjb21wdXRlT3V0ZXJMaW1pdChvLm91dGVyU3RhcnQpLFxuICAgICAgICBvdXRlckVuZDogY29tcHV0ZU91dGVyTGltaXQoby5vdXRlckVuZCksXG4gICAgICAgIGlubmVyU3RhcnQ6IF9saW1pdFZhbHVlKG8uaW5uZXJTdGFydCwgMCwgaW5uZXJMaW1pdCksXG4gICAgICAgIGlubmVyRW5kOiBfbGltaXRWYWx1ZShvLmlubmVyRW5kLCAwLCBpbm5lckxpbWl0KVxuICAgIH07XG59XG4vKipcbiAqIENvbnZlcnQgKHIsIPCdnIMpIHRvICh4LCB5KVxuICovIGZ1bmN0aW9uIHJUaGV0YVRvWFkociwgdGhldGEsIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4ICsgciAqIE1hdGguY29zKHRoZXRhKSxcbiAgICAgICAgeTogeSArIHIgKiBNYXRoLnNpbih0aGV0YSlcbiAgICB9O1xufVxuLyoqXG4gKiBQYXRoIHRoZSBhcmMsIHJlc3BlY3RpbmcgYm9yZGVyIHJhZGl1cyBieSBzZXBhcmF0aW5nIGludG8gbGVmdCBhbmQgcmlnaHQgaGFsdmVzLlxuICpcbiAqICAgU3RhcnQgICAgICBFbmRcbiAqXG4gKiAgICAxLS0tPmEtLS0+MiAgICBPdXRlclxuICogICAvICAgICAgICAgICBcXFxuICogICA4ICAgICAgICAgICAzXG4gKiAgIHwgICAgICAgICAgIHxcbiAqICAgfCAgICAgICAgICAgfFxuICogICA3ICAgICAgICAgICA0XG4gKiAgIFxcICAgICAgICAgICAvXG4gKiAgICA2PC0tLWI8LS0tNSAgICBJbm5lclxuICovIGZ1bmN0aW9uIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZCwgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IHggLCB5ICwgc3RhcnRBbmdsZTogc3RhcnQgLCBwaXhlbE1hcmdpbiAsIGlubmVyUmFkaXVzOiBpbm5lclIgIH0gPSBlbGVtZW50O1xuICAgIGNvbnN0IG91dGVyUmFkaXVzID0gTWF0aC5tYXgoZWxlbWVudC5vdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQgLSBwaXhlbE1hcmdpbiwgMCk7XG4gICAgY29uc3QgaW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSICsgc3BhY2luZyArIG9mZnNldCArIHBpeGVsTWFyZ2luIDogMDtcbiAgICBsZXQgc3BhY2luZ09mZnNldCA9IDA7XG4gICAgY29uc3QgYWxwaGEgPSBlbmQgLSBzdGFydDtcbiAgICBpZiAoc3BhY2luZykge1xuICAgICAgICAvLyBXaGVuIHNwYWNpbmcgaXMgcHJlc2VudCwgaXQgaXMgdGhlIHNhbWUgZm9yIGFsbCBpdGVtc1xuICAgICAgICAvLyBTbyB3ZSBhZGp1c3QgdGhlIHN0YXJ0IGFuZCBlbmQgYW5nbGUgb2YgdGhlIGFyYyBzdWNoIHRoYXRcbiAgICAgICAgLy8gdGhlIGRpc3RhbmNlIGlzIHRoZSBzYW1lIGFzIGl0IHdvdWxkIGJlIHdpdGhvdXQgdGhlIHNwYWNpbmdcbiAgICAgICAgY29uc3Qgbm9TcGFjaW5nSW5uZXJSYWRpdXMgPSBpbm5lclIgPiAwID8gaW5uZXJSIC0gc3BhY2luZyA6IDA7XG4gICAgICAgIGNvbnN0IG5vU3BhY2luZ091dGVyUmFkaXVzID0gb3V0ZXJSYWRpdXMgPiAwID8gb3V0ZXJSYWRpdXMgLSBzcGFjaW5nIDogMDtcbiAgICAgICAgY29uc3QgYXZOb2dTcGFjaW5nUmFkaXVzID0gKG5vU3BhY2luZ0lubmVyUmFkaXVzICsgbm9TcGFjaW5nT3V0ZXJSYWRpdXMpIC8gMjtcbiAgICAgICAgY29uc3QgYWRqdXN0ZWRBbmdsZSA9IGF2Tm9nU3BhY2luZ1JhZGl1cyAhPT0gMCA/IGFscGhhICogYXZOb2dTcGFjaW5nUmFkaXVzIC8gKGF2Tm9nU3BhY2luZ1JhZGl1cyArIHNwYWNpbmcpIDogYWxwaGE7XG4gICAgICAgIHNwYWNpbmdPZmZzZXQgPSAoYWxwaGEgLSBhZGp1c3RlZEFuZ2xlKSAvIDI7XG4gICAgfVxuICAgIGNvbnN0IGJldGEgPSBNYXRoLm1heCgwLjAwMSwgYWxwaGEgKiBvdXRlclJhZGl1cyAtIG9mZnNldCAvIFBJKSAvIG91dGVyUmFkaXVzO1xuICAgIGNvbnN0IGFuZ2xlT2Zmc2V0ID0gKGFscGhhIC0gYmV0YSkgLyAyO1xuICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSBzdGFydCArIGFuZ2xlT2Zmc2V0ICsgc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCBlbmRBbmdsZSA9IGVuZCAtIGFuZ2xlT2Zmc2V0IC0gc3BhY2luZ09mZnNldDtcbiAgICBjb25zdCB7IG91dGVyU3RhcnQgLCBvdXRlckVuZCAsIGlubmVyU3RhcnQgLCBpbm5lckVuZCAgfSA9IHBhcnNlQm9yZGVyUmFkaXVzJDEoZWxlbWVudCwgaW5uZXJSYWRpdXMsIG91dGVyUmFkaXVzLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgIGNvbnN0IG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IG91dGVyUmFkaXVzIC0gb3V0ZXJTdGFydDtcbiAgICBjb25zdCBvdXRlckVuZEFkanVzdGVkUmFkaXVzID0gb3V0ZXJSYWRpdXMgLSBvdXRlckVuZDtcbiAgICBjb25zdCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBvdXRlclN0YXJ0IC8gb3V0ZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IG91dGVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gb3V0ZXJFbmQgLyBvdXRlckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cyA9IGlubmVyUmFkaXVzICsgaW5uZXJTdGFydDtcbiAgICBjb25zdCBpbm5lckVuZEFkanVzdGVkUmFkaXVzID0gaW5uZXJSYWRpdXMgKyBpbm5lckVuZDtcbiAgICBjb25zdCBpbm5lclN0YXJ0QWRqdXN0ZWRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBpbm5lclN0YXJ0IC8gaW5uZXJTdGFydEFkanVzdGVkUmFkaXVzO1xuICAgIGNvbnN0IGlubmVyRW5kQWRqdXN0ZWRBbmdsZSA9IGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lckVuZEFkanVzdGVkUmFkaXVzO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IGFyYyBzZWdtZW50cyBmcm9tIHBvaW50IDEgdG8gcG9pbnQgYSB0byBwb2ludCAyXG4gICAgICAgIGNvbnN0IG91dGVyTWlkQWRqdXN0ZWRBbmdsZSA9IChvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSArIG91dGVyRW5kQWRqdXN0ZWRBbmdsZSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIG91dGVyUmFkaXVzLCBvdXRlclN0YXJ0QWRqdXN0ZWRBbmdsZSwgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgY3R4LmFyYyh4LCB5LCBvdXRlclJhZGl1cywgb3V0ZXJNaWRBZGp1c3RlZEFuZ2xlLCBvdXRlckVuZEFkanVzdGVkQW5nbGUpO1xuICAgICAgICAvLyBUaGUgY29ybmVyIHNlZ21lbnQgZnJvbSBwb2ludCAyIHRvIHBvaW50IDNcbiAgICAgICAgaWYgKG91dGVyRW5kID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcENlbnRlciA9IHJUaGV0YVRvWFkob3V0ZXJFbmRBZGp1c3RlZFJhZGl1cywgb3V0ZXJFbmRBZGp1c3RlZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgICAgIGN0eC5hcmMocENlbnRlci54LCBwQ2VudGVyLnksIG91dGVyRW5kLCBvdXRlckVuZEFkanVzdGVkQW5nbGUsIGVuZEFuZ2xlICsgSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCAzIHRvIHBvaW50IDRcbiAgICAgICAgY29uc3QgcDQgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGVuZEFuZ2xlLCB4LCB5KTtcbiAgICAgICAgY3R4LmxpbmVUbyhwNC54LCBwNC55KTtcbiAgICAgICAgLy8gVGhlIGNvcm5lciBzZWdtZW50IGZyb20gcG9pbnQgNCB0byBwb2ludCA1XG4gICAgICAgIGlmIChpbm5lckVuZCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyRW5kQWRqdXN0ZWRSYWRpdXMsIGlubmVyRW5kQWRqdXN0ZWRBbmdsZSwgeCwgeSk7XG4gICAgICAgICAgICBjdHguYXJjKHBDZW50ZXIueCwgcENlbnRlci55LCBpbm5lckVuZCwgZW5kQW5nbGUgKyBIQUxGX1BJLCBpbm5lckVuZEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUaGUgaW5uZXIgYXJjIGZyb20gcG9pbnQgNSB0byBwb2ludCBiIHRvIHBvaW50IDZcbiAgICAgICAgY29uc3QgaW5uZXJNaWRBZGp1c3RlZEFuZ2xlID0gKGVuZEFuZ2xlIC0gaW5uZXJFbmQgLyBpbm5lclJhZGl1cyArIChzdGFydEFuZ2xlICsgaW5uZXJTdGFydCAvIGlubmVyUmFkaXVzKSkgLyAyO1xuICAgICAgICBjdHguYXJjKHgsIHksIGlubmVyUmFkaXVzLCBlbmRBbmdsZSAtIGlubmVyRW5kIC8gaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgdHJ1ZSk7XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgaW5uZXJSYWRpdXMsIGlubmVyTWlkQWRqdXN0ZWRBbmdsZSwgc3RhcnRBbmdsZSArIGlubmVyU3RhcnQgLyBpbm5lclJhZGl1cywgdHJ1ZSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDYgdG8gcG9pbnQgN1xuICAgICAgICBpZiAoaW5uZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKGlubmVyU3RhcnRBZGp1c3RlZFJhZGl1cywgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgaW5uZXJTdGFydCwgaW5uZXJTdGFydEFkanVzdGVkQW5nbGUgKyBNYXRoLlBJLCBzdGFydEFuZ2xlIC0gSEFMRl9QSSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gVGhlIGxpbmUgZnJvbSBwb2ludCA3IHRvIHBvaW50IDhcbiAgICAgICAgY29uc3QgcDggPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgc3RhcnRBbmdsZSwgeCwgeSk7XG4gICAgICAgIGN0eC5saW5lVG8ocDgueCwgcDgueSk7XG4gICAgICAgIC8vIFRoZSBjb3JuZXIgc2VnbWVudCBmcm9tIHBvaW50IDggdG8gcG9pbnQgMVxuICAgICAgICBpZiAob3V0ZXJTdGFydCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHBDZW50ZXIgPSByVGhldGFUb1hZKG91dGVyU3RhcnRBZGp1c3RlZFJhZGl1cywgb3V0ZXJTdGFydEFkanVzdGVkQW5nbGUsIHgsIHkpO1xuICAgICAgICAgICAgY3R4LmFyYyhwQ2VudGVyLngsIHBDZW50ZXIueSwgb3V0ZXJTdGFydCwgc3RhcnRBbmdsZSAtIEhBTEZfUEksIG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5tb3ZlVG8oeCwgeSk7XG4gICAgICAgIGNvbnN0IG91dGVyU3RhcnRYID0gTWF0aC5jb3Mob3V0ZXJTdGFydEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlclN0YXJ0WSA9IE1hdGguc2luKG91dGVyU3RhcnRBZGp1c3RlZEFuZ2xlKSAqIG91dGVyUmFkaXVzICsgeTtcbiAgICAgICAgY3R4LmxpbmVUbyhvdXRlclN0YXJ0WCwgb3V0ZXJTdGFydFkpO1xuICAgICAgICBjb25zdCBvdXRlckVuZFggPSBNYXRoLmNvcyhvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB4O1xuICAgICAgICBjb25zdCBvdXRlckVuZFkgPSBNYXRoLnNpbihvdXRlckVuZEFkanVzdGVkQW5nbGUpICogb3V0ZXJSYWRpdXMgKyB5O1xuICAgICAgICBjdHgubGluZVRvKG91dGVyRW5kWCwgb3V0ZXJFbmRZKTtcbiAgICB9XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xufVxuZnVuY3Rpb24gZHJhd0FyYyhjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgIH0gPSBlbGVtZW50O1xuICAgIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gICAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKXtcbiAgICAgICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihjaXJjdW1mZXJlbmNlKSkge1xuICAgICAgICAgICAgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGNpcmN1bWZlcmVuY2UgJSBUQVUgfHwgVEFVKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXRoQXJjKGN0eCwgZWxlbWVudCwgb2Zmc2V0LCBzcGFjaW5nLCBlbmRBbmdsZSwgY2lyY3VsYXIpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgcmV0dXJuIGVuZEFuZ2xlO1xufVxuZnVuY3Rpb24gZHJhd0JvcmRlcihjdHgsIGVsZW1lbnQsIG9mZnNldCwgc3BhY2luZywgY2lyY3VsYXIpIHtcbiAgICBjb25zdCB7IGZ1bGxDaXJjbGVzICwgc3RhcnRBbmdsZSAsIGNpcmN1bWZlcmVuY2UgLCBvcHRpb25zICB9ID0gZWxlbWVudDtcbiAgICBjb25zdCB7IGJvcmRlcldpZHRoICwgYm9yZGVySm9pblN0eWxlICwgYm9yZGVyRGFzaCAsIGJvcmRlckRhc2hPZmZzZXQgIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGlubmVyID0gb3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJztcbiAgICBpZiAoIWJvcmRlcldpZHRoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY3R4LnNldExpbmVEYXNoKGJvcmRlckRhc2ggfHwgW10pO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGJvcmRlckRhc2hPZmZzZXQ7XG4gICAgaWYgKGlubmVyKSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aCAqIDI7XG4gICAgICAgIGN0eC5saW5lSm9pbiA9IGJvcmRlckpvaW5TdHlsZSB8fCAncm91bmQnO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSBib3JkZXJXaWR0aDtcbiAgICAgICAgY3R4LmxpbmVKb2luID0gYm9yZGVySm9pblN0eWxlIHx8ICdiZXZlbCc7XG4gICAgfVxuICAgIGxldCBlbmRBbmdsZSA9IGVsZW1lbnQuZW5kQW5nbGU7XG4gICAgaWYgKGZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBmdWxsQ2lyY2xlczsgKytpKXtcbiAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzTmFOKGNpcmN1bWZlcmVuY2UpKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyAoY2lyY3VtZmVyZW5jZSAlIFRBVSB8fCBUQVUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpbm5lcikge1xuICAgICAgICBjbGlwQXJjKGN0eCwgZWxlbWVudCwgZW5kQW5nbGUpO1xuICAgIH1cbiAgICBpZiAoIWZ1bGxDaXJjbGVzKSB7XG4gICAgICAgIHBhdGhBcmMoY3R4LCBlbGVtZW50LCBvZmZzZXQsIHNwYWNpbmcsIGVuZEFuZ2xlLCBjaXJjdWxhcik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5jbGFzcyBBcmNFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ2FyYyc7XG4gICAgc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnI2ZmZicsXG4gICAgICAgIGJvcmRlckRhc2g6IFtdLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLFxuICAgICAgICBib3JkZXJKb2luU3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgICBib3JkZXJXaWR0aDogMixcbiAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICBzcGFjaW5nOiAwLFxuICAgICAgICBhbmdsZTogdW5kZWZpbmVkLFxuICAgICAgICBjaXJjdWxhcjogdHJ1ZVxuICAgIH07XG4gICAgc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcidcbiAgICB9O1xuICAgIHN0YXRpYyBkZXNjcmlwdG9ycyA9IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IHRydWUsXG4gICAgICAgIF9pbmRleGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JvcmRlckRhc2gnXG4gICAgfTtcbiAgICBjaXJjdW1mZXJlbmNlO1xuICAgIGVuZEFuZ2xlO1xuICAgIGZ1bGxDaXJjbGVzO1xuICAgIGlubmVyUmFkaXVzO1xuICAgIG91dGVyUmFkaXVzO1xuICAgIHBpeGVsTWFyZ2luO1xuICAgIHN0YXJ0QW5nbGU7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNpcmN1bWZlcmVuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RhcnRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5lbmRBbmdsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vdXRlclJhZGl1cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5waXhlbE1hcmdpbiA9IDA7XG4gICAgICAgIHRoaXMuZnVsbENpcmNsZXMgPSAwO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaW5SYW5nZShjaGFydFgsIGNoYXJ0WSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICBjb25zdCB7IGFuZ2xlICwgZGlzdGFuY2UgIH0gPSBnZXRBbmdsZUZyb21Qb2ludChwb2ludCwge1xuICAgICAgICAgICAgeDogY2hhcnRYLFxuICAgICAgICAgICAgeTogY2hhcnRZXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB7IHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAsIGlubmVyUmFkaXVzICwgb3V0ZXJSYWRpdXMgLCBjaXJjdW1mZXJlbmNlICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAnc3RhcnRBbmdsZScsXG4gICAgICAgICAgICAnZW5kQW5nbGUnLFxuICAgICAgICAgICAgJ2lubmVyUmFkaXVzJyxcbiAgICAgICAgICAgICdvdXRlclJhZGl1cycsXG4gICAgICAgICAgICAnY2lyY3VtZmVyZW5jZSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHJBZGp1c3QgPSAodGhpcy5vcHRpb25zLnNwYWNpbmcgKyB0aGlzLm9wdGlvbnMuYm9yZGVyV2lkdGgpIC8gMjtcbiAgICAgICAgY29uc3QgX2NpcmN1bWZlcmVuY2UgPSB2YWx1ZU9yRGVmYXVsdChjaXJjdW1mZXJlbmNlLCBlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBiZXR3ZWVuQW5nbGVzID0gX2NpcmN1bWZlcmVuY2UgPj0gVEFVIHx8IF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlKTtcbiAgICAgICAgY29uc3Qgd2l0aGluUmFkaXVzID0gX2lzQmV0d2VlbihkaXN0YW5jZSwgaW5uZXJSYWRpdXMgKyByQWRqdXN0LCBvdXRlclJhZGl1cyArIHJBZGp1c3QpO1xuICAgICAgICByZXR1cm4gYmV0d2VlbkFuZ2xlcyAmJiB3aXRoaW5SYWRpdXM7XG4gICAgfVxuICAgIGdldENlbnRlclBvaW50KHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHN0YXJ0QW5nbGUgLCBlbmRBbmdsZSAsIGlubmVyUmFkaXVzICwgb3V0ZXJSYWRpdXMgIH0gPSB0aGlzLmdldFByb3BzKFtcbiAgICAgICAgICAgICd4JyxcbiAgICAgICAgICAgICd5JyxcbiAgICAgICAgICAgICdzdGFydEFuZ2xlJyxcbiAgICAgICAgICAgICdlbmRBbmdsZScsXG4gICAgICAgICAgICAnaW5uZXJSYWRpdXMnLFxuICAgICAgICAgICAgJ291dGVyUmFkaXVzJ1xuICAgICAgICBdLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICAgICAgY29uc3QgeyBvZmZzZXQgLCBzcGFjaW5nICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBoYWxmQW5nbGUgPSAoc3RhcnRBbmdsZSArIGVuZEFuZ2xlKSAvIDI7XG4gICAgICAgIGNvbnN0IGhhbGZSYWRpdXMgPSAoaW5uZXJSYWRpdXMgKyBvdXRlclJhZGl1cyArIHNwYWNpbmcgKyBvZmZzZXQpIC8gMjtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggKyBNYXRoLmNvcyhoYWxmQW5nbGUpICogaGFsZlJhZGl1cyxcbiAgICAgICAgICAgIHk6IHkgKyBNYXRoLnNpbihoYWxmQW5nbGUpICogaGFsZlJhZGl1c1xuICAgICAgICB9O1xuICAgIH1cbiAgICB0b29sdGlwUG9zaXRpb24odXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDZW50ZXJQb2ludCh1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZHJhdyhjdHgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgY2lyY3VtZmVyZW5jZSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IChvcHRpb25zLm9mZnNldCB8fCAwKSAvIDQ7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSAob3B0aW9ucy5zcGFjaW5nIHx8IDApIC8gMjtcbiAgICAgICAgY29uc3QgY2lyY3VsYXIgPSBvcHRpb25zLmNpcmN1bGFyO1xuICAgICAgICB0aGlzLnBpeGVsTWFyZ2luID0gb3B0aW9ucy5ib3JkZXJBbGlnbiA9PT0gJ2lubmVyJyA/IDAuMzMgOiAwO1xuICAgICAgICB0aGlzLmZ1bGxDaXJjbGVzID0gY2lyY3VtZmVyZW5jZSA+IFRBVSA/IE1hdGguZmxvb3IoY2lyY3VtZmVyZW5jZSAvIFRBVSkgOiAwO1xuICAgICAgICBpZiAoY2lyY3VtZmVyZW5jZSA9PT0gMCB8fCB0aGlzLmlubmVyUmFkaXVzIDwgMCB8fCB0aGlzLm91dGVyUmFkaXVzIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGNvbnN0IGhhbGZBbmdsZSA9ICh0aGlzLnN0YXJ0QW5nbGUgKyB0aGlzLmVuZEFuZ2xlKSAvIDI7XG4gICAgICAgIGN0eC50cmFuc2xhdGUoTWF0aC5jb3MoaGFsZkFuZ2xlKSAqIG9mZnNldCwgTWF0aC5zaW4oaGFsZkFuZ2xlKSAqIG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGZpeCA9IDEgLSBNYXRoLnNpbihNYXRoLm1pbihQSSwgY2lyY3VtZmVyZW5jZSB8fCAwKSk7XG4gICAgICAgIGNvbnN0IHJhZGl1c09mZnNldCA9IG9mZnNldCAqIGZpeDtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRpb25zLmJvcmRlckNvbG9yO1xuICAgICAgICBkcmF3QXJjKGN0eCwgdGhpcywgcmFkaXVzT2Zmc2V0LCBzcGFjaW5nLCBjaXJjdWxhcik7XG4gICAgICAgIGRyYXdCb3JkZXIoY3R4LCB0aGlzLCByYWRpdXNPZmZzZXQsIHNwYWNpbmcsIGNpcmN1bGFyKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlKGN0eCwgb3B0aW9ucywgc3R5bGUgPSBvcHRpb25zKSB7XG4gICAgY3R4LmxpbmVDYXAgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDYXBTdHlsZSwgb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSk7XG4gICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2gsIG9wdGlvbnMuYm9yZGVyRGFzaCkpO1xuICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsIG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCk7XG4gICAgY3R4LmxpbmVKb2luID0gdmFsdWVPckRlZmF1bHQoc3R5bGUuYm9yZGVySm9pblN0eWxlLCBvcHRpb25zLmJvcmRlckpvaW5TdHlsZSk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KHN0eWxlLmJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChzdHlsZS5ib3JkZXJDb2xvciwgb3B0aW9ucy5ib3JkZXJDb2xvcik7XG59XG5mdW5jdGlvbiBsaW5lVG8oY3R4LCBwcmV2aW91cywgdGFyZ2V0KSB7XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgdGFyZ2V0LnkpO1xufVxuIGZ1bmN0aW9uIGdldExpbmVNZXRob2Qob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zLnN0ZXBwZWQpIHtcbiAgICAgICAgcmV0dXJuIF9zdGVwcGVkTGluZVRvO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgICAgICByZXR1cm4gX2JlemllckN1cnZlVG87XG4gICAgfVxuICAgIHJldHVybiBsaW5lVG87XG59XG5mdW5jdGlvbiBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHsgc3RhcnQ6IHBhcmFtc1N0YXJ0ID0gMCAsIGVuZDogcGFyYW1zRW5kID0gY291bnQgLSAxICB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IHsgc3RhcnQ6IHNlZ21lbnRTdGFydCAsIGVuZDogc2VnbWVudEVuZCAgfSA9IHNlZ21lbnQ7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLm1heChwYXJhbXNTdGFydCwgc2VnbWVudFN0YXJ0KTtcbiAgICBjb25zdCBlbmQgPSBNYXRoLm1pbihwYXJhbXNFbmQsIHNlZ21lbnRFbmQpO1xuICAgIGNvbnN0IG91dHNpZGUgPSBwYXJhbXNTdGFydCA8IHNlZ21lbnRTdGFydCAmJiBwYXJhbXNFbmQgPCBzZWdtZW50U3RhcnQgfHwgcGFyYW1zU3RhcnQgPiBzZWdtZW50RW5kICYmIHBhcmFtc0VuZCA+IHNlZ21lbnRFbmQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY291bnQsXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBsb29wOiBzZWdtZW50Lmxvb3AsXG4gICAgICAgIGlsZW46IGVuZCA8IHN0YXJ0ICYmICFvdXRzaWRlID8gY291bnQgKyBlbmQgLSBzdGFydCA6IGVuZCAtIHN0YXJ0XG4gICAgfTtcbn1cbiBmdW5jdGlvbiBwYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHsgcG9pbnRzICwgb3B0aW9ucyAgfSA9IGxpbmU7XG4gICAgY29uc3QgeyBjb3VudCAsIHN0YXJ0ICwgbG9vcCAsIGlsZW4gIH0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgY29uc3QgbGluZU1ldGhvZCA9IGdldExpbmVNZXRob2Qob3B0aW9ucyk7XG4gICAgbGV0IHsgbW92ZSA9dHJ1ZSAsIHJldmVyc2UgIH0gPSBwYXJhbXMgfHwge307XG4gICAgbGV0IGksIHBvaW50LCBwcmV2O1xuICAgIGZvcihpID0gMDsgaSA8PSBpbGVuOyArK2kpe1xuICAgICAgICBwb2ludCA9IHBvaW50c1soc3RhcnQgKyAocmV2ZXJzZSA/IGlsZW4gLSBpIDogaSkpICUgY291bnRdO1xuICAgICAgICBpZiAocG9pbnQuc2tpcCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAobW92ZSkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhwb2ludC54LCBwb2ludC55KTtcbiAgICAgICAgICAgIG1vdmUgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVNZXRob2QoY3R4LCBwcmV2LCBwb2ludCwgcmV2ZXJzZSwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gcG9pbnQ7XG4gICAgfVxuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzWyhzdGFydCArIChyZXZlcnNlID8gaWxlbiA6IDApKSAlIGNvdW50XTtcbiAgICAgICAgbGluZU1ldGhvZChjdHgsIHByZXYsIHBvaW50LCByZXZlcnNlLCBvcHRpb25zLnN0ZXBwZWQpO1xuICAgIH1cbiAgICByZXR1cm4gISFsb29wO1xufVxuIGZ1bmN0aW9uIGZhc3RQYXRoU2VnbWVudChjdHgsIGxpbmUsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHsgY291bnQgLCBzdGFydCAsIGlsZW4gIH0gPSBwYXRoVmFycyhwb2ludHMsIHNlZ21lbnQsIHBhcmFtcyk7XG4gICAgY29uc3QgeyBtb3ZlID10cnVlICwgcmV2ZXJzZSAgfSA9IHBhcmFtcyB8fCB7fTtcbiAgICBsZXQgYXZnWCA9IDA7XG4gICAgbGV0IGNvdW50WCA9IDA7XG4gICAgbGV0IGksIHBvaW50LCBwcmV2WCwgbWluWSwgbWF4WSwgbGFzdFk7XG4gICAgY29uc3QgcG9pbnRJbmRleCA9IChpbmRleCk9PihzdGFydCArIChyZXZlcnNlID8gaWxlbiAtIGluZGV4IDogaW5kZXgpKSAlIGNvdW50O1xuICAgIGNvbnN0IGRyYXdYID0gKCk9PntcbiAgICAgICAgaWYgKG1pblkgIT09IG1heFkpIHtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oYXZnWCwgbWF4WSk7XG4gICAgICAgICAgICBjdHgubGluZVRvKGF2Z1gsIG1pblkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhhdmdYLCBsYXN0WSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGlmIChtb3ZlKSB7XG4gICAgICAgIHBvaW50ID0gcG9pbnRzW3BvaW50SW5kZXgoMCldO1xuICAgICAgICBjdHgubW92ZVRvKHBvaW50LngsIHBvaW50LnkpO1xuICAgIH1cbiAgICBmb3IoaSA9IDA7IGkgPD0gaWxlbjsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbcG9pbnRJbmRleChpKV07XG4gICAgICAgIGlmIChwb2ludC5za2lwKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB4ID0gcG9pbnQueDtcbiAgICAgICAgY29uc3QgeSA9IHBvaW50Lnk7XG4gICAgICAgIGNvbnN0IHRydW5jWCA9IHggfCAwO1xuICAgICAgICBpZiAodHJ1bmNYID09PSBwcmV2WCkge1xuICAgICAgICAgICAgaWYgKHkgPCBtaW5ZKSB7XG4gICAgICAgICAgICAgICAgbWluWSA9IHk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhdmdYID0gKGNvdW50WCAqIGF2Z1ggKyB4KSAvICsrY291bnRYO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHJhd1goKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgICAgICAgIGNvdW50WCA9IDA7XG4gICAgICAgICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFkgPSB5O1xuICAgIH1cbiAgICBkcmF3WCgpO1xufVxuIGZ1bmN0aW9uIF9nZXRTZWdtZW50TWV0aG9kKGxpbmUpIHtcbiAgICBjb25zdCBvcHRzID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGJvcmRlckRhc2ggPSBvcHRzLmJvcmRlckRhc2ggJiYgb3B0cy5ib3JkZXJEYXNoLmxlbmd0aDtcbiAgICBjb25zdCB1c2VGYXN0UGF0aCA9ICFsaW5lLl9kZWNpbWF0ZWQgJiYgIWxpbmUuX2xvb3AgJiYgIW9wdHMudGVuc2lvbiAmJiBvcHRzLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgIT09ICdtb25vdG9uZScgJiYgIW9wdHMuc3RlcHBlZCAmJiAhYm9yZGVyRGFzaDtcbiAgICByZXR1cm4gdXNlRmFzdFBhdGggPyBmYXN0UGF0aFNlZ21lbnQgOiBwYXRoU2VnbWVudDtcbn1cbiBmdW5jdGlvbiBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3RlcHBlZCkge1xuICAgICAgICByZXR1cm4gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uO1xuICAgIH1cbiAgICBpZiAob3B0aW9ucy50ZW5zaW9uIHx8IG9wdGlvbnMuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuICAgICAgICByZXR1cm4gX2JlemllckludGVycG9sYXRpb247XG4gICAgfVxuICAgIHJldHVybiBfcG9pbnRJbkxpbmU7XG59XG5mdW5jdGlvbiBzdHJva2VQYXRoV2l0aENhY2hlKGN0eCwgbGluZSwgc3RhcnQsIGNvdW50KSB7XG4gICAgbGV0IHBhdGggPSBsaW5lLl9wYXRoO1xuICAgIGlmICghcGF0aCkge1xuICAgICAgICBwYXRoID0gbGluZS5fcGF0aCA9IG5ldyBQYXRoMkQoKTtcbiAgICAgICAgaWYgKGxpbmUucGF0aChwYXRoLCBzdGFydCwgY291bnQpKSB7XG4gICAgICAgICAgICBwYXRoLmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHNldFN0eWxlKGN0eCwgbGluZS5vcHRpb25zKTtcbiAgICBjdHguc3Ryb2tlKHBhdGgpO1xufVxuZnVuY3Rpb24gc3Ryb2tlUGF0aERpcmVjdChjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGNvbnN0IHsgc2VnbWVudHMgLCBvcHRpb25zICB9ID0gbGluZTtcbiAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QobGluZSk7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgc2V0U3R5bGUoY3R4LCBvcHRpb25zLCBzZWdtZW50LnN0eWxlKTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBpZiAoc2VnbWVudE1ldGhvZChjdHgsIGxpbmUsIHNlZ21lbnQsIHtcbiAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBzdGFydCArIGNvdW50IC0gMVxuICAgICAgICB9KSkge1xuICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICB9XG59XG5jb25zdCB1c2VQYXRoMkQgPSB0eXBlb2YgUGF0aDJEID09PSAnZnVuY3Rpb24nO1xuZnVuY3Rpb24gZHJhdyhjdHgsIGxpbmUsIHN0YXJ0LCBjb3VudCkge1xuICAgIGlmICh1c2VQYXRoMkQgJiYgIWxpbmUub3B0aW9ucy5zZWdtZW50KSB7XG4gICAgICAgIHN0cm9rZVBhdGhXaXRoQ2FjaGUoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cm9rZVBhdGhEaXJlY3QoY3R4LCBsaW5lLCBzdGFydCwgY291bnQpO1xuICAgIH1cbn1cbmNsYXNzIExpbmVFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ2xpbmUnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgYm9yZGVyQ2FwU3R5bGU6ICdidXR0JyxcbiAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IDAsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogJ21pdGVyJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDMsXG4gICAgICAgIGNhcEJlemllclBvaW50czogdHJ1ZSxcbiAgICAgICAgY3ViaWNJbnRlcnBvbGF0aW9uTW9kZTogJ2RlZmF1bHQnLFxuICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgc3BhbkdhcHM6IGZhbHNlLFxuICAgICAgICBzdGVwcGVkOiBmYWxzZSxcbiAgICAgICAgdGVuc2lvbjogMFxuICAgIH07XG4gc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAnZmlsbCdcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX2NoYXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9sb29wID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9mdWxsTG9vcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcGF0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fcG9pbnRzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zZWdtZW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fZGVjaW1hdGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZGF0YXNldEluZGV4ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoY2ZnKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGNmZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlQ29udHJvbFBvaW50cyhjaGFydEFyZWEsIGluZGV4QXhpcykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoKG9wdGlvbnMudGVuc2lvbiB8fCBvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpICYmICFvcHRpb25zLnN0ZXBwZWQgJiYgIXRoaXMuX3BvaW50c1VwZGF0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvb3AgPSBvcHRpb25zLnNwYW5HYXBzID8gdGhpcy5fbG9vcCA6IHRoaXMuX2Z1bGxMb29wO1xuICAgICAgICAgICAgX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHModGhpcy5fcG9pbnRzLCBvcHRpb25zLCBjaGFydEFyZWEsIGxvb3AsIGluZGV4QXhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZXQgcG9pbnRzKHBvaW50cykge1xuICAgICAgICB0aGlzLl9wb2ludHMgPSBwb2ludHM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zZWdtZW50cztcbiAgICAgICAgZGVsZXRlIHRoaXMuX3BhdGg7XG4gICAgICAgIHRoaXMuX3BvaW50c1VwZGF0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgZ2V0IHBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvaW50cztcbiAgICB9XG4gICAgZ2V0IHNlZ21lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VnbWVudHMgfHwgKHRoaXMuX3NlZ21lbnRzID0gX2NvbXB1dGVTZWdtZW50cyh0aGlzLCB0aGlzLm9wdGlvbnMuc2VnbWVudCkpO1xuICAgIH1cbiBmaXJzdCgpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzLmxlbmd0aCAmJiBwb2ludHNbc2VnbWVudHNbMF0uc3RhcnRdO1xuICAgIH1cbiBsYXN0KCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBjb25zdCBjb3VudCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGNvdW50ICYmIHBvaW50c1tzZWdtZW50c1tjb3VudCAtIDFdLmVuZF07XG4gICAgfVxuIGludGVycG9sYXRlKHBvaW50LCBwcm9wZXJ0eSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvaW50W3Byb3BlcnR5XTtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGhpcywge1xuICAgICAgICAgICAgcHJvcGVydHksXG4gICAgICAgICAgICBzdGFydDogdmFsdWUsXG4gICAgICAgICAgICBlbmQ6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBjb25zdCBfaW50ZXJwb2xhdGUgPSBfZ2V0SW50ZXJwb2xhdGlvbk1ldGhvZChvcHRpb25zKTtcbiAgICAgICAgbGV0IGksIGlsZW47XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHNlZ21lbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgICBjb25zdCBwMSA9IHBvaW50c1tzdGFydF07XG4gICAgICAgICAgICBjb25zdCBwMiA9IHBvaW50c1tlbmRdO1xuICAgICAgICAgICAgaWYgKHAxID09PSBwMikge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHAxKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHQgPSBNYXRoLmFicygodmFsdWUgLSBwMVtwcm9wZXJ0eV0pIC8gKHAyW3Byb3BlcnR5XSAtIHAxW3Byb3BlcnR5XSkpO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJwb2xhdGVkID0gX2ludGVycG9sYXRlKHAxLCBwMiwgdCwgb3B0aW9ucy5zdGVwcGVkKTtcbiAgICAgICAgICAgIGludGVycG9sYXRlZFtwcm9wZXJ0eV0gPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgICAgICAgICByZXN1bHQucHVzaChpbnRlcnBvbGF0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAxID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgIH1cbiBwYXRoU2VnbWVudChjdHgsIHNlZ21lbnQsIHBhcmFtcykge1xuICAgICAgICBjb25zdCBzZWdtZW50TWV0aG9kID0gX2dldFNlZ21lbnRNZXRob2QodGhpcyk7XG4gICAgICAgIHJldHVybiBzZWdtZW50TWV0aG9kKGN0eCwgdGhpcywgc2VnbWVudCwgcGFyYW1zKTtcbiAgICB9XG4gcGF0aChjdHgsIHN0YXJ0LCBjb3VudCkge1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc2VnbWVudHM7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRNZXRob2QgPSBfZ2V0U2VnbWVudE1ldGhvZCh0aGlzKTtcbiAgICAgICAgbGV0IGxvb3AgPSB0aGlzLl9sb29wO1xuICAgICAgICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gICAgICAgIGNvdW50ID0gY291bnQgfHwgdGhpcy5wb2ludHMubGVuZ3RoIC0gc3RhcnQ7XG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cyl7XG4gICAgICAgICAgICBsb29wICY9IHNlZ21lbnRNZXRob2QoY3R4LCB0aGlzLCBzZWdtZW50LCB7XG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kOiBzdGFydCArIGNvdW50IC0gMVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICEhbG9vcDtcbiAgICB9XG4gZHJhdyhjdHgsIGNoYXJ0QXJlYSwgc3RhcnQsIGNvdW50KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgfHwge307XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzIHx8IFtdO1xuICAgICAgICBpZiAocG9pbnRzLmxlbmd0aCAmJiBvcHRpb25zLmJvcmRlcldpZHRoKSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZHJhdyhjdHgsIHRoaXMsIHN0YXJ0LCBjb3VudCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wb2ludHNVcGRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9wYXRoID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpblJhbmdlJDEoZWwsIHBvcywgYXhpcywgdXNlRmluYWxQb3NpdGlvbikge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBlbC5vcHRpb25zO1xuICAgIGNvbnN0IHsgW2F4aXNdOiB2YWx1ZSAgfSA9IGVsLmdldFByb3BzKFtcbiAgICAgICAgYXhpc1xuICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIHJldHVybiBNYXRoLmFicyhwb3MgLSB2YWx1ZSkgPCBvcHRpb25zLnJhZGl1cyArIG9wdGlvbnMuaGl0UmFkaXVzO1xufVxuY2xhc3MgUG9pbnRFbGVtZW50IGV4dGVuZHMgRWxlbWVudCB7XG4gICAgc3RhdGljIGlkID0gJ3BvaW50JztcbiAgICBwYXJzZWQ7XG4gICAgc2tpcDtcbiAgICBzdG9wO1xuICAgIC8qKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKi8gc3RhdGljIGRlZmF1bHRzID0ge1xuICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgaGl0UmFkaXVzOiAxLFxuICAgICAgICBob3ZlckJvcmRlcldpZHRoOiAxLFxuICAgICAgICBob3ZlclJhZGl1czogNCxcbiAgICAgICAgcG9pbnRTdHlsZTogJ2NpcmNsZScsXG4gICAgICAgIHJhZGl1czogMyxcbiAgICAgICAgcm90YXRpb246IDBcbiAgICB9O1xuICAgIC8qKlxuICAgKiBAdHlwZSB7YW55fVxuICAgKi8gc3RhdGljIGRlZmF1bHRSb3V0ZXMgPSB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ2JhY2tncm91bmRDb2xvcicsXG4gICAgICAgIGJvcmRlckNvbG9yOiAnYm9yZGVyQ29sb3InXG4gICAgfTtcbiAgICBjb25zdHJ1Y3RvcihjZmcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucGFyc2VkID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnNraXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc3RvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKGNmZykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluUmFuZ2UobW91c2VYLCBtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHRoaXMuZ2V0UHJvcHMoW1xuICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgJ3knXG4gICAgICAgIF0sIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgICAgICByZXR1cm4gTWF0aC5wb3cobW91c2VYIC0geCwgMikgKyBNYXRoLnBvdyhtb3VzZVkgLSB5LCAyKSA8IE1hdGgucG93KG9wdGlvbnMuaGl0UmFkaXVzICsgb3B0aW9ucy5yYWRpdXMsIDIpO1xuICAgIH1cbiAgICBpblhSYW5nZShtb3VzZVgsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UkMSh0aGlzLCBtb3VzZVgsICd4JywgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWVJhbmdlKG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSQxKHRoaXMsIG1vdXNlWSwgJ3knLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICB9ID0gdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneSdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzaXplKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwgdGhpcy5vcHRpb25zIHx8IHt9O1xuICAgICAgICBsZXQgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXMgfHwgMDtcbiAgICAgICAgcmFkaXVzID0gTWF0aC5tYXgocmFkaXVzLCByYWRpdXMgJiYgb3B0aW9ucy5ob3ZlclJhZGl1cyB8fCAwKTtcbiAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSByYWRpdXMgJiYgb3B0aW9ucy5ib3JkZXJXaWR0aCB8fCAwO1xuICAgICAgICByZXR1cm4gKHJhZGl1cyArIGJvcmRlcldpZHRoKSAqIDI7XG4gICAgfVxuICAgIGRyYXcoY3R4LCBhcmVhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLnNraXAgfHwgb3B0aW9ucy5yYWRpdXMgPCAwLjEgfHwgIV9pc1BvaW50SW5BcmVhKHRoaXMsIGFyZWEsIHRoaXMuc2l6ZShvcHRpb25zKSAvIDIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgdGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbiAgICBnZXRSYW5nZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucyB8fCB7fTtcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBGYWxsYmFja3Mgc2hvdWxkIG5ldmVyIGJlIGhpdCBpbiBwcmFjdGljZVxuICAgICAgICByZXR1cm4gb3B0aW9ucy5yYWRpdXMgKyBvcHRpb25zLmhpdFJhZGl1cztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldEJhckJvdW5kcyhiYXIsIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICBjb25zdCB7IHggLCB5ICwgYmFzZSAsIHdpZHRoICwgaGVpZ2h0ICB9ID0gIGJhci5nZXRQcm9wcyhbXG4gICAgICAgICd4JyxcbiAgICAgICAgJ3knLFxuICAgICAgICAnYmFzZScsXG4gICAgICAgICd3aWR0aCcsXG4gICAgICAgICdoZWlnaHQnXG4gICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgbGV0IGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgaGFsZjtcbiAgICBpZiAoYmFyLmhvcml6b250YWwpIHtcbiAgICAgICAgaGFsZiA9IGhlaWdodCAvIDI7XG4gICAgICAgIGxlZnQgPSBNYXRoLm1pbih4LCBiYXNlKTtcbiAgICAgICAgcmlnaHQgPSBNYXRoLm1heCh4LCBiYXNlKTtcbiAgICAgICAgdG9wID0geSAtIGhhbGY7XG4gICAgICAgIGJvdHRvbSA9IHkgKyBoYWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGhhbGYgPSB3aWR0aCAvIDI7XG4gICAgICAgIGxlZnQgPSB4IC0gaGFsZjtcbiAgICAgICAgcmlnaHQgPSB4ICsgaGFsZjtcbiAgICAgICAgdG9wID0gTWF0aC5taW4oeSwgYmFzZSk7XG4gICAgICAgIGJvdHRvbSA9IE1hdGgubWF4KHksIGJhc2UpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBsZWZ0LFxuICAgICAgICB0b3AsXG4gICAgICAgIHJpZ2h0LFxuICAgICAgICBib3R0b21cbiAgICB9O1xufVxuZnVuY3Rpb24gc2tpcE9yTGltaXQoc2tpcCwgdmFsdWUsIG1pbiwgbWF4KSB7XG4gICAgcmV0dXJuIHNraXAgPyAwIDogX2xpbWl0VmFsdWUodmFsdWUsIG1pbiwgbWF4KTtcbn1cbmZ1bmN0aW9uIHBhcnNlQm9yZGVyV2lkdGgoYmFyLCBtYXhXLCBtYXhIKSB7XG4gICAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJXaWR0aDtcbiAgICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgbyA9IHRvVFJCTCh2YWx1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdDogc2tpcE9yTGltaXQoc2tpcC50b3AsIG8udG9wLCAwLCBtYXhIKSxcbiAgICAgICAgcjogc2tpcE9yTGltaXQoc2tpcC5yaWdodCwgby5yaWdodCwgMCwgbWF4VyksXG4gICAgICAgIGI6IHNraXBPckxpbWl0KHNraXAuYm90dG9tLCBvLmJvdHRvbSwgMCwgbWF4SCksXG4gICAgICAgIGw6IHNraXBPckxpbWl0KHNraXAubGVmdCwgby5sZWZ0LCAwLCBtYXhXKVxuICAgIH07XG59XG5mdW5jdGlvbiBwYXJzZUJvcmRlclJhZGl1cyhiYXIsIG1heFcsIG1heEgpIHtcbiAgICBjb25zdCB7IGVuYWJsZUJvcmRlclJhZGl1cyAgfSA9IGJhci5nZXRQcm9wcyhbXG4gICAgICAgICdlbmFibGVCb3JkZXJSYWRpdXMnXG4gICAgXSk7XG4gICAgY29uc3QgdmFsdWUgPSBiYXIub3B0aW9ucy5ib3JkZXJSYWRpdXM7XG4gICAgY29uc3QgbyA9IHRvVFJCTENvcm5lcnModmFsdWUpO1xuICAgIGNvbnN0IG1heFIgPSBNYXRoLm1pbihtYXhXLCBtYXhIKTtcbiAgICBjb25zdCBza2lwID0gYmFyLmJvcmRlclNraXBwZWQ7XG4gICAgY29uc3QgZW5hYmxlQm9yZGVyID0gZW5hYmxlQm9yZGVyUmFkaXVzIHx8IGlzT2JqZWN0KHZhbHVlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB0b3BMZWZ0OiBza2lwT3JMaW1pdCghZW5hYmxlQm9yZGVyIHx8IHNraXAudG9wIHx8IHNraXAubGVmdCwgby50b3BMZWZ0LCAwLCBtYXhSKSxcbiAgICAgICAgdG9wUmlnaHQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC50b3AgfHwgc2tpcC5yaWdodCwgby50b3BSaWdodCwgMCwgbWF4UiksXG4gICAgICAgIGJvdHRvbUxlZnQ6IHNraXBPckxpbWl0KCFlbmFibGVCb3JkZXIgfHwgc2tpcC5ib3R0b20gfHwgc2tpcC5sZWZ0LCBvLmJvdHRvbUxlZnQsIDAsIG1heFIpLFxuICAgICAgICBib3R0b21SaWdodDogc2tpcE9yTGltaXQoIWVuYWJsZUJvcmRlciB8fCBza2lwLmJvdHRvbSB8fCBza2lwLnJpZ2h0LCBvLmJvdHRvbVJpZ2h0LCAwLCBtYXhSKVxuICAgIH07XG59XG5mdW5jdGlvbiBib3VuZGluZ1JlY3RzKGJhcikge1xuICAgIGNvbnN0IGJvdW5kcyA9IGdldEJhckJvdW5kcyhiYXIpO1xuICAgIGNvbnN0IHdpZHRoID0gYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQ7XG4gICAgY29uc3QgaGVpZ2h0ID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG4gICAgY29uc3QgYm9yZGVyID0gcGFyc2VCb3JkZXJXaWR0aChiYXIsIHdpZHRoIC8gMiwgaGVpZ2h0IC8gMik7XG4gICAgY29uc3QgcmFkaXVzID0gcGFyc2VCb3JkZXJSYWRpdXMoYmFyLCB3aWR0aCAvIDIsIGhlaWdodCAvIDIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG91dGVyOiB7XG4gICAgICAgICAgICB4OiBib3VuZHMubGVmdCxcbiAgICAgICAgICAgIHk6IGJvdW5kcy50b3AsXG4gICAgICAgICAgICB3OiB3aWR0aCxcbiAgICAgICAgICAgIGg6IGhlaWdodCxcbiAgICAgICAgICAgIHJhZGl1c1xuICAgICAgICB9LFxuICAgICAgICBpbm5lcjoge1xuICAgICAgICAgICAgeDogYm91bmRzLmxlZnQgKyBib3JkZXIubCxcbiAgICAgICAgICAgIHk6IGJvdW5kcy50b3AgKyBib3JkZXIudCxcbiAgICAgICAgICAgIHc6IHdpZHRoIC0gYm9yZGVyLmwgLSBib3JkZXIucixcbiAgICAgICAgICAgIGg6IGhlaWdodCAtIGJvcmRlci50IC0gYm9yZGVyLmIsXG4gICAgICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICAgICAgICB0b3BMZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wTGVmdCAtIE1hdGgubWF4KGJvcmRlci50LCBib3JkZXIubCkpLFxuICAgICAgICAgICAgICAgIHRvcFJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMudG9wUmlnaHQgLSBNYXRoLm1heChib3JkZXIudCwgYm9yZGVyLnIpKSxcbiAgICAgICAgICAgICAgICBib3R0b21MZWZ0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tTGVmdCAtIE1hdGgubWF4KGJvcmRlci5iLCBib3JkZXIubCkpLFxuICAgICAgICAgICAgICAgIGJvdHRvbVJpZ2h0OiBNYXRoLm1heCgwLCByYWRpdXMuYm90dG9tUmlnaHQgLSBNYXRoLm1heChib3JkZXIuYiwgYm9yZGVyLnIpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGluUmFuZ2UoYmFyLCB4LCB5LCB1c2VGaW5hbFBvc2l0aW9uKSB7XG4gICAgY29uc3Qgc2tpcFggPSB4ID09PSBudWxsO1xuICAgIGNvbnN0IHNraXBZID0geSA9PT0gbnVsbDtcbiAgICBjb25zdCBza2lwQm90aCA9IHNraXBYICYmIHNraXBZO1xuICAgIGNvbnN0IGJvdW5kcyA9IGJhciAmJiAhc2tpcEJvdGggJiYgZ2V0QmFyQm91bmRzKGJhciwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgcmV0dXJuIGJvdW5kcyAmJiAoc2tpcFggfHwgX2lzQmV0d2Vlbih4LCBib3VuZHMubGVmdCwgYm91bmRzLnJpZ2h0KSkgJiYgKHNraXBZIHx8IF9pc0JldHdlZW4oeSwgYm91bmRzLnRvcCwgYm91bmRzLmJvdHRvbSkpO1xufVxuZnVuY3Rpb24gaGFzUmFkaXVzKHJhZGl1cykge1xuICAgIHJldHVybiByYWRpdXMudG9wTGVmdCB8fCByYWRpdXMudG9wUmlnaHQgfHwgcmFkaXVzLmJvdHRvbUxlZnQgfHwgcmFkaXVzLmJvdHRvbVJpZ2h0O1xufVxuIGZ1bmN0aW9uIGFkZE5vcm1hbFJlY3RQYXRoKGN0eCwgcmVjdCkge1xuICAgIGN0eC5yZWN0KHJlY3QueCwgcmVjdC55LCByZWN0LncsIHJlY3QuaCk7XG59XG5mdW5jdGlvbiBpbmZsYXRlUmVjdChyZWN0LCBhbW91bnQsIHJlZlJlY3QgPSB7fSkge1xuICAgIGNvbnN0IHggPSByZWN0LnggIT09IHJlZlJlY3QueCA/IC1hbW91bnQgOiAwO1xuICAgIGNvbnN0IHkgPSByZWN0LnkgIT09IHJlZlJlY3QueSA/IC1hbW91bnQgOiAwO1xuICAgIGNvbnN0IHcgPSAocmVjdC54ICsgcmVjdC53ICE9PSByZWZSZWN0LnggKyByZWZSZWN0LncgPyBhbW91bnQgOiAwKSAtIHg7XG4gICAgY29uc3QgaCA9IChyZWN0LnkgKyByZWN0LmggIT09IHJlZlJlY3QueSArIHJlZlJlY3QuaCA/IGFtb3VudCA6IDApIC0geTtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiByZWN0LnggKyB4LFxuICAgICAgICB5OiByZWN0LnkgKyB5LFxuICAgICAgICB3OiByZWN0LncgKyB3LFxuICAgICAgICBoOiByZWN0LmggKyBoLFxuICAgICAgICByYWRpdXM6IHJlY3QucmFkaXVzXG4gICAgfTtcbn1cbmNsYXNzIEJhckVsZW1lbnQgZXh0ZW5kcyBFbGVtZW50IHtcbiAgICBzdGF0aWMgaWQgPSAnYmFyJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIGJvcmRlclNraXBwZWQ6ICdzdGFydCcsXG4gICAgICAgIGJvcmRlcldpZHRoOiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGluZmxhdGVBbW91bnQ6ICdhdXRvJyxcbiAgICAgICAgcG9pbnRTdHlsZTogdW5kZWZpbmVkXG4gICAgfTtcbiBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnYmFja2dyb3VuZENvbG9yJyxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdib3JkZXJDb2xvcidcbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ob3Jpem9udGFsID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJhc2UgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmluZmxhdGVBbW91bnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChjZmcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgY2ZnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCB7IGluZmxhdGVBbW91bnQgLCBvcHRpb25zOiB7IGJvcmRlckNvbG9yICwgYmFja2dyb3VuZENvbG9yICB9ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBpbm5lciAsIG91dGVyICB9ID0gYm91bmRpbmdSZWN0cyh0aGlzKTtcbiAgICAgICAgY29uc3QgYWRkUmVjdFBhdGggPSBoYXNSYWRpdXMob3V0ZXIucmFkaXVzKSA/IGFkZFJvdW5kZWRSZWN0UGF0aCA6IGFkZE5vcm1hbFJlY3RQYXRoO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBpZiAob3V0ZXIudyAhPT0gaW5uZXIudyB8fCBvdXRlci5oICE9PSBpbm5lci5oKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBhZGRSZWN0UGF0aChjdHgsIGluZmxhdGVSZWN0KG91dGVyLCBpbmZsYXRlQW1vdW50LCBpbm5lcikpO1xuICAgICAgICAgICAgY3R4LmNsaXAoKTtcbiAgICAgICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIC1pbmZsYXRlQW1vdW50LCBvdXRlcikpO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJvcmRlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoJ2V2ZW5vZGQnKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGFkZFJlY3RQYXRoKGN0eCwgaW5mbGF0ZVJlY3QoaW5uZXIsIGluZmxhdGVBbW91bnQpKTtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgaW5SYW5nZShtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG1vdXNlWSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgfVxuICAgIGluWFJhbmdlKG1vdXNlWCwgdXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gaW5SYW5nZSh0aGlzLCBtb3VzZVgsIG51bGwsIHVzZUZpbmFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBpbllSYW5nZShtb3VzZVksIHVzZUZpbmFsUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGluUmFuZ2UodGhpcywgbnVsbCwgbW91c2VZLCB1c2VGaW5hbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgZ2V0Q2VudGVyUG9pbnQodXNlRmluYWxQb3NpdGlvbikge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgYmFzZSAsIGhvcml6b250YWwgIH0gPSAgdGhpcy5nZXRQcm9wcyhbXG4gICAgICAgICAgICAneCcsXG4gICAgICAgICAgICAneScsXG4gICAgICAgICAgICAnYmFzZScsXG4gICAgICAgICAgICAnaG9yaXpvbnRhbCdcbiAgICAgICAgXSwgdXNlRmluYWxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBob3Jpem9udGFsID8gKHggKyBiYXNlKSAvIDIgOiB4LFxuICAgICAgICAgICAgeTogaG9yaXpvbnRhbCA/IHkgOiAoeSArIGJhc2UpIC8gMlxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRSYW5nZShheGlzKSB7XG4gICAgICAgIHJldHVybiBheGlzID09PSAneCcgPyB0aGlzLndpZHRoIC8gMiA6IHRoaXMuaGVpZ2h0IC8gMjtcbiAgICB9XG59XG5cbnZhciBlbGVtZW50cyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkFyY0VsZW1lbnQ6IEFyY0VsZW1lbnQsXG5CYXJFbGVtZW50OiBCYXJFbGVtZW50LFxuTGluZUVsZW1lbnQ6IExpbmVFbGVtZW50LFxuUG9pbnRFbGVtZW50OiBQb2ludEVsZW1lbnRcbn0pO1xuXG5jb25zdCBCT1JERVJfQ09MT1JTID0gW1xuICAgICdyZ2IoNTQsIDE2MiwgMjM1KScsXG4gICAgJ3JnYigyNTUsIDk5LCAxMzIpJyxcbiAgICAncmdiKDI1NSwgMTU5LCA2NCknLFxuICAgICdyZ2IoMjU1LCAyMDUsIDg2KScsXG4gICAgJ3JnYig3NSwgMTkyLCAxOTIpJyxcbiAgICAncmdiKDE1MywgMTAyLCAyNTUpJyxcbiAgICAncmdiKDIwMSwgMjAzLCAyMDcpJyAvLyBncmV5XG5dO1xuLy8gQm9yZGVyIGNvbG9ycyB3aXRoIDUwJSB0cmFuc3BhcmVuY3lcbmNvbnN0IEJBQ0tHUk9VTkRfQ09MT1JTID0gLyogI19fUFVSRV9fICovIEJPUkRFUl9DT0xPUlMubWFwKChjb2xvcik9PmNvbG9yLnJlcGxhY2UoJ3JnYignLCAncmdiYSgnKS5yZXBsYWNlKCcpJywgJywgMC41KScpKTtcbmZ1bmN0aW9uIGdldEJvcmRlckNvbG9yKGkpIHtcbiAgICByZXR1cm4gQk9SREVSX0NPTE9SU1tpICUgQk9SREVSX0NPTE9SUy5sZW5ndGhdO1xufVxuZnVuY3Rpb24gZ2V0QmFja2dyb3VuZENvbG9yKGkpIHtcbiAgICByZXR1cm4gQkFDS0dST1VORF9DT0xPUlNbaSAlIEJBQ0tHUk9VTkRfQ09MT1JTLmxlbmd0aF07XG59XG5mdW5jdGlvbiBjb2xvcml6ZURlZmF1bHREYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJvcmRlckNvbG9yID0gZ2V0Qm9yZGVyQ29sb3IoaSk7XG4gICAgZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgPSBnZXRCYWNrZ3JvdW5kQ29sb3IoaSk7XG4gICAgcmV0dXJuICsraTtcbn1cbmZ1bmN0aW9uIGNvbG9yaXplRG91Z2hudXREYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXQuZGF0YS5tYXAoKCk9PmdldEJvcmRlckNvbG9yKGkrKykpO1xuICAgIHJldHVybiBpO1xufVxuZnVuY3Rpb24gY29sb3JpemVQb2xhckFyZWFEYXRhc2V0KGRhdGFzZXQsIGkpIHtcbiAgICBkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXQuZGF0YS5tYXAoKCk9PmdldEJhY2tncm91bmRDb2xvcihpKyspKTtcbiAgICByZXR1cm4gaTtcbn1cbmZ1bmN0aW9uIGdldENvbG9yaXplcihjaGFydCkge1xuICAgIGxldCBpID0gMDtcbiAgICByZXR1cm4gKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIgaW5zdGFuY2VvZiBEb3VnaG51dENvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgIGkgPSBjb2xvcml6ZURvdWdobnV0RGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyIGluc3RhbmNlb2YgUG9sYXJBcmVhQ29udHJvbGxlcikge1xuICAgICAgICAgICAgaSA9IGNvbG9yaXplUG9sYXJBcmVhRGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb250cm9sbGVyKSB7XG4gICAgICAgICAgICBpID0gY29sb3JpemVEZWZhdWx0RGF0YXNldChkYXRhc2V0LCBpKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGRlc2NyaXB0b3JzKSB7XG4gICAgbGV0IGs7XG4gICAgZm9yKGsgaW4gZGVzY3JpcHRvcnMpe1xuICAgICAgICBpZiAoZGVzY3JpcHRvcnNba10uYm9yZGVyQ29sb3IgfHwgZGVzY3JpcHRvcnNba10uYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb250YWluc0NvbG9yc0RlZmluaXRpb24oZGVzY3JpcHRvcikge1xuICAgIHJldHVybiBkZXNjcmlwdG9yICYmIChkZXNjcmlwdG9yLmJvcmRlckNvbG9yIHx8IGRlc2NyaXB0b3IuYmFja2dyb3VuZENvbG9yKTtcbn1cbnZhciBwbHVnaW5fY29sb3JzID0ge1xuICAgIGlkOiAnY29sb3JzJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBmb3JjZU92ZXJyaWRlOiBmYWxzZVxuICAgIH0sXG4gICAgYmVmb3JlTGF5b3V0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGRhdGE6IHsgZGF0YXNldHMgIH0gLCBvcHRpb25zOiBjaGFydE9wdGlvbnMgIH0gPSBjaGFydC5jb25maWc7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudHMgIH0gPSBjaGFydE9wdGlvbnM7XG4gICAgICAgIGlmICghb3B0aW9ucy5mb3JjZU92ZXJyaWRlICYmIChjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGRhdGFzZXRzKSB8fCBjb250YWluc0NvbG9yc0RlZmluaXRpb24oY2hhcnRPcHRpb25zKSB8fCBlbGVtZW50cyAmJiBjb250YWluc0NvbG9yc0RlZmluaXRpb25zKGVsZW1lbnRzKSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb2xvcml6ZXIgPSBnZXRDb2xvcml6ZXIoY2hhcnQpO1xuICAgICAgICBkYXRhc2V0cy5mb3JFYWNoKGNvbG9yaXplcik7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gbHR0YkRlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCwgb3B0aW9ucykge1xuIGNvbnN0IHNhbXBsZXMgPSBvcHRpb25zLnNhbXBsZXMgfHwgYXZhaWxhYmxlV2lkdGg7XG4gICAgaWYgKHNhbXBsZXMgPj0gY291bnQpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgY291bnQpO1xuICAgIH1cbiAgICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgICBjb25zdCBidWNrZXRXaWR0aCA9IChjb3VudCAtIDIpIC8gKHNhbXBsZXMgLSAyKTtcbiAgICBsZXQgc2FtcGxlZEluZGV4ID0gMDtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICAgIGxldCBhID0gc3RhcnQ7XG4gICAgbGV0IGksIG1heEFyZWFQb2ludCwgbWF4QXJlYSwgYXJlYSwgbmV4dEE7XG4gICAgZGVjaW1hdGVkW3NhbXBsZWRJbmRleCsrXSA9IGRhdGFbYV07XG4gICAgZm9yKGkgPSAwOyBpIDwgc2FtcGxlcyAtIDI7IGkrKyl7XG4gICAgICAgIGxldCBhdmdYID0gMDtcbiAgICAgICAgbGV0IGF2Z1kgPSAwO1xuICAgICAgICBsZXQgajtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VTdGFydCA9IE1hdGguZmxvb3IoKGkgKyAxKSAqIGJ1Y2tldFdpZHRoKSArIDEgKyBzdGFydDtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VFbmQgPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMikgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICAgICAgY29uc3QgYXZnUmFuZ2VMZW5ndGggPSBhdmdSYW5nZUVuZCAtIGF2Z1JhbmdlU3RhcnQ7XG4gICAgICAgIGZvcihqID0gYXZnUmFuZ2VTdGFydDsgaiA8IGF2Z1JhbmdlRW5kOyBqKyspe1xuICAgICAgICAgICAgYXZnWCArPSBkYXRhW2pdLng7XG4gICAgICAgICAgICBhdmdZICs9IGRhdGFbal0ueTtcbiAgICAgICAgfVxuICAgICAgICBhdmdYIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgICAgICBhdmdZIC89IGF2Z1JhbmdlTGVuZ3RoO1xuICAgICAgICBjb25zdCByYW5nZU9mZnMgPSBNYXRoLmZsb29yKGkgKiBidWNrZXRXaWR0aCkgKyAxICsgc3RhcnQ7XG4gICAgICAgIGNvbnN0IHJhbmdlVG8gPSBNYXRoLm1pbihNYXRoLmZsb29yKChpICsgMSkgKiBidWNrZXRXaWR0aCkgKyAxLCBjb3VudCkgKyBzdGFydDtcbiAgICAgICAgY29uc3QgeyB4OiBwb2ludEF4ICwgeTogcG9pbnRBeSAgfSA9IGRhdGFbYV07XG4gICAgICAgIG1heEFyZWEgPSBhcmVhID0gLTE7XG4gICAgICAgIGZvcihqID0gcmFuZ2VPZmZzOyBqIDwgcmFuZ2VUbzsgaisrKXtcbiAgICAgICAgICAgIGFyZWEgPSAwLjUgKiBNYXRoLmFicygocG9pbnRBeCAtIGF2Z1gpICogKGRhdGFbal0ueSAtIHBvaW50QXkpIC0gKHBvaW50QXggLSBkYXRhW2pdLngpICogKGF2Z1kgLSBwb2ludEF5KSk7XG4gICAgICAgICAgICBpZiAoYXJlYSA+IG1heEFyZWEpIHtcbiAgICAgICAgICAgICAgICBtYXhBcmVhID0gYXJlYTtcbiAgICAgICAgICAgICAgICBtYXhBcmVhUG9pbnQgPSBkYXRhW2pdO1xuICAgICAgICAgICAgICAgIG5leHRBID0gajtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBkZWNpbWF0ZWRbc2FtcGxlZEluZGV4KytdID0gbWF4QXJlYVBvaW50O1xuICAgICAgICBhID0gbmV4dEE7XG4gICAgfVxuICAgIGRlY2ltYXRlZFtzYW1wbGVkSW5kZXgrK10gPSBkYXRhW2VuZEluZGV4XTtcbiAgICByZXR1cm4gZGVjaW1hdGVkO1xufVxuZnVuY3Rpb24gbWluTWF4RGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoKSB7XG4gICAgbGV0IGF2Z1ggPSAwO1xuICAgIGxldCBjb3VudFggPSAwO1xuICAgIGxldCBpLCBwb2ludCwgeCwgeSwgcHJldlgsIG1pbkluZGV4LCBtYXhJbmRleCwgc3RhcnRJbmRleCwgbWluWSwgbWF4WTtcbiAgICBjb25zdCBkZWNpbWF0ZWQgPSBbXTtcbiAgICBjb25zdCBlbmRJbmRleCA9IHN0YXJ0ICsgY291bnQgLSAxO1xuICAgIGNvbnN0IHhNaW4gPSBkYXRhW3N0YXJ0XS54O1xuICAgIGNvbnN0IHhNYXggPSBkYXRhW2VuZEluZGV4XS54O1xuICAgIGNvbnN0IGR4ID0geE1heCAtIHhNaW47XG4gICAgZm9yKGkgPSBzdGFydDsgaSA8IHN0YXJ0ICsgY291bnQ7ICsraSl7XG4gICAgICAgIHBvaW50ID0gZGF0YVtpXTtcbiAgICAgICAgeCA9IChwb2ludC54IC0geE1pbikgLyBkeCAqIGF2YWlsYWJsZVdpZHRoO1xuICAgICAgICB5ID0gcG9pbnQueTtcbiAgICAgICAgY29uc3QgdHJ1bmNYID0geCB8IDA7XG4gICAgICAgIGlmICh0cnVuY1ggPT09IHByZXZYKSB7XG4gICAgICAgICAgICBpZiAoeSA8IG1pblkpIHtcbiAgICAgICAgICAgICAgICBtaW5ZID0geTtcbiAgICAgICAgICAgICAgICBtaW5JbmRleCA9IGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHkgPiBtYXhZKSB7XG4gICAgICAgICAgICAgICAgbWF4WSA9IHk7XG4gICAgICAgICAgICAgICAgbWF4SW5kZXggPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXZnWCA9IChjb3VudFggKiBhdmdYICsgcG9pbnQueCkgLyArK2NvdW50WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IGkgLSAxO1xuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG1pbkluZGV4KSAmJiAhaXNOdWxsT3JVbmRlZihtYXhJbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnRlcm1lZGlhdGVJbmRleDEgPSBNYXRoLm1pbihtaW5JbmRleCwgbWF4SW5kZXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGludGVybWVkaWF0ZUluZGV4MiA9IE1hdGgubWF4KG1pbkluZGV4LCBtYXhJbmRleCk7XG4gICAgICAgICAgICAgICAgaWYgKGludGVybWVkaWF0ZUluZGV4MSAhPT0gc3RhcnRJbmRleCAmJiBpbnRlcm1lZGlhdGVJbmRleDEgIT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhW2ludGVybWVkaWF0ZUluZGV4MV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBhdmdYXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW50ZXJtZWRpYXRlSW5kZXgyICE9PSBzdGFydEluZGV4ICYmIGludGVybWVkaWF0ZUluZGV4MiAhPT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRhdGFbaW50ZXJtZWRpYXRlSW5kZXgyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IGF2Z1hcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPiAwICYmIGxhc3RJbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgICAgIGRlY2ltYXRlZC5wdXNoKGRhdGFbbGFzdEluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWNpbWF0ZWQucHVzaChwb2ludCk7XG4gICAgICAgICAgICBwcmV2WCA9IHRydW5jWDtcbiAgICAgICAgICAgIGNvdW50WCA9IDA7XG4gICAgICAgICAgICBtaW5ZID0gbWF4WSA9IHk7XG4gICAgICAgICAgICBtaW5JbmRleCA9IG1heEluZGV4ID0gc3RhcnRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRlY2ltYXRlZDtcbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YXNldChkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXQuX2RlY2ltYXRlZCkge1xuICAgICAgICBjb25zdCBkYXRhID0gZGF0YXNldC5fZGF0YTtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuX2RlY2ltYXRlZDtcbiAgICAgICAgZGVsZXRlIGRhdGFzZXQuX2RhdGE7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXRhc2V0LCAnZGF0YScsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCkge1xuICAgIGNoYXJ0LmRhdGEuZGF0YXNldHMuZm9yRWFjaCgoZGF0YXNldCk9PntcbiAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhc2V0KGRhdGFzZXQpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50c1NpbXBsaWZpZWQobWV0YSwgcG9pbnRzKSB7XG4gICAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgY291bnQ7XG4gICAgY29uc3QgeyBpU2NhbGUgIH0gPSBtZXRhO1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSBpU2NhbGUuZ2V0VXNlckJvdW5kcygpO1xuICAgIGlmIChtaW5EZWZpbmVkKSB7XG4gICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoX2xvb2t1cEJ5S2V5KHBvaW50cywgaVNjYWxlLmF4aXMsIG1pbikubG8sIDAsIHBvaW50Q291bnQgLSAxKTtcbiAgICB9XG4gICAgaWYgKG1heERlZmluZWQpIHtcbiAgICAgICAgY291bnQgPSBfbGltaXRWYWx1ZShfbG9va3VwQnlLZXkocG9pbnRzLCBpU2NhbGUuYXhpcywgbWF4KS5oaSArIDEsIHN0YXJ0LCBwb2ludENvdW50KSAtIHN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCxcbiAgICAgICAgY291bnRcbiAgICB9O1xufVxudmFyIHBsdWdpbl9kZWNpbWF0aW9uID0ge1xuICAgIGlkOiAnZGVjaW1hdGlvbicsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxnb3JpdGhtOiAnbWluLW1heCcsXG4gICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfSxcbiAgICBiZWZvcmVFbGVtZW50c1VwZGF0ZTogKGNoYXJ0LCBhcmdzLCBvcHRpb25zKT0+e1xuICAgICAgICBpZiAoIW9wdGlvbnMuZW5hYmxlZCkge1xuICAgICAgICAgICAgY2xlYW5EZWNpbWF0ZWREYXRhKGNoYXJ0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhdmFpbGFibGVXaWR0aCA9IGNoYXJ0LndpZHRoO1xuICAgICAgICBjaGFydC5kYXRhLmRhdGFzZXRzLmZvckVhY2goKGRhdGFzZXQsIGRhdGFzZXRJbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IHsgX2RhdGEgLCBpbmRleEF4aXMgIH0gPSBkYXRhc2V0O1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gX2RhdGEgfHwgZGF0YXNldC5kYXRhO1xuICAgICAgICAgICAgaWYgKHJlc29sdmUoW1xuICAgICAgICAgICAgICAgIGluZGV4QXhpcyxcbiAgICAgICAgICAgICAgICBjaGFydC5vcHRpb25zLmluZGV4QXhpc1xuICAgICAgICAgICAgXSkgPT09ICd5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWV0YS5jb250cm9sbGVyLnN1cHBvcnRzRGVjaW1hdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHhBeGlzID0gY2hhcnQuc2NhbGVzW21ldGEueEF4aXNJRF07XG4gICAgICAgICAgICBpZiAoeEF4aXMudHlwZSAhPT0gJ2xpbmVhcicgJiYgeEF4aXMudHlwZSAhPT0gJ3RpbWUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoYXJ0Lm9wdGlvbnMucGFyc2luZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB7IHN0YXJ0ICwgY291bnQgIH0gPSBnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZChtZXRhLCBkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IHRocmVzaG9sZCA9IG9wdGlvbnMudGhyZXNob2xkIHx8IDQgKiBhdmFpbGFibGVXaWR0aDtcbiAgICAgICAgICAgIGlmIChjb3VudCA8PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICBjbGVhbkRlY2ltYXRlZERhdGFzZXQoZGF0YXNldCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYoX2RhdGEpKSB7XG4gICAgICAgICAgICAgICAgZGF0YXNldC5fZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGRhdGFzZXQuZGF0YTtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YXNldCwgJ2RhdGEnLCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kZWNpbWF0ZWQ7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IGQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBkZWNpbWF0ZWQ7XG4gICAgICAgICAgICBzd2l0Y2gob3B0aW9ucy5hbGdvcml0aG0pe1xuICAgICAgICAgICAgICAgIGNhc2UgJ2x0dGInOlxuICAgICAgICAgICAgICAgICAgICBkZWNpbWF0ZWQgPSBsdHRiRGVjaW1hdGlvbihkYXRhLCBzdGFydCwgY291bnQsIGF2YWlsYWJsZVdpZHRoLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWluLW1heCc6XG4gICAgICAgICAgICAgICAgICAgIGRlY2ltYXRlZCA9IG1pbk1heERlY2ltYXRpb24oZGF0YSwgc3RhcnQsIGNvdW50LCBhdmFpbGFibGVXaWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZGVjaW1hdGlvbiBhbGdvcml0aG0gJyR7b3B0aW9ucy5hbGdvcml0aG19J2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGF0YXNldC5fZGVjaW1hdGVkID0gZGVjaW1hdGVkO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGRlc3Ryb3kgKGNoYXJ0KSB7XG4gICAgICAgIGNsZWFuRGVjaW1hdGVkRGF0YShjaGFydCk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3QgcG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgdHBvaW50cyA9IHRhcmdldC5wb2ludHM7XG4gICAgY29uc3QgcGFydHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBsZXQgeyBzdGFydCAsIGVuZCAgfSA9IHNlZ21lbnQ7XG4gICAgICAgIGVuZCA9IF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpO1xuICAgICAgICBjb25zdCBib3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCBwb2ludHNbc3RhcnRdLCBwb2ludHNbZW5kXSwgc2VnbWVudC5sb29wKTtcbiAgICAgICAgaWYgKCF0YXJnZXQuc2VnbWVudHMpIHtcbiAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHNvdXJjZTogc2VnbWVudCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGJvdW5kcyxcbiAgICAgICAgICAgICAgICBzdGFydDogcG9pbnRzW3N0YXJ0XSxcbiAgICAgICAgICAgICAgICBlbmQ6IHBvaW50c1tlbmRdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldFNlZ21lbnRzID0gX2JvdW5kU2VnbWVudHModGFyZ2V0LCBib3VuZHMpO1xuICAgICAgICBmb3IgKGNvbnN0IHRndCBvZiB0YXJnZXRTZWdtZW50cyl7XG4gICAgICAgICAgICBjb25zdCBzdWJCb3VuZHMgPSBfZ2V0Qm91bmRzKHByb3BlcnR5LCB0cG9pbnRzW3RndC5zdGFydF0sIHRwb2ludHNbdGd0LmVuZF0sIHRndC5sb29wKTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGxTb3VyY2VzID0gX2JvdW5kU2VnbWVudChzZWdtZW50LCBwb2ludHMsIHN1YkJvdW5kcyk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpbGxTb3VyY2Ugb2YgZmlsbFNvdXJjZXMpe1xuICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IGZpbGxTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGd0LFxuICAgICAgICAgICAgICAgICAgICBzdGFydDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Byb3BlcnR5XTogX2dldEVkZ2UoYm91bmRzLCBzdWJCb3VuZHMsICdzdGFydCcsIE1hdGgubWF4KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBlbmQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9wZXJ0eV06IF9nZXRFZGdlKGJvdW5kcywgc3ViQm91bmRzLCAnZW5kJywgTWF0aC5taW4pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHM7XG59XG5mdW5jdGlvbiBfZ2V0Qm91bmRzKHByb3BlcnR5LCBmaXJzdCwgbGFzdCwgbG9vcCkge1xuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ID0gZmlyc3RbcHJvcGVydHldO1xuICAgIGxldCBlbmQgPSBsYXN0W3Byb3BlcnR5XTtcbiAgICBpZiAocHJvcGVydHkgPT09ICdhbmdsZScpIHtcbiAgICAgICAgc3RhcnQgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgICAgICBlbmQgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvcGVydHksXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmRcbiAgICB9O1xufVxuZnVuY3Rpb24gX3BvaW50c0Zyb21TZWdtZW50cyhib3VuZGFyeSwgbGluZSkge1xuICAgIGNvbnN0IHsgeCA9bnVsbCAsIHkgPW51bGwgIH0gPSBib3VuZGFyeSB8fCB7fTtcbiAgICBjb25zdCBsaW5lUG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgbGluZS5zZWdtZW50cy5mb3JFYWNoKCh7IHN0YXJ0ICwgZW5kICB9KT0+e1xuICAgICAgICBlbmQgPSBfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgbGluZVBvaW50cyk7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gbGluZVBvaW50c1tzdGFydF07XG4gICAgICAgIGNvbnN0IGxhc3QgPSBsaW5lUG9pbnRzW2VuZF07XG4gICAgICAgIGlmICh5ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeDogZmlyc3QueCxcbiAgICAgICAgICAgICAgICB5XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBsYXN0LngsXG4gICAgICAgICAgICAgICAgeVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoeCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHgsXG4gICAgICAgICAgICAgICAgeTogZmlyc3QueVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb2ludHMucHVzaCh7XG4gICAgICAgICAgICAgICAgeCxcbiAgICAgICAgICAgICAgICB5OiBsYXN0LnlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBvaW50cztcbn1cbmZ1bmN0aW9uIF9maW5kU2VnbWVudEVuZChzdGFydCwgZW5kLCBwb2ludHMpIHtcbiAgICBmb3IoOyBlbmQgPiBzdGFydDsgZW5kLS0pe1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tlbmRdO1xuICAgICAgICBpZiAoIWlzTmFOKHBvaW50LngpICYmICFpc05hTihwb2ludC55KSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVuZDtcbn1cbmZ1bmN0aW9uIF9nZXRFZGdlKGEsIGIsIHByb3AsIGZuKSB7XG4gICAgaWYgKGEgJiYgYikge1xuICAgICAgICByZXR1cm4gZm4oYVtwcm9wXSwgYltwcm9wXSk7XG4gICAgfVxuICAgIHJldHVybiBhID8gYVtwcm9wXSA6IGIgPyBiW3Byb3BdIDogMDtcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUJvdW5kYXJ5TGluZShib3VuZGFyeSwgbGluZSkge1xuICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICBsZXQgX2xvb3AgPSBmYWxzZTtcbiAgICBpZiAoaXNBcnJheShib3VuZGFyeSkpIHtcbiAgICAgICAgX2xvb3AgPSB0cnVlO1xuICAgICAgICBwb2ludHMgPSBib3VuZGFyeTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludHMgPSBfcG9pbnRzRnJvbVNlZ21lbnRzKGJvdW5kYXJ5LCBsaW5lKTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50cy5sZW5ndGggPyBuZXcgTGluZUVsZW1lbnQoe1xuICAgICAgICBwb2ludHMsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHRlbnNpb246IDBcbiAgICAgICAgfSxcbiAgICAgICAgX2xvb3AsXG4gICAgICAgIF9mdWxsTG9vcDogX2xvb3BcbiAgICB9KSA6IG51bGw7XG59XG5mdW5jdGlvbiBfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkge1xuICAgIHJldHVybiBzb3VyY2UgJiYgc291cmNlLmZpbGwgIT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZVRhcmdldChzb3VyY2VzLCBpbmRleCwgcHJvcGFnYXRlKSB7XG4gICAgY29uc3Qgc291cmNlID0gc291cmNlc1tpbmRleF07XG4gICAgbGV0IGZpbGwgPSBzb3VyY2UuZmlsbDtcbiAgICBjb25zdCB2aXNpdGVkID0gW1xuICAgICAgICBpbmRleFxuICAgIF07XG4gICAgbGV0IHRhcmdldDtcbiAgICBpZiAoIXByb3BhZ2F0ZSkge1xuICAgICAgICByZXR1cm4gZmlsbDtcbiAgICB9XG4gICAgd2hpbGUoZmlsbCAhPT0gZmFsc2UgJiYgdmlzaXRlZC5pbmRleE9mKGZpbGwpID09PSAtMSl7XG4gICAgICAgIGlmICghaXNOdW1iZXJGaW5pdGUoZmlsbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmaWxsO1xuICAgICAgICB9XG4gICAgICAgIHRhcmdldCA9IHNvdXJjZXNbZmlsbF07XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhcmdldC52aXNpYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmlsbDtcbiAgICAgICAgfVxuICAgICAgICB2aXNpdGVkLnB1c2goZmlsbCk7XG4gICAgICAgIGZpbGwgPSB0YXJnZXQuZmlsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIGZ1bmN0aW9uIF9kZWNvZGVGaWxsKGxpbmUsIGluZGV4LCBjb3VudCkge1xuICAgICBjb25zdCBmaWxsID0gcGFyc2VGaWxsT3B0aW9uKGxpbmUpO1xuICAgIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICByZXR1cm4gaXNOYU4oZmlsbC52YWx1ZSkgPyBmYWxzZSA6IGZpbGw7XG4gICAgfVxuICAgIGxldCB0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwpO1xuICAgIGlmIChpc051bWJlckZpbml0ZSh0YXJnZXQpICYmIE1hdGguZmxvb3IodGFyZ2V0KSA9PT0gdGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVUYXJnZXRJbmRleChmaWxsWzBdLCBpbmRleCwgdGFyZ2V0LCBjb3VudCk7XG4gICAgfVxuICAgIHJldHVybiBbXG4gICAgICAgICdvcmlnaW4nLFxuICAgICAgICAnc3RhcnQnLFxuICAgICAgICAnZW5kJyxcbiAgICAgICAgJ3N0YWNrJyxcbiAgICAgICAgJ3NoYXBlJ1xuICAgIF0uaW5kZXhPZihmaWxsKSA+PSAwICYmIGZpbGw7XG59XG5mdW5jdGlvbiBkZWNvZGVUYXJnZXRJbmRleChmaXJzdENoLCBpbmRleCwgdGFyZ2V0LCBjb3VudCkge1xuICAgIGlmIChmaXJzdENoID09PSAnLScgfHwgZmlyc3RDaCA9PT0gJysnKSB7XG4gICAgICAgIHRhcmdldCA9IGluZGV4ICsgdGFyZ2V0O1xuICAgIH1cbiAgICBpZiAodGFyZ2V0ID09PSBpbmRleCB8fCB0YXJnZXQgPCAwIHx8IHRhcmdldCA+PSBjb3VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4gZnVuY3Rpb24gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKSB7XG4gICAgbGV0IHBpeGVsID0gbnVsbDtcbiAgICBpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuICAgICAgICBwaXhlbCA9IHNjYWxlLmJvdHRvbTtcbiAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdlbmQnKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUudG9wO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoZmlsbCkpIHtcbiAgICAgICAgcGl4ZWwgPSBzY2FsZS5nZXRQaXhlbEZvclZhbHVlKGZpbGwudmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoc2NhbGUuZ2V0QmFzZVBpeGVsKSB7XG4gICAgICAgIHBpeGVsID0gc2NhbGUuZ2V0QmFzZVBpeGVsKCk7XG4gICAgfVxuICAgIHJldHVybiBwaXhlbDtcbn1cbiBmdW5jdGlvbiBfZ2V0VGFyZ2V0VmFsdWUoZmlsbCwgc2NhbGUsIHN0YXJ0VmFsdWUpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgaWYgKGZpbGwgPT09ICdzdGFydCcpIHtcbiAgICAgICAgdmFsdWUgPSBzdGFydFZhbHVlO1xuICAgIH0gZWxzZSBpZiAoZmlsbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgdmFsdWUgPSBzY2FsZS5vcHRpb25zLnJldmVyc2UgPyBzY2FsZS5taW4gOiBzY2FsZS5tYXg7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdChmaWxsKSkge1xuICAgICAgICB2YWx1ZSA9IGZpbGwudmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBzY2FsZS5nZXRCYXNlVmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuIGZ1bmN0aW9uIHBhcnNlRmlsbE9wdGlvbihsaW5lKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGxpbmUub3B0aW9ucztcbiAgICBjb25zdCBmaWxsT3B0aW9uID0gb3B0aW9ucy5maWxsO1xuICAgIGxldCBmaWxsID0gdmFsdWVPckRlZmF1bHQoZmlsbE9wdGlvbiAmJiBmaWxsT3B0aW9uLnRhcmdldCwgZmlsbE9wdGlvbik7XG4gICAgaWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmaWxsID0gISFvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICB9XG4gICAgaWYgKGZpbGwgPT09IGZhbHNlIHx8IGZpbGwgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gJ29yaWdpbic7XG4gICAgfVxuICAgIHJldHVybiBmaWxsO1xufVxuXG5mdW5jdGlvbiBfYnVpbGRTdGFja0xpbmUoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSAsIGluZGV4ICwgbGluZSAgfSA9IHNvdXJjZTtcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBjb25zdCBzZWdtZW50cyA9IGxpbmUuc2VnbWVudHM7XG4gICAgY29uc3Qgc291cmNlUG9pbnRzID0gbGluZS5wb2ludHM7XG4gICAgY29uc3QgbGluZXNCZWxvdyA9IGdldExpbmVzQmVsb3coc2NhbGUsIGluZGV4KTtcbiAgICBsaW5lc0JlbG93LnB1c2goX2NyZWF0ZUJvdW5kYXJ5TGluZSh7XG4gICAgICAgIHg6IG51bGwsXG4gICAgICAgIHk6IHNjYWxlLmJvdHRvbVxuICAgIH0sIGxpbmUpKTtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspe1xuICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgIGZvcihsZXQgaiA9IHNlZ21lbnQuc3RhcnQ7IGogPD0gc2VnbWVudC5lbmQ7IGorKyl7XG4gICAgICAgICAgICBhZGRQb2ludHNCZWxvdyhwb2ludHMsIHNvdXJjZVBvaW50c1tqXSwgbGluZXNCZWxvdyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBMaW5lRWxlbWVudCh7XG4gICAgICAgIHBvaW50cyxcbiAgICAgICAgb3B0aW9uczoge31cbiAgICB9KTtcbn1cbiBmdW5jdGlvbiBnZXRMaW5lc0JlbG93KHNjYWxlLCBpbmRleCkge1xuICAgIGNvbnN0IGJlbG93ID0gW107XG4gICAgY29uc3QgbWV0YXMgPSBzY2FsZS5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygnbGluZScpO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtZXRhcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IG1ldGEgPSBtZXRhc1tpXTtcbiAgICAgICAgaWYgKG1ldGEuaW5kZXggPT09IGluZGV4KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW1ldGEuaGlkZGVuKSB7XG4gICAgICAgICAgICBiZWxvdy51bnNoaWZ0KG1ldGEuZGF0YXNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJlbG93O1xufVxuIGZ1bmN0aW9uIGFkZFBvaW50c0JlbG93KHBvaW50cywgc291cmNlUG9pbnQsIGxpbmVzQmVsb3cpIHtcbiAgICBjb25zdCBwb3N0cG9uZWQgPSBbXTtcbiAgICBmb3IobGV0IGogPSAwOyBqIDwgbGluZXNCZWxvdy5sZW5ndGg7IGorKyl7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc0JlbG93W2pdO1xuICAgICAgICBjb25zdCB7IGZpcnN0ICwgbGFzdCAsIHBvaW50ICB9ID0gZmluZFBvaW50KGxpbmUsIHNvdXJjZVBvaW50LCAneCcpO1xuICAgICAgICBpZiAoIXBvaW50IHx8IGZpcnN0ICYmIGxhc3QpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgcG9zdHBvbmVkLnVuc2hpZnQocG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgaWYgKCFsYXN0KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcG9pbnRzLnB1c2goLi4ucG9zdHBvbmVkKTtcbn1cbiBmdW5jdGlvbiBmaW5kUG9pbnQobGluZSwgc291cmNlUG9pbnQsIHByb3BlcnR5KSB7XG4gICAgY29uc3QgcG9pbnQgPSBsaW5lLmludGVycG9sYXRlKHNvdXJjZVBvaW50LCBwcm9wZXJ0eSk7XG4gICAgaWYgKCFwb2ludCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGNvbnN0IHBvaW50VmFsdWUgPSBwb2ludFtwcm9wZXJ0eV07XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGNvbnN0IGxpbmVQb2ludHMgPSBsaW5lLnBvaW50cztcbiAgICBsZXQgZmlyc3QgPSBmYWxzZTtcbiAgICBsZXQgbGFzdCA9IGZhbHNlO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICAgICAgY29uc3QgZmlyc3RWYWx1ZSA9IGxpbmVQb2ludHNbc2VnbWVudC5zdGFydF1bcHJvcGVydHldO1xuICAgICAgICBjb25zdCBsYXN0VmFsdWUgPSBsaW5lUG9pbnRzW3NlZ21lbnQuZW5kXVtwcm9wZXJ0eV07XG4gICAgICAgIGlmIChfaXNCZXR3ZWVuKHBvaW50VmFsdWUsIGZpcnN0VmFsdWUsIGxhc3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gcG9pbnRWYWx1ZSA9PT0gZmlyc3RWYWx1ZTtcbiAgICAgICAgICAgIGxhc3QgPSBwb2ludFZhbHVlID09PSBsYXN0VmFsdWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBmaXJzdCxcbiAgICAgICAgbGFzdCxcbiAgICAgICAgcG9pbnRcbiAgICB9O1xufVxuXG5jbGFzcyBzaW1wbGVBcmMge1xuICAgIGNvbnN0cnVjdG9yKG9wdHMpe1xuICAgICAgICB0aGlzLnggPSBvcHRzLng7XG4gICAgICAgIHRoaXMueSA9IG9wdHMueTtcbiAgICAgICAgdGhpcy5yYWRpdXMgPSBvcHRzLnJhZGl1cztcbiAgICB9XG4gICAgcGF0aFNlZ21lbnQoY3R4LCBib3VuZHMsIG9wdHMpIHtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHJhZGl1cyAgfSA9IHRoaXM7XG4gICAgICAgIGJvdW5kcyA9IGJvdW5kcyB8fCB7XG4gICAgICAgICAgICBzdGFydDogMCxcbiAgICAgICAgICAgIGVuZDogVEFVXG4gICAgICAgIH07XG4gICAgICAgIGN0eC5hcmMoeCwgeSwgcmFkaXVzLCBib3VuZHMuZW5kLCBib3VuZHMuc3RhcnQsIHRydWUpO1xuICAgICAgICByZXR1cm4gIW9wdHMuYm91bmRzO1xuICAgIH1cbiAgICBpbnRlcnBvbGF0ZShwb2ludCkge1xuICAgICAgICBjb25zdCB7IHggLCB5ICwgcmFkaXVzICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYW5nbGUgPSBwb2ludC5hbmdsZTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IHggKyBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICB5OiB5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzLFxuICAgICAgICAgICAgYW5nbGVcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9nZXRUYXJnZXQoc291cmNlKSB7XG4gICAgY29uc3QgeyBjaGFydCAsIGZpbGwgLCBsaW5lICB9ID0gc291cmNlO1xuICAgIGlmIChpc051bWJlckZpbml0ZShmaWxsKSkge1xuICAgICAgICByZXR1cm4gZ2V0TGluZUJ5SW5kZXgoY2hhcnQsIGZpbGwpO1xuICAgIH1cbiAgICBpZiAoZmlsbCA9PT0gJ3N0YWNrJykge1xuICAgICAgICByZXR1cm4gX2J1aWxkU3RhY2tMaW5lKHNvdXJjZSk7XG4gICAgfVxuICAgIGlmIChmaWxsID09PSAnc2hhcGUnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBib3VuZGFyeSA9IGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpO1xuICAgIGlmIChib3VuZGFyeSBpbnN0YW5jZW9mIHNpbXBsZUFyYykge1xuICAgICAgICByZXR1cm4gYm91bmRhcnk7XG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlQm91bmRhcnlMaW5lKGJvdW5kYXJ5LCBsaW5lKTtcbn1cbiBmdW5jdGlvbiBnZXRMaW5lQnlJbmRleChjaGFydCwgaW5kZXgpIHtcbiAgICBjb25zdCBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuICAgIGNvbnN0IHZpc2libGUgPSBtZXRhICYmIGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaW5kZXgpO1xuICAgIHJldHVybiB2aXNpYmxlID8gbWV0YS5kYXRhc2V0IDogbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpIHtcbiAgICBjb25zdCBzY2FsZSA9IHNvdXJjZS5zY2FsZSB8fCB7fTtcbiAgICBpZiAoc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeShzb3VyY2UpO1xuICAgIH1cbiAgICByZXR1cm4gY29tcHV0ZUxpbmVhckJvdW5kYXJ5KHNvdXJjZSk7XG59XG5mdW5jdGlvbiBjb21wdXRlTGluZWFyQm91bmRhcnkoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSA9e30gLCBmaWxsICB9ID0gc291cmNlO1xuICAgIGNvbnN0IHBpeGVsID0gX2dldFRhcmdldFBpeGVsKGZpbGwsIHNjYWxlKTtcbiAgICBpZiAoaXNOdW1iZXJGaW5pdGUocGl4ZWwpKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSBzY2FsZS5pc0hvcml6b250YWwoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGhvcml6b250YWwgPyBwaXhlbCA6IG51bGwsXG4gICAgICAgICAgICB5OiBob3Jpem9udGFsID8gbnVsbCA6IHBpeGVsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gY29tcHV0ZUNpcmN1bGFyQm91bmRhcnkoc291cmNlKSB7XG4gICAgY29uc3QgeyBzY2FsZSAsIGZpbGwgIH0gPSBzb3VyY2U7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnM7XG4gICAgY29uc3QgbGVuZ3RoID0gc2NhbGUuZ2V0TGFiZWxzKCkubGVuZ3RoO1xuICAgIGNvbnN0IHN0YXJ0ID0gb3B0aW9ucy5yZXZlcnNlID8gc2NhbGUubWF4IDogc2NhbGUubWluO1xuICAgIGNvbnN0IHZhbHVlID0gX2dldFRhcmdldFZhbHVlKGZpbGwsIHNjYWxlLCBzdGFydCk7XG4gICAgY29uc3QgdGFyZ2V0ID0gW107XG4gICAgaWYgKG9wdGlvbnMuZ3JpZC5jaXJjdWxhcikge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCwgc3RhcnQpO1xuICAgICAgICByZXR1cm4gbmV3IHNpbXBsZUFyYyh7XG4gICAgICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgICAgIHk6IGNlbnRlci55LFxuICAgICAgICAgICAgcmFkaXVzOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZSh2YWx1ZSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgIHRhcmdldC5wdXNoKHNjYWxlLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpLCB2YWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfZHJhd2ZpbGwoY3R4LCBzb3VyY2UsIGFyZWEpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBfZ2V0VGFyZ2V0KHNvdXJjZSk7XG4gICAgY29uc3QgeyBsaW5lICwgc2NhbGUgLCBheGlzICB9ID0gc291cmNlO1xuICAgIGNvbnN0IGxpbmVPcHRzID0gbGluZS5vcHRpb25zO1xuICAgIGNvbnN0IGZpbGxPcHRpb24gPSBsaW5lT3B0cy5maWxsO1xuICAgIGNvbnN0IGNvbG9yID0gbGluZU9wdHMuYmFja2dyb3VuZENvbG9yO1xuICAgIGNvbnN0IHsgYWJvdmUgPWNvbG9yICwgYmVsb3cgPWNvbG9yICB9ID0gZmlsbE9wdGlvbiB8fCB7fTtcbiAgICBpZiAodGFyZ2V0ICYmIGxpbmUucG9pbnRzLmxlbmd0aCkge1xuICAgICAgICBjbGlwQXJlYShjdHgsIGFyZWEpO1xuICAgICAgICBkb0ZpbGwoY3R4LCB7XG4gICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgYWJvdmUsXG4gICAgICAgICAgICBiZWxvdyxcbiAgICAgICAgICAgIGFyZWEsXG4gICAgICAgICAgICBzY2FsZSxcbiAgICAgICAgICAgIGF4aXNcbiAgICAgICAgfSk7XG4gICAgICAgIHVuY2xpcEFyZWEoY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBkb0ZpbGwoY3R4LCBjZmcpIHtcbiAgICBjb25zdCB7IGxpbmUgLCB0YXJnZXQgLCBhYm92ZSAsIGJlbG93ICwgYXJlYSAsIHNjYWxlICB9ID0gY2ZnO1xuICAgIGNvbnN0IHByb3BlcnR5ID0gbGluZS5fbG9vcCA/ICdhbmdsZScgOiBjZmcuYXhpcztcbiAgICBjdHguc2F2ZSgpO1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ3gnICYmIGJlbG93ICE9PSBhYm92ZSkge1xuICAgICAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEudG9wKTtcbiAgICAgICAgZmlsbChjdHgsIHtcbiAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICBjb2xvcjogYWJvdmUsXG4gICAgICAgICAgICBzY2FsZSxcbiAgICAgICAgICAgIHByb3BlcnR5XG4gICAgICAgIH0pO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGFyZWEuYm90dG9tKTtcbiAgICB9XG4gICAgZmlsbChjdHgsIHtcbiAgICAgICAgbGluZSxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBjb2xvcjogYmVsb3csXG4gICAgICAgIHNjYWxlLFxuICAgICAgICBwcm9wZXJ0eVxuICAgIH0pO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjbGlwVmVydGljYWwoY3R4LCB0YXJnZXQsIGNsaXBZKSB7XG4gICAgY29uc3QgeyBzZWdtZW50cyAsIHBvaW50cyAgfSA9IHRhcmdldDtcbiAgICBsZXQgZmlyc3QgPSB0cnVlO1xuICAgIGxldCBsaW5lTG9vcCA9IGZhbHNlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2Ygc2VnbWVudHMpe1xuICAgICAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gc2VnbWVudDtcbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IHBvaW50c1tzdGFydF07XG4gICAgICAgIGNvbnN0IGxhc3RQb2ludCA9IHBvaW50c1tfZmluZFNlZ21lbnRFbmQoc3RhcnQsIGVuZCwgcG9pbnRzKV07XG4gICAgICAgIGlmIChmaXJzdCkge1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyhmaXJzdFBvaW50LngsIGZpcnN0UG9pbnQueSk7XG4gICAgICAgICAgICBmaXJzdCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmxpbmVUbyhmaXJzdFBvaW50LngsIGNsaXBZKTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oZmlyc3RQb2ludC54LCBmaXJzdFBvaW50LnkpO1xuICAgICAgICB9XG4gICAgICAgIGxpbmVMb29wID0gISF0YXJnZXQucGF0aFNlZ21lbnQoY3R4LCBzZWdtZW50LCB7XG4gICAgICAgICAgICBtb3ZlOiBsaW5lTG9vcFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHgubGluZVRvKGxhc3RQb2ludC54LCBjbGlwWSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3R4LmxpbmVUbyh0YXJnZXQuZmlyc3QoKS54LCBjbGlwWSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5jbGlwKCk7XG59XG5mdW5jdGlvbiBmaWxsKGN0eCwgY2ZnKSB7XG4gICAgY29uc3QgeyBsaW5lICwgdGFyZ2V0ICwgcHJvcGVydHkgLCBjb2xvciAsIHNjYWxlICB9ID0gY2ZnO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gX3NlZ21lbnRzKGxpbmUsIHRhcmdldCwgcHJvcGVydHkpO1xuICAgIGZvciAoY29uc3QgeyBzb3VyY2U6IHNyYyAsIHRhcmdldDogdGd0ICwgc3RhcnQgLCBlbmQgIH0gb2Ygc2VnbWVudHMpe1xuICAgICAgICBjb25zdCB7IHN0eWxlOiB7IGJhY2tncm91bmRDb2xvciA9Y29sb3IgIH0gPSB7fSAgfSA9IHNyYztcbiAgICAgICAgY29uc3Qgbm90U2hhcGUgPSB0YXJnZXQgIT09IHRydWU7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgbm90U2hhcGUgJiYgX2dldEJvdW5kcyhwcm9wZXJ0eSwgc3RhcnQsIGVuZCkpO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnN0IGxpbmVMb29wID0gISFsaW5lLnBhdGhTZWdtZW50KGN0eCwgc3JjKTtcbiAgICAgICAgbGV0IGxvb3A7XG4gICAgICAgIGlmIChub3RTaGFwZSkge1xuICAgICAgICAgICAgaWYgKGxpbmVMb29wKSB7XG4gICAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWRMaW5lVG8oY3R4LCB0YXJnZXQsIGVuZCwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0TG9vcCA9ICEhdGFyZ2V0LnBhdGhTZWdtZW50KGN0eCwgdGd0LCB7XG4gICAgICAgICAgICAgICAgbW92ZTogbGluZUxvb3AsXG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsb29wID0gbGluZUxvb3AgJiYgdGFyZ2V0TG9vcDtcbiAgICAgICAgICAgIGlmICghbG9vcCkge1xuICAgICAgICAgICAgICAgIGludGVycG9sYXRlZExpbmVUbyhjdHgsIHRhcmdldCwgc3RhcnQsIHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKGxvb3AgPyAnZXZlbm9kZCcgOiAnbm9uemVybycpO1xuICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsaXBCb3VuZHMoY3R4LCBzY2FsZSwgYm91bmRzKSB7XG4gICAgY29uc3QgeyB0b3AgLCBib3R0b20gIH0gPSBzY2FsZS5jaGFydC5jaGFydEFyZWE7XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0ICwgZW5kICB9ID0gYm91bmRzIHx8IHt9O1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ3gnKSB7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LnJlY3Qoc3RhcnQsIHRvcCwgZW5kIC0gc3RhcnQsIGJvdHRvbSAtIHRvcCk7XG4gICAgICAgIGN0eC5jbGlwKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaW50ZXJwb2xhdGVkTGluZVRvKGN0eCwgdGFyZ2V0LCBwb2ludCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCBpbnRlcnBvbGF0ZWRQb2ludCA9IHRhcmdldC5pbnRlcnBvbGF0ZShwb2ludCwgcHJvcGVydHkpO1xuICAgIGlmIChpbnRlcnBvbGF0ZWRQb2ludCkge1xuICAgICAgICBjdHgubGluZVRvKGludGVycG9sYXRlZFBvaW50LngsIGludGVycG9sYXRlZFBvaW50LnkpO1xuICAgIH1cbn1cblxudmFyIGluZGV4ID0ge1xuICAgIGlkOiAnZmlsbGVyJyxcbiAgICBhZnRlckRhdGFzZXRzVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgY291bnQgPSAoY2hhcnQuZGF0YS5kYXRhc2V0cyB8fCBbXSkubGVuZ3RoO1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gW107XG4gICAgICAgIGxldCBtZXRhLCBpLCBsaW5lLCBzb3VyY2U7XG4gICAgICAgIGZvcihpID0gMDsgaSA8IGNvdW50OyArK2kpe1xuICAgICAgICAgICAgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuICAgICAgICAgICAgbGluZSA9IG1ldGEuZGF0YXNldDtcbiAgICAgICAgICAgIHNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgICBpZiAobGluZSAmJiBsaW5lLm9wdGlvbnMgJiYgbGluZSBpbnN0YW5jZW9mIExpbmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgc291cmNlID0ge1xuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGkpLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogX2RlY29kZUZpbGwobGluZSwgaSwgY291bnQpLFxuICAgICAgICAgICAgICAgICAgICBjaGFydCxcbiAgICAgICAgICAgICAgICAgICAgYXhpczogbWV0YS5jb250cm9sbGVyLm9wdGlvbnMuaW5kZXhBeGlzLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogbWV0YS52U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWV0YS4kZmlsbGVyID0gc291cmNlO1xuICAgICAgICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgY291bnQ7ICsraSl7XG4gICAgICAgICAgICBzb3VyY2UgPSBzb3VyY2VzW2ldO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UgfHwgc291cmNlLmZpbGwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzb3VyY2UuZmlsbCA9IF9yZXNvbHZlVGFyZ2V0KHNvdXJjZXMsIGksIG9wdGlvbnMucHJvcGFnYXRlKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYmVmb3JlRHJhdyAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGRyYXcgPSBvcHRpb25zLmRyYXdUaW1lID09PSAnYmVmb3JlRHJhdyc7XG4gICAgICAgIGNvbnN0IG1ldGFzZXRzID0gY2hhcnQuZ2V0U29ydGVkVmlzaWJsZURhdGFzZXRNZXRhcygpO1xuICAgICAgICBjb25zdCBhcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuICAgICAgICBmb3IobGV0IGkgPSBtZXRhc2V0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSl7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtZXRhc2V0c1tpXS4kZmlsbGVyO1xuICAgICAgICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZS5saW5lLnVwZGF0ZUNvbnRyb2xQb2ludHMoYXJlYSwgc291cmNlLmF4aXMpO1xuICAgICAgICAgICAgaWYgKGRyYXcgJiYgc291cmNlLmZpbGwpIHtcbiAgICAgICAgICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGFyZWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBiZWZvcmVEYXRhc2V0c0RyYXcgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXRzRHJhdycpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtZXRhc2V0cyA9IGNoYXJ0LmdldFNvcnRlZFZpc2libGVEYXRhc2V0TWV0YXMoKTtcbiAgICAgICAgZm9yKGxldCBpID0gbWV0YXNldHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpe1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gbWV0YXNldHNbaV0uJGZpbGxlcjtcbiAgICAgICAgICAgIGlmIChfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBfZHJhd2ZpbGwoY2hhcnQuY3R4LCBzb3VyY2UsIGNoYXJ0LmNoYXJ0QXJlYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURhdGFzZXREcmF3IChjaGFydCwgYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBhcmdzLm1ldGEuJGZpbGxlcjtcbiAgICAgICAgaWYgKCFfc2hvdWxkQXBwbHlGaWxsKHNvdXJjZSkgfHwgb3B0aW9ucy5kcmF3VGltZSAhPT0gJ2JlZm9yZURhdGFzZXREcmF3Jykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIF9kcmF3ZmlsbChjaGFydC5jdHgsIHNvdXJjZSwgY2hhcnQuY2hhcnRBcmVhKTtcbiAgICB9LFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIHByb3BhZ2F0ZTogdHJ1ZSxcbiAgICAgICAgZHJhd1RpbWU6ICdiZWZvcmVEYXRhc2V0RHJhdydcbiAgICB9XG59O1xuXG5jb25zdCBnZXRCb3hTaXplID0gKGxhYmVsT3B0cywgZm9udFNpemUpPT57XG4gICAgbGV0IHsgYm94SGVpZ2h0ID1mb250U2l6ZSAsIGJveFdpZHRoID1mb250U2l6ZSAgfSA9IGxhYmVsT3B0cztcbiAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgYm94SGVpZ2h0ID0gTWF0aC5taW4oYm94SGVpZ2h0LCBmb250U2l6ZSk7XG4gICAgICAgIGJveFdpZHRoID0gbGFiZWxPcHRzLnBvaW50U3R5bGVXaWR0aCB8fCBNYXRoLm1pbihib3hXaWR0aCwgZm9udFNpemUpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBib3hXaWR0aCxcbiAgICAgICAgYm94SGVpZ2h0LFxuICAgICAgICBpdGVtSGVpZ2h0OiBNYXRoLm1heChmb250U2l6ZSwgYm94SGVpZ2h0KVxuICAgIH07XG59O1xuY29uc3QgaXRlbXNFcXVhbCA9IChhLCBiKT0+YSAhPT0gbnVsbCAmJiBiICE9PSBudWxsICYmIGEuZGF0YXNldEluZGV4ID09PSBiLmRhdGFzZXRJbmRleCAmJiBhLmluZGV4ID09PSBiLmluZGV4O1xuY2xhc3MgTGVnZW5kIGV4dGVuZHMgRWxlbWVudCB7XG4gY29uc3RydWN0b3IoY29uZmlnKXtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5fYWRkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuIHRoaXMuX2hvdmVyZWRJdGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuY3R4ID0gY29uZmlnLmN0eDtcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb2x1bW5TaXplcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5saW5lV2lkdGhzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50b3AgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYm90dG9tID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxlZnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndpZHRoID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9tYXJnaW5zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLndlaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5mdWxsU2l6ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgdXBkYXRlKG1heFdpZHRoLCBtYXhIZWlnaHQsIG1hcmdpbnMpIHtcbiAgICAgICAgdGhpcy5tYXhXaWR0aCA9IG1heFdpZHRoO1xuICAgICAgICB0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcbiAgICAgICAgdGhpcy5fbWFyZ2lucyA9IG1hcmdpbnM7XG4gICAgICAgIHRoaXMuc2V0RGltZW5zaW9ucygpO1xuICAgICAgICB0aGlzLmJ1aWxkTGFiZWxzKCk7XG4gICAgICAgIHRoaXMuZml0KCk7XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgIHRoaXMubGVmdCA9IHRoaXMuX21hcmdpbnMubGVmdDtcbiAgICAgICAgICAgIHRoaXMucmlnaHQgPSB0aGlzLndpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudG9wID0gdGhpcy5fbWFyZ2lucy50b3A7XG4gICAgICAgICAgICB0aGlzLmJvdHRvbSA9IHRoaXMuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkTGFiZWxzKCkge1xuICAgICAgICBjb25zdCBsYWJlbE9wdHMgPSB0aGlzLm9wdGlvbnMubGFiZWxzIHx8IHt9O1xuICAgICAgICBsZXQgbGVnZW5kSXRlbXMgPSBjYWxsYmFjayhsYWJlbE9wdHMuZ2VuZXJhdGVMYWJlbHMsIFtcbiAgICAgICAgICAgIHRoaXMuY2hhcnRcbiAgICAgICAgXSwgdGhpcykgfHwgW107XG4gICAgICAgIGlmIChsYWJlbE9wdHMuZmlsdGVyKSB7XG4gICAgICAgICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcigoaXRlbSk9PmxhYmVsT3B0cy5maWx0ZXIoaXRlbSwgdGhpcy5jaGFydC5kYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxhYmVsT3B0cy5zb3J0KSB7XG4gICAgICAgICAgICBsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLnNvcnQoKGEsIGIpPT5sYWJlbE9wdHMuc29ydChhLCBiLCB0aGlzLmNoYXJ0LmRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW1zLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXM7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zICwgY3R4ICB9ID0gdGhpcztcbiAgICAgICAgaWYgKCFvcHRpb25zLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFiZWxPcHRzID0gb3B0aW9ucy5sYWJlbHM7XG4gICAgICAgIGNvbnN0IGxhYmVsRm9udCA9IHRvRm9udChsYWJlbE9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IGZvbnRTaXplID0gbGFiZWxGb250LnNpemU7XG4gICAgICAgIGNvbnN0IHRpdGxlSGVpZ2h0ID0gdGhpcy5fY29tcHV0ZVRpdGxlSGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHsgYm94V2lkdGggLCBpdGVtSGVpZ2h0ICB9ID0gZ2V0Qm94U2l6ZShsYWJlbE9wdHMsIGZvbnRTaXplKTtcbiAgICAgICAgbGV0IHdpZHRoLCBoZWlnaHQ7XG4gICAgICAgIGN0eC5mb250ID0gbGFiZWxGb250LnN0cmluZztcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5tYXhXaWR0aDtcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkgKyAxMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMubWF4SGVpZ2h0O1xuICAgICAgICAgICAgd2lkdGggPSB0aGlzLl9maXRDb2xzKHRpdGxlSGVpZ2h0LCBsYWJlbEZvbnQsIGJveFdpZHRoLCBpdGVtSGVpZ2h0KSArIDEwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSBNYXRoLm1pbih3aWR0aCwgb3B0aW9ucy5tYXhXaWR0aCB8fCB0aGlzLm1heFdpZHRoKTtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBNYXRoLm1pbihoZWlnaHQsIG9wdGlvbnMubWF4SGVpZ2h0IHx8IHRoaXMubWF4SGVpZ2h0KTtcbiAgICB9XG4gX2ZpdFJvd3ModGl0bGVIZWlnaHQsIGZvbnRTaXplLCBib3hXaWR0aCwgaXRlbUhlaWdodCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG1heFdpZHRoICwgb3B0aW9uczogeyBsYWJlbHM6IHsgcGFkZGluZyAgfSAgfSAgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGhpdGJveGVzID0gdGhpcy5sZWdlbmRIaXRCb3hlcyA9IFtdO1xuICAgICAgICBjb25zdCBsaW5lV2lkdGhzID0gdGhpcy5saW5lV2lkdGhzID0gW1xuICAgICAgICAgICAgMFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIGxldCB0b3RhbEhlaWdodCA9IHRpdGxlSGVpZ2h0O1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGxldCByb3cgPSAtMTtcbiAgICAgICAgbGV0IHRvcCA9IC1saW5lSGVpZ2h0O1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLmZvckVhY2goKGxlZ2VuZEl0ZW0sIGkpPT57XG4gICAgICAgICAgICBjb25zdCBpdGVtV2lkdGggPSBib3hXaWR0aCArIGZvbnRTaXplIC8gMiArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICsgaXRlbVdpZHRoICsgMiAqIHBhZGRpbmcgPiBtYXhXaWR0aCkge1xuICAgICAgICAgICAgICAgIHRvdGFsSGVpZ2h0ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIChpID4gMCA/IDAgOiAxKV0gPSAwO1xuICAgICAgICAgICAgICAgIHRvcCArPSBsaW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgIHJvdysrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGl0Ym94ZXNbaV0gPSB7XG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgIHdpZHRoOiBpdGVtV2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBpdGVtSGVpZ2h0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IGl0ZW1XaWR0aCArIHBhZGRpbmc7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG90YWxIZWlnaHQ7XG4gICAgfVxuICAgIF9maXRDb2xzKHRpdGxlSGVpZ2h0LCBsYWJlbEZvbnQsIGJveFdpZHRoLCBfaXRlbUhlaWdodCkge1xuICAgICAgICBjb25zdCB7IGN0eCAsIG1heEhlaWdodCAsIG9wdGlvbnM6IHsgbGFiZWxzOiB7IHBhZGRpbmcgIH0gIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBoaXRib3hlcyA9IHRoaXMubGVnZW5kSGl0Qm94ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgY29sdW1uU2l6ZXMgPSB0aGlzLmNvbHVtblNpemVzID0gW107XG4gICAgICAgIGNvbnN0IGhlaWdodExpbWl0ID0gbWF4SGVpZ2h0IC0gdGl0bGVIZWlnaHQ7XG4gICAgICAgIGxldCB0b3RhbFdpZHRoID0gcGFkZGluZztcbiAgICAgICAgbGV0IGN1cnJlbnRDb2xXaWR0aCA9IDA7XG4gICAgICAgIGxldCBjdXJyZW50Q29sSGVpZ2h0ID0gMDtcbiAgICAgICAgbGV0IGxlZnQgPSAwO1xuICAgICAgICBsZXQgY29sID0gMDtcbiAgICAgICAgdGhpcy5sZWdlbmRJdGVtcy5mb3JFYWNoKChsZWdlbmRJdGVtLCBpKT0+e1xuICAgICAgICAgICAgY29uc3QgeyBpdGVtV2lkdGggLCBpdGVtSGVpZ2h0ICB9ID0gY2FsY3VsYXRlSXRlbVNpemUoYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4LCBsZWdlbmRJdGVtLCBfaXRlbUhlaWdodCk7XG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgY3VycmVudENvbEhlaWdodCArIGl0ZW1IZWlnaHQgKyAyICogcGFkZGluZyA+IGhlaWdodExpbWl0KSB7XG4gICAgICAgICAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGNvbHVtblNpemVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogY3VycmVudENvbFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGN1cnJlbnRDb2xIZWlnaHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBsZWZ0ICs9IGN1cnJlbnRDb2xXaWR0aCArIHBhZGRpbmc7XG4gICAgICAgICAgICAgICAgY29sKys7XG4gICAgICAgICAgICAgICAgY3VycmVudENvbFdpZHRoID0gY3VycmVudENvbEhlaWdodCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaXRib3hlc1tpXSA9IHtcbiAgICAgICAgICAgICAgICBsZWZ0LFxuICAgICAgICAgICAgICAgIHRvcDogY3VycmVudENvbEhlaWdodCxcbiAgICAgICAgICAgICAgICBjb2wsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGl0ZW1XaWR0aCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGl0ZW1IZWlnaHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjdXJyZW50Q29sV2lkdGggPSBNYXRoLm1heChjdXJyZW50Q29sV2lkdGgsIGl0ZW1XaWR0aCk7XG4gICAgICAgICAgICBjdXJyZW50Q29sSGVpZ2h0ICs9IGl0ZW1IZWlnaHQgKyBwYWRkaW5nO1xuICAgICAgICB9KTtcbiAgICAgICAgdG90YWxXaWR0aCArPSBjdXJyZW50Q29sV2lkdGg7XG4gICAgICAgIGNvbHVtblNpemVzLnB1c2goe1xuICAgICAgICAgICAgd2lkdGg6IGN1cnJlbnRDb2xXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogY3VycmVudENvbEhlaWdodFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRvdGFsV2lkdGg7XG4gICAgfVxuICAgIGFkanVzdEhpdEJveGVzKCkge1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgY29uc3QgeyBsZWdlbmRIaXRCb3hlczogaGl0Ym94ZXMgLCBvcHRpb25zOiB7IGFsaWduICwgbGFiZWxzOiB7IHBhZGRpbmcgIH0gLCBydGwgIH0gIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKHJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIGxldCByb3cgPSAwO1xuICAgICAgICAgICAgbGV0IGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKXtcbiAgICAgICAgICAgICAgICBpZiAocm93ICE9PSBoaXRib3gucm93KSB7XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9IGhpdGJveC5yb3c7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdGhpcy5sZWZ0ICsgcGFkZGluZywgdGhpcy5yaWdodCAtIHRoaXMubGluZVdpZHRoc1tyb3ddKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGl0Ym94LnRvcCArPSB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgICAgICBoaXRib3gubGVmdCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54KGxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICAgICAgICAgIGxlZnQgKz0gaGl0Ym94LndpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjb2wgPSAwO1xuICAgICAgICAgICAgbGV0IHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaGl0Ym94IG9mIGhpdGJveGVzKXtcbiAgICAgICAgICAgICAgICBpZiAoaGl0Ym94LmNvbCAhPT0gY29sKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbCA9IGhpdGJveC5jb2w7XG4gICAgICAgICAgICAgICAgICAgIHRvcCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSB0aGlzLmNvbHVtblNpemVzW2NvbF0uaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaGl0Ym94LnRvcCA9IHRvcDtcbiAgICAgICAgICAgICAgICBoaXRib3gubGVmdCArPSB0aGlzLmxlZnQgKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGhpdGJveC5sZWZ0ID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsSGVscGVyLngoaGl0Ym94LmxlZnQpLCBoaXRib3gud2lkdGgpO1xuICAgICAgICAgICAgICAgIHRvcCArPSBoaXRib3guaGVpZ2h0ICsgcGFkZGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG4gICAgfVxuICAgIGRyYXcoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGlzcGxheSkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgICAgICBjbGlwQXJlYShjdHgsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fZHJhdygpO1xuICAgICAgICAgICAgdW5jbGlwQXJlYShjdHgpO1xuICAgICAgICB9XG4gICAgfVxuIF9kcmF3KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IG9wdHMgLCBjb2x1bW5TaXplcyAsIGxpbmVXaWR0aHMgLCBjdHggIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGFsaWduICwgbGFiZWxzOiBsYWJlbE9wdHMgIH0gPSBvcHRzO1xuICAgICAgICBjb25zdCBkZWZhdWx0Q29sb3IgPSBkZWZhdWx0cy5jb2xvcjtcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRzLnJ0bCwgdGhpcy5sZWZ0LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgbGFiZWxGb250ID0gdG9Gb250KGxhYmVsT3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgeyBwYWRkaW5nICB9ID0gbGFiZWxPcHRzO1xuICAgICAgICBjb25zdCBmb250U2l6ZSA9IGxhYmVsRm9udC5zaXplO1xuICAgICAgICBjb25zdCBoYWxmRm9udFNpemUgPSBmb250U2l6ZSAvIDI7XG4gICAgICAgIGxldCBjdXJzb3I7XG4gICAgICAgIHRoaXMuZHJhd1RpdGxlKCk7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKCdsZWZ0Jyk7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDAuNTtcbiAgICAgICAgY3R4LmZvbnQgPSBsYWJlbEZvbnQuc3RyaW5nO1xuICAgICAgICBjb25zdCB7IGJveFdpZHRoICwgYm94SGVpZ2h0ICwgaXRlbUhlaWdodCAgfSA9IGdldEJveFNpemUobGFiZWxPcHRzLCBmb250U2l6ZSk7XG4gICAgICAgIGNvbnN0IGRyYXdMZWdlbmRCb3ggPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG4gICAgICAgICAgICBpZiAoaXNOYU4oYm94V2lkdGgpIHx8IGJveFdpZHRoIDw9IDAgfHwgaXNOYU4oYm94SGVpZ2h0KSB8fCBib3hIZWlnaHQgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZVdpZHRoLCAxKTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmZpbGxTdHlsZSwgZGVmYXVsdENvbG9yKTtcbiAgICAgICAgICAgIGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lQ2FwLCAnYnV0dCcpO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaE9mZnNldCwgMCk7XG4gICAgICAgICAgICBjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVKb2luLCAnbWl0ZXInKTtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLnN0cm9rZVN0eWxlLCBkZWZhdWx0Q29sb3IpO1xuICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2gsIFtdKSk7XG4gICAgICAgICAgICBpZiAobGFiZWxPcHRzLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkcmF3T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3hIZWlnaHQgKiBNYXRoLlNRUlQyIC8gMixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRTdHlsZTogbGVnZW5kSXRlbS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICByb3RhdGlvbjogbGVnZW5kSXRlbS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IGxpbmVXaWR0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgY2VudGVyWCA9IHJ0bEhlbHBlci54UGx1cyh4LCBib3hXaWR0aCAvIDIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlclkgPSB5ICsgaGFsZkZvbnRTaXplO1xuICAgICAgICAgICAgICAgIGRyYXdQb2ludExlZ2VuZChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZLCBsYWJlbE9wdHMucG9pbnRTdHlsZVdpZHRoICYmIGJveFdpZHRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeUJveFRvcCA9IHkgKyBNYXRoLm1heCgoZm9udFNpemUgLSBib3hIZWlnaHQpIC8gMiwgMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgeEJveExlZnQgPSBydGxIZWxwZXIubGVmdEZvckx0cih4LCBib3hXaWR0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsZWdlbmRJdGVtLmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKGJvcmRlclJhZGl1cykuc29tZSgodik9PnYgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IHhCb3hMZWZ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeTogeUJveFRvcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHc6IGJveFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgaDogYm94SGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlY3QoeEJveExlZnQsIHlCb3hUb3AsIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIGlmIChsaW5lV2lkdGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGZpbGxUZXh0ID0gZnVuY3Rpb24oeCwgeSwgbGVnZW5kSXRlbSkge1xuICAgICAgICAgICAgcmVuZGVyVGV4dChjdHgsIGxlZ2VuZEl0ZW0udGV4dCwgeCwgeSArIGl0ZW1IZWlnaHQgLyAyLCBsYWJlbEZvbnQsIHtcbiAgICAgICAgICAgICAgICBzdHJpa2V0aHJvdWdoOiBsZWdlbmRJdGVtLmhpZGRlbixcbiAgICAgICAgICAgICAgICB0ZXh0QWxpZ246IHJ0bEhlbHBlci50ZXh0QWxpZ24obGVnZW5kSXRlbS50ZXh0QWxpZ24pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gdGhpcy5pc0hvcml6b250YWwoKTtcbiAgICAgICAgY29uc3QgdGl0bGVIZWlnaHQgPSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKTtcbiAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgY3Vyc29yID0ge1xuICAgICAgICAgICAgICAgIHg6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1swXSksXG4gICAgICAgICAgICAgICAgeTogdGhpcy50b3AgKyBwYWRkaW5nICsgdGl0bGVIZWlnaHQsXG4gICAgICAgICAgICAgICAgbGluZTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnNvciA9IHtcbiAgICAgICAgICAgICAgICB4OiB0aGlzLmxlZnQgKyBwYWRkaW5nLFxuICAgICAgICAgICAgICAgIHk6IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLnRvcCArIHRpdGxlSGVpZ2h0ICsgcGFkZGluZywgdGhpcy5ib3R0b20gLSBjb2x1bW5TaXplc1swXS5oZWlnaHQpLFxuICAgICAgICAgICAgICAgIGxpbmU6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgb3ZlcnJpZGVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gaXRlbUhlaWdodCArIHBhZGRpbmc7XG4gICAgICAgIHRoaXMubGVnZW5kSXRlbXMuZm9yRWFjaCgobGVnZW5kSXRlbSwgaSk9PntcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGxlZ2VuZEl0ZW0uZm9udENvbG9yO1xuICAgICAgICAgICAgY29uc3QgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG4gICAgICAgICAgICBjb25zdCB0ZXh0QWxpZ24gPSBydGxIZWxwZXIudGV4dEFsaWduKGxlZ2VuZEl0ZW0udGV4dEFsaWduIHx8IChsZWdlbmRJdGVtLnRleHRBbGlnbiA9IGxhYmVsT3B0cy50ZXh0QWxpZ24pKTtcbiAgICAgICAgICAgIGNvbnN0IHdpZHRoID0gYm94V2lkdGggKyBoYWxmRm9udFNpemUgKyB0ZXh0V2lkdGg7XG4gICAgICAgICAgICBsZXQgeCA9IGN1cnNvci54O1xuICAgICAgICAgICAgbGV0IHkgPSBjdXJzb3IueTtcbiAgICAgICAgICAgIHJ0bEhlbHBlci5zZXRXaWR0aCh0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDAgJiYgeCArIHdpZHRoICsgcGFkZGluZyA+IHRoaXMucmlnaHQpIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IGN1cnNvci55ICs9IGxpbmVIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgICAgICAgICAgIHggPSBjdXJzb3IueCA9IF9hbGlnblN0YXJ0RW5kKGFsaWduLCB0aGlzLmxlZnQgKyBwYWRkaW5nLCB0aGlzLnJpZ2h0IC0gbGluZVdpZHRoc1tjdXJzb3IubGluZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA+IDAgJiYgeSArIGxpbmVIZWlnaHQgPiB0aGlzLmJvdHRvbSkge1xuICAgICAgICAgICAgICAgIHggPSBjdXJzb3IueCA9IHggKyBjb2x1bW5TaXplc1tjdXJzb3IubGluZV0ud2lkdGggKyBwYWRkaW5nO1xuICAgICAgICAgICAgICAgIGN1cnNvci5saW5lKys7XG4gICAgICAgICAgICAgICAgeSA9IGN1cnNvci55ID0gX2FsaWduU3RhcnRFbmQoYWxpZ24sIHRoaXMudG9wICsgdGl0bGVIZWlnaHQgKyBwYWRkaW5nLCB0aGlzLmJvdHRvbSAtIGNvbHVtblNpemVzW2N1cnNvci5saW5lXS5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcmVhbFggPSBydGxIZWxwZXIueCh4KTtcbiAgICAgICAgICAgIGRyYXdMZWdlbmRCb3gocmVhbFgsIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgICAgICAgeCA9IF90ZXh0WCh0ZXh0QWxpZ24sIHggKyBib3hXaWR0aCArIGhhbGZGb250U2l6ZSwgaXNIb3Jpem9udGFsID8geCArIHdpZHRoIDogdGhpcy5yaWdodCwgb3B0cy5ydGwpO1xuICAgICAgICAgICAgZmlsbFRleHQocnRsSGVscGVyLngoeCksIHksIGxlZ2VuZEl0ZW0pO1xuICAgICAgICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAgICAgICAgIGN1cnNvci54ICs9IHdpZHRoICsgcGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxlZ2VuZEl0ZW0udGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmb250TGluZUhlaWdodCA9IGxhYmVsRm9udC5saW5lSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGN1cnNvci55ICs9IGNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQobGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpICsgcGFkZGluZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3Vyc29yLnkgKz0gbGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJlc3RvcmVUZXh0RGlyZWN0aW9uKHRoaXMuY3R4LCBvcHRzLnRleHREaXJlY3Rpb24pO1xuICAgIH1cbiBkcmF3VGl0bGUoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpdGxlT3B0cyA9IG9wdHMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIGlmICghdGl0bGVPcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBydGxIZWxwZXIgPSBnZXRSdGxBZGFwdGVyKG9wdHMucnRsLCB0aGlzLmxlZnQsIHRoaXMud2lkdGgpO1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3QgcG9zaXRpb24gPSB0aXRsZU9wdHMucG9zaXRpb247XG4gICAgICAgIGNvbnN0IGhhbGZGb250U2l6ZSA9IHRpdGxlRm9udC5zaXplIC8gMjtcbiAgICAgICAgY29uc3QgdG9wUGFkZGluZ1BsdXNIYWxmRm9udFNpemUgPSB0aXRsZVBhZGRpbmcudG9wICsgaGFsZkZvbnRTaXplO1xuICAgICAgICBsZXQgeTtcbiAgICAgICAgbGV0IGxlZnQgPSB0aGlzLmxlZnQ7XG4gICAgICAgIGxldCBtYXhXaWR0aCA9IHRoaXMud2lkdGg7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICBtYXhXaWR0aCA9IE1hdGgubWF4KC4uLnRoaXMubGluZVdpZHRocyk7XG4gICAgICAgICAgICB5ID0gdGhpcy50b3AgKyB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZTtcbiAgICAgICAgICAgIGxlZnQgPSBfYWxpZ25TdGFydEVuZChvcHRzLmFsaWduLCBsZWZ0LCB0aGlzLnJpZ2h0IC0gbWF4V2lkdGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gdGhpcy5jb2x1bW5TaXplcy5yZWR1Y2UoKGFjYywgc2l6ZSk9Pk1hdGgubWF4KGFjYywgc2l6ZS5oZWlnaHQpLCAwKTtcbiAgICAgICAgICAgIHkgPSB0b3BQYWRkaW5nUGx1c0hhbGZGb250U2l6ZSArIF9hbGlnblN0YXJ0RW5kKG9wdHMuYWxpZ24sIHRoaXMudG9wLCB0aGlzLmJvdHRvbSAtIG1heEhlaWdodCAtIG9wdHMubGFiZWxzLnBhZGRpbmcgLSB0aGlzLl9jb21wdXRlVGl0bGVIZWlnaHQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeCA9IF9hbGlnblN0YXJ0RW5kKHBvc2l0aW9uLCBsZWZ0LCBsZWZ0ICsgbWF4V2lkdGgpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihfdG9MZWZ0UmlnaHRDZW50ZXIocG9zaXRpb24pKTtcbiAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aXRsZU9wdHMuY29sb3I7XG4gICAgICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIHRpdGxlT3B0cy50ZXh0LCB4LCB5LCB0aXRsZUZvbnQpO1xuICAgIH1cbiBfY29tcHV0ZVRpdGxlSGVpZ2h0KCkge1xuICAgICAgICBjb25zdCB0aXRsZU9wdHMgPSB0aGlzLm9wdGlvbnMudGl0bGU7XG4gICAgICAgIGNvbnN0IHRpdGxlRm9udCA9IHRvRm9udCh0aXRsZU9wdHMuZm9udCk7XG4gICAgICAgIGNvbnN0IHRpdGxlUGFkZGluZyA9IHRvUGFkZGluZyh0aXRsZU9wdHMucGFkZGluZyk7XG4gICAgICAgIHJldHVybiB0aXRsZU9wdHMuZGlzcGxheSA/IHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgdGl0bGVQYWRkaW5nLmhlaWdodCA6IDA7XG4gICAgfVxuIF9nZXRMZWdlbmRJdGVtQXQoeCwgeSkge1xuICAgICAgICBsZXQgaSwgaGl0Qm94LCBsaDtcbiAgICAgICAgaWYgKF9pc0JldHdlZW4oeCwgdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0KSAmJiBfaXNCZXR3ZWVuKHksIHRoaXMudG9wLCB0aGlzLmJvdHRvbSkpIHtcbiAgICAgICAgICAgIGxoID0gdGhpcy5sZWdlbmRIaXRCb3hlcztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxoLmxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBoaXRCb3ggPSBsaFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoX2lzQmV0d2Vlbih4LCBoaXRCb3gubGVmdCwgaGl0Qm94LmxlZnQgKyBoaXRCb3gud2lkdGgpICYmIF9pc0JldHdlZW4oeSwgaGl0Qm94LnRvcCwgaGl0Qm94LnRvcCArIGhpdEJveC5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlZ2VuZEl0ZW1zW2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gaGFuZGxlRXZlbnQoZSkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoIWlzTGlzdGVuZWQoZS50eXBlLCBvcHRzKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhvdmVyZWRJdGVtID0gdGhpcy5fZ2V0TGVnZW5kSXRlbUF0KGUueCwgZS55KTtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScgfHwgZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuX2hvdmVyZWRJdGVtO1xuICAgICAgICAgICAgY29uc3Qgc2FtZUl0ZW0gPSBpdGVtc0VxdWFsKHByZXZpb3VzLCBob3ZlcmVkSXRlbSk7XG4gICAgICAgICAgICBpZiAocHJldmlvdXMgJiYgIXNhbWVJdGVtKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sob3B0cy5vbkxlYXZlLCBbXG4gICAgICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9ob3ZlcmVkSXRlbSA9IGhvdmVyZWRJdGVtO1xuICAgICAgICAgICAgaWYgKGhvdmVyZWRJdGVtICYmICFzYW1lSXRlbSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG9wdHMub25Ib3ZlciwgW1xuICAgICAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgICAgICBob3ZlcmVkSXRlbSxcbiAgICAgICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGhvdmVyZWRJdGVtKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhvcHRzLm9uQ2xpY2ssIFtcbiAgICAgICAgICAgICAgICBlLFxuICAgICAgICAgICAgICAgIGhvdmVyZWRJdGVtLFxuICAgICAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbVNpemUoYm94V2lkdGgsIGxhYmVsRm9udCwgY3R4LCBsZWdlbmRJdGVtLCBfaXRlbUhlaWdodCkge1xuICAgIGNvbnN0IGl0ZW1XaWR0aCA9IGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpO1xuICAgIGNvbnN0IGl0ZW1IZWlnaHQgPSBjYWxjdWxhdGVJdGVtSGVpZ2h0KF9pdGVtSGVpZ2h0LCBsZWdlbmRJdGVtLCBsYWJlbEZvbnQubGluZUhlaWdodCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbVdpZHRoLFxuICAgICAgICBpdGVtSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNhbGN1bGF0ZUl0ZW1XaWR0aChsZWdlbmRJdGVtLCBib3hXaWR0aCwgbGFiZWxGb250LCBjdHgpIHtcbiAgICBsZXQgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtLnRleHQ7XG4gICAgaWYgKGxlZ2VuZEl0ZW1UZXh0ICYmIHR5cGVvZiBsZWdlbmRJdGVtVGV4dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbGVnZW5kSXRlbVRleHQgPSBsZWdlbmRJdGVtVGV4dC5yZWR1Y2UoKGEsIGIpPT5hLmxlbmd0aCA+IGIubGVuZ3RoID8gYSA6IGIpO1xuICAgIH1cbiAgICByZXR1cm4gYm94V2lkdGggKyBsYWJlbEZvbnQuc2l6ZSAvIDIgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbVRleHQpLndpZHRoO1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlSXRlbUhlaWdodChfaXRlbUhlaWdodCwgbGVnZW5kSXRlbSwgZm9udExpbmVIZWlnaHQpIHtcbiAgICBsZXQgaXRlbUhlaWdodCA9IF9pdGVtSGVpZ2h0O1xuICAgIGlmICh0eXBlb2YgbGVnZW5kSXRlbS50ZXh0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpdGVtSGVpZ2h0ID0gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCk7XG4gICAgfVxuICAgIHJldHVybiBpdGVtSGVpZ2h0O1xufVxuZnVuY3Rpb24gY2FsY3VsYXRlTGVnZW5kSXRlbUhlaWdodChsZWdlbmRJdGVtLCBmb250TGluZUhlaWdodCkge1xuICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gbGVnZW5kSXRlbS50ZXh0ID8gbGVnZW5kSXRlbS50ZXh0Lmxlbmd0aCA6IDA7XG4gICAgcmV0dXJuIGZvbnRMaW5lSGVpZ2h0ICogbGFiZWxIZWlnaHQ7XG59XG5mdW5jdGlvbiBpc0xpc3RlbmVkKHR5cGUsIG9wdHMpIHtcbiAgICBpZiAoKHR5cGUgPT09ICdtb3VzZW1vdmUnIHx8IHR5cGUgPT09ICdtb3VzZW91dCcpICYmIChvcHRzLm9uSG92ZXIgfHwgb3B0cy5vbkxlYXZlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKG9wdHMub25DbGljayAmJiAodHlwZSA9PT0gJ2NsaWNrJyB8fCB0eXBlID09PSAnbW91c2V1cCcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG52YXIgcGx1Z2luX2xlZ2VuZCA9IHtcbiAgICBpZDogJ2xlZ2VuZCcsXG4gX2VsZW1lbnQ6IExlZ2VuZCxcbiAgICBzdGFydCAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZCA9IG5ldyBMZWdlbmQoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCBsZWdlbmQsIG9wdGlvbnMpO1xuICAgICAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgbGVnZW5kKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBjaGFydC5sZWdlbmQpO1xuICAgICAgICBkZWxldGUgY2hhcnQubGVnZW5kO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuICAgICAgICBsYXlvdXRzLmNvbmZpZ3VyZShjaGFydCwgbGVnZW5kLCBvcHRpb25zKTtcbiAgICAgICAgbGVnZW5kLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgYWZ0ZXJVcGRhdGUgKGNoYXJ0KSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcbiAgICAgICAgbGVnZW5kLmJ1aWxkTGFiZWxzKCk7XG4gICAgICAgIGxlZ2VuZC5hZGp1c3RIaXRCb3hlcygpO1xuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKCFhcmdzLnJlcGxheSkge1xuICAgICAgICAgICAgY2hhcnQubGVnZW5kLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHJldmVyc2U6IGZhbHNlLFxuICAgICAgICB3ZWlnaHQ6IDEwMDAsXG4gICAgICAgIG9uQ2xpY2sgKGUsIGxlZ2VuZEl0ZW0sIGxlZ2VuZCkge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBsZWdlbmRJdGVtLmRhdGFzZXRJbmRleDtcbiAgICAgICAgICAgIGNvbnN0IGNpID0gbGVnZW5kLmNoYXJ0O1xuICAgICAgICAgICAgaWYgKGNpLmlzRGF0YXNldFZpc2libGUoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgY2kuaGlkZShpbmRleCk7XG4gICAgICAgICAgICAgICAgbGVnZW5kSXRlbS5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaS5zaG93KGluZGV4KTtcbiAgICAgICAgICAgICAgICBsZWdlbmRJdGVtLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvbkhvdmVyOiBudWxsLFxuICAgICAgICBvbkxlYXZlOiBudWxsLFxuICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgIGNvbG9yOiAoY3R4KT0+Y3R4LmNoYXJ0Lm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBib3hXaWR0aDogNDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAxMCxcbiAgICAgICAgICAgIGdlbmVyYXRlTGFiZWxzIChjaGFydCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY2hhcnQuZGF0YS5kYXRhc2V0cztcbiAgICAgICAgICAgICAgICBjb25zdCB7IGxhYmVsczogeyB1c2VQb2ludFN0eWxlICwgcG9pbnRTdHlsZSAsIHRleHRBbGlnbiAsIGNvbG9yICwgdXNlQm9yZGVyUmFkaXVzICwgYm9yZGVyUmFkaXVzICB9ICB9ID0gY2hhcnQubGVnZW5kLm9wdGlvbnM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoYXJ0Ll9nZXRTb3J0ZWREYXRhc2V0TWV0YXMoKS5tYXAoKG1ldGEpPT57XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHVzZVBvaW50U3R5bGUgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSB0b1BhZGRpbmcoc3R5bGUuYm9yZGVyV2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZGF0YXNldHNbbWV0YS5pbmRleF0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxsU3R5bGU6IHN0eWxlLmJhY2tncm91bmRDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBoaWRkZW46ICFtZXRhLnZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lQ2FwOiBzdHlsZS5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVEYXNoOiBzdHlsZS5ib3JkZXJEYXNoLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZURhc2hPZmZzZXQ6IHN0eWxlLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lSm9pbjogc3R5bGUuYm9yZGVySm9pblN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbGluZVdpZHRoOiAoYm9yZGVyV2lkdGgud2lkdGggKyBib3JkZXJXaWR0aC5oZWlnaHQpIC8gNCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVN0eWxlOiBzdHlsZS5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IHBvaW50U3R5bGUgfHwgc3R5bGUucG9pbnRTdHlsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBzdHlsZS5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogdGV4dEFsaWduIHx8IHN0eWxlLnRleHRBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvcmRlclJhZGl1czogdXNlQm9yZGVyUmFkaXVzICYmIChib3JkZXJSYWRpdXMgfHwgc3R5bGUuYm9yZGVyUmFkaXVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleDogbWV0YS5pbmRleFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aXRsZToge1xuICAgICAgICAgICAgY29sb3I6IChjdHgpPT5jdHguY2hhcnQub3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgcG9zaXRpb246ICdjZW50ZXInLFxuICAgICAgICAgICAgdGV4dDogJydcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogKG5hbWUpPT4hW1xuICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVMYWJlbHMnLFxuICAgICAgICAgICAgICAgICAgICAnZmlsdGVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NvcnQnXG4gICAgICAgICAgICAgICAgXS5pbmNsdWRlcyhuYW1lKVxuICAgICAgICB9XG4gICAgfVxufTtcblxuY2xhc3MgVGl0bGUgZXh0ZW5kcyBFbGVtZW50IHtcbiBjb25zdHJ1Y3Rvcihjb25maWcpe1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoYXJ0ID0gY29uZmlnLmNoYXJ0O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBjb25maWcub3B0aW9ucztcbiAgICAgICAgdGhpcy5jdHggPSBjb25maWcuY3R4O1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnRvcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ib3R0b20gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubGVmdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5yaWdodCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy53aWR0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2VpZ2h0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZ1bGxTaXplID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB1cGRhdGUobWF4V2lkdGgsIG1heEhlaWdodCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB0aGlzLmxlZnQgPSAwO1xuICAgICAgICB0aGlzLnRvcCA9IDA7XG4gICAgICAgIGlmICghb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5oZWlnaHQgPSB0aGlzLnJpZ2h0ID0gdGhpcy5ib3R0b20gPSAwO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLnJpZ2h0ID0gbWF4V2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5ib3R0b20gPSBtYXhIZWlnaHQ7XG4gICAgICAgIGNvbnN0IGxpbmVDb3VudCA9IGlzQXJyYXkob3B0cy50ZXh0KSA/IG9wdHMudGV4dC5sZW5ndGggOiAxO1xuICAgICAgICB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKG9wdHMucGFkZGluZyk7XG4gICAgICAgIGNvbnN0IHRleHRTaXplID0gbGluZUNvdW50ICogdG9Gb250KG9wdHMuZm9udCkubGluZUhlaWdodCArIHRoaXMuX3BhZGRpbmcuaGVpZ2h0O1xuICAgICAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0ZXh0U2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0ZXh0U2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgcmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcbiAgICB9XG4gICAgX2RyYXdBcmdzKG9mZnNldCkge1xuICAgICAgICBjb25zdCB7IHRvcCAsIGxlZnQgLCBib3R0b20gLCByaWdodCAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbGlnbiA9IG9wdGlvbnMuYWxpZ247XG4gICAgICAgIGxldCByb3RhdGlvbiA9IDA7XG4gICAgICAgIGxldCBtYXhXaWR0aCwgdGl0bGVYLCB0aXRsZVk7XG4gICAgICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgICAgICB0aXRsZVggPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgbGVmdCwgcmlnaHQpO1xuICAgICAgICAgICAgdGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuICAgICAgICAgICAgbWF4V2lkdGggPSByaWdodCAtIGxlZnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICAgICAgdGl0bGVYID0gbGVmdCArIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgYm90dG9tLCB0b3ApO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAtMC41O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aXRsZVggPSByaWdodCAtIG9mZnNldDtcbiAgICAgICAgICAgICAgICB0aXRsZVkgPSBfYWxpZ25TdGFydEVuZChhbGlnbiwgdG9wLCBib3R0b20pO1xuICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gUEkgKiAwLjU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtYXhXaWR0aCA9IGJvdHRvbSAtIHRvcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgdGl0bGVZLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvblxuICAgICAgICB9O1xuICAgIH1cbiAgICBkcmF3KCkge1xuICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKCFvcHRzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb250T3B0cyA9IHRvRm9udChvcHRzLmZvbnQpO1xuICAgICAgICBjb25zdCBsaW5lSGVpZ2h0ID0gZm9udE9wdHMubGluZUhlaWdodDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbGluZUhlaWdodCAvIDIgKyB0aGlzLl9wYWRkaW5nLnRvcDtcbiAgICAgICAgY29uc3QgeyB0aXRsZVggLCB0aXRsZVkgLCBtYXhXaWR0aCAsIHJvdGF0aW9uICB9ID0gdGhpcy5fZHJhd0FyZ3Mob2Zmc2V0KTtcbiAgICAgICAgcmVuZGVyVGV4dChjdHgsIG9wdHMudGV4dCwgMCwgMCwgZm9udE9wdHMsIHtcbiAgICAgICAgICAgIGNvbG9yOiBvcHRzLmNvbG9yLFxuICAgICAgICAgICAgbWF4V2lkdGgsXG4gICAgICAgICAgICByb3RhdGlvbixcbiAgICAgICAgICAgIHRleHRBbGlnbjogX3RvTGVmdFJpZ2h0Q2VudGVyKG9wdHMuYWxpZ24pLFxuICAgICAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJyxcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uOiBbXG4gICAgICAgICAgICAgICAgdGl0bGVYLFxuICAgICAgICAgICAgICAgIHRpdGxlWVxuICAgICAgICAgICAgXVxuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBjcmVhdGVUaXRsZShjaGFydCwgdGl0bGVPcHRzKSB7XG4gICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICBjdHg6IGNoYXJ0LmN0eCxcbiAgICAgICAgb3B0aW9uczogdGl0bGVPcHRzLFxuICAgICAgICBjaGFydFxuICAgIH0pO1xuICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgdGl0bGVPcHRzKTtcbiAgICBsYXlvdXRzLmFkZEJveChjaGFydCwgdGl0bGUpO1xuICAgIGNoYXJ0LnRpdGxlQmxvY2sgPSB0aXRsZTtcbn1cbnZhciBwbHVnaW5fdGl0bGUgPSB7XG4gICAgaWQ6ICd0aXRsZScsXG4gX2VsZW1lbnQ6IFRpdGxlLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY3JlYXRlVGl0bGUoY2hhcnQsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgc3RvcCAoY2hhcnQpIHtcbiAgICAgICAgY29uc3QgdGl0bGVCbG9jayA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCB0aXRsZUJsb2NrKTtcbiAgICAgICAgZGVsZXRlIGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgfSxcbiAgICBiZWZvcmVVcGRhdGUgKGNoYXJ0LCBfYXJncywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IGNoYXJ0LnRpdGxlQmxvY2s7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIHRpdGxlLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgYWxpZ246ICdjZW50ZXInLFxuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgfSxcbiAgICAgICAgZnVsbFNpemU6IHRydWUsXG4gICAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDIwMDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IG1hcCA9IG5ldyBXZWFrTWFwKCk7XG52YXIgcGx1Z2luX3N1YnRpdGxlID0ge1xuICAgIGlkOiAnc3VidGl0bGUnLFxuICAgIHN0YXJ0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBuZXcgVGl0bGUoe1xuICAgICAgICAgICAgY3R4OiBjaGFydC5jdHgsXG4gICAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgICAgY2hhcnRcbiAgICAgICAgfSk7XG4gICAgICAgIGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgb3B0aW9ucyk7XG4gICAgICAgIGxheW91dHMuYWRkQm94KGNoYXJ0LCB0aXRsZSk7XG4gICAgICAgIG1hcC5zZXQoY2hhcnQsIHRpdGxlKTtcbiAgICB9LFxuICAgIHN0b3AgKGNoYXJ0KSB7XG4gICAgICAgIGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBtYXAuZ2V0KGNoYXJ0KSk7XG4gICAgICAgIG1hcC5kZWxldGUoY2hhcnQpO1xuICAgIH0sXG4gICAgYmVmb3JlVXBkYXRlIChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBtYXAuZ2V0KGNoYXJ0KTtcbiAgICAgICAgbGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlLCBvcHRpb25zKTtcbiAgICAgICAgdGl0bGUub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfSxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBhbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdub3JtYWwnXG4gICAgICAgIH0sXG4gICAgICAgIGZ1bGxTaXplOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICBwb3NpdGlvbjogJ3RvcCcsXG4gICAgICAgIHRleHQ6ICcnLFxuICAgICAgICB3ZWlnaHQ6IDE1MDBcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgY29sb3I6ICdjb2xvcidcbiAgICB9LFxuICAgIGRlc2NyaXB0b3JzOiB7XG4gICAgICAgIF9zY3JpcHRhYmxlOiB0cnVlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn07XG5cbmNvbnN0IHBvc2l0aW9uZXJzID0ge1xuIGF2ZXJhZ2UgKGl0ZW1zKSB7XG4gICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG4gICAgICAgIGZvcihpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgY29uc3QgZWwgPSBpdGVtc1tpXS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3MgPSBlbC50b29sdGlwUG9zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB4ICs9IHBvcy54O1xuICAgICAgICAgICAgICAgIHkgKz0gcG9zLnk7XG4gICAgICAgICAgICAgICAgKytjb3VudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCAvIGNvdW50LFxuICAgICAgICAgICAgeTogeSAvIGNvdW50XG4gICAgICAgIH07XG4gICAgfSxcbiBuZWFyZXN0IChpdGVtcywgZXZlbnRQb3NpdGlvbikge1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGxldCB4ID0gZXZlbnRQb3NpdGlvbi54O1xuICAgICAgICBsZXQgeSA9IGV2ZW50UG9zaXRpb24ueTtcbiAgICAgICAgbGV0IG1pbkRpc3RhbmNlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBsZW47ICsraSl7XG4gICAgICAgICAgICBjb25zdCBlbCA9IGl0ZW1zW2ldLmVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWwgJiYgZWwuaGFzVmFsdWUoKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IGVsLmdldENlbnRlclBvaW50KCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IGRpc3RhbmNlQmV0d2VlblBvaW50cyhldmVudFBvc2l0aW9uLCBjZW50ZXIpO1xuICAgICAgICAgICAgICAgIGlmIChkIDwgbWluRGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2UgPSBkO1xuICAgICAgICAgICAgICAgICAgICBuZWFyZXN0RWxlbWVudCA9IGVsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmVhcmVzdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRwID0gbmVhcmVzdEVsZW1lbnQudG9vbHRpcFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB4ID0gdHAueDtcbiAgICAgICAgICAgIHkgPSB0cC55O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4LFxuICAgICAgICAgICAgeVxuICAgICAgICB9O1xuICAgIH1cbn07XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG4gICAgaWYgKHRvUHVzaCkge1xuICAgICAgICBpZiAoaXNBcnJheSh0b1B1c2gpKSB7XG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShiYXNlLCB0b1B1c2gpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYmFzZS5wdXNoKHRvUHVzaCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2U7XG59XG4gZnVuY3Rpb24gc3BsaXROZXdsaW5lcyhzdHIpIHtcbiAgICBpZiAoKHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnIHx8IHN0ciBpbnN0YW5jZW9mIFN0cmluZykgJiYgc3RyLmluZGV4T2YoJ1xcbicpID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHN0ci5zcGxpdCgnXFxuJyk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG4gZnVuY3Rpb24gY3JlYXRlVG9vbHRpcEl0ZW0oY2hhcnQsIGl0ZW0pIHtcbiAgICBjb25zdCB7IGVsZW1lbnQgLCBkYXRhc2V0SW5kZXggLCBpbmRleCAgfSA9IGl0ZW07XG4gICAgY29uc3QgY29udHJvbGxlciA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCkuY29udHJvbGxlcjtcbiAgICBjb25zdCB7IGxhYmVsICwgdmFsdWUgIH0gPSBjb250cm9sbGVyLmdldExhYmVsQW5kVmFsdWUoaW5kZXgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNoYXJ0LFxuICAgICAgICBsYWJlbCxcbiAgICAgICAgcGFyc2VkOiBjb250cm9sbGVyLmdldFBhcnNlZChpbmRleCksXG4gICAgICAgIHJhdzogY2hhcnQuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdLFxuICAgICAgICBmb3JtYXR0ZWRWYWx1ZTogdmFsdWUsXG4gICAgICAgIGRhdGFzZXQ6IGNvbnRyb2xsZXIuZ2V0RGF0YXNldCgpLFxuICAgICAgICBkYXRhSW5kZXg6IGluZGV4LFxuICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgIGVsZW1lbnRcbiAgICB9O1xufVxuIGZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBjdHggPSB0b29sdGlwLmNoYXJ0LmN0eDtcbiAgICBjb25zdCB7IGJvZHkgLCBmb290ZXIgLCB0aXRsZSAgfSA9IHRvb2x0aXA7XG4gICAgY29uc3QgeyBib3hXaWR0aCAsIGJveEhlaWdodCAgfSA9IG9wdGlvbnM7XG4gICAgY29uc3QgYm9keUZvbnQgPSB0b0ZvbnQob3B0aW9ucy5ib2R5Rm9udCk7XG4gICAgY29uc3QgdGl0bGVGb250ID0gdG9Gb250KG9wdGlvbnMudGl0bGVGb250KTtcbiAgICBjb25zdCBmb290ZXJGb250ID0gdG9Gb250KG9wdGlvbnMuZm9vdGVyRm9udCk7XG4gICAgY29uc3QgdGl0bGVMaW5lQ291bnQgPSB0aXRsZS5sZW5ndGg7XG4gICAgY29uc3QgZm9vdGVyTGluZUNvdW50ID0gZm9vdGVyLmxlbmd0aDtcbiAgICBjb25zdCBib2R5TGluZUl0ZW1Db3VudCA9IGJvZHkubGVuZ3RoO1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICBsZXQgaGVpZ2h0ID0gcGFkZGluZy5oZWlnaHQ7XG4gICAgbGV0IHdpZHRoID0gMDtcbiAgICBsZXQgY29tYmluZWRCb2R5TGVuZ3RoID0gYm9keS5yZWR1Y2UoKGNvdW50LCBib2R5SXRlbSk9PmNvdW50ICsgYm9keUl0ZW0uYmVmb3JlLmxlbmd0aCArIGJvZHlJdGVtLmxpbmVzLmxlbmd0aCArIGJvZHlJdGVtLmFmdGVyLmxlbmd0aCwgMCk7XG4gICAgY29tYmluZWRCb2R5TGVuZ3RoICs9IHRvb2x0aXAuYmVmb3JlQm9keS5sZW5ndGggKyB0b29sdGlwLmFmdGVyQm9keS5sZW5ndGg7XG4gICAgaWYgKHRpdGxlTGluZUNvdW50KSB7XG4gICAgICAgIGhlaWdodCArPSB0aXRsZUxpbmVDb3VudCAqIHRpdGxlRm9udC5saW5lSGVpZ2h0ICsgKHRpdGxlTGluZUNvdW50IC0gMSkgKiBvcHRpb25zLnRpdGxlU3BhY2luZyArIG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b207XG4gICAgfVxuICAgIGlmIChjb21iaW5lZEJvZHlMZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYm9keUxpbmVIZWlnaHQgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBNYXRoLm1heChib3hIZWlnaHQsIGJvZHlGb250LmxpbmVIZWlnaHQpIDogYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgaGVpZ2h0ICs9IGJvZHlMaW5lSXRlbUNvdW50ICogYm9keUxpbmVIZWlnaHQgKyAoY29tYmluZWRCb2R5TGVuZ3RoIC0gYm9keUxpbmVJdGVtQ291bnQpICogYm9keUZvbnQubGluZUhlaWdodCArIChjb21iaW5lZEJvZHlMZW5ndGggLSAxKSAqIG9wdGlvbnMuYm9keVNwYWNpbmc7XG4gICAgfVxuICAgIGlmIChmb290ZXJMaW5lQ291bnQpIHtcbiAgICAgICAgaGVpZ2h0ICs9IG9wdGlvbnMuZm9vdGVyTWFyZ2luVG9wICsgZm9vdGVyTGluZUNvdW50ICogZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgKGZvb3RlckxpbmVDb3VudCAtIDEpICogb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgIH1cbiAgICBsZXQgd2lkdGhQYWRkaW5nID0gMDtcbiAgICBjb25zdCBtYXhMaW5lV2lkdGggPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG4gICAgfTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gdGl0bGVGb250LnN0cmluZztcbiAgICBlYWNoKHRvb2x0aXAudGl0bGUsIG1heExpbmVXaWR0aCk7XG4gICAgY3R4LmZvbnQgPSBib2R5Rm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmJlZm9yZUJvZHkuY29uY2F0KHRvb2x0aXAuYWZ0ZXJCb2R5KSwgbWF4TGluZVdpZHRoKTtcbiAgICB3aWR0aFBhZGRpbmcgPSBvcHRpb25zLmRpc3BsYXlDb2xvcnMgPyBib3hXaWR0aCArIDIgKyBvcHRpb25zLmJveFBhZGRpbmcgOiAwO1xuICAgIGVhY2goYm9keSwgKGJvZHlJdGVtKT0+e1xuICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcbiAgICAgICAgZWFjaChib2R5SXRlbS5hZnRlciwgbWF4TGluZVdpZHRoKTtcbiAgICB9KTtcbiAgICB3aWR0aFBhZGRpbmcgPSAwO1xuICAgIGN0eC5mb250ID0gZm9vdGVyRm9udC5zdHJpbmc7XG4gICAgZWFjaCh0b29sdGlwLmZvb3RlciwgbWF4TGluZVdpZHRoKTtcbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIHdpZHRoICs9IHBhZGRpbmcud2lkdGg7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodFxuICAgIH07XG59XG5mdW5jdGlvbiBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpIHtcbiAgICBjb25zdCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5IDwgaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ3RvcCc7XG4gICAgfSBlbHNlIGlmICh5ID4gY2hhcnQuaGVpZ2h0IC0gaGVpZ2h0IC8gMikge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbSc7XG4gICAgfVxuICAgIHJldHVybiAnY2VudGVyJztcbn1cbmZ1bmN0aW9uIGRvZXNOb3RGaXRXaXRoQWxpZ24oeEFsaWduLCBjaGFydCwgb3B0aW9ucywgc2l6ZSkge1xuICAgIGNvbnN0IHsgeCAsIHdpZHRoICB9ID0gc2l6ZTtcbiAgICBjb25zdCBjYXJldCA9IG9wdGlvbnMuY2FyZXRTaXplICsgb3B0aW9ucy5jYXJldFBhZGRpbmc7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnICYmIHggKyB3aWR0aCArIGNhcmV0ID4gY2hhcnQud2lkdGgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICh4QWxpZ24gPT09ICdyaWdodCcgJiYgeCAtIHdpZHRoIC0gY2FyZXQgPCAwKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGVybWluZVhBbGlnbihjaGFydCwgb3B0aW9ucywgc2l6ZSwgeUFsaWduKSB7XG4gICAgY29uc3QgeyB4ICwgd2lkdGggIH0gPSBzaXplO1xuICAgIGNvbnN0IHsgd2lkdGg6IGNoYXJ0V2lkdGggLCBjaGFydEFyZWE6IHsgbGVmdCAsIHJpZ2h0ICB9ICB9ID0gY2hhcnQ7XG4gICAgbGV0IHhBbGlnbiA9ICdjZW50ZXInO1xuICAgIGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHhBbGlnbiA9IHggPD0gKGxlZnQgKyByaWdodCkgLyAyID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICB9IGVsc2UgaWYgKHggPD0gd2lkdGggLyAyKSB7XG4gICAgICAgIHhBbGlnbiA9ICdsZWZ0JztcbiAgICB9IGVsc2UgaWYgKHggPj0gY2hhcnRXaWR0aCAtIHdpZHRoIC8gMikge1xuICAgICAgICB4QWxpZ24gPSAncmlnaHQnO1xuICAgIH1cbiAgICBpZiAoZG9lc05vdEZpdFdpdGhBbGlnbih4QWxpZ24sIGNoYXJ0LCBvcHRpb25zLCBzaXplKSkge1xuICAgICAgICB4QWxpZ24gPSAnY2VudGVyJztcbiAgICB9XG4gICAgcmV0dXJuIHhBbGlnbjtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVBbGlnbm1lbnQoY2hhcnQsIG9wdGlvbnMsIHNpemUpIHtcbiAgICBjb25zdCB5QWxpZ24gPSBzaXplLnlBbGlnbiB8fCBvcHRpb25zLnlBbGlnbiB8fCBkZXRlcm1pbmVZQWxpZ24oY2hhcnQsIHNpemUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHhBbGlnbjogc2l6ZS54QWxpZ24gfHwgb3B0aW9ucy54QWxpZ24gfHwgZGV0ZXJtaW5lWEFsaWduKGNoYXJ0LCBvcHRpb25zLCBzaXplLCB5QWxpZ24pLFxuICAgICAgICB5QWxpZ25cbiAgICB9O1xufVxuZnVuY3Rpb24gYWxpZ25YKHNpemUsIHhBbGlnbikge1xuICAgIGxldCB7IHggLCB3aWR0aCAgfSA9IHNpemU7XG4gICAgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHdpZHRoO1xuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnY2VudGVyJykge1xuICAgICAgICB4IC09IHdpZHRoIC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSkge1xuICAgIGxldCB7IHkgLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgIHkgKz0gcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgIHkgLT0gaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeSAtPSBoZWlnaHQgLyAyO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbiBmdW5jdGlvbiBnZXRCYWNrZ3JvdW5kUG9pbnQob3B0aW9ucywgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuICAgIGNvbnN0IHsgY2FyZXRTaXplICwgY2FyZXRQYWRkaW5nICwgY29ybmVyUmFkaXVzICB9ID0gb3B0aW9ucztcbiAgICBjb25zdCB7IHhBbGlnbiAsIHlBbGlnbiAgfSA9IGFsaWdubWVudDtcbiAgICBjb25zdCBwYWRkaW5nQW5kU2l6ZSA9IGNhcmV0U2l6ZSArIGNhcmV0UGFkZGluZztcbiAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICBsZXQgeCA9IGFsaWduWChzaXplLCB4QWxpZ24pO1xuICAgIGNvbnN0IHkgPSBhbGlnblkoc2l6ZSwgeUFsaWduLCBwYWRkaW5nQW5kU2l6ZSk7XG4gICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgaWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgICB4ICs9IHBhZGRpbmdBbmRTaXplO1xuICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgeCAtPSBwYWRkaW5nQW5kU2l6ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgeCAtPSBNYXRoLm1heCh0b3BMZWZ0LCBib3R0b21MZWZ0KSArIGNhcmV0U2l6ZTtcbiAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4ICs9IE1hdGgubWF4KHRvcFJpZ2h0LCBib3R0b21SaWdodCkgKyBjYXJldFNpemU7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IF9saW1pdFZhbHVlKHgsIDAsIGNoYXJ0LndpZHRoIC0gc2l6ZS53aWR0aCksXG4gICAgICAgIHk6IF9saW1pdFZhbHVlKHksIDAsIGNoYXJ0LmhlaWdodCAtIHNpemUuaGVpZ2h0KVxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRBbGlnbmVkWCh0b29sdGlwLCBhbGlnbiwgb3B0aW9ucykge1xuICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICByZXR1cm4gYWxpZ24gPT09ICdjZW50ZXInID8gdG9vbHRpcC54ICsgdG9vbHRpcC53aWR0aCAvIDIgOiBhbGlnbiA9PT0gJ3JpZ2h0JyA/IHRvb2x0aXAueCArIHRvb2x0aXAud2lkdGggLSBwYWRkaW5nLnJpZ2h0IDogdG9vbHRpcC54ICsgcGFkZGluZy5sZWZ0O1xufVxuIGZ1bmN0aW9uIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlVG9vbHRpcENvbnRleHQocGFyZW50LCB0b29sdGlwLCB0b29sdGlwSXRlbXMpIHtcbiAgICByZXR1cm4gY3JlYXRlQ29udGV4dChwYXJlbnQsIHtcbiAgICAgICAgdG9vbHRpcCxcbiAgICAgICAgdG9vbHRpcEl0ZW1zLFxuICAgICAgICB0eXBlOiAndG9vbHRpcCdcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlQ2FsbGJhY2tzKGNhbGxiYWNrcywgY29udGV4dCkge1xuICAgIGNvbnN0IG92ZXJyaWRlID0gY29udGV4dCAmJiBjb250ZXh0LmRhdGFzZXQgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAgJiYgY29udGV4dC5kYXRhc2V0LnRvb2x0aXAuY2FsbGJhY2tzO1xuICAgIHJldHVybiBvdmVycmlkZSA/IGNhbGxiYWNrcy5vdmVycmlkZShvdmVycmlkZSkgOiBjYWxsYmFja3M7XG59XG5jb25zdCBkZWZhdWx0Q2FsbGJhY2tzID0ge1xuICAgIGJlZm9yZVRpdGxlOiBub29wLFxuICAgIHRpdGxlICh0b29sdGlwSXRlbXMpIHtcbiAgICAgICAgaWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdG9vbHRpcEl0ZW1zWzBdO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gaXRlbS5jaGFydC5kYXRhLmxhYmVscztcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsQ291bnQgPSBsYWJlbHMgPyBsYWJlbHMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5sYWJlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmxhYmVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmRhdGFJbmRleCA8IGxhYmVsQ291bnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWxzW2l0ZW0uZGF0YUluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfSxcbiAgICBhZnRlclRpdGxlOiBub29wLFxuICAgIGJlZm9yZUJvZHk6IG5vb3AsXG4gICAgYmVmb3JlTGFiZWw6IG5vb3AsXG4gICAgbGFiZWwgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubW9kZSA9PT0gJ2RhdGFzZXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9vbHRpcEl0ZW0ubGFiZWwgKyAnOiAnICsgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWUgfHwgdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxhYmVsID0gdG9vbHRpcEl0ZW0uZGF0YXNldC5sYWJlbCB8fCAnJztcbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBsYWJlbCArPSAnOiAnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdG9vbHRpcEl0ZW0uZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgIGlmICghaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcbiAgICAgICAgICAgIGxhYmVsICs9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9LFxuICAgIGxhYmVsQ29sb3IgKHRvb2x0aXBJdGVtKSB7XG4gICAgICAgIGNvbnN0IG1ldGEgPSB0b29sdGlwSXRlbS5jaGFydC5nZXREYXRhc2V0TWV0YSh0b29sdGlwSXRlbS5kYXRhc2V0SW5kZXgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gbWV0YS5jb250cm9sbGVyLmdldFN0eWxlKHRvb2x0aXBJdGVtLmRhdGFJbmRleCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvcixcbiAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogb3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogb3B0aW9ucy5ib3JkZXJXaWR0aCxcbiAgICAgICAgICAgIGJvcmRlckRhc2g6IG9wdGlvbnMuYm9yZGVyRGFzaCxcbiAgICAgICAgICAgIGJvcmRlckRhc2hPZmZzZXQ6IG9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCxcbiAgICAgICAgICAgIGJvcmRlclJhZGl1czogMFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgbGFiZWxUZXh0Q29sb3IgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJvZHlDb2xvcjtcbiAgICB9LFxuICAgIGxhYmVsUG9pbnRTdHlsZSAodG9vbHRpcEl0ZW0pIHtcbiAgICAgICAgY29uc3QgbWV0YSA9IHRvb2x0aXBJdGVtLmNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBtZXRhLmNvbnRyb2xsZXIuZ2V0U3R5bGUodG9vbHRpcEl0ZW0uZGF0YUluZGV4KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50U3R5bGU6IG9wdGlvbnMucG9pbnRTdHlsZSxcbiAgICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBhZnRlckxhYmVsOiBub29wLFxuICAgIGFmdGVyQm9keTogbm9vcCxcbiAgICBiZWZvcmVGb290ZXI6IG5vb3AsXG4gICAgZm9vdGVyOiBub29wLFxuICAgIGFmdGVyRm9vdGVyOiBub29wXG59O1xuIGZ1bmN0aW9uIGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgbmFtZSwgY3R4LCBhcmcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBjYWxsYmFja3NbbmFtZV0uY2FsbChjdHgsIGFyZyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q2FsbGJhY2tzW25hbWVdLmNhbGwoY3R4LCBhcmcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY2xhc3MgVG9vbHRpcCBleHRlbmRzIEVsZW1lbnQge1xuIHN0YXRpYyBwb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzO1xuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyl7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IDA7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IFtdO1xuICAgICAgICB0aGlzLl9ldmVudFBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zaXplID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9jYWNoZWRBbmltYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl90b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy4kYW5pbWF0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jaGFydCA9IGNvbmZpZy5jaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuZGF0YVBvaW50cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50aXRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmJvZHkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmZvb3RlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy54QWxpZ24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueUFsaWduID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMueSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY2FyZXRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmNhcmV0WSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5sYWJlbFBvaW50U3R5bGVzID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxhYmVsVGV4dENvbG9ycyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZShvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuJGNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgfVxuIF9yZXNvbHZlQW5pbWF0aW9ucygpIHtcbiAgICAgICAgY29uc3QgY2FjaGVkID0gdGhpcy5fY2FjaGVkQW5pbWF0aW9ucztcbiAgICAgICAgaWYgKGNhY2hlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMuc2V0Q29udGV4dCh0aGlzLmdldENvbnRleHQoKSk7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBvcHRpb25zLmVuYWJsZWQgJiYgY2hhcnQub3B0aW9ucy5hbmltYXRpb24gJiYgb3B0aW9ucy5hbmltYXRpb25zO1xuICAgICAgICBjb25zdCBhbmltYXRpb25zID0gbmV3IEFuaW1hdGlvbnModGhpcy5jaGFydCwgb3B0cyk7XG4gICAgICAgIGlmIChvcHRzLl9jYWNoZWFibGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlZEFuaW1hdGlvbnMgPSBPYmplY3QuZnJlZXplKGFuaW1hdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cbiBnZXRDb250ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kY29udGV4dCB8fCAodGhpcy4kY29udGV4dCA9IGNyZWF0ZVRvb2x0aXBDb250ZXh0KHRoaXMuY2hhcnQuZ2V0Q29udGV4dCgpLCB0aGlzLCB0aGlzLl90b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0VGl0bGUoY29udGV4dCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGNhbGxiYWNrcyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJlZm9yZVRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYmVmb3JlVGl0bGUnLCB0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgY29uc3QgdGl0bGUgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICd0aXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBjb25zdCBhZnRlclRpdGxlID0gaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soY2FsbGJhY2tzLCAnYWZ0ZXJUaXRsZScsIHRoaXMsIGNvbnRleHQpO1xuICAgICAgICBsZXQgbGluZXMgPSBbXTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYmVmb3JlVGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXModGl0bGUpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJUaXRsZSkpO1xuICAgICAgICByZXR1cm4gbGluZXM7XG4gICAgfVxuICAgIGdldEJlZm9yZUJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhvcHRpb25zLmNhbGxiYWNrcywgJ2JlZm9yZUJvZHknLCB0aGlzLCB0b29sdGlwSXRlbXMpKTtcbiAgICB9XG4gICAgZ2V0Qm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5SXRlbXMgPSBbXTtcbiAgICAgICAgZWFjaCh0b29sdGlwSXRlbXMsIChjb250ZXh0KT0+e1xuICAgICAgICAgICAgY29uc3QgYm9keUl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgYmVmb3JlOiBbXSxcbiAgICAgICAgICAgICAgICBsaW5lczogW10sXG4gICAgICAgICAgICAgICAgYWZ0ZXI6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3Qgc2NvcGVkID0gb3ZlcnJpZGVDYWxsYmFja3MoY2FsbGJhY2tzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5iZWZvcmUsIHNwbGl0TmV3bGluZXMoaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnYmVmb3JlTGFiZWwnLCB0aGlzLCBjb250ZXh0KSkpO1xuICAgICAgICAgICAgcHVzaE9yQ29uY2F0KGJvZHlJdGVtLmxpbmVzLCBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdsYWJlbCcsIHRoaXMsIGNvbnRleHQpKTtcbiAgICAgICAgICAgIHB1c2hPckNvbmNhdChib2R5SXRlbS5hZnRlciwgc3BsaXROZXdsaW5lcyhpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhzY29wZWQsICdhZnRlckxhYmVsJywgdGhpcywgY29udGV4dCkpKTtcbiAgICAgICAgICAgIGJvZHlJdGVtcy5wdXNoKGJvZHlJdGVtKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBib2R5SXRlbXM7XG4gICAgfVxuICAgIGdldEFmdGVyQm9keSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKG9wdGlvbnMuY2FsbGJhY2tzLCAnYWZ0ZXJCb2R5JywgdGhpcywgdG9vbHRpcEl0ZW1zKSk7XG4gICAgfVxuICAgIGdldEZvb3Rlcih0b29sdGlwSXRlbXMsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBjYWxsYmFja3MgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBiZWZvcmVGb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdiZWZvcmVGb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBmb290ZXIgPSBpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayhjYWxsYmFja3MsICdmb290ZXInLCB0aGlzLCB0b29sdGlwSXRlbXMpO1xuICAgICAgICBjb25zdCBhZnRlckZvb3RlciA9IGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKGNhbGxiYWNrcywgJ2FmdGVyRm9vdGVyJywgdGhpcywgdG9vbHRpcEl0ZW1zKTtcbiAgICAgICAgbGV0IGxpbmVzID0gW107XG4gICAgICAgIGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuICAgICAgICBsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhmb290ZXIpKTtcbiAgICAgICAgbGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXMoYWZ0ZXJGb290ZXIpKTtcbiAgICAgICAgcmV0dXJuIGxpbmVzO1xuICAgIH1cbiBfY3JlYXRlSXRlbXMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBhY3RpdmUgPSB0aGlzLl9hY3RpdmU7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmNoYXJ0LmRhdGE7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3JzID0gW107XG4gICAgICAgIGNvbnN0IGxhYmVsUG9pbnRTdHlsZXMgPSBbXTtcbiAgICAgICAgY29uc3QgbGFiZWxUZXh0Q29sb3JzID0gW107XG4gICAgICAgIGxldCB0b29sdGlwSXRlbXMgPSBbXTtcbiAgICAgICAgbGV0IGksIGxlbjtcbiAgICAgICAgZm9yKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpe1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0odGhpcy5jaGFydCwgYWN0aXZlW2ldKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICAgICAgICB0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuZmlsdGVyKChlbGVtZW50LCBpbmRleCwgYXJyYXkpPT5vcHRpb25zLmZpbHRlcihlbGVtZW50LCBpbmRleCwgYXJyYXksIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5pdGVtU29ydCkge1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLnNvcnQoKGEsIGIpPT5vcHRpb25zLml0ZW1Tb3J0KGEsIGIsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBlYWNoKHRvb2x0aXBJdGVtcywgKGNvbnRleHQpPT57XG4gICAgICAgICAgICBjb25zdCBzY29wZWQgPSBvdmVycmlkZUNhbGxiYWNrcyhvcHRpb25zLmNhbGxiYWNrcywgY29udGV4dCk7XG4gICAgICAgICAgICBsYWJlbENvbG9ycy5wdXNoKGludm9rZUNhbGxiYWNrV2l0aEZhbGxiYWNrKHNjb3BlZCwgJ2xhYmVsQ29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBsYWJlbFBvaW50U3R5bGVzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxQb2ludFN0eWxlJywgdGhpcywgY29udGV4dCkpO1xuICAgICAgICAgICAgbGFiZWxUZXh0Q29sb3JzLnB1c2goaW52b2tlQ2FsbGJhY2tXaXRoRmFsbGJhY2soc2NvcGVkLCAnbGFiZWxUZXh0Q29sb3InLCB0aGlzLCBjb250ZXh0KSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmxhYmVsQ29sb3JzID0gbGFiZWxDb2xvcnM7XG4gICAgICAgIHRoaXMubGFiZWxQb2ludFN0eWxlcyA9IGxhYmVsUG9pbnRTdHlsZXM7XG4gICAgICAgIHRoaXMubGFiZWxUZXh0Q29sb3JzID0gbGFiZWxUZXh0Q29sb3JzO1xuICAgICAgICB0aGlzLmRhdGFQb2ludHMgPSB0b29sdGlwSXRlbXM7XG4gICAgICAgIHJldHVybiB0b29sdGlwSXRlbXM7XG4gICAgfVxuICAgIHVwZGF0ZShjaGFuZ2VkLCByZXBsYXkpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpKTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICBsZXQgcHJvcGVydGllcztcbiAgICAgICAgbGV0IHRvb2x0aXBJdGVtcyA9IFtdO1xuICAgICAgICBpZiAoIWFjdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25lcnNbb3B0aW9ucy5wb3NpdGlvbl0uY2FsbCh0aGlzLCBhY3RpdmUsIHRoaXMuX2V2ZW50UG9zaXRpb24pO1xuICAgICAgICAgICAgdG9vbHRpcEl0ZW1zID0gdGhpcy5fY3JlYXRlSXRlbXMob3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnRpdGxlID0gdGhpcy5nZXRUaXRsZSh0b29sdGlwSXRlbXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVCb2R5ID0gdGhpcy5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmJvZHkgPSB0aGlzLmdldEJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJCb2R5ID0gdGhpcy5nZXRBZnRlckJvZHkodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuZm9vdGVyID0gdGhpcy5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbkFuZFNpemUgPSBPYmplY3QuYXNzaWduKHt9LCBwb3NpdGlvbiwgc2l6ZSk7XG4gICAgICAgICAgICBjb25zdCBhbGlnbm1lbnQgPSBkZXRlcm1pbmVBbGlnbm1lbnQodGhpcy5jaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGJhY2tncm91bmRQb2ludCA9IGdldEJhY2tncm91bmRQb2ludChvcHRpb25zLCBwb3NpdGlvbkFuZFNpemUsIGFsaWdubWVudCwgdGhpcy5jaGFydCk7XG4gICAgICAgICAgICB0aGlzLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG4gICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICBwcm9wZXJ0aWVzID0ge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgeDogYmFja2dyb3VuZFBvaW50LngsXG4gICAgICAgICAgICAgICAgeTogYmFja2dyb3VuZFBvaW50LnksXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCxcbiAgICAgICAgICAgICAgICBjYXJldFg6IHBvc2l0aW9uLngsXG4gICAgICAgICAgICAgICAgY2FyZXRZOiBwb3NpdGlvbi55XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Rvb2x0aXBJdGVtcyA9IHRvb2x0aXBJdGVtcztcbiAgICAgICAgdGhpcy4kY29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFuZ2VkICYmIG9wdGlvbnMuZXh0ZXJuYWwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZXh0ZXJuYWwuY2FsbCh0aGlzLCB7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHRoaXMuY2hhcnQsXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogdGhpcyxcbiAgICAgICAgICAgICAgICByZXBsYXlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdDYXJldCh0b29sdGlwUG9pbnQsIGN0eCwgc2l6ZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYXJldFBvc2l0aW9uID0gdGhpcy5nZXRDYXJldFBvc2l0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MiwgY2FyZXRQb3NpdGlvbi55Mik7XG4gICAgICAgIGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MywgY2FyZXRQb3NpdGlvbi55Myk7XG4gICAgfVxuICAgIGdldENhcmV0UG9zaXRpb24odG9vbHRpcFBvaW50LCBzaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBjYXJldFNpemUgLCBjb3JuZXJSYWRpdXMgIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IHRvcExlZnQgLCB0b3BSaWdodCAsIGJvdHRvbUxlZnQgLCBib3R0b21SaWdodCAgfSA9IHRvVFJCTENvcm5lcnMoY29ybmVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgeyB4OiBwdFggLCB5OiBwdFkgIH0gPSB0b29sdGlwUG9pbnQ7XG4gICAgICAgIGNvbnN0IHsgd2lkdGggLCBoZWlnaHQgIH0gPSBzaXplO1xuICAgICAgICBsZXQgeDEsIHgyLCB4MywgeTEsIHkyLCB5MztcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgICAgIHkyID0gcHRZICsgaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgxID0gcHRYO1xuICAgICAgICAgICAgICAgIHgyID0geDEgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MSA9IHB0WCArIHdpZHRoO1xuICAgICAgICAgICAgICAgIHgyID0geDEgKyBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeTEgPSB5MiAtIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB5MyA9IHkyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeDMgPSB4MTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgTWF0aC5tYXgodG9wTGVmdCwgYm90dG9tTGVmdCkgKyBjYXJldFNpemU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICAgICAgIHgyID0gcHRYICsgd2lkdGggLSBNYXRoLm1heCh0b3BSaWdodCwgYm90dG9tUmlnaHQpIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4MiA9IHRoaXMuY2FyZXRYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcbiAgICAgICAgICAgICAgICB5MSA9IHB0WTtcbiAgICAgICAgICAgICAgICB5MiA9IHkxIC0gY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgxID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICAgICAgeDMgPSB4MiArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeTEgPSBwdFkgKyBoZWlnaHQ7XG4gICAgICAgICAgICAgICAgeTIgPSB5MSArIGNhcmV0U2l6ZTtcbiAgICAgICAgICAgICAgICB4MSA9IHgyICsgY2FyZXRTaXplO1xuICAgICAgICAgICAgICAgIHgzID0geDIgLSBjYXJldFNpemU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB5MyA9IHkxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4MSxcbiAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgeDMsXG4gICAgICAgICAgICB5MSxcbiAgICAgICAgICAgIHkyLFxuICAgICAgICAgICAgeTNcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZHJhd1RpdGxlKHB0LCBjdHgsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnRpdGxlO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0aXRsZS5sZW5ndGg7XG4gICAgICAgIGxldCB0aXRsZUZvbnQsIHRpdGxlU3BhY2luZywgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLnRpdGxlQWxpZ24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24ob3B0aW9ucy50aXRsZUFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIHRpdGxlRm9udCA9IHRvRm9udChvcHRpb25zLnRpdGxlRm9udCk7XG4gICAgICAgICAgICB0aXRsZVNwYWNpbmcgPSBvcHRpb25zLnRpdGxlU3BhY2luZztcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLnRpdGxlQ29sb3I7XG4gICAgICAgICAgICBjdHguZm9udCA9IHRpdGxlRm9udC5zdHJpbmc7XG4gICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSl7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIHRpdGxlRm9udC5saW5lSGVpZ2h0IC8gMik7XG4gICAgICAgICAgICAgICAgcHQueSArPSB0aXRsZUZvbnQubGluZUhlaWdodCArIHRpdGxlU3BhY2luZztcbiAgICAgICAgICAgICAgICBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwdC55ICs9IG9wdGlvbnMudGl0bGVNYXJnaW5Cb3R0b20gLSB0aXRsZVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuIF9kcmF3Q29sb3JCb3goY3R4LCBwdCwgaSwgcnRsSGVscGVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsQ29sb3IgPSB0aGlzLmxhYmVsQ29sb3JzW2ldO1xuICAgICAgICBjb25zdCBsYWJlbFBvaW50U3R5bGUgPSB0aGlzLmxhYmVsUG9pbnRTdHlsZXNbaV07XG4gICAgICAgIGNvbnN0IHsgYm94SGVpZ2h0ICwgYm94V2lkdGggIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBib2R5Rm9udCA9IHRvRm9udChvcHRpb25zLmJvZHlGb250KTtcbiAgICAgICAgY29uc3QgY29sb3JYID0gZ2V0QWxpZ25lZFgodGhpcywgJ2xlZnQnLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcnRsQ29sb3JYID0gcnRsSGVscGVyLngoY29sb3JYKTtcbiAgICAgICAgY29uc3QgeU9mZlNldCA9IGJveEhlaWdodCA8IGJvZHlGb250LmxpbmVIZWlnaHQgPyAoYm9keUZvbnQubGluZUhlaWdodCAtIGJveEhlaWdodCkgLyAyIDogMDtcbiAgICAgICAgY29uc3QgY29sb3JZID0gcHQueSArIHlPZmZTZXQ7XG4gICAgICAgIGlmIChvcHRpb25zLnVzZVBvaW50U3R5bGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHJhZGl1czogTWF0aC5taW4oYm94V2lkdGgsIGJveEhlaWdodCkgLyAyLFxuICAgICAgICAgICAgICAgIHBvaW50U3R5bGU6IGxhYmVsUG9pbnRTdHlsZS5wb2ludFN0eWxlLFxuICAgICAgICAgICAgICAgIHJvdGF0aW9uOiBsYWJlbFBvaW50U3R5bGUucm90YXRpb24sXG4gICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJYID0gcnRsSGVscGVyLmxlZnRGb3JMdHIocnRsQ29sb3JYLCBib3hXaWR0aCkgKyBib3hXaWR0aCAvIDI7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXJZID0gY29sb3JZICsgYm94SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgZHJhd1BvaW50KGN0eCwgZHJhd09wdGlvbnMsIGNlbnRlclgsIGNlbnRlclkpO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgIGRyYXdQb2ludChjdHgsIGRyYXdPcHRpb25zLCBjZW50ZXJYLCBjZW50ZXJZKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBpc09iamVjdChsYWJlbENvbG9yLmJvcmRlcldpZHRoKSA/IE1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMobGFiZWxDb2xvci5ib3JkZXJXaWR0aCkpIDogbGFiZWxDb2xvci5ib3JkZXJXaWR0aCB8fCAxO1xuICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gbGFiZWxDb2xvci5ib3JkZXJDb2xvcjtcbiAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChsYWJlbENvbG9yLmJvcmRlckRhc2ggfHwgW10pO1xuICAgICAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gbGFiZWxDb2xvci5ib3JkZXJEYXNoT2Zmc2V0IHx8IDA7XG4gICAgICAgICAgICBjb25zdCBvdXRlclggPSBydGxIZWxwZXIubGVmdEZvckx0cihydGxDb2xvclgsIGJveFdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGlubmVyWCA9IHJ0bEhlbHBlci5sZWZ0Rm9yTHRyKHJ0bEhlbHBlci54UGx1cyhydGxDb2xvclgsIDEpLCBib3hXaWR0aCAtIDIpO1xuICAgICAgICAgICAgY29uc3QgYm9yZGVyUmFkaXVzID0gdG9UUkJMQ29ybmVycyhsYWJlbENvbG9yLmJvcmRlclJhZGl1cyk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhib3JkZXJSYWRpdXMpLnNvbWUoKHYpPT52ICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5tdWx0aUtleUJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwge1xuICAgICAgICAgICAgICAgICAgICB4OiBvdXRlclgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGNvbG9yWSxcbiAgICAgICAgICAgICAgICAgICAgdzogYm94V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBib3JkZXJSYWRpdXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gbGFiZWxDb2xvci5iYWNrZ3JvdW5kQ29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogaW5uZXJYLFxuICAgICAgICAgICAgICAgICAgICB5OiBjb2xvclkgKyAxLFxuICAgICAgICAgICAgICAgICAgICB3OiBib3hXaWR0aCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIGg6IGJveEhlaWdodCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogYm9yZGVyUmFkaXVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IG9wdGlvbnMubXVsdGlLZXlCYWNrZ3JvdW5kO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdChvdXRlclgsIGNvbG9yWSwgYm94V2lkdGgsIGJveEhlaWdodCk7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3Qob3V0ZXJYLCBjb2xvclksIGJveFdpZHRoLCBib3hIZWlnaHQpO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoaW5uZXJYLCBjb2xvclkgKyAxLCBib3hXaWR0aCAtIDIsIGJveEhlaWdodCAtIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICB9XG4gICAgZHJhd0JvZHkocHQsIGN0eCwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGJvZHkgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IGJvZHlTcGFjaW5nICwgYm9keUFsaWduICwgZGlzcGxheUNvbG9ycyAsIGJveEhlaWdodCAsIGJveFdpZHRoICwgYm94UGFkZGluZyAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvZHlGb250ID0gdG9Gb250KG9wdGlvbnMuYm9keUZvbnQpO1xuICAgICAgICBsZXQgYm9keUxpbmVIZWlnaHQgPSBib2R5Rm9udC5saW5lSGVpZ2h0O1xuICAgICAgICBsZXQgeExpbmVQYWRkaW5nID0gMDtcbiAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgY29uc3QgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICBjdHguZmlsbFRleHQobGluZSwgcnRsSGVscGVyLngocHQueCArIHhMaW5lUGFkZGluZyksIHB0LnkgKyBib2R5TGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgcHQueSArPSBib2R5TGluZUhlaWdodCArIGJvZHlTcGFjaW5nO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBib2R5QWxpZ25Gb3JDYWxjdWxhdGlvbiA9IHJ0bEhlbHBlci50ZXh0QWxpZ24oYm9keUFsaWduKTtcbiAgICAgICAgbGV0IGJvZHlJdGVtLCB0ZXh0Q29sb3IsIGxpbmVzLCBpLCBqLCBpbGVuLCBqbGVuO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gYm9keUFsaWduO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGN0eC5mb250ID0gYm9keUZvbnQuc3RyaW5nO1xuICAgICAgICBwdC54ID0gZ2V0QWxpZ25lZFgodGhpcywgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24sIG9wdGlvbnMpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5ib2R5Q29sb3I7XG4gICAgICAgIGVhY2godGhpcy5iZWZvcmVCb2R5LCBmaWxsTGluZU9mVGV4dCk7XG4gICAgICAgIHhMaW5lUGFkZGluZyA9IGRpc3BsYXlDb2xvcnMgJiYgYm9keUFsaWduRm9yQ2FsY3VsYXRpb24gIT09ICdyaWdodCcgPyBib2R5QWxpZ24gPT09ICdjZW50ZXInID8gYm94V2lkdGggLyAyICsgYm94UGFkZGluZyA6IGJveFdpZHRoICsgMiArIGJveFBhZGRpbmcgOiAwO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBib2R5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBib2R5SXRlbSA9IGJvZHlbaV07XG4gICAgICAgICAgICB0ZXh0Q29sb3IgPSB0aGlzLmxhYmVsVGV4dENvbG9yc1tpXTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0ZXh0Q29sb3I7XG4gICAgICAgICAgICBlYWNoKGJvZHlJdGVtLmJlZm9yZSwgZmlsbExpbmVPZlRleHQpO1xuICAgICAgICAgICAgbGluZXMgPSBib2R5SXRlbS5saW5lcztcbiAgICAgICAgICAgIGlmIChkaXNwbGF5Q29sb3JzICYmIGxpbmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYXdDb2xvckJveChjdHgsIHB0LCBpLCBydGxIZWxwZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gTWF0aC5tYXgoYm9keUZvbnQubGluZUhlaWdodCwgYm94SGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcihqID0gMCwgamxlbiA9IGxpbmVzLmxlbmd0aDsgaiA8IGpsZW47ICsrail7XG4gICAgICAgICAgICAgICAgZmlsbExpbmVPZlRleHQobGluZXNbal0pO1xuICAgICAgICAgICAgICAgIGJvZHlMaW5lSGVpZ2h0ID0gYm9keUZvbnQubGluZUhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVhY2goYm9keUl0ZW0uYWZ0ZXIsIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgfVxuICAgICAgICB4TGluZVBhZGRpbmcgPSAwO1xuICAgICAgICBib2R5TGluZUhlaWdodCA9IGJvZHlGb250LmxpbmVIZWlnaHQ7XG4gICAgICAgIGVhY2godGhpcy5hZnRlckJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcbiAgICAgICAgcHQueSAtPSBib2R5U3BhY2luZztcbiAgICB9XG4gICAgZHJhd0Zvb3RlcihwdCwgY3R4LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGZvb3RlciA9IHRoaXMuZm9vdGVyO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBmb290ZXIubGVuZ3RoO1xuICAgICAgICBsZXQgZm9vdGVyRm9udCwgaTtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgcnRsSGVscGVyID0gZ2V0UnRsQWRhcHRlcihvcHRpb25zLnJ0bCwgdGhpcy54LCB0aGlzLndpZHRoKTtcbiAgICAgICAgICAgIHB0LnggPSBnZXRBbGlnbmVkWCh0aGlzLCBvcHRpb25zLmZvb3RlckFsaWduLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHB0LnkgKz0gb3B0aW9ucy5mb290ZXJNYXJnaW5Ub3A7XG4gICAgICAgICAgICBjdHgudGV4dEFsaWduID0gcnRsSGVscGVyLnRleHRBbGlnbihvcHRpb25zLmZvb3RlckFsaWduKTtcbiAgICAgICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgICAgIGZvb3RlckZvbnQgPSB0b0ZvbnQob3B0aW9ucy5mb290ZXJGb250KTtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmZvb3RlckNvbG9yO1xuICAgICAgICAgICAgY3R4LmZvbnQgPSBmb290ZXJGb250LnN0cmluZztcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbmd0aDsgKytpKXtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQoZm9vdGVyW2ldLCBydGxIZWxwZXIueChwdC54KSwgcHQueSArIGZvb3RlckZvbnQubGluZUhlaWdodCAvIDIpO1xuICAgICAgICAgICAgICAgIHB0LnkgKz0gZm9vdGVyRm9udC5saW5lSGVpZ2h0ICsgb3B0aW9ucy5mb290ZXJTcGFjaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHsgeEFsaWduICwgeUFsaWduICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyB4ICwgeSAgfSA9IHB0O1xuICAgICAgICBjb25zdCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gdG9vbHRpcFNpemU7XG4gICAgICAgIGNvbnN0IHsgdG9wTGVmdCAsIHRvcFJpZ2h0ICwgYm90dG9tTGVmdCAsIGJvdHRvbVJpZ2h0ICB9ID0gdG9UUkJMQ29ybmVycyhvcHRpb25zLmNvcm5lclJhZGl1cyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRpb25zLmJhY2tncm91bmRDb2xvcjtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gb3B0aW9ucy5ib3JkZXJDb2xvcjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdGlvbnMuYm9yZGVyV2lkdGg7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4ICsgdG9wTGVmdCwgeSk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgd2lkdGggLSB0b3BSaWdodCwgeSk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSwgeCArIHdpZHRoLCB5ICsgdG9wUmlnaHQpO1xuICAgICAgICBpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCAtIGJvdHRvbVJpZ2h0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSBib3R0b21SaWdodCwgeSArIGhlaWdodCk7XG4gICAgICAgIGlmICh5QWxpZ24gPT09ICdib3R0b20nKSB7XG4gICAgICAgICAgICB0aGlzLmRyYXdDYXJldChwdCwgY3R4LCB0b29sdGlwU2l6ZSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgYm90dG9tTGVmdCwgeSArIGhlaWdodCk7XG4gICAgICAgIGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSBib3R0b21MZWZ0KTtcbiAgICAgICAgaWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicgJiYgeEFsaWduID09PSAnbGVmdCcpIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd0NhcmV0KHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjdHgubGluZVRvKHgsIHkgKyB0b3BMZWZ0KTtcbiAgICAgICAgY3R4LnF1YWRyYXRpY0N1cnZlVG8oeCwgeSwgeCArIHRvcExlZnQsIHkpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgICB9XG4gICAgfVxuIF91cGRhdGVBbmltYXRpb25UYXJnZXQob3B0aW9ucykge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IGFuaW1zID0gdGhpcy4kYW5pbWF0aW9ucztcbiAgICAgICAgY29uc3QgYW5pbVggPSBhbmltcyAmJiBhbmltcy54O1xuICAgICAgICBjb25zdCBhbmltWSA9IGFuaW1zICYmIGFuaW1zLnk7XG4gICAgICAgIGlmIChhbmltWCB8fCBhbmltWSkge1xuICAgICAgICAgICAgY29uc3QgcG9zaXRpb24gPSBwb3NpdGlvbmVyc1tvcHRpb25zLnBvc2l0aW9uXS5jYWxsKHRoaXMsIHRoaXMuX2FjdGl2ZSwgdGhpcy5fZXZlbnRQb3NpdGlvbik7XG4gICAgICAgICAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3NpemUgPSBnZXRUb29sdGlwU2l6ZSh0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uQW5kU2l6ZSA9IE9iamVjdC5hc3NpZ24oe30sIHBvc2l0aW9uLCB0aGlzLl9zaXplKTtcbiAgICAgICAgICAgIGNvbnN0IGFsaWdubWVudCA9IGRldGVybWluZUFsaWdubWVudChjaGFydCwgb3B0aW9ucywgcG9zaXRpb25BbmRTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gZ2V0QmFja2dyb3VuZFBvaW50KG9wdGlvbnMsIHBvc2l0aW9uQW5kU2l6ZSwgYWxpZ25tZW50LCBjaGFydCk7XG4gICAgICAgICAgICBpZiAoYW5pbVguX3RvICE9PSBwb2ludC54IHx8IGFuaW1ZLl90byAhPT0gcG9pbnQueSkge1xuICAgICAgICAgICAgICAgIHRoaXMueEFsaWduID0gYWxpZ25tZW50LnhBbGlnbjtcbiAgICAgICAgICAgICAgICB0aGlzLnlBbGlnbiA9IGFsaWdubWVudC55QWxpZ247XG4gICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHNpemUud2lkdGg7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBzaXplLmhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLmNhcmV0WCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICAgICAgdGhpcy5jYXJldFkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVBbmltYXRpb25zKCkudXBkYXRlKHRoaXMsIHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiBfd2lsbFJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5vcGFjaXR5O1xuICAgIH1cbiAgICBkcmF3KGN0eCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnNldENvbnRleHQodGhpcy5nZXRDb250ZXh0KCkpO1xuICAgICAgICBsZXQgb3BhY2l0eSA9IHRoaXMub3BhY2l0eTtcbiAgICAgICAgaWYgKCFvcGFjaXR5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlQW5pbWF0aW9uVGFyZ2V0KG9wdGlvbnMpO1xuICAgICAgICBjb25zdCB0b29sdGlwU2l6ZSA9IHtcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBwdCA9IHtcbiAgICAgICAgICAgIHg6IHRoaXMueCxcbiAgICAgICAgICAgIHk6IHRoaXMueVxuICAgICAgICB9O1xuICAgICAgICBvcGFjaXR5ID0gTWF0aC5hYnMob3BhY2l0eSkgPCAxZS0zID8gMCA6IG9wYWNpdHk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0aW9ucy5wYWRkaW5nKTtcbiAgICAgICAgY29uc3QgaGFzVG9vbHRpcENvbnRlbnQgPSB0aGlzLnRpdGxlLmxlbmd0aCB8fCB0aGlzLmJlZm9yZUJvZHkubGVuZ3RoIHx8IHRoaXMuYm9keS5sZW5ndGggfHwgdGhpcy5hZnRlckJvZHkubGVuZ3RoIHx8IHRoaXMuZm9vdGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IG9wYWNpdHk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCBjdHgsIHRvb2x0aXBTaXplLCBvcHRpb25zKTtcbiAgICAgICAgICAgIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIG9wdGlvbnMudGV4dERpcmVjdGlvbik7XG4gICAgICAgICAgICBwdC55ICs9IHBhZGRpbmcudG9wO1xuICAgICAgICAgICAgdGhpcy5kcmF3VGl0bGUocHQsIGN0eCwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmRyYXdCb2R5KHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5kcmF3Rm9vdGVyKHB0LCBjdHgsIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmVzdG9yZVRleHREaXJlY3Rpb24oY3R4LCBvcHRpb25zLnRleHREaXJlY3Rpb24pO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXRBY3RpdmVFbGVtZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICB9XG4gc2V0QWN0aXZlRWxlbWVudHMoYWN0aXZlRWxlbWVudHMsIGV2ZW50UG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gYWN0aXZlRWxlbWVudHMubWFwKCh7IGRhdGFzZXRJbmRleCAsIGluZGV4ICB9KT0+e1xuICAgICAgICAgICAgY29uc3QgbWV0YSA9IHRoaXMuY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcbiAgICAgICAgICAgIGlmICghbWV0YSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYSBkYXRhc2V0IGF0IGluZGV4ICcgKyBkYXRhc2V0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhc2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogbWV0YS5kYXRhW2luZGV4XSxcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSAhX2VsZW1lbnRzRXF1YWwobGFzdEFjdGl2ZSwgYWN0aXZlKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25DaGFuZ2VkID0gdGhpcy5fcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZXZlbnRQb3NpdGlvbik7XG4gICAgICAgIGlmIChjaGFuZ2VkIHx8IHBvc2l0aW9uQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gYWN0aXZlO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRQb3NpdGlvbiA9IGV2ZW50UG9zaXRpb247XG4gICAgICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gaGFuZGxlRXZlbnQoZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSA9IHRydWUpIHtcbiAgICAgICAgaWYgKHJlcGxheSAmJiB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pZ25vcmVSZXBsYXlFdmVudHMgPSBmYWxzZTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGFzdEFjdGl2ZSA9IHRoaXMuX2FjdGl2ZSB8fCBbXTtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQ2hhbmdlZCA9IHRoaXMuX3Bvc2l0aW9uQ2hhbmdlZChhY3RpdmUsIGUpO1xuICAgICAgICBjb25zdCBjaGFuZ2VkID0gcmVwbGF5IHx8ICFfZWxlbWVudHNFcXVhbChhY3RpdmUsIGxhc3RBY3RpdmUpIHx8IHBvc2l0aW9uQ2hhbmdlZDtcbiAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2ZSA9IGFjdGl2ZTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZWQgfHwgb3B0aW9ucy5leHRlcm5hbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50UG9zaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGUueCxcbiAgICAgICAgICAgICAgICAgICAgeTogZS55XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSh0cnVlLCByZXBsYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xuICAgIH1cbiBfZ2V0QWN0aXZlRWxlbWVudHMoZSwgbGFzdEFjdGl2ZSwgcmVwbGF5LCBpbkNoYXJ0QXJlYSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2VvdXQnKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbkNoYXJ0QXJlYSkge1xuICAgICAgICAgICAgcmV0dXJuIGxhc3RBY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5jaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGUsIG9wdGlvbnMubW9kZSwgb3B0aW9ucywgcmVwbGF5KTtcbiAgICAgICAgaWYgKG9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgYWN0aXZlLnJldmVyc2UoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cbiBfcG9zaXRpb25DaGFuZ2VkKGFjdGl2ZSwgZSkge1xuICAgICAgICBjb25zdCB7IGNhcmV0WCAsIGNhcmV0WSAsIG9wdGlvbnMgIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdGlvbnMucG9zaXRpb25dLmNhbGwodGhpcywgYWN0aXZlLCBlKTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uICE9PSBmYWxzZSAmJiAoY2FyZXRYICE9PSBwb3NpdGlvbi54IHx8IGNhcmV0WSAhPT0gcG9zaXRpb24ueSk7XG4gICAgfVxufVxudmFyIHBsdWdpbl90b29sdGlwID0ge1xuICAgIGlkOiAndG9vbHRpcCcsXG4gICAgX2VsZW1lbnQ6IFRvb2x0aXAsXG4gICAgcG9zaXRpb25lcnMsXG4gICAgYWZ0ZXJJbml0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAgPSBuZXcgVG9vbHRpcCh7XG4gICAgICAgICAgICAgICAgY2hhcnQsXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVVwZGF0ZSAoY2hhcnQsIF9hcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChjaGFydC50b29sdGlwKSB7XG4gICAgICAgICAgICBjaGFydC50b29sdGlwLmluaXRpYWxpemUob3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJlc2V0IChjaGFydCwgX2FyZ3MsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJEcmF3IChjaGFydCkge1xuICAgICAgICBjb25zdCB0b29sdGlwID0gY2hhcnQudG9vbHRpcDtcbiAgICAgICAgaWYgKHRvb2x0aXAgJiYgdG9vbHRpcC5fd2lsbFJlbmRlcigpKSB7XG4gICAgICAgICAgICBjb25zdCBhcmdzID0ge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAoY2hhcnQubm90aWZ5UGx1Z2lucygnYmVmb3JlVG9vbHRpcERyYXcnLCB7XG4gICAgICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b29sdGlwLmRyYXcoY2hhcnQuY3R4KTtcbiAgICAgICAgICAgIGNoYXJ0Lm5vdGlmeVBsdWdpbnMoJ2FmdGVyVG9vbHRpcERyYXcnLCBhcmdzKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWZ0ZXJFdmVudCAoY2hhcnQsIGFyZ3MpIHtcbiAgICAgICAgaWYgKGNoYXJ0LnRvb2x0aXApIHtcbiAgICAgICAgICAgIGNvbnN0IHVzZUZpbmFsUG9zaXRpb24gPSBhcmdzLnJlcGxheTtcbiAgICAgICAgICAgIGlmIChjaGFydC50b29sdGlwLmhhbmRsZUV2ZW50KGFyZ3MuZXZlbnQsIHVzZUZpbmFsUG9zaXRpb24sIGFyZ3MuaW5DaGFydEFyZWEpKSB7XG4gICAgICAgICAgICAgICAgYXJncy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgZXh0ZXJuYWw6IG51bGwsXG4gICAgICAgIHBvc2l0aW9uOiAnYXZlcmFnZScsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG4gICAgICAgIHRpdGxlQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgdGl0bGVGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICB0aXRsZVNwYWNpbmc6IDIsXG4gICAgICAgIHRpdGxlTWFyZ2luQm90dG9tOiA2LFxuICAgICAgICB0aXRsZUFsaWduOiAnbGVmdCcsXG4gICAgICAgIGJvZHlDb2xvcjogJyNmZmYnLFxuICAgICAgICBib2R5U3BhY2luZzogMixcbiAgICAgICAgYm9keUZvbnQ6IHt9LFxuICAgICAgICBib2R5QWxpZ246ICdsZWZ0JyxcbiAgICAgICAgZm9vdGVyQ29sb3I6ICcjZmZmJyxcbiAgICAgICAgZm9vdGVyU3BhY2luZzogMixcbiAgICAgICAgZm9vdGVyTWFyZ2luVG9wOiA2LFxuICAgICAgICBmb290ZXJGb250OiB7XG4gICAgICAgICAgICB3ZWlnaHQ6ICdib2xkJ1xuICAgICAgICB9LFxuICAgICAgICBmb290ZXJBbGlnbjogJ2xlZnQnLFxuICAgICAgICBwYWRkaW5nOiA2LFxuICAgICAgICBjYXJldFBhZGRpbmc6IDIsXG4gICAgICAgIGNhcmV0U2l6ZTogNSxcbiAgICAgICAgY29ybmVyUmFkaXVzOiA2LFxuICAgICAgICBib3hIZWlnaHQ6IChjdHgsIG9wdHMpPT5vcHRzLmJvZHlGb250LnNpemUsXG4gICAgICAgIGJveFdpZHRoOiAoY3R4LCBvcHRzKT0+b3B0cy5ib2R5Rm9udC5zaXplLFxuICAgICAgICBtdWx0aUtleUJhY2tncm91bmQ6ICcjZmZmJyxcbiAgICAgICAgZGlzcGxheUNvbG9yczogdHJ1ZSxcbiAgICAgICAgYm94UGFkZGluZzogMCxcbiAgICAgICAgYm9yZGVyQ29sb3I6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDAsXG4gICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgZHVyYXRpb246IDQwMCxcbiAgICAgICAgICAgIGVhc2luZzogJ2Vhc2VPdXRRdWFydCdcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgbnVtYmVyczoge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgJ3gnLFxuICAgICAgICAgICAgICAgICAgICAneScsXG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCcsXG4gICAgICAgICAgICAgICAgICAgICdoZWlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAnY2FyZXRYJyxcbiAgICAgICAgICAgICAgICAgICAgJ2NhcmV0WSdcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDIwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxsYmFja3M6IGRlZmF1bHRDYWxsYmFja3NcbiAgICB9LFxuICAgIGRlZmF1bHRSb3V0ZXM6IHtcbiAgICAgICAgYm9keUZvbnQ6ICdmb250JyxcbiAgICAgICAgZm9vdGVyRm9udDogJ2ZvbnQnLFxuICAgICAgICB0aXRsZUZvbnQ6ICdmb250J1xuICAgIH0sXG4gICAgZGVzY3JpcHRvcnM6IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2ZpbHRlcicgJiYgbmFtZSAhPT0gJ2l0ZW1Tb3J0JyAmJiBuYW1lICE9PSAnZXh0ZXJuYWwnLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZSxcbiAgICAgICAgY2FsbGJhY2tzOiB7XG4gICAgICAgICAgICBfc2NyaXB0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgX2ZhbGxiYWNrOiAnYW5pbWF0aW9uJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZGRpdGlvbmFsT3B0aW9uU2NvcGVzOiBbXG4gICAgICAgICdpbnRlcmFjdGlvbidcbiAgICBdXG59O1xuXG52YXIgcGx1Z2lucyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbl9fcHJvdG9fXzogbnVsbCxcbkNvbG9yczogcGx1Z2luX2NvbG9ycyxcbkRlY2ltYXRpb246IHBsdWdpbl9kZWNpbWF0aW9uLFxuRmlsbGVyOiBpbmRleCxcbkxlZ2VuZDogcGx1Z2luX2xlZ2VuZCxcblN1YlRpdGxlOiBwbHVnaW5fc3VidGl0bGUsXG5UaXRsZTogcGx1Z2luX3RpdGxlLFxuVG9vbHRpcDogcGx1Z2luX3Rvb2x0aXBcbn0pO1xuXG5jb25zdCBhZGRJZlN0cmluZyA9IChsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKT0+e1xuICAgIGlmICh0eXBlb2YgcmF3ID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbmRleCA9IGxhYmVscy5wdXNoKHJhdykgLSAxO1xuICAgICAgICBhZGRlZExhYmVscy51bnNoaWZ0KHtcbiAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgbGFiZWw6IHJhd1xuICAgICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKHJhdykpIHtcbiAgICAgICAgaW5kZXggPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59O1xuZnVuY3Rpb24gZmluZE9yQWRkTGFiZWwobGFiZWxzLCByYXcsIGluZGV4LCBhZGRlZExhYmVscykge1xuICAgIGNvbnN0IGZpcnN0ID0gbGFiZWxzLmluZGV4T2YocmF3KTtcbiAgICBpZiAoZmlyc3QgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBhZGRJZlN0cmluZyhsYWJlbHMsIHJhdywgaW5kZXgsIGFkZGVkTGFiZWxzKTtcbiAgICB9XG4gICAgY29uc3QgbGFzdCA9IGxhYmVscy5sYXN0SW5kZXhPZihyYXcpO1xuICAgIHJldHVybiBmaXJzdCAhPT0gbGFzdCA/IGluZGV4IDogZmlyc3Q7XG59XG5jb25zdCB2YWxpZEluZGV4ID0gKGluZGV4LCBtYXgpPT5pbmRleCA9PT0gbnVsbCA/IG51bGwgOiBfbGltaXRWYWx1ZShNYXRoLnJvdW5kKGluZGV4KSwgMCwgbWF4KTtcbmZ1bmN0aW9uIF9nZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgY29uc3QgbGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKTtcbiAgICBpZiAodmFsdWUgPj0gMCAmJiB2YWx1ZSA8IGxhYmVscy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsc1t2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmNsYXNzIENhdGVnb3J5U2NhbGUgZXh0ZW5kcyBTY2FsZSB7XG4gICAgc3RhdGljIGlkID0gJ2NhdGVnb3J5JztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBjYWxsYmFjazogX2dldExhYmVsRm9yVmFsdWVcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSAwO1xuICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgIH1cbiAgICBpbml0KHNjYWxlT3B0aW9ucykge1xuICAgICAgICBjb25zdCBhZGRlZCA9IHRoaXMuX2FkZGVkTGFiZWxzO1xuICAgICAgICBpZiAoYWRkZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICAgICAgZm9yIChjb25zdCB7IGluZGV4ICwgbGFiZWwgIH0gb2YgYWRkZWQpe1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNbaW5kZXhdID09PSBsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9hZGRlZExhYmVscyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRpb25zKTtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihyYXcpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBpbmRleCA9IGlzRmluaXRlKGluZGV4KSAmJiBsYWJlbHNbaW5kZXhdID09PSByYXcgPyBpbmRleCA6IGZpbmRPckFkZExhYmVsKGxhYmVscywgcmF3LCB2YWx1ZU9yRGVmYXVsdChpbmRleCwgcmF3KSwgdGhpcy5fYWRkZWRMYWJlbHMpO1xuICAgICAgICByZXR1cm4gdmFsaWRJbmRleChpbmRleCwgbGFiZWxzLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gdGhpcy5nZXRVc2VyQm91bmRzKCk7XG4gICAgICAgIGxldCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJykge1xuICAgICAgICAgICAgaWYgKCFtaW5EZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1heCA9IHRoaXMuZ2V0TGFiZWxzKCkubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1pbiA9IG1pbjtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5vcHRpb25zLm9mZnNldDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICAgICAgbGV0IGxhYmVscyA9IHRoaXMuZ2V0TGFiZWxzKCk7XG4gICAgICAgIGxhYmVscyA9IG1pbiA9PT0gMCAmJiBtYXggPT09IGxhYmVscy5sZW5ndGggLSAxID8gbGFiZWxzIDogbGFiZWxzLnNsaWNlKG1pbiwgbWF4ICsgMSk7XG4gICAgICAgIHRoaXMuX3ZhbHVlUmFuZ2UgPSBNYXRoLm1heChsYWJlbHMubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSwgMSk7XG4gICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB0aGlzLm1pbiAtIChvZmZzZXQgPyAwLjUgOiAwKTtcbiAgICAgICAgZm9yKGxldCB2YWx1ZSA9IG1pbjsgdmFsdWUgPD0gbWF4OyB2YWx1ZSsrKXtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGlja3M7XG4gICAgfVxuICAgIGdldExhYmVsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF9nZXRMYWJlbEZvclZhbHVlLmNhbGwodGhpcywgdmFsdWUpO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIHN1cGVyLmNvbmZpZ3VyZSgpO1xuICAgICAgICBpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JldmVyc2VQaXhlbHMgPSAhdGhpcy5fcmV2ZXJzZVBpeGVscztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMucGFyc2UodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IE5hTiA6IHRoaXMuZ2V0UGl4ZWxGb3JEZWNpbWFsKCh2YWx1ZSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFBpeGVsRm9yVGljayhpbmRleCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IHRoaXMudGlja3M7XG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiB0aWNrcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5nZXRQaXhlbEZvclZhbHVlKHRpY2tzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodGhpcy5fc3RhcnRWYWx1ZSArIHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRCYXNlUGl4ZWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJvdHRvbTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlVGlja3MkMShnZW5lcmF0aW9uT3B0aW9ucywgZGF0YVJhbmdlKSB7XG4gICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICBjb25zdCBNSU5fU1BBQ0lORyA9IDFlLTE0O1xuICAgIGNvbnN0IHsgYm91bmRzICwgc3RlcCAsIG1pbiAsIG1heCAsIHByZWNpc2lvbiAsIGNvdW50ICwgbWF4VGlja3MgLCBtYXhEaWdpdHMgLCBpbmNsdWRlQm91bmRzICB9ID0gZ2VuZXJhdGlvbk9wdGlvbnM7XG4gICAgY29uc3QgdW5pdCA9IHN0ZXAgfHwgMTtcbiAgICBjb25zdCBtYXhTcGFjZXMgPSBtYXhUaWNrcyAtIDE7XG4gICAgY29uc3QgeyBtaW46IHJtaW4gLCBtYXg6IHJtYXggIH0gPSBkYXRhUmFuZ2U7XG4gICAgY29uc3QgbWluRGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1pbik7XG4gICAgY29uc3QgbWF4RGVmaW5lZCA9ICFpc051bGxPclVuZGVmKG1heCk7XG4gICAgY29uc3QgY291bnREZWZpbmVkID0gIWlzTnVsbE9yVW5kZWYoY291bnQpO1xuICAgIGNvbnN0IG1pblNwYWNpbmcgPSAocm1heCAtIHJtaW4pIC8gKG1heERpZ2l0cyArIDEpO1xuICAgIGxldCBzcGFjaW5nID0gbmljZU51bSgocm1heCAtIHJtaW4pIC8gbWF4U3BhY2VzIC8gdW5pdCkgKiB1bml0O1xuICAgIGxldCBmYWN0b3IsIG5pY2VNaW4sIG5pY2VNYXgsIG51bVNwYWNlcztcbiAgICBpZiAoc3BhY2luZyA8IE1JTl9TUEFDSU5HICYmICFtaW5EZWZpbmVkICYmICFtYXhEZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtaW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHJtYXhcbiAgICAgICAgICAgIH1cbiAgICAgICAgXTtcbiAgICB9XG4gICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKHJtYXggLyBzcGFjaW5nKSAtIE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpO1xuICAgIGlmIChudW1TcGFjZXMgPiBtYXhTcGFjZXMpIHtcbiAgICAgICAgc3BhY2luZyA9IG5pY2VOdW0obnVtU3BhY2VzICogc3BhY2luZyAvIG1heFNwYWNlcyAvIHVuaXQpICogdW5pdDtcbiAgICB9XG4gICAgaWYgKCFpc051bGxPclVuZGVmKHByZWNpc2lvbikpIHtcbiAgICAgICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG4gICAgICAgIHNwYWNpbmcgPSBNYXRoLmNlaWwoc3BhY2luZyAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgfVxuICAgIGlmIChib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgbmljZU1pbiA9IE1hdGguZmxvb3Iocm1pbiAvIHNwYWNpbmcpICogc3BhY2luZztcbiAgICAgICAgbmljZU1heCA9IE1hdGguY2VpbChybWF4IC8gc3BhY2luZykgKiBzcGFjaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG5pY2VNaW4gPSBybWluO1xuICAgICAgICBuaWNlTWF4ID0gcm1heDtcbiAgICB9XG4gICAgaWYgKG1pbkRlZmluZWQgJiYgbWF4RGVmaW5lZCAmJiBzdGVwICYmIGFsbW9zdFdob2xlKChtYXggLSBtaW4pIC8gc3RlcCwgc3BhY2luZyAvIDEwMDApKSB7XG4gICAgICAgIG51bVNwYWNlcyA9IE1hdGgucm91bmQoTWF0aC5taW4oKG1heCAtIG1pbikgLyBzcGFjaW5nLCBtYXhUaWNrcykpO1xuICAgICAgICBzcGFjaW5nID0gKG1heCAtIG1pbikgLyBudW1TcGFjZXM7XG4gICAgICAgIG5pY2VNaW4gPSBtaW47XG4gICAgICAgIG5pY2VNYXggPSBtYXg7XG4gICAgfSBlbHNlIGlmIChjb3VudERlZmluZWQpIHtcbiAgICAgICAgbmljZU1pbiA9IG1pbkRlZmluZWQgPyBtaW4gOiBuaWNlTWluO1xuICAgICAgICBuaWNlTWF4ID0gbWF4RGVmaW5lZCA/IG1heCA6IG5pY2VNYXg7XG4gICAgICAgIG51bVNwYWNlcyA9IGNvdW50IC0gMTtcbiAgICAgICAgc3BhY2luZyA9IChuaWNlTWF4IC0gbmljZU1pbikgLyBudW1TcGFjZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG4gICAgICAgIGlmIChhbG1vc3RFcXVhbHMobnVtU3BhY2VzLCBNYXRoLnJvdW5kKG51bVNwYWNlcyksIHNwYWNpbmcgLyAxMDAwKSkge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5yb3VuZChudW1TcGFjZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVjaW1hbFBsYWNlcyA9IE1hdGgubWF4KF9kZWNpbWFsUGxhY2VzKHNwYWNpbmcpLCBfZGVjaW1hbFBsYWNlcyhuaWNlTWluKSk7XG4gICAgZmFjdG9yID0gTWF0aC5wb3coMTAsIGlzTnVsbE9yVW5kZWYocHJlY2lzaW9uKSA/IGRlY2ltYWxQbGFjZXMgOiBwcmVjaXNpb24pO1xuICAgIG5pY2VNaW4gPSBNYXRoLnJvdW5kKG5pY2VNaW4gKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBmYWN0b3IpIC8gZmFjdG9yO1xuICAgIGxldCBqID0gMDtcbiAgICBpZiAobWluRGVmaW5lZCkge1xuICAgICAgICBpZiAoaW5jbHVkZUJvdW5kcyAmJiBuaWNlTWluICE9PSBtaW4pIHtcbiAgICAgICAgICAgIHRpY2tzLnB1c2goe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBtaW5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKG5pY2VNaW4gPCBtaW4pIHtcbiAgICAgICAgICAgICAgICBqKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxtb3N0RXF1YWxzKE1hdGgucm91bmQoKG5pY2VNaW4gKyBqICogc3BhY2luZykgKiBmYWN0b3IpIC8gZmFjdG9yLCBtaW4sIHJlbGF0aXZlTGFiZWxTaXplKG1pbiwgbWluU3BhY2luZywgZ2VuZXJhdGlvbk9wdGlvbnMpKSkge1xuICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuaWNlTWluIDwgbWluKSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yKDsgaiA8IG51bVNwYWNlczsgKytqKXtcbiAgICAgICAgY29uc3QgdGlja1ZhbHVlID0gTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIGZhY3RvcikgLyBmYWN0b3I7XG4gICAgICAgIGlmIChtYXhEZWZpbmVkICYmIHRpY2tWYWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZTogdGlja1ZhbHVlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAobWF4RGVmaW5lZCAmJiBpbmNsdWRlQm91bmRzICYmIG5pY2VNYXggIT09IG1heCkge1xuICAgICAgICBpZiAodGlja3MubGVuZ3RoICYmIGFsbW9zdEVxdWFscyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXS52YWx1ZSwgbWF4LCByZWxhdGl2ZUxhYmVsU2l6ZShtYXgsIG1pblNwYWNpbmcsIGdlbmVyYXRpb25PcHRpb25zKSkpIHtcbiAgICAgICAgICAgIHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlID0gbWF4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IG1heFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFtYXhEZWZpbmVkIHx8IG5pY2VNYXggPT09IG1heCkge1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlOiBuaWNlTWF4XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG5mdW5jdGlvbiByZWxhdGl2ZUxhYmVsU2l6ZSh2YWx1ZSwgbWluU3BhY2luZywgeyBob3Jpem9udGFsICwgbWluUm90YXRpb24gIH0pIHtcbiAgICBjb25zdCByYWQgPSB0b1JhZGlhbnMobWluUm90YXRpb24pO1xuICAgIGNvbnN0IHJhdGlvID0gKGhvcml6b250YWwgPyBNYXRoLnNpbihyYWQpIDogTWF0aC5jb3MocmFkKSkgfHwgMC4wMDE7XG4gICAgY29uc3QgbGVuZ3RoID0gMC43NSAqIG1pblNwYWNpbmcgKiAoJycgKyB2YWx1ZSkubGVuZ3RoO1xuICAgIHJldHVybiBNYXRoLm1pbihtaW5TcGFjaW5nIC8gcmF0aW8sIGxlbmd0aCk7XG59XG5jbGFzcyBMaW5lYXJTY2FsZUJhc2UgZXh0ZW5kcyBTY2FsZSB7XG4gICAgY29uc3RydWN0b3IoY2ZnKXtcbiAgICAgICAgc3VwZXIoY2ZnKTtcbiAgICAgICAgIHRoaXMuc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmVuZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3N0YXJ0VmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IDA7XG4gICAgfVxuICAgIHBhcnNlKHJhdywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYocmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCh0eXBlb2YgcmF3ID09PSAnbnVtYmVyJyB8fCByYXcgaW5zdGFuY2VvZiBOdW1iZXIpICYmICFpc0Zpbml0ZSgrcmF3KSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICtyYXc7XG4gICAgfVxuICAgIGhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgYmVnaW5BdFplcm8gIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKGJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5TaWduID0gc2lnbihtaW4pO1xuICAgICAgICAgICAgY29uc3QgbWF4U2lnbiA9IHNpZ24obWF4KTtcbiAgICAgICAgICAgIGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuICAgICAgICAgICAgICAgIHNldE1heCgwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWluU2lnbiA+IDAgJiYgbWF4U2lnbiA+IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBsZXQgb2Zmc2V0ID0gbWF4ID09PSAwID8gMSA6IE1hdGguYWJzKG1heCAqIDAuMDUpO1xuICAgICAgICAgICAgc2V0TWF4KG1heCArIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoIWJlZ2luQXRaZXJvKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKG1pbiAtIG9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBnZXRUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuICAgICAgICBsZXQgeyBtYXhUaWNrc0xpbWl0ICwgc3RlcFNpemUgIH0gPSB0aWNrT3B0cztcbiAgICAgICAgbGV0IG1heFRpY2tzO1xuICAgICAgICBpZiAoc3RlcFNpemUpIHtcbiAgICAgICAgICAgIG1heFRpY2tzID0gTWF0aC5jZWlsKHRoaXMubWF4IC8gc3RlcFNpemUpIC0gTWF0aC5mbG9vcih0aGlzLm1pbiAvIHN0ZXBTaXplKSArIDE7XG4gICAgICAgICAgICBpZiAobWF4VGlja3MgPiAxMDAwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBzY2FsZXMuJHt0aGlzLmlkfS50aWNrcy5zdGVwU2l6ZTogJHtzdGVwU2l6ZX0gd291bGQgcmVzdWx0IGdlbmVyYXRpbmcgdXAgdG8gJHttYXhUaWNrc30gdGlja3MuIExpbWl0aW5nIHRvIDEwMDAuYCk7XG4gICAgICAgICAgICAgICAgbWF4VGlja3MgPSAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4VGlja3MgPSB0aGlzLmNvbXB1dGVUaWNrTGltaXQoKTtcbiAgICAgICAgICAgIG1heFRpY2tzTGltaXQgPSBtYXhUaWNrc0xpbWl0IHx8IDExO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtYXhUaWNrc0xpbWl0KSB7XG4gICAgICAgICAgICBtYXhUaWNrcyA9IE1hdGgubWluKG1heFRpY2tzTGltaXQsIG1heFRpY2tzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWF4VGlja3M7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIHJldHVybiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgfVxuICAgIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgbGV0IG1heFRpY2tzID0gdGhpcy5nZXRUaWNrTGltaXQoKTtcbiAgICAgICAgbWF4VGlja3MgPSBNYXRoLm1heCgyLCBtYXhUaWNrcyk7XG4gICAgICAgIGNvbnN0IG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuICAgICAgICAgICAgbWF4VGlja3MsXG4gICAgICAgICAgICBib3VuZHM6IG9wdHMuYm91bmRzLFxuICAgICAgICAgICAgbWluOiBvcHRzLm1pbixcbiAgICAgICAgICAgIG1heDogb3B0cy5tYXgsXG4gICAgICAgICAgICBwcmVjaXNpb246IHRpY2tPcHRzLnByZWNpc2lvbixcbiAgICAgICAgICAgIHN0ZXA6IHRpY2tPcHRzLnN0ZXBTaXplLFxuICAgICAgICAgICAgY291bnQ6IHRpY2tPcHRzLmNvdW50LFxuICAgICAgICAgICAgbWF4RGlnaXRzOiB0aGlzLl9tYXhEaWdpdHMoKSxcbiAgICAgICAgICAgIGhvcml6b250YWw6IHRoaXMuaXNIb3Jpem9udGFsKCksXG4gICAgICAgICAgICBtaW5Sb3RhdGlvbjogdGlja09wdHMubWluUm90YXRpb24gfHwgMCxcbiAgICAgICAgICAgIGluY2x1ZGVCb3VuZHM6IHRpY2tPcHRzLmluY2x1ZGVCb3VuZHMgIT09IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGRhdGFSYW5nZSA9IHRoaXMuX3JhbmdlIHx8IHRoaXM7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gZ2VuZXJhdGVUaWNrcyQxKG51bWVyaWNHZW5lcmF0b3JPcHRpb25zLCBkYXRhUmFuZ2UpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBjb25maWd1cmUoKSB7XG4gICAgICAgIGNvbnN0IHRpY2tzID0gdGhpcy50aWNrcztcbiAgICAgICAgbGV0IHN0YXJ0ID0gdGhpcy5taW47XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLm1heDtcbiAgICAgICAgc3VwZXIuY29uZmlndXJlKCk7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpY2tzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKGVuZCAtIHN0YXJ0KSAvIE1hdGgubWF4KHRpY2tzLmxlbmd0aCAtIDEsIDEpIC8gMjtcbiAgICAgICAgICAgIHN0YXJ0IC09IG9mZnNldDtcbiAgICAgICAgICAgIGVuZCArPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IHN0YXJ0O1xuICAgICAgICB0aGlzLl9lbmRWYWx1ZSA9IGVuZDtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGVuZCAtIHN0YXJ0O1xuICAgIH1cbiAgICBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIHRoaXMuY2hhcnQub3B0aW9ucy5sb2NhbGUsIHRoaXMub3B0aW9ucy50aWNrcy5mb3JtYXQpO1xuICAgIH1cbn1cblxuY2xhc3MgTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdsaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfVxuICAgIH07XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4gLCBtYXggIH0gPSB0aGlzLmdldE1pbk1heCh0cnVlKTtcbiAgICAgICAgdGhpcy5taW4gPSBpc051bWJlckZpbml0ZShtaW4pID8gbWluIDogMDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gbWF4IDogMTtcbiAgICAgICAgdGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG4gICAgfVxuIGNvbXB1dGVUaWNrTGltaXQoKSB7XG4gICAgICAgIGNvbnN0IGhvcml6b250YWwgPSB0aGlzLmlzSG9yaXpvbnRhbCgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBob3Jpem9udGFsID8gdGhpcy53aWR0aCA6IHRoaXMuaGVpZ2h0O1xuICAgICAgICBjb25zdCBtaW5Sb3RhdGlvbiA9IHRvUmFkaWFucyh0aGlzLm9wdGlvbnMudGlja3MubWluUm90YXRpb24pO1xuICAgICAgICBjb25zdCByYXRpbyA9IChob3Jpem9udGFsID8gTWF0aC5zaW4obWluUm90YXRpb24pIDogTWF0aC5jb3MobWluUm90YXRpb24pKSB8fCAwLjAwMTtcbiAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApO1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKGxlbmd0aCAvIE1hdGgubWluKDQwLCB0aWNrRm9udC5saW5lSGVpZ2h0IC8gcmF0aW8pKTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBOYU4gOiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgodmFsdWUgLSB0aGlzLl9zdGFydFZhbHVlKSAvIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFydFZhbHVlICsgdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpICogdGhpcy5fdmFsdWVSYW5nZTtcbiAgICB9XG59XG5cbmNvbnN0IGxvZzEwRmxvb3IgPSAodik9Pk1hdGguZmxvb3IobG9nMTAodikpO1xuY29uc3QgY2hhbmdlRXhwb25lbnQgPSAodiwgbSk9Pk1hdGgucG93KDEwLCBsb2cxMEZsb29yKHYpICsgbSk7XG5mdW5jdGlvbiBpc01ham9yKHRpY2tWYWwpIHtcbiAgICBjb25zdCByZW1haW4gPSB0aWNrVmFsIC8gTWF0aC5wb3coMTAsIGxvZzEwRmxvb3IodGlja1ZhbCkpO1xuICAgIHJldHVybiByZW1haW4gPT09IDE7XG59XG5mdW5jdGlvbiBzdGVwcyhtaW4sIG1heCwgcmFuZ2VFeHApIHtcbiAgICBjb25zdCByYW5nZVN0ZXAgPSBNYXRoLnBvdygxMCwgcmFuZ2VFeHApO1xuICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihtaW4gLyByYW5nZVN0ZXApO1xuICAgIGNvbnN0IGVuZCA9IE1hdGguY2VpbChtYXggLyByYW5nZVN0ZXApO1xuICAgIHJldHVybiBlbmQgLSBzdGFydDtcbn1cbmZ1bmN0aW9uIHN0YXJ0RXhwKG1pbiwgbWF4KSB7XG4gICAgY29uc3QgcmFuZ2UgPSBtYXggLSBtaW47XG4gICAgbGV0IHJhbmdlRXhwID0gbG9nMTBGbG9vcihyYW5nZSk7XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA+IDEwKXtcbiAgICAgICAgcmFuZ2VFeHArKztcbiAgICB9XG4gICAgd2hpbGUoc3RlcHMobWluLCBtYXgsIHJhbmdlRXhwKSA8IDEwKXtcbiAgICAgICAgcmFuZ2VFeHAtLTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWluKHJhbmdlRXhwLCBsb2cxMEZsb29yKG1pbikpO1xufVxuIGZ1bmN0aW9uIGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHsgbWluICwgbWF4ICB9KSB7XG4gICAgbWluID0gZmluaXRlT3JEZWZhdWx0KGdlbmVyYXRpb25PcHRpb25zLm1pbiwgbWluKTtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgIGNvbnN0IG1pbkV4cCA9IGxvZzEwRmxvb3IobWluKTtcbiAgICBsZXQgZXhwID0gc3RhcnRFeHAobWluLCBtYXgpO1xuICAgIGxldCBwcmVjaXNpb24gPSBleHAgPCAwID8gTWF0aC5wb3coMTAsIE1hdGguYWJzKGV4cCkpIDogMTtcbiAgICBjb25zdCBzdGVwU2l6ZSA9IE1hdGgucG93KDEwLCBleHApO1xuICAgIGNvbnN0IGJhc2UgPSBtaW5FeHAgPiBleHAgPyBNYXRoLnBvdygxMCwgbWluRXhwKSA6IDA7XG4gICAgY29uc3Qgc3RhcnQgPSBNYXRoLnJvdW5kKChtaW4gLSBiYXNlKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb247XG4gICAgY29uc3Qgb2Zmc2V0ID0gTWF0aC5mbG9vcigobWluIC0gYmFzZSkgLyBzdGVwU2l6ZSAvIDEwKSAqIHN0ZXBTaXplICogMTA7XG4gICAgbGV0IHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcigoc3RhcnQgLSBvZmZzZXQpIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuICAgIGxldCB2YWx1ZSA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIE1hdGgucm91bmQoKGJhc2UgKyBvZmZzZXQgKyBzaWduaWZpY2FuZCAqIE1hdGgucG93KDEwLCBleHApKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb24pO1xuICAgIHdoaWxlKHZhbHVlIDwgbWF4KXtcbiAgICAgICAgdGlja3MucHVzaCh7XG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIG1ham9yOiBpc01ham9yKHZhbHVlKSxcbiAgICAgICAgICAgIHNpZ25pZmljYW5kXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2lnbmlmaWNhbmQgPj0gMTApIHtcbiAgICAgICAgICAgIHNpZ25pZmljYW5kID0gc2lnbmlmaWNhbmQgPCAxNSA/IDE1IDogMjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaWduaWZpY2FuZCA+PSAyMCkge1xuICAgICAgICAgICAgZXhwKys7XG4gICAgICAgICAgICBzaWduaWZpY2FuZCA9IDI7XG4gICAgICAgICAgICBwcmVjaXNpb24gPSBleHAgPj0gMCA/IDEgOiBwcmVjaXNpb247XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKChiYXNlICsgb2Zmc2V0ICsgc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKSkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuICAgIH1cbiAgICBjb25zdCBsYXN0VGljayA9IGZpbml0ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5tYXgsIHZhbHVlKTtcbiAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgdmFsdWU6IGxhc3RUaWNrLFxuICAgICAgICBtYWpvcjogaXNNYWpvcihsYXN0VGljayksXG4gICAgICAgIHNpZ25pZmljYW5kXG4gICAgfSk7XG4gICAgcmV0dXJuIHRpY2tzO1xufVxuY2xhc3MgTG9nYXJpdGhtaWNTY2FsZSBleHRlbmRzIFNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAnbG9nYXJpdGhtaWMnO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxvZ2FyaXRobWljLFxuICAgICAgICAgICAgbWFqb3I6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5lbmQgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLl9zdGFydFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl92YWx1ZVJhbmdlID0gMDtcbiAgICB9XG4gICAgcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IExpbmVhclNjYWxlQmFzZS5wcm90b3R5cGUucGFyc2UuYXBwbHkodGhpcywgW1xuICAgICAgICAgICAgcmF3LFxuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgXSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5femVybyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc051bWJlckZpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgPiAwID8gdmFsdWUgOiBudWxsO1xuICAgIH1cbiAgICBkZXRlcm1pbmVEYXRhTGltaXRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAgfSA9IHRoaXMuZ2V0TWluTWF4KHRydWUpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgPyBNYXRoLm1heCgwLCBtaW4pIDogbnVsbDtcbiAgICAgICAgdGhpcy5tYXggPSBpc051bWJlckZpbml0ZShtYXgpID8gTWF0aC5tYXgoMCwgbWF4KSA6IG51bGw7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmVnaW5BdFplcm8pIHtcbiAgICAgICAgICAgIHRoaXMuX3plcm8gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl96ZXJvICYmIHRoaXMubWluICE9PSB0aGlzLl9zdWdnZXN0ZWRNaW4gJiYgIWlzTnVtYmVyRmluaXRlKHRoaXMuX3VzZXJNaW4pKSB7XG4gICAgICAgICAgICB0aGlzLm1pbiA9IG1pbiA9PT0gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIDApID8gY2hhbmdlRXhwb25lbnQodGhpcy5taW4sIC0xKSA6IGNoYW5nZUV4cG9uZW50KHRoaXMubWluLCAwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gICAgaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBtaW5EZWZpbmVkICwgbWF4RGVmaW5lZCAgfSA9IHRoaXMuZ2V0VXNlckJvdW5kcygpO1xuICAgICAgICBsZXQgbWluID0gdGhpcy5taW47XG4gICAgICAgIGxldCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3Qgc2V0TWluID0gKHYpPT5taW4gPSBtaW5EZWZpbmVkID8gbWluIDogdjtcbiAgICAgICAgY29uc3Qgc2V0TWF4ID0gKHYpPT5tYXggPSBtYXhEZWZpbmVkID8gbWF4IDogdjtcbiAgICAgICAgaWYgKG1pbiA9PT0gbWF4KSB7XG4gICAgICAgICAgICBpZiAobWluIDw9IDApIHtcbiAgICAgICAgICAgICAgICBzZXRNaW4oMSk7XG4gICAgICAgICAgICAgICAgc2V0TWF4KDEwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1pbiwgLTEpKTtcbiAgICAgICAgICAgICAgICBzZXRNYXgoY2hhbmdlRXhwb25lbnQobWF4LCArMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICAgICAgc2V0TWluKGNoYW5nZUV4cG9uZW50KG1heCwgLTEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4IDw9IDApIHtcbiAgICAgICAgICAgIHNldE1heChjaGFuZ2VFeHBvbmVudChtaW4sICsxKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5taW4gPSBtaW47XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBidWlsZFRpY2tzKCkge1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5fdXNlck1pbixcbiAgICAgICAgICAgIG1heDogdGhpcy5fdXNlck1heFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB0aWNrcyA9IGdlbmVyYXRlVGlja3MoZ2VuZXJhdGlvbk9wdGlvbnMsIHRoaXMpO1xuICAgICAgICBpZiAob3B0cy5ib3VuZHMgPT09ICd0aWNrcycpIHtcbiAgICAgICAgICAgIF9zZXRNaW5BbmRNYXhCeUtleSh0aWNrcywgdGhpcywgJ3ZhbHVlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdHMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGlja3MucmV2ZXJzZSgpO1xuICAgICAgICAgICAgdGhpcy5zdGFydCA9IHRoaXMubWF4O1xuICAgICAgICAgICAgdGhpcy5lbmQgPSB0aGlzLm1pbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnQgPSB0aGlzLm1pbjtcbiAgICAgICAgICAgIHRoaXMuZW5kID0gdGhpcy5tYXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cbiBnZXRMYWJlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gJzAnIDogZm9ybWF0TnVtYmVyKHZhbHVlLCB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICB9XG4gY29uZmlndXJlKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMubWluO1xuICAgICAgICBzdXBlci5jb25maWd1cmUoKTtcbiAgICAgICAgdGhpcy5fc3RhcnRWYWx1ZSA9IGxvZzEwKHN0YXJ0KTtcbiAgICAgICAgdGhpcy5fdmFsdWVSYW5nZSA9IGxvZzEwKHRoaXMubWF4KSAtIGxvZzEwKHN0YXJ0KTtcbiAgICB9XG4gICAgZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLm1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCh2YWx1ZSA9PT0gdGhpcy5taW4gPyAwIDogKGxvZzEwKHZhbHVlKSAtIHRoaXMuX3N0YXJ0VmFsdWUpIC8gdGhpcy5fdmFsdWVSYW5nZSk7XG4gICAgfVxuICAgIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3QgZGVjaW1hbCA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucG93KDEwLCB0aGlzLl9zdGFydFZhbHVlICsgZGVjaW1hbCAqIHRoaXMuX3ZhbHVlUmFuZ2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KG9wdHMpIHtcbiAgICBjb25zdCB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG4gICAgaWYgKHRpY2tPcHRzLmRpc3BsYXkgJiYgb3B0cy5kaXNwbGF5KSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcodGlja09wdHMuYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZvbnQgJiYgdGlja09wdHMuZm9udC5zaXplLCBkZWZhdWx0cy5mb250LnNpemUpICsgcGFkZGluZy5oZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiAwO1xufVxuZnVuY3Rpb24gbWVhc3VyZUxhYmVsU2l6ZShjdHgsIGZvbnQsIGxhYmVsKSB7XG4gICAgbGFiZWwgPSBpc0FycmF5KGxhYmVsKSA/IGxhYmVsIDogW1xuICAgICAgICBsYWJlbFxuICAgIF07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdzogX2xvbmdlc3RUZXh0KGN0eCwgZm9udC5zdHJpbmcsIGxhYmVsKSxcbiAgICAgICAgaDogbGFiZWwubGVuZ3RoICogZm9udC5saW5lSGVpZ2h0XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuICAgIGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSBzaXplIC8gMixcbiAgICAgICAgICAgIGVuZDogcG9zICsgc2l6ZSAvIDJcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgbWluIHx8IGFuZ2xlID4gbWF4KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGFydDogcG9zIC0gc2l6ZSxcbiAgICAgICAgICAgIGVuZDogcG9zXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBwb3MsXG4gICAgICAgIGVuZDogcG9zICsgc2l6ZVxuICAgIH07XG59XG4gZnVuY3Rpb24gZml0V2l0aFBvaW50TGFiZWxzKHNjYWxlKSB7XG4gICAgY29uc3Qgb3JpZyA9IHtcbiAgICAgICAgbDogc2NhbGUubGVmdCArIHNjYWxlLl9wYWRkaW5nLmxlZnQsXG4gICAgICAgIHI6IHNjYWxlLnJpZ2h0IC0gc2NhbGUuX3BhZGRpbmcucmlnaHQsXG4gICAgICAgIHQ6IHNjYWxlLnRvcCArIHNjYWxlLl9wYWRkaW5nLnRvcCxcbiAgICAgICAgYjogc2NhbGUuYm90dG9tIC0gc2NhbGUuX3BhZGRpbmcuYm90dG9tXG4gICAgfTtcbiAgICBjb25zdCBsaW1pdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcmlnKTtcbiAgICBjb25zdCBsYWJlbFNpemVzID0gW107XG4gICAgY29uc3QgcGFkZGluZyA9IFtdO1xuICAgIGNvbnN0IHZhbHVlQ291bnQgPSBzY2FsZS5fcG9pbnRMYWJlbHMubGVuZ3RoO1xuICAgIGNvbnN0IHBvaW50TGFiZWxPcHRzID0gc2NhbGUub3B0aW9ucy5wb2ludExhYmVscztcbiAgICBjb25zdCBhZGRpdGlvbmFsQW5nbGUgPSBwb2ludExhYmVsT3B0cy5jZW50ZXJQb2ludExhYmVscyA/IFBJIC8gdmFsdWVDb3VudCA6IDA7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IG9wdHMgPSBwb2ludExhYmVsT3B0cy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgcGFkZGluZ1tpXSA9IG9wdHMucGFkZGluZztcbiAgICAgICAgY29uc3QgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgc2NhbGUuZHJhd2luZ0FyZWEgKyBwYWRkaW5nW2ldLCBhZGRpdGlvbmFsQW5nbGUpO1xuICAgICAgICBjb25zdCBwbEZvbnQgPSB0b0ZvbnQob3B0cy5mb250KTtcbiAgICAgICAgY29uc3QgdGV4dFNpemUgPSBtZWFzdXJlTGFiZWxTaXplKHNjYWxlLmN0eCwgcGxGb250LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0pO1xuICAgICAgICBsYWJlbFNpemVzW2ldID0gdGV4dFNpemU7XG4gICAgICAgIGNvbnN0IGFuZ2xlUmFkaWFucyA9IF9ub3JtYWxpemVBbmdsZShzY2FsZS5nZXRJbmRleEFuZ2xlKGkpICsgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBNYXRoLnJvdW5kKHRvRGVncmVlcyhhbmdsZVJhZGlhbnMpKTtcbiAgICAgICAgY29uc3QgaExpbWl0cyA9IGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9pbnRQb3NpdGlvbi54LCB0ZXh0U2l6ZS53LCAwLCAxODApO1xuICAgICAgICBjb25zdCB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuICAgICAgICB1cGRhdGVMaW1pdHMobGltaXRzLCBvcmlnLCBhbmdsZVJhZGlhbnMsIGhMaW1pdHMsIHZMaW1pdHMpO1xuICAgIH1cbiAgICBzY2FsZS5zZXRDZW50ZXJQb2ludChvcmlnLmwgLSBsaW1pdHMubCwgbGltaXRzLnIgLSBvcmlnLnIsIG9yaWcudCAtIGxpbWl0cy50LCBsaW1pdHMuYiAtIG9yaWcuYik7XG4gICAgc2NhbGUuX3BvaW50TGFiZWxJdGVtcyA9IGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUxpbWl0cyhsaW1pdHMsIG9yaWcsIGFuZ2xlLCBoTGltaXRzLCB2TGltaXRzKSB7XG4gICAgY29uc3Qgc2luID0gTWF0aC5hYnMoTWF0aC5zaW4oYW5nbGUpKTtcbiAgICBjb25zdCBjb3MgPSBNYXRoLmFicyhNYXRoLmNvcyhhbmdsZSkpO1xuICAgIGxldCB4ID0gMDtcbiAgICBsZXQgeSA9IDA7XG4gICAgaWYgKGhMaW1pdHMuc3RhcnQgPCBvcmlnLmwpIHtcbiAgICAgICAgeCA9IChvcmlnLmwgLSBoTGltaXRzLnN0YXJ0KSAvIHNpbjtcbiAgICAgICAgbGltaXRzLmwgPSBNYXRoLm1pbihsaW1pdHMubCwgb3JpZy5sIC0geCk7XG4gICAgfSBlbHNlIGlmIChoTGltaXRzLmVuZCA+IG9yaWcucikge1xuICAgICAgICB4ID0gKGhMaW1pdHMuZW5kIC0gb3JpZy5yKSAvIHNpbjtcbiAgICAgICAgbGltaXRzLnIgPSBNYXRoLm1heChsaW1pdHMuciwgb3JpZy5yICsgeCk7XG4gICAgfVxuICAgIGlmICh2TGltaXRzLnN0YXJ0IDwgb3JpZy50KSB7XG4gICAgICAgIHkgPSAob3JpZy50IC0gdkxpbWl0cy5zdGFydCkgLyBjb3M7XG4gICAgICAgIGxpbWl0cy50ID0gTWF0aC5taW4obGltaXRzLnQsIG9yaWcudCAtIHkpO1xuICAgIH0gZWxzZSBpZiAodkxpbWl0cy5lbmQgPiBvcmlnLmIpIHtcbiAgICAgICAgeSA9ICh2TGltaXRzLmVuZCAtIG9yaWcuYikgLyBjb3M7XG4gICAgICAgIGxpbWl0cy5iID0gTWF0aC5tYXgobGltaXRzLmIsIG9yaWcuYiArIHkpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpbmRleCwgaXRlbU9wdHMpIHtcbiAgICBjb25zdCBvdXRlckRpc3RhbmNlID0gc2NhbGUuZHJhd2luZ0FyZWE7XG4gICAgY29uc3QgeyBleHRyYSAsIGFkZGl0aW9uYWxBbmdsZSAsIHBhZGRpbmcgLCBzaXplICB9ID0gaXRlbU9wdHM7XG4gICAgY29uc3QgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgb3V0ZXJEaXN0YW5jZSArIGV4dHJhICsgcGFkZGluZywgYWRkaXRpb25hbEFuZ2xlKTtcbiAgICBjb25zdCBhbmdsZSA9IE1hdGgucm91bmQodG9EZWdyZWVzKF9ub3JtYWxpemVBbmdsZShwb2ludExhYmVsUG9zaXRpb24uYW5nbGUgKyBIQUxGX1BJKSkpO1xuICAgIGNvbnN0IHkgPSB5Rm9yQW5nbGUocG9pbnRMYWJlbFBvc2l0aW9uLnksIHNpemUuaCwgYW5nbGUpO1xuICAgIGNvbnN0IHRleHRBbGlnbiA9IGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKTtcbiAgICBjb25zdCBsZWZ0ID0gbGVmdEZvclRleHRBbGlnbihwb2ludExhYmVsUG9zaXRpb24ueCwgc2l6ZS53LCB0ZXh0QWxpZ24pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHg6IHBvaW50TGFiZWxQb3NpdGlvbi54LFxuICAgICAgICB5LFxuICAgICAgICB0ZXh0QWxpZ24sXG4gICAgICAgIGxlZnQsXG4gICAgICAgIHRvcDogeSxcbiAgICAgICAgcmlnaHQ6IGxlZnQgKyBzaXplLncsXG4gICAgICAgIGJvdHRvbTogeSArIHNpemUuaFxuICAgIH07XG59XG5mdW5jdGlvbiBpc05vdE92ZXJsYXBwZWQoaXRlbSwgYXJlYSkge1xuICAgIGlmICghYXJlYSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgeyBsZWZ0ICwgdG9wICwgcmlnaHQgLCBib3R0b20gIH0gPSBpdGVtO1xuICAgIGNvbnN0IGFwZXhlc0luQXJlYSA9IF9pc1BvaW50SW5BcmVhKHtcbiAgICAgICAgeDogbGVmdCxcbiAgICAgICAgeTogdG9wXG4gICAgfSwgYXJlYSkgfHwgX2lzUG9pbnRJbkFyZWEoe1xuICAgICAgICB4OiBsZWZ0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiB0b3BcbiAgICB9LCBhcmVhKSB8fCBfaXNQb2ludEluQXJlYSh7XG4gICAgICAgIHg6IHJpZ2h0LFxuICAgICAgICB5OiBib3R0b21cbiAgICB9LCBhcmVhKTtcbiAgICByZXR1cm4gIWFwZXhlc0luQXJlYTtcbn1cbmZ1bmN0aW9uIGJ1aWxkUG9pbnRMYWJlbEl0ZW1zKHNjYWxlLCBsYWJlbFNpemVzLCBwYWRkaW5nKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICBjb25zdCB2YWx1ZUNvdW50ID0gc2NhbGUuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICBjb25zdCBvcHRzID0gc2NhbGUub3B0aW9ucztcbiAgICBjb25zdCB7IGNlbnRlclBvaW50TGFiZWxzICwgZGlzcGxheSAgfSA9IG9wdHMucG9pbnRMYWJlbHM7XG4gICAgY29uc3QgaXRlbU9wdHMgPSB7XG4gICAgICAgIGV4dHJhOiBnZXRUaWNrQmFja2Ryb3BIZWlnaHQob3B0cykgLyAyLFxuICAgICAgICBhZGRpdGlvbmFsQW5nbGU6IGNlbnRlclBvaW50TGFiZWxzID8gUEkgLyB2YWx1ZUNvdW50IDogMFxuICAgIH07XG4gICAgbGV0IGFyZWE7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKyl7XG4gICAgICAgIGl0ZW1PcHRzLnBhZGRpbmcgPSBwYWRkaW5nW2ldO1xuICAgICAgICBpdGVtT3B0cy5zaXplID0gbGFiZWxTaXplc1tpXTtcbiAgICAgICAgY29uc3QgaXRlbSA9IGNyZWF0ZVBvaW50TGFiZWxJdGVtKHNjYWxlLCBpLCBpdGVtT3B0cyk7XG4gICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgIGlmIChkaXNwbGF5ID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIGl0ZW0udmlzaWJsZSA9IGlzTm90T3ZlcmxhcHBlZChpdGVtLCBhcmVhKTtcbiAgICAgICAgICAgIGlmIChpdGVtLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBhcmVhID0gaXRlbTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbXM7XG59XG5mdW5jdGlvbiBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSkge1xuICAgIGlmIChhbmdsZSA9PT0gMCB8fCBhbmdsZSA9PT0gMTgwKSB7XG4gICAgICAgIHJldHVybiAnY2VudGVyJztcbiAgICB9IGVsc2UgaWYgKGFuZ2xlIDwgMTgwKSB7XG4gICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgfVxuICAgIHJldHVybiAncmlnaHQnO1xufVxuZnVuY3Rpb24gbGVmdEZvclRleHRBbGlnbih4LCB3LCBhbGlnbikge1xuICAgIGlmIChhbGlnbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICB4IC09IHc7XG4gICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gJ2NlbnRlcicpIHtcbiAgICAgICAgeCAtPSB3IC8gMjtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG59XG5mdW5jdGlvbiB5Rm9yQW5nbGUoeSwgaCwgYW5nbGUpIHtcbiAgICBpZiAoYW5nbGUgPT09IDkwIHx8IGFuZ2xlID09PSAyNzApIHtcbiAgICAgICAgeSAtPSBoIC8gMjtcbiAgICB9IGVsc2UgaWYgKGFuZ2xlID4gMjcwIHx8IGFuZ2xlIDwgOTApIHtcbiAgICAgICAgeSAtPSBoO1xuICAgIH1cbiAgICByZXR1cm4geTtcbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVsQm94KGN0eCwgb3B0cywgaXRlbSkge1xuICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gaXRlbTtcbiAgICBjb25zdCB7IGJhY2tkcm9wQ29sb3IgIH0gPSBvcHRzO1xuICAgIGlmICghaXNOdWxsT3JVbmRlZihiYWNrZHJvcENvbG9yKSkge1xuICAgICAgICBjb25zdCBib3JkZXJSYWRpdXMgPSB0b1RSQkxDb3JuZXJzKG9wdHMuYm9yZGVyUmFkaXVzKTtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IHRvUGFkZGluZyhvcHRzLmJhY2tkcm9wUGFkZGluZyk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBiYWNrZHJvcENvbG9yO1xuICAgICAgICBjb25zdCBiYWNrZHJvcExlZnQgPSBsZWZ0IC0gcGFkZGluZy5sZWZ0O1xuICAgICAgICBjb25zdCBiYWNrZHJvcFRvcCA9IHRvcCAtIHBhZGRpbmcudG9wO1xuICAgICAgICBjb25zdCBiYWNrZHJvcFdpZHRoID0gcmlnaHQgLSBsZWZ0ICsgcGFkZGluZy53aWR0aDtcbiAgICAgICAgY29uc3QgYmFja2Ryb3BIZWlnaHQgPSBib3R0b20gLSB0b3AgKyBwYWRkaW5nLmhlaWdodDtcbiAgICAgICAgaWYgKE9iamVjdC52YWx1ZXMoYm9yZGVyUmFkaXVzKS5zb21lKCh2KT0+diAhPT0gMCkpIHtcbiAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgIGFkZFJvdW5kZWRSZWN0UGF0aChjdHgsIHtcbiAgICAgICAgICAgICAgICB4OiBiYWNrZHJvcExlZnQsXG4gICAgICAgICAgICAgICAgeTogYmFja2Ryb3BUb3AsXG4gICAgICAgICAgICAgICAgdzogYmFja2Ryb3BXaWR0aCxcbiAgICAgICAgICAgICAgICBoOiBiYWNrZHJvcEhlaWdodCxcbiAgICAgICAgICAgICAgICByYWRpdXM6IGJvcmRlclJhZGl1c1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KGJhY2tkcm9wTGVmdCwgYmFja2Ryb3BUb3AsIGJhY2tkcm9wV2lkdGgsIGJhY2tkcm9wSGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdQb2ludExhYmVscyhzY2FsZSwgbGFiZWxDb3VudCkge1xuICAgIGNvbnN0IHsgY3R4ICwgb3B0aW9uczogeyBwb2ludExhYmVscyAgfSAgfSA9IHNjYWxlO1xuICAgIGZvcihsZXQgaSA9IGxhYmVsQ291bnQgLSAxOyBpID49IDA7IGktLSl7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzY2FsZS5fcG9pbnRMYWJlbEl0ZW1zW2ldO1xuICAgICAgICBpZiAoIWl0ZW0udmlzaWJsZSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBwb2ludExhYmVscy5zZXRDb250ZXh0KHNjYWxlLmdldFBvaW50TGFiZWxDb250ZXh0KGkpKTtcbiAgICAgICAgZHJhd1BvaW50TGFiZWxCb3goY3R4LCBvcHRzQXRJbmRleCwgaXRlbSk7XG4gICAgICAgIGNvbnN0IHBsRm9udCA9IHRvRm9udChvcHRzQXRJbmRleC5mb250KTtcbiAgICAgICAgY29uc3QgeyB4ICwgeSAsIHRleHRBbGlnbiAgfSA9IGl0ZW07XG4gICAgICAgIHJlbmRlclRleHQoY3R4LCBzY2FsZS5fcG9pbnRMYWJlbHNbaV0sIHgsIHkgKyBwbEZvbnQubGluZUhlaWdodCAvIDIsIHBsRm9udCwge1xuICAgICAgICAgICAgY29sb3I6IG9wdHNBdEluZGV4LmNvbG9yLFxuICAgICAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sXG4gICAgICAgICAgICB0ZXh0QmFzZWxpbmU6ICdtaWRkbGUnXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KSB7XG4gICAgY29uc3QgeyBjdHggIH0gPSBzY2FsZTtcbiAgICBpZiAoY2lyY3VsYXIpIHtcbiAgICAgICAgY3R4LmFyYyhzY2FsZS54Q2VudGVyLCBzY2FsZS55Q2VudGVyLCByYWRpdXMsIDAsIFRBVSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKDAsIHJhZGl1cyk7XG4gICAgICAgIGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDwgbGFiZWxDb3VudDsgaSsrKXtcbiAgICAgICAgICAgIHBvaW50UG9zaXRpb24gPSBzY2FsZS5nZXRQb2ludFBvc2l0aW9uKGksIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdSYWRpdXNMaW5lKHNjYWxlLCBncmlkTGluZU9wdHMsIHJhZGl1cywgbGFiZWxDb3VudCwgYm9yZGVyT3B0cykge1xuICAgIGNvbnN0IGN0eCA9IHNjYWxlLmN0eDtcbiAgICBjb25zdCBjaXJjdWxhciA9IGdyaWRMaW5lT3B0cy5jaXJjdWxhcjtcbiAgICBjb25zdCB7IGNvbG9yICwgbGluZVdpZHRoICB9ID0gZ3JpZExpbmVPcHRzO1xuICAgIGlmICghY2lyY3VsYXIgJiYgIWxhYmVsQ291bnQgfHwgIWNvbG9yIHx8ICFsaW5lV2lkdGggfHwgcmFkaXVzIDwgMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDtcbiAgICBjdHguc2V0TGluZURhc2goYm9yZGVyT3B0cy5kYXNoKTtcbiAgICBjdHgubGluZURhc2hPZmZzZXQgPSBib3JkZXJPcHRzLmRhc2hPZmZzZXQ7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIHBhdGhSYWRpdXNMaW5lKHNjYWxlLCByYWRpdXMsIGNpcmN1bGFyLCBsYWJlbENvdW50KTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuICAgIGN0eC5yZXN0b3JlKCk7XG59XG5mdW5jdGlvbiBjcmVhdGVQb2ludExhYmVsQ29udGV4dChwYXJlbnQsIGluZGV4LCBsYWJlbCkge1xuICAgIHJldHVybiBjcmVhdGVDb250ZXh0KHBhcmVudCwge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgaW5kZXgsXG4gICAgICAgIHR5cGU6ICdwb2ludExhYmVsJ1xuICAgIH0pO1xufVxuY2xhc3MgUmFkaWFsTGluZWFyU2NhbGUgZXh0ZW5kcyBMaW5lYXJTY2FsZUJhc2Uge1xuICAgIHN0YXRpYyBpZCA9ICdyYWRpYWxMaW5lYXInO1xuIHN0YXRpYyBkZWZhdWx0cyA9IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgcG9zaXRpb246ICdjaGFydEFyZWEnLFxuICAgICAgICBhbmdsZUxpbmVzOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGluZVdpZHRoOiAxLFxuICAgICAgICAgICAgYm9yZGVyRGFzaDogW10sXG4gICAgICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiAwLjBcbiAgICAgICAgfSxcbiAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgY2lyY3VsYXI6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICAgIHRpY2tzOiB7XG4gICAgICAgICAgICBzaG93TGFiZWxCYWNrZHJvcDogdHJ1ZSxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLm51bWVyaWNcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRMYWJlbHM6IHtcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZzogMixcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICAgICAgc2l6ZTogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFjayAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFkZGluZzogNSxcbiAgICAgICAgICAgIGNlbnRlclBvaW50TGFiZWxzOiBmYWxzZVxuICAgICAgICB9XG4gICAgfTtcbiAgICBzdGF0aWMgZGVmYXVsdFJvdXRlcyA9IHtcbiAgICAgICAgJ2FuZ2xlTGluZXMuY29sb3InOiAnYm9yZGVyQ29sb3InLFxuICAgICAgICAncG9pbnRMYWJlbHMuY29sb3InOiAnY29sb3InLFxuICAgICAgICAndGlja3MuY29sb3InOiAnY29sb3InXG4gICAgfTtcbiAgICBzdGF0aWMgZGVzY3JpcHRvcnMgPSB7XG4gICAgICAgIGFuZ2xlTGluZXM6IHtcbiAgICAgICAgICAgIF9mYWxsYmFjazogJ2dyaWQnXG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0cnVjdG9yKGNmZyl7XG4gICAgICAgIHN1cGVyKGNmZyk7XG4gICAgICAgICB0aGlzLnhDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLnlDZW50ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICB0aGlzLmRyYXdpbmdBcmVhID0gdW5kZWZpbmVkO1xuICAgICAgICAgdGhpcy5fcG9pbnRMYWJlbHMgPSBbXTtcbiAgICAgICAgdGhpcy5fcG9pbnRMYWJlbEl0ZW1zID0gW107XG4gICAgfVxuICAgIHNldERpbWVuc2lvbnMoKSB7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0aGlzLl9wYWRkaW5nID0gdG9QYWRkaW5nKGdldFRpY2tCYWNrZHJvcEhlaWdodCh0aGlzLm9wdGlvbnMpIC8gMik7XG4gICAgICAgIGNvbnN0IHcgPSB0aGlzLndpZHRoID0gdGhpcy5tYXhXaWR0aCAtIHBhZGRpbmcud2lkdGg7XG4gICAgICAgIGNvbnN0IGggPSB0aGlzLmhlaWdodCA9IHRoaXMubWF4SGVpZ2h0IC0gcGFkZGluZy5oZWlnaHQ7XG4gICAgICAgIHRoaXMueENlbnRlciA9IE1hdGguZmxvb3IodGhpcy5sZWZ0ICsgdyAvIDIgKyBwYWRkaW5nLmxlZnQpO1xuICAgICAgICB0aGlzLnlDZW50ZXIgPSBNYXRoLmZsb29yKHRoaXMudG9wICsgaCAvIDIgKyBwYWRkaW5nLnRvcCk7XG4gICAgICAgIHRoaXMuZHJhd2luZ0FyZWEgPSBNYXRoLmZsb29yKE1hdGgubWluKHcsIGgpIC8gMik7XG4gICAgfVxuICAgIGRldGVybWluZURhdGFMaW1pdHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcy5nZXRNaW5NYXgoZmFsc2UpO1xuICAgICAgICB0aGlzLm1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiAwO1xuICAgICAgICB0aGlzLm1heCA9IGlzTnVtYmVyRmluaXRlKG1heCkgJiYgIWlzTmFOKG1heCkgPyBtYXggOiAwO1xuICAgICAgICB0aGlzLmhhbmRsZVRpY2tSYW5nZU9wdGlvbnMoKTtcbiAgICB9XG4gY29tcHV0ZVRpY2tMaW1pdCgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmRyYXdpbmdBcmVhIC8gZ2V0VGlja0JhY2tkcm9wSGVpZ2h0KHRoaXMub3B0aW9ucykpO1xuICAgIH1cbiAgICBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5nZW5lcmF0ZVRpY2tMYWJlbHMuY2FsbCh0aGlzLCB0aWNrcyk7XG4gICAgICAgIHRoaXMuX3BvaW50TGFiZWxzID0gdGhpcy5nZXRMYWJlbHMoKS5tYXAoKHZhbHVlLCBpbmRleCk9PntcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gY2FsbGJhY2sodGhpcy5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBbXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgIF0sIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIGxhYmVsIHx8IGxhYmVsID09PSAwID8gbGFiZWwgOiAnJztcbiAgICAgICAgfSkuZmlsdGVyKCh2LCBpKT0+dGhpcy5jaGFydC5nZXREYXRhVmlzaWJpbGl0eShpKSk7XG4gICAgfVxuICAgIGZpdCgpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdHMuZGlzcGxheSAmJiBvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2VudGVyUG9pbnQoMCwgMCwgMCwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2V0Q2VudGVyUG9pbnQobGVmdE1vdmVtZW50LCByaWdodE1vdmVtZW50LCB0b3BNb3ZlbWVudCwgYm90dG9tTW92ZW1lbnQpIHtcbiAgICAgICAgdGhpcy54Q2VudGVyICs9IE1hdGguZmxvb3IoKGxlZnRNb3ZlbWVudCAtIHJpZ2h0TW92ZW1lbnQpIC8gMik7XG4gICAgICAgIHRoaXMueUNlbnRlciArPSBNYXRoLmZsb29yKCh0b3BNb3ZlbWVudCAtIGJvdHRvbU1vdmVtZW50KSAvIDIpO1xuICAgICAgICB0aGlzLmRyYXdpbmdBcmVhIC09IE1hdGgubWluKHRoaXMuZHJhd2luZ0FyZWEgLyAyLCBNYXRoLm1heChsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkpO1xuICAgIH1cbiAgICBnZXRJbmRleEFuZ2xlKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlTXVsdGlwbGllciA9IFRBVSAvICh0aGlzLl9wb2ludExhYmVscy5sZW5ndGggfHwgMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSB8fCAwO1xuICAgICAgICByZXR1cm4gX25vcm1hbGl6ZUFuZ2xlKGluZGV4ICogYW5nbGVNdWx0aXBsaWVyICsgdG9SYWRpYW5zKHN0YXJ0QW5nbGUpKTtcbiAgICB9XG4gICAgZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgaWYgKGlzTnVsbE9yVW5kZWYodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxpbmdGYWN0b3IgPSB0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5tYXggLSB2YWx1ZSkgKiBzY2FsaW5nRmFjdG9yO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodmFsdWUgLSB0aGlzLm1pbikgKiBzY2FsaW5nRmFjdG9yO1xuICAgIH1cbiAgICBnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlcihkaXN0YW5jZSkge1xuICAgICAgICBpZiAoaXNOdWxsT3JVbmRlZihkaXN0YW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGVkRGlzdGFuY2UgPSBkaXN0YW5jZSAvICh0aGlzLmRyYXdpbmdBcmVhIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXZlcnNlID8gdGhpcy5tYXggLSBzY2FsZWREaXN0YW5jZSA6IHRoaXMubWluICsgc2NhbGVkRGlzdGFuY2U7XG4gICAgfVxuICAgIGdldFBvaW50TGFiZWxDb250ZXh0KGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHBvaW50TGFiZWxzID0gdGhpcy5fcG9pbnRMYWJlbHMgfHwgW107XG4gICAgICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgcG9pbnRMYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludExhYmVsID0gcG9pbnRMYWJlbHNbaW5kZXhdO1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvaW50TGFiZWxDb250ZXh0KHRoaXMuZ2V0Q29udGV4dCgpLCBpbmRleCwgcG9pbnRMYWJlbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UG9pbnRQb3NpdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyLCBhZGRpdGlvbmFsQW5nbGUgPSAwKSB7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKGluZGV4KSAtIEhBTEZfUEkgKyBhZGRpdGlvbmFsQW5nbGU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBNYXRoLmNvcyhhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnhDZW50ZXIsXG4gICAgICAgICAgICB5OiBNYXRoLnNpbihhbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIgKyB0aGlzLnlDZW50ZXIsXG4gICAgICAgICAgICBhbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb24oaW5kZXgsIHRoaXMuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUodmFsdWUpKTtcbiAgICB9XG4gICAgZ2V0QmFzZVBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZShpbmRleCB8fCAwLCB0aGlzLmdldEJhc2VWYWx1ZSgpKTtcbiAgICB9XG4gICAgZ2V0UG9pbnRMYWJlbFBvc2l0aW9uKGluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgbGVmdCAsIHRvcCAsIHJpZ2h0ICwgYm90dG9tICB9ID0gdGhpcy5fcG9pbnRMYWJlbEl0ZW1zW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgICB0b3AsXG4gICAgICAgICAgICByaWdodCxcbiAgICAgICAgICAgIGJvdHRvbVxuICAgICAgICB9O1xuICAgIH1cbiBkcmF3QmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBiYWNrZ3JvdW5kQ29sb3IgLCBncmlkOiB7IGNpcmN1bGFyICB9ICB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAoYmFja2dyb3VuZENvbG9yKSB7XG4gICAgICAgICAgICBjb25zdCBjdHggPSB0aGlzLmN0eDtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBwYXRoUmFkaXVzTGluZSh0aGlzLCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMuX2VuZFZhbHVlKSwgY2lyY3VsYXIsIHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aCk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZENvbG9yO1xuICAgICAgICAgICAgY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0dyaWQoKSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHRoaXMuY3R4O1xuICAgICAgICBjb25zdCBvcHRzID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IGFuZ2xlTGluZXMgLCBncmlkICwgYm9yZGVyICB9ID0gb3B0cztcbiAgICAgICAgY29uc3QgbGFiZWxDb3VudCA9IHRoaXMuX3BvaW50TGFiZWxzLmxlbmd0aDtcbiAgICAgICAgbGV0IGksIG9mZnNldCwgcG9zaXRpb247XG4gICAgICAgIGlmIChvcHRzLnBvaW50TGFiZWxzLmRpc3BsYXkpIHtcbiAgICAgICAgICAgIGRyYXdQb2ludExhYmVscyh0aGlzLCBsYWJlbENvdW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JpZC5kaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLnRpY2tzLmZvckVhY2goKHRpY2ssIGluZGV4KT0+e1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRpY2sudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSBncmlkLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4Qm9yZGVyID0gYm9yZGVyLnNldENvbnRleHQoY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIGRyYXdSYWRpdXNMaW5lKHRoaXMsIG9wdHNBdEluZGV4LCBvZmZzZXQsIGxhYmVsQ291bnQsIG9wdHNBdEluZGV4Qm9yZGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5nbGVMaW5lcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgZm9yKGkgPSBsYWJlbENvdW50IC0gMTsgaSA+PSAwOyBpLS0pe1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wdHNBdEluZGV4ID0gYW5nbGVMaW5lcy5zZXRDb250ZXh0KHRoaXMuZ2V0UG9pbnRMYWJlbENvbnRleHQoaSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sb3IgLCBsaW5lV2lkdGggIH0gPSBvcHRzQXRJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIWxpbmVXaWR0aCB8fCAhY29sb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSBsaW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKG9wdHNBdEluZGV4LmJvcmRlckRhc2gpO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IG9wdHNBdEluZGV4LmJvcmRlckRhc2hPZmZzZXQ7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gdGhpcy5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShvcHRzLnRpY2tzLnJldmVyc2UgPyB0aGlzLm1pbiA6IHRoaXMubWF4KTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRoaXMuZ2V0UG9pbnRQb3NpdGlvbihpLCBvZmZzZXQpO1xuICAgICAgICAgICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRoaXMueENlbnRlciwgdGhpcy55Q2VudGVyKTtcbiAgICAgICAgICAgICAgICBjdHgubGluZVRvKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpO1xuICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gZHJhd0JvcmRlcigpIHt9XG4gZHJhd0xhYmVscygpIHtcbiAgICAgICAgY29uc3QgY3R4ID0gdGhpcy5jdHg7XG4gICAgICAgIGNvbnN0IG9wdHMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpY2tPcHRzID0gb3B0cy50aWNrcztcbiAgICAgICAgaWYgKCF0aWNrT3B0cy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMuZ2V0SW5kZXhBbmdsZSgwKTtcbiAgICAgICAgbGV0IG9mZnNldCwgd2lkdGg7XG4gICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgIGN0eC50cmFuc2xhdGUodGhpcy54Q2VudGVyLCB0aGlzLnlDZW50ZXIpO1xuICAgICAgICBjdHgucm90YXRlKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICAgICAgdGhpcy50aWNrcy5mb3JFYWNoKCh0aWNrLCBpbmRleCk9PntcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiAhb3B0cy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3B0c0F0SW5kZXggPSB0aWNrT3B0cy5zZXRDb250ZXh0KHRoaXMuZ2V0Q29udGV4dChpbmRleCkpO1xuICAgICAgICAgICAgY29uc3QgdGlja0ZvbnQgPSB0b0ZvbnQob3B0c0F0SW5kZXguZm9udCk7XG4gICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHRoaXMudGlja3NbaW5kZXhdLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvcHRzQXRJbmRleC5zaG93TGFiZWxCYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gdGlja0ZvbnQuc3RyaW5nO1xuICAgICAgICAgICAgICAgIHdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KHRpY2subGFiZWwpLndpZHRoO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBvcHRzQXRJbmRleC5iYWNrZHJvcENvbG9yO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZGRpbmcgPSB0b1BhZGRpbmcob3B0c0F0SW5kZXguYmFja2Ryb3BQYWRkaW5nKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoLXdpZHRoIC8gMiAtIHBhZGRpbmcubGVmdCwgLW9mZnNldCAtIHRpY2tGb250LnNpemUgLyAyIC0gcGFkZGluZy50b3AsIHdpZHRoICsgcGFkZGluZy53aWR0aCwgdGlja0ZvbnQuc2l6ZSArIHBhZGRpbmcuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbmRlclRleHQoY3R4LCB0aWNrLmxhYmVsLCAwLCAtb2Zmc2V0LCB0aWNrRm9udCwge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRzQXRJbmRleC5jb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VDb2xvcjogb3B0c0F0SW5kZXgudGV4dFN0cm9rZUNvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZVdpZHRoOiBvcHRzQXRJbmRleC50ZXh0U3Ryb2tlV2lkdGhcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gZHJhd1RpdGxlKCkge31cbn1cblxuY29uc3QgSU5URVJWQUxTID0ge1xuICAgIG1pbGxpc2Vjb25kOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogMSxcbiAgICAgICAgc3RlcHM6IDEwMDBcbiAgICB9LFxuICAgIHNlY29uZDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDEwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgbWludXRlOiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogNjAwMDAsXG4gICAgICAgIHN0ZXBzOiA2MFxuICAgIH0sXG4gICAgaG91cjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDM2MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAyNFxuICAgIH0sXG4gICAgZGF5OiB7XG4gICAgICAgIGNvbW1vbjogdHJ1ZSxcbiAgICAgICAgc2l6ZTogODY0MDAwMDAsXG4gICAgICAgIHN0ZXBzOiAzMFxuICAgIH0sXG4gICAgd2Vlazoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA2MDQ4MDAwMDAsXG4gICAgICAgIHN0ZXBzOiA0XG4gICAgfSxcbiAgICBtb250aDoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDIuNjI4ZTksXG4gICAgICAgIHN0ZXBzOiAxMlxuICAgIH0sXG4gICAgcXVhcnRlcjoge1xuICAgICAgICBjb21tb246IGZhbHNlLFxuICAgICAgICBzaXplOiA3Ljg4NGU5LFxuICAgICAgICBzdGVwczogNFxuICAgIH0sXG4gICAgeWVhcjoge1xuICAgICAgICBjb21tb246IHRydWUsXG4gICAgICAgIHNpemU6IDMuMTU0ZTEwXG4gICAgfVxufTtcbiBjb25zdCBVTklUUyA9ICAvKiAjX19QVVJFX18gKi8gT2JqZWN0LmtleXMoSU5URVJWQUxTKTtcbiBmdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbn1cbiBmdW5jdGlvbiBwYXJzZShzY2FsZSwgaW5wdXQpIHtcbiAgICBpZiAoaXNOdWxsT3JVbmRlZihpbnB1dCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCB7IHBhcnNlciAsIHJvdW5kICwgaXNvV2Vla2RheSAgfSA9IHNjYWxlLl9wYXJzZU9wdHM7XG4gICAgbGV0IHZhbHVlID0gaW5wdXQ7XG4gICAgaWYgKHR5cGVvZiBwYXJzZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBwYXJzZXIodmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWlzTnVtYmVyRmluaXRlKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHR5cGVvZiBwYXJzZXIgPT09ICdzdHJpbmcnID8gYWRhcHRlci5wYXJzZSh2YWx1ZSwgIHBhcnNlcikgOiBhZGFwdGVyLnBhcnNlKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAocm91bmQpIHtcbiAgICAgICAgdmFsdWUgPSByb3VuZCA9PT0gJ3dlZWsnICYmIChpc051bWJlcihpc29XZWVrZGF5KSB8fCBpc29XZWVrZGF5ID09PSB0cnVlKSA/IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgJ2lzb1dlZWsnLCBpc29XZWVrZGF5KSA6IGFkYXB0ZXIuc3RhcnRPZih2YWx1ZSwgcm91bmQpO1xuICAgIH1cbiAgICByZXR1cm4gK3ZhbHVlO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG4gICAgY29uc3QgaWxlbiA9IFVOSVRTLmxlbmd0aDtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSl7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gaW50ZXJ2YWwuc3RlcHMgPyBpbnRlcnZhbC5zdGVwcyA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuICAgICAgICBpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcbiAgICAgICAgICAgIHJldHVybiBVTklUU1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuIGZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nKHNjYWxlLCBudW1UaWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcbiAgICBmb3IobGV0IGkgPSBVTklUUy5sZW5ndGggLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSl7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBVTklUU1tpXTtcbiAgICAgICAgaWYgKElOVEVSVkFMU1t1bml0XS5jb21tb24gJiYgc2NhbGUuX2FkYXB0ZXIuZGlmZihtYXgsIG1pbiwgdW5pdCkgPj0gbnVtVGlja3MgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5pdDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVU5JVFNbbWluVW5pdCA/IFVOSVRTLmluZGV4T2YobWluVW5pdCkgOiAwXTtcbn1cbiBmdW5jdGlvbiBkZXRlcm1pbmVNYWpvclVuaXQodW5pdCkge1xuICAgIGZvcihsZXQgaSA9IFVOSVRTLmluZGV4T2YodW5pdCkgKyAxLCBpbGVuID0gVU5JVFMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaWYgKElOVEVSVkFMU1tVTklUU1tpXV0uY29tbW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gVU5JVFNbaV07XG4gICAgICAgIH1cbiAgICB9XG59XG4gZnVuY3Rpb24gYWRkVGljayh0aWNrcywgdGltZSwgdGltZXN0YW1wcykge1xuICAgIGlmICghdGltZXN0YW1wcykge1xuICAgICAgICB0aWNrc1t0aW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCB7IGxvICwgaGkgIH0gPSBfbG9va3VwKHRpbWVzdGFtcHMsIHRpbWUpO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSB0aW1lc3RhbXBzW2xvXSA+PSB0aW1lID8gdGltZXN0YW1wc1tsb10gOiB0aW1lc3RhbXBzW2hpXTtcbiAgICAgICAgdGlja3NbdGltZXN0YW1wXSA9IHRydWU7XG4gICAgfVxufVxuIGZ1bmN0aW9uIHNldE1ham9yVGlja3Moc2NhbGUsIHRpY2tzLCBtYXAsIG1ham9yVW5pdCkge1xuICAgIGNvbnN0IGFkYXB0ZXIgPSBzY2FsZS5fYWRhcHRlcjtcbiAgICBjb25zdCBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YodGlja3NbMF0udmFsdWUsIG1ham9yVW5pdCk7XG4gICAgY29uc3QgbGFzdCA9IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlO1xuICAgIGxldCBtYWpvciwgaW5kZXg7XG4gICAgZm9yKG1ham9yID0gZmlyc3Q7IG1ham9yIDw9IGxhc3Q7IG1ham9yID0gK2FkYXB0ZXIuYWRkKG1ham9yLCAxLCBtYWpvclVuaXQpKXtcbiAgICAgICAgaW5kZXggPSBtYXBbbWFqb3JdO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGlja3NbaW5kZXhdLm1ham9yID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGlja3M7XG59XG4gZnVuY3Rpb24gdGlja3NGcm9tVGltZXN0YW1wcyhzY2FsZSwgdmFsdWVzLCBtYWpvclVuaXQpIHtcbiAgICBjb25zdCB0aWNrcyA9IFtdO1xuICAgICBjb25zdCBtYXAgPSB7fTtcbiAgICBjb25zdCBpbGVuID0gdmFsdWVzLmxlbmd0aDtcbiAgICBsZXQgaSwgdmFsdWU7XG4gICAgZm9yKGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgIG1hcFt2YWx1ZV0gPSBpO1xuICAgICAgICB0aWNrcy5wdXNoKHtcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgbWFqb3I6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaWxlbiA9PT0gMCB8fCAhbWFqb3JVbml0ID8gdGlja3MgOiBzZXRNYWpvclRpY2tzKHNjYWxlLCB0aWNrcywgbWFwLCBtYWpvclVuaXQpO1xufVxuY2xhc3MgVGltZVNjYWxlIGV4dGVuZHMgU2NhbGUge1xuICAgIHN0YXRpYyBpZCA9ICd0aW1lJztcbiBzdGF0aWMgZGVmYXVsdHMgPSB7XG4gYm91bmRzOiAnZGF0YScsXG4gICAgICAgIGFkYXB0ZXJzOiB7fSxcbiAgICAgICAgdGltZToge1xuICAgICAgICAgICAgcGFyc2VyOiBmYWxzZSxcbiAgICAgICAgICAgIHVuaXQ6IGZhbHNlLFxuICAgICAgICAgICAgcm91bmQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogZmFsc2UsXG4gICAgICAgICAgICBtaW5Vbml0OiAnbWlsbGlzZWNvbmQnLFxuICAgICAgICAgICAgZGlzcGxheUZvcm1hdHM6IHt9XG4gICAgICAgIH0sXG4gICAgICAgIHRpY2tzOiB7XG4gc291cmNlOiAnYXV0bycsXG4gICAgICAgICAgICBjYWxsYmFjazogZmFsc2UsXG4gICAgICAgICAgICBtYWpvcjoge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fY2FjaGUgPSB7XG4gICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgIGxhYmVsczogW10sXG4gICAgICAgICAgICBhbGw6IFtdXG4gICAgICAgIH07XG4gICAgICAgICB0aGlzLl91bml0ID0gJ2RheSc7XG4gICAgICAgICB0aGlzLl9tYWpvclVuaXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSB7fTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJzZU9wdHMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGluaXQoc2NhbGVPcHRzLCBvcHRzID0ge30pIHtcbiAgICAgICAgY29uc3QgdGltZSA9IHNjYWxlT3B0cy50aW1lIHx8IChzY2FsZU9wdHMudGltZSA9IHt9KTtcbiAgICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyID0gbmV3IGFkYXB0ZXJzLl9kYXRlKHNjYWxlT3B0cy5hZGFwdGVycy5kYXRlKTtcbiAgICAgICAgYWRhcHRlci5pbml0KG9wdHMpO1xuICAgICAgICBtZXJnZUlmKHRpbWUuZGlzcGxheUZvcm1hdHMsIGFkYXB0ZXIuZm9ybWF0cygpKTtcbiAgICAgICAgdGhpcy5fcGFyc2VPcHRzID0ge1xuICAgICAgICAgICAgcGFyc2VyOiB0aW1lLnBhcnNlcixcbiAgICAgICAgICAgIHJvdW5kOiB0aW1lLnJvdW5kLFxuICAgICAgICAgICAgaXNvV2Vla2RheTogdGltZS5pc29XZWVrZGF5XG4gICAgICAgIH07XG4gICAgICAgIHN1cGVyLmluaXQoc2NhbGVPcHRzKTtcbiAgICAgICAgdGhpcy5fbm9ybWFsaXplZCA9IG9wdHMubm9ybWFsaXplZDtcbiAgICB9XG4gcGFyc2UocmF3LCBpbmRleCkge1xuICAgICAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZSh0aGlzLCByYXcpO1xuICAgIH1cbiAgICBiZWZvcmVMYXlvdXQoKSB7XG4gICAgICAgIHN1cGVyLmJlZm9yZUxheW91dCgpO1xuICAgICAgICB0aGlzLl9jYWNoZSA9IHtcbiAgICAgICAgICAgIGRhdGE6IFtdLFxuICAgICAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgICAgIGFsbDogW11cbiAgICAgICAgfTtcbiAgICB9XG4gICAgZGV0ZXJtaW5lRGF0YUxpbWl0cygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYWRhcHRlciA9IHRoaXMuX2FkYXB0ZXI7XG4gICAgICAgIGNvbnN0IHVuaXQgPSBvcHRpb25zLnRpbWUudW5pdCB8fCAnZGF5JztcbiAgICAgICAgbGV0IHsgbWluICwgbWF4ICwgbWluRGVmaW5lZCAsIG1heERlZmluZWQgIH0gPSB0aGlzLmdldFVzZXJCb3VuZHMoKTtcbiBmdW5jdGlvbiBfYXBwbHlCb3VuZHMoYm91bmRzKSB7XG4gICAgICAgICAgICBpZiAoIW1pbkRlZmluZWQgJiYgIWlzTmFOKGJvdW5kcy5taW4pKSB7XG4gICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCBib3VuZHMubWluKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbWF4RGVmaW5lZCAmJiAhaXNOYU4oYm91bmRzLm1heCkpIHtcbiAgICAgICAgICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIGJvdW5kcy5tYXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghbWluRGVmaW5lZCB8fCAhbWF4RGVmaW5lZCkge1xuICAgICAgICAgICAgX2FwcGx5Qm91bmRzKHRoaXMuX2dldExhYmVsQm91bmRzKCkpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYm91bmRzICE9PSAndGlja3MnIHx8IG9wdGlvbnMudGlja3Muc291cmNlICE9PSAnbGFiZWxzJykge1xuICAgICAgICAgICAgICAgIF9hcHBseUJvdW5kcyh0aGlzLmdldE1pbk1heChmYWxzZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG1pbiA9IGlzTnVtYmVyRmluaXRlKG1pbikgJiYgIWlzTmFOKG1pbikgPyBtaW4gOiArYWRhcHRlci5zdGFydE9mKERhdGUubm93KCksIHVuaXQpO1xuICAgICAgICBtYXggPSBpc051bWJlckZpbml0ZShtYXgpICYmICFpc05hTihtYXgpID8gbWF4IDogK2FkYXB0ZXIuZW5kT2YoRGF0ZS5ub3coKSwgdW5pdCkgKyAxO1xuICAgICAgICB0aGlzLm1pbiA9IE1hdGgubWluKG1pbiwgbWF4IC0gMSk7XG4gICAgICAgIHRoaXMubWF4ID0gTWF0aC5tYXgobWluICsgMSwgbWF4KTtcbiAgICB9XG4gX2dldExhYmVsQm91bmRzKCkge1xuICAgICAgICBjb25zdCBhcnIgPSB0aGlzLmdldExhYmVsVGltZXN0YW1wcygpO1xuICAgICAgICBsZXQgbWluID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuICAgICAgICBpZiAoYXJyLmxlbmd0aCkge1xuICAgICAgICAgICAgbWluID0gYXJyWzBdO1xuICAgICAgICAgICAgbWF4ID0gYXJyW2Fyci5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluLFxuICAgICAgICAgICAgbWF4XG4gICAgICAgIH07XG4gICAgfVxuIGJ1aWxkVGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCB0aWNrT3B0cyA9IG9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aWNrT3B0cy5zb3VyY2UgPT09ICdsYWJlbHMnID8gdGhpcy5nZXRMYWJlbFRpbWVzdGFtcHMoKSA6IHRoaXMuX2dlbmVyYXRlKCk7XG4gICAgICAgIGlmIChvcHRpb25zLmJvdW5kcyA9PT0gJ3RpY2tzJyAmJiB0aW1lc3RhbXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5taW4gPSB0aGlzLl91c2VyTWluIHx8IHRpbWVzdGFtcHNbMF07XG4gICAgICAgICAgICB0aGlzLm1heCA9IHRoaXMuX3VzZXJNYXggfHwgdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1pbiA9IHRoaXMubWluO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcbiAgICAgICAgY29uc3QgdGlja3MgPSBfZmlsdGVyQmV0d2Vlbih0aW1lc3RhbXBzLCBtaW4sIG1heCk7XG4gICAgICAgIHRoaXMuX3VuaXQgPSB0aW1lT3B0cy51bml0IHx8ICh0aWNrT3B0cy5hdXRvU2tpcCA/IGRldGVybWluZVVuaXRGb3JBdXRvVGlja3ModGltZU9wdHMubWluVW5pdCwgdGhpcy5taW4sIHRoaXMubWF4LCB0aGlzLl9nZXRMYWJlbENhcGFjaXR5KG1pbikpIDogZGV0ZXJtaW5lVW5pdEZvckZvcm1hdHRpbmcodGhpcywgdGlja3MubGVuZ3RoLCB0aW1lT3B0cy5taW5Vbml0LCB0aGlzLm1pbiwgdGhpcy5tYXgpKTtcbiAgICAgICAgdGhpcy5fbWFqb3JVbml0ID0gIXRpY2tPcHRzLm1ham9yLmVuYWJsZWQgfHwgdGhpcy5fdW5pdCA9PT0gJ3llYXInID8gdW5kZWZpbmVkIDogZGV0ZXJtaW5lTWFqb3JVbml0KHRoaXMuX3VuaXQpO1xuICAgICAgICB0aGlzLmluaXRPZmZzZXRzKHRpbWVzdGFtcHMpO1xuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICB0aWNrcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRpY2tzRnJvbVRpbWVzdGFtcHModGhpcywgdGlja3MsIHRoaXMuX21ham9yVW5pdCk7XG4gICAgfVxuICAgIGFmdGVyQXV0b1NraXAoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0QWZ0ZXJBdXRvc2tpcCkge1xuICAgICAgICAgICAgdGhpcy5pbml0T2Zmc2V0cyh0aGlzLnRpY2tzLm1hcCgodGljayk9Pit0aWNrLnZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gaW5pdE9mZnNldHModGltZXN0YW1wcyA9IFtdKSB7XG4gICAgICAgIGxldCBzdGFydCA9IDA7XG4gICAgICAgIGxldCBlbmQgPSAwO1xuICAgICAgICBsZXQgZmlyc3QsIGxhc3Q7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMub2Zmc2V0ICYmIHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmaXJzdCA9IHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMF0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSAxIC0gZmlyc3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gKHRoaXMuZ2V0RGVjaW1hbEZvclZhbHVlKHRpbWVzdGFtcHNbMV0pIC0gZmlyc3QpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3QgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZW5kID0gbGFzdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZW5kID0gKGxhc3QgLSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMl0pKSAvIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGltaXQgPSB0aW1lc3RhbXBzLmxlbmd0aCA8IDMgPyAwLjUgOiAwLjI1O1xuICAgICAgICBzdGFydCA9IF9saW1pdFZhbHVlKHN0YXJ0LCAwLCBsaW1pdCk7XG4gICAgICAgIGVuZCA9IF9saW1pdFZhbHVlKGVuZCwgMCwgbGltaXQpO1xuICAgICAgICB0aGlzLl9vZmZzZXRzID0ge1xuICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBmYWN0b3I6IDEgLyAoc3RhcnQgKyAxICsgZW5kKVxuICAgICAgICB9O1xuICAgIH1cbiBfZ2VuZXJhdGUoKSB7XG4gICAgICAgIGNvbnN0IGFkYXB0ZXIgPSB0aGlzLl9hZGFwdGVyO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHRpbWVPcHRzID0gb3B0aW9ucy50aW1lO1xuICAgICAgICBjb25zdCBtaW5vciA9IHRpbWVPcHRzLnVuaXQgfHwgZGV0ZXJtaW5lVW5pdEZvckF1dG9UaWNrcyh0aW1lT3B0cy5taW5Vbml0LCBtaW4sIG1heCwgdGhpcy5fZ2V0TGFiZWxDYXBhY2l0eShtaW4pKTtcbiAgICAgICAgY29uc3Qgc3RlcFNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnRpY2tzLnN0ZXBTaXplLCAxKTtcbiAgICAgICAgY29uc3Qgd2Vla2RheSA9IG1pbm9yID09PSAnd2VlaycgPyB0aW1lT3B0cy5pc29XZWVrZGF5IDogZmFsc2U7XG4gICAgICAgIGNvbnN0IGhhc1dlZWtkYXkgPSBpc051bWJlcih3ZWVrZGF5KSB8fCB3ZWVrZGF5ID09PSB0cnVlO1xuICAgICAgICBjb25zdCB0aWNrcyA9IHt9O1xuICAgICAgICBsZXQgZmlyc3QgPSBtaW47XG4gICAgICAgIGxldCB0aW1lLCBjb3VudDtcbiAgICAgICAgaWYgKGhhc1dlZWtkYXkpIHtcbiAgICAgICAgICAgIGZpcnN0ID0gK2FkYXB0ZXIuc3RhcnRPZihmaXJzdCwgJ2lzb1dlZWsnLCB3ZWVrZGF5KTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdCA9ICthZGFwdGVyLnN0YXJ0T2YoZmlyc3QsIGhhc1dlZWtkYXkgPyAnZGF5JyA6IG1pbm9yKTtcbiAgICAgICAgaWYgKGFkYXB0ZXIuZGlmZihtYXgsIG1pbiwgbWlub3IpID4gMTAwMDAwICogc3RlcFNpemUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtaW4gKyAnIGFuZCAnICsgbWF4ICsgJyBhcmUgdG9vIGZhciBhcGFydCB3aXRoIHN0ZXBTaXplIG9mICcgKyBzdGVwU2l6ZSArICcgJyArIG1pbm9yKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gb3B0aW9ucy50aWNrcy5zb3VyY2UgPT09ICdkYXRhJyAmJiB0aGlzLmdldERhdGFUaW1lc3RhbXBzKCk7XG4gICAgICAgIGZvcih0aW1lID0gZmlyc3QsIGNvdW50ID0gMDsgdGltZSA8IG1heDsgdGltZSA9ICthZGFwdGVyLmFkZCh0aW1lLCBzdGVwU2l6ZSwgbWlub3IpLCBjb3VudCsrKXtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lID09PSBtYXggfHwgb3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgfHwgY291bnQgPT09IDEpIHtcbiAgICAgICAgICAgIGFkZFRpY2sodGlja3MsIHRpbWUsIHRpbWVzdGFtcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aWNrcykuc29ydChzb3J0ZXIpLm1hcCgoeCk9Pit4KTtcbiAgICB9XG4gZ2V0TGFiZWxGb3JWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCBhZGFwdGVyID0gdGhpcy5fYWRhcHRlcjtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgaWYgKHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBhZGFwdGVyLmZvcm1hdCh2YWx1ZSwgdGltZU9wdHMudG9vbHRpcEZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFkYXB0ZXIuZm9ybWF0KHZhbHVlLCB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cy5kYXRldGltZSk7XG4gICAgfVxuIGZvcm1hdCh2YWx1ZSwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHMgPSBvcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHM7XG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLl91bml0O1xuICAgICAgICBjb25zdCBmbXQgPSBmb3JtYXQgfHwgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FkYXB0ZXIuZm9ybWF0KHZhbHVlLCBmbXQpO1xuICAgIH1cbiBfdGlja0Zvcm1hdEZ1bmN0aW9uKHRpbWUsIGluZGV4LCB0aWNrcywgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZvcm1hdHRlciA9IG9wdGlvbnMudGlja3MuY2FsbGJhY2s7XG4gICAgICAgIGlmIChmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhmb3JtYXR0ZXIsIFtcbiAgICAgICAgICAgICAgICB0aW1lLFxuICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgIHRpY2tzXG4gICAgICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuICAgICAgICBjb25zdCB1bml0ID0gdGhpcy5fdW5pdDtcbiAgICAgICAgY29uc3QgbWFqb3JVbml0ID0gdGhpcy5fbWFqb3JVbml0O1xuICAgICAgICBjb25zdCBtaW5vckZvcm1hdCA9IHVuaXQgJiYgZm9ybWF0c1t1bml0XTtcbiAgICAgICAgY29uc3QgbWFqb3JGb3JtYXQgPSBtYWpvclVuaXQgJiYgZm9ybWF0c1ttYWpvclVuaXRdO1xuICAgICAgICBjb25zdCB0aWNrID0gdGlja3NbaW5kZXhdO1xuICAgICAgICBjb25zdCBtYWpvciA9IG1ham9yVW5pdCAmJiBtYWpvckZvcm1hdCAmJiB0aWNrICYmIHRpY2subWFqb3I7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGFwdGVyLmZvcm1hdCh0aW1lLCBmb3JtYXQgfHwgKG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCkpO1xuICAgIH1cbiBnZW5lcmF0ZVRpY2tMYWJlbHModGlja3MpIHtcbiAgICAgICAgbGV0IGksIGlsZW4sIHRpY2s7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICB0aWNrID0gdGlja3NbaV07XG4gICAgICAgICAgICB0aWNrLmxhYmVsID0gdGhpcy5fdGlja0Zvcm1hdEZ1bmN0aW9uKHRpY2sudmFsdWUsIGksIHRpY2tzKTtcbiAgICAgICAgfVxuICAgIH1cbiBnZXREZWNpbWFsRm9yVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gTmFOIDogKHZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pO1xuICAgIH1cbiBnZXRQaXhlbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBwb3MgPSB0aGlzLmdldERlY2ltYWxGb3JWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFBpeGVsRm9yRGVjaW1hbCgob2Zmc2V0cy5zdGFydCArIHBvcykgKiBvZmZzZXRzLmZhY3Rvcik7XG4gICAgfVxuIGdldFZhbHVlRm9yUGl4ZWwocGl4ZWwpIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHRoaXMuX29mZnNldHM7XG4gICAgICAgIGNvbnN0IHBvcyA9IHRoaXMuZ2V0RGVjaW1hbEZvclBpeGVsKHBpeGVsKSAvIG9mZnNldHMuZmFjdG9yIC0gb2Zmc2V0cy5lbmQ7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbiArIHBvcyAqICh0aGlzLm1heCAtIHRoaXMubWluKTtcbiAgICB9XG4gX2dldExhYmVsU2l6ZShsYWJlbCkge1xuICAgICAgICBjb25zdCB0aWNrc09wdHMgPSB0aGlzLm9wdGlvbnMudGlja3M7XG4gICAgICAgIGNvbnN0IHRpY2tMYWJlbFdpZHRoID0gdGhpcy5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHRvUmFkaWFucyh0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGlja3NPcHRzLm1heFJvdGF0aW9uIDogdGlja3NPcHRzLm1pblJvdGF0aW9uKTtcbiAgICAgICAgY29uc3QgY29zUm90YXRpb24gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIGNvbnN0IHNpblJvdGF0aW9uID0gTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICBjb25zdCB0aWNrRm9udFNpemUgPSB0aGlzLl9yZXNvbHZlVGlja0ZvbnRPcHRpb25zKDApLnNpemU7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3OiB0aWNrTGFiZWxXaWR0aCAqIGNvc1JvdGF0aW9uICsgdGlja0ZvbnRTaXplICogc2luUm90YXRpb24sXG4gICAgICAgICAgICBoOiB0aWNrTGFiZWxXaWR0aCAqIHNpblJvdGF0aW9uICsgdGlja0ZvbnRTaXplICogY29zUm90YXRpb25cbiAgICAgICAgfTtcbiAgICB9XG4gX2dldExhYmVsQ2FwYWNpdHkoZXhhbXBsZVRpbWUpIHtcbiAgICAgICAgY29uc3QgdGltZU9wdHMgPSB0aGlzLm9wdGlvbnMudGltZTtcbiAgICAgICAgY29uc3QgZGlzcGxheUZvcm1hdHMgPSB0aW1lT3B0cy5kaXNwbGF5Rm9ybWF0cztcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gZGlzcGxheUZvcm1hdHNbdGltZU9wdHMudW5pdF0gfHwgZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XG4gICAgICAgIGNvbnN0IGV4YW1wbGVMYWJlbCA9IHRoaXMuX3RpY2tGb3JtYXRGdW5jdGlvbihleGFtcGxlVGltZSwgMCwgdGlja3NGcm9tVGltZXN0YW1wcyh0aGlzLCBbXG4gICAgICAgICAgICBleGFtcGxlVGltZVxuICAgICAgICBdLCB0aGlzLl9tYWpvclVuaXQpLCBmb3JtYXQpO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5fZ2V0TGFiZWxTaXplKGV4YW1wbGVMYWJlbCk7XG4gICAgICAgIGNvbnN0IGNhcGFjaXR5ID0gTWF0aC5mbG9vcih0aGlzLmlzSG9yaXpvbnRhbCgpID8gdGhpcy53aWR0aCAvIHNpemUudyA6IHRoaXMuaGVpZ2h0IC8gc2l6ZS5oKSAtIDE7XG4gICAgICAgIHJldHVybiBjYXBhY2l0eSA+IDAgPyBjYXBhY2l0eSA6IDE7XG4gICAgfVxuIGdldERhdGFUaW1lc3RhbXBzKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmRhdGEgfHwgW107XG4gICAgICAgIGxldCBpLCBpbGVuO1xuICAgICAgICBpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aW1lc3RhbXBzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1ldGFzID0gdGhpcy5nZXRNYXRjaGluZ1Zpc2libGVNZXRhcygpO1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplZCAmJiBtZXRhcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5kYXRhID0gbWV0YXNbMF0uY29udHJvbGxlci5nZXRBbGxQYXJzZWRWYWx1ZXModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gbWV0YXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aW1lc3RhbXBzLmNvbmNhdChtZXRhc1tpXS5jb250cm9sbGVyLmdldEFsbFBhcnNlZFZhbHVlcyh0aGlzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlLmRhdGEgPSB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gZ2V0TGFiZWxUaW1lc3RhbXBzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fY2FjaGUubGFiZWxzIHx8IFtdO1xuICAgICAgICBsZXQgaSwgaWxlbjtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmdldExhYmVscygpO1xuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMucHVzaChwYXJzZSh0aGlzLCBsYWJlbHNbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGUubGFiZWxzID0gdGhpcy5fbm9ybWFsaXplZCA/IHRpbWVzdGFtcHMgOiB0aGlzLm5vcm1hbGl6ZSh0aW1lc3RhbXBzKTtcbiAgICB9XG4gbm9ybWFsaXplKHZhbHVlcykge1xuICAgICAgICByZXR1cm4gX2FycmF5VW5pcXVlKHZhbHVlcy5zb3J0KHNvcnRlcikpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHZhbCwgcmV2ZXJzZSkge1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IGhpID0gdGFibGUubGVuZ3RoIC0gMTtcbiAgICBsZXQgcHJldlNvdXJjZSwgbmV4dFNvdXJjZSwgcHJldlRhcmdldCwgbmV4dFRhcmdldDtcbiAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICBpZiAodmFsID49IHRhYmxlW2xvXS5wb3MgJiYgdmFsIDw9IHRhYmxlW2hpXS5wb3MpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICdwb3MnLCB2YWwpKTtcbiAgICAgICAgfVxuICAgICAgICAoeyBwb3M6IHByZXZTb3VyY2UgLCB0aW1lOiBwcmV2VGFyZ2V0ICB9ID0gdGFibGVbbG9dKTtcbiAgICAgICAgKHsgcG9zOiBuZXh0U291cmNlICwgdGltZTogbmV4dFRhcmdldCAgfSA9IHRhYmxlW2hpXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHZhbCA+PSB0YWJsZVtsb10udGltZSAmJiB2YWwgPD0gdGFibGVbaGldLnRpbWUpIHtcbiAgICAgICAgICAgICh7IGxvICwgaGkgIH0gPSBfbG9va3VwQnlLZXkodGFibGUsICd0aW1lJywgdmFsKSk7XG4gICAgICAgIH1cbiAgICAgICAgKHsgdGltZTogcHJldlNvdXJjZSAsIHBvczogcHJldlRhcmdldCAgfSA9IHRhYmxlW2xvXSk7XG4gICAgICAgICh7IHRpbWU6IG5leHRTb3VyY2UgLCBwb3M6IG5leHRUYXJnZXQgIH0gPSB0YWJsZVtoaV0pO1xuICAgIH1cbiAgICBjb25zdCBzcGFuID0gbmV4dFNvdXJjZSAtIHByZXZTb3VyY2U7XG4gICAgcmV0dXJuIHNwYW4gPyBwcmV2VGFyZ2V0ICsgKG5leHRUYXJnZXQgLSBwcmV2VGFyZ2V0KSAqICh2YWwgLSBwcmV2U291cmNlKSAvIHNwYW4gOiBwcmV2VGFyZ2V0O1xufVxuY2xhc3MgVGltZVNlcmllc1NjYWxlIGV4dGVuZHMgVGltZVNjYWxlIHtcbiAgICBzdGF0aWMgaWQgPSAndGltZXNlcmllcyc7XG4gc3RhdGljIGRlZmF1bHRzID0gVGltZVNjYWxlLmRlZmF1bHRzO1xuIGNvbnN0cnVjdG9yKHByb3BzKXtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAgdGhpcy5fdGFibGUgPSBbXTtcbiAgICAgICAgIHRoaXMuX21pblBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSB1bmRlZmluZWQ7XG4gICAgfVxuIGluaXRPZmZzZXRzKCkge1xuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gdGhpcy5fZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCk7XG4gICAgICAgIGNvbnN0IHRhYmxlID0gdGhpcy5fdGFibGUgPSB0aGlzLmJ1aWxkTG9va3VwVGFibGUodGltZXN0YW1wcyk7XG4gICAgICAgIHRoaXMuX21pblBvcyA9IGludGVycG9sYXRlKHRhYmxlLCB0aGlzLm1pbik7XG4gICAgICAgIHRoaXMuX3RhYmxlUmFuZ2UgPSBpbnRlcnBvbGF0ZSh0YWJsZSwgdGhpcy5tYXgpIC0gdGhpcy5fbWluUG9zO1xuICAgICAgICBzdXBlci5pbml0T2Zmc2V0cyh0aW1lc3RhbXBzKTtcbiAgICB9XG4gYnVpbGRMb29rdXBUYWJsZSh0aW1lc3RhbXBzKSB7XG4gICAgICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICAgICAgY29uc3QgdGFibGUgPSBbXTtcbiAgICAgICAgbGV0IGksIGlsZW4sIHByZXYsIGN1cnIsIG5leHQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGN1cnIgPSB0aW1lc3RhbXBzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnIgPj0gbWluICYmIGN1cnIgPD0gbWF4KSB7XG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaChjdXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1pbixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRpbWU6IG1heCxcbiAgICAgICAgICAgICAgICAgICAgcG9zOiAxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IoaSA9IDAsIGlsZW4gPSBpdGVtcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpe1xuICAgICAgICAgICAgbmV4dCA9IGl0ZW1zW2kgKyAxXTtcbiAgICAgICAgICAgIHByZXYgPSBpdGVtc1tpIC0gMV07XG4gICAgICAgICAgICBjdXJyID0gaXRlbXNbaV07XG4gICAgICAgICAgICBpZiAoTWF0aC5yb3VuZCgobmV4dCArIHByZXYpIC8gMikgIT09IGN1cnIpIHtcbiAgICAgICAgICAgICAgICB0YWJsZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGltZTogY3VycixcbiAgICAgICAgICAgICAgICAgICAgcG9zOiBpIC8gKGlsZW4gLSAxKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWJsZTtcbiAgICB9XG4gX2dlbmVyYXRlKCkge1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XG4gICAgICAgIGxldCB0aW1lc3RhbXBzID0gc3VwZXIuZ2V0RGF0YVRpbWVzdGFtcHMoKTtcbiAgICAgICAgaWYgKCF0aW1lc3RhbXBzLmluY2x1ZGVzKG1pbikgfHwgIXRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzLnNwbGljZSgwLCAwLCBtaW4pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGltZXN0YW1wcy5pbmNsdWRlcyhtYXgpIHx8IHRpbWVzdGFtcHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICB0aW1lc3RhbXBzLnB1c2gobWF4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZXN0YW1wcy5zb3J0KChhLCBiKT0+YSAtIGIpO1xuICAgIH1cbiBfZ2V0VGltZXN0YW1wc0ZvclRhYmxlKCkge1xuICAgICAgICBsZXQgdGltZXN0YW1wcyA9IHRoaXMuX2NhY2hlLmFsbCB8fCBbXTtcbiAgICAgICAgaWYgKHRpbWVzdGFtcHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhVGltZXN0YW1wcygpO1xuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMuZ2V0TGFiZWxUaW1lc3RhbXBzKCk7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCAmJiBsYWJlbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLm5vcm1hbGl6ZShkYXRhLmNvbmNhdChsYWJlbCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXN0YW1wcyA9IGRhdGEubGVuZ3RoID8gZGF0YSA6IGxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIHRpbWVzdGFtcHMgPSB0aGlzLl9jYWNoZS5hbGwgPSB0aW1lc3RhbXBzO1xuICAgICAgICByZXR1cm4gdGltZXN0YW1wcztcbiAgICB9XG4gZ2V0RGVjaW1hbEZvclZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAoaW50ZXJwb2xhdGUodGhpcy5fdGFibGUsIHZhbHVlKSAtIHRoaXMuX21pblBvcykgLyB0aGlzLl90YWJsZVJhbmdlO1xuICAgIH1cbiBnZXRWYWx1ZUZvclBpeGVsKHBpeGVsKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9vZmZzZXRzO1xuICAgICAgICBjb25zdCBkZWNpbWFsID0gdGhpcy5nZXREZWNpbWFsRm9yUGl4ZWwocGl4ZWwpIC8gb2Zmc2V0cy5mYWN0b3IgLSBvZmZzZXRzLmVuZDtcbiAgICAgICAgcmV0dXJuIGludGVycG9sYXRlKHRoaXMuX3RhYmxlLCBkZWNpbWFsICogdGhpcy5fdGFibGVSYW5nZSArIHRoaXMuX21pblBvcywgdHJ1ZSk7XG4gICAgfVxufVxuXG52YXIgc2NhbGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuX19wcm90b19fOiBudWxsLFxuQ2F0ZWdvcnlTY2FsZTogQ2F0ZWdvcnlTY2FsZSxcbkxpbmVhclNjYWxlOiBMaW5lYXJTY2FsZSxcbkxvZ2FyaXRobWljU2NhbGU6IExvZ2FyaXRobWljU2NhbGUsXG5SYWRpYWxMaW5lYXJTY2FsZTogUmFkaWFsTGluZWFyU2NhbGUsXG5UaW1lU2NhbGU6IFRpbWVTY2FsZSxcblRpbWVTZXJpZXNTY2FsZTogVGltZVNlcmllc1NjYWxlXG59KTtcblxuY29uc3QgcmVnaXN0ZXJhYmxlcyA9IFtcbiAgICBjb250cm9sbGVycyxcbiAgICBlbGVtZW50cyxcbiAgICBwbHVnaW5zLFxuICAgIHNjYWxlc1xuXTtcblxuZXhwb3J0IHsgQW5pbWF0aW9uLCBBbmltYXRpb25zLCBBcmNFbGVtZW50LCBCYXJDb250cm9sbGVyLCBCYXJFbGVtZW50LCBCYXNlUGxhdGZvcm0sIEJhc2ljUGxhdGZvcm0sIEJ1YmJsZUNvbnRyb2xsZXIsIENhdGVnb3J5U2NhbGUsIENoYXJ0LCBwbHVnaW5fY29sb3JzIGFzIENvbG9ycywgRGF0YXNldENvbnRyb2xsZXIsIHBsdWdpbl9kZWNpbWF0aW9uIGFzIERlY2ltYXRpb24sIERvbVBsYXRmb3JtLCBEb3VnaG51dENvbnRyb2xsZXIsIEVsZW1lbnQsIGluZGV4IGFzIEZpbGxlciwgSW50ZXJhY3Rpb24sIHBsdWdpbl9sZWdlbmQgYXMgTGVnZW5kLCBMaW5lQ29udHJvbGxlciwgTGluZUVsZW1lbnQsIExpbmVhclNjYWxlLCBMb2dhcml0aG1pY1NjYWxlLCBQaWVDb250cm9sbGVyLCBQb2ludEVsZW1lbnQsIFBvbGFyQXJlYUNvbnRyb2xsZXIsIFJhZGFyQ29udHJvbGxlciwgUmFkaWFsTGluZWFyU2NhbGUsIFNjYWxlLCBTY2F0dGVyQ29udHJvbGxlciwgcGx1Z2luX3N1YnRpdGxlIGFzIFN1YlRpdGxlLCBUaWNrcywgVGltZVNjYWxlLCBUaW1lU2VyaWVzU2NhbGUsIHBsdWdpbl90aXRsZSBhcyBUaXRsZSwgcGx1Z2luX3Rvb2x0aXAgYXMgVG9vbHRpcCwgYWRhcHRlcnMgYXMgX2FkYXB0ZXJzLCBfZGV0ZWN0UGxhdGZvcm0sIGFuaW1hdG9yLCBjb250cm9sbGVycywgZGVmYXVsdHMsIGVsZW1lbnRzLCBsYXlvdXRzLCBwbHVnaW5zLCByZWdpc3RlcmFibGVzLCByZWdpc3RyeSwgc2NhbGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGFydC5qcy5tYXBcbiIsIi8qIVxuICogQ2hhcnQuanMgdjQuNC4wXG4gKiBodHRwczovL3d3dy5jaGFydGpzLm9yZ1xuICogKGMpIDIwMjMgQ2hhcnQuanMgQ29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdAa3Vya2xlL2NvbG9yJztcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnNcbiAqLyAvKipcbiAqIEFuIGVtcHR5IGZ1bmN0aW9uIHRoYXQgY2FuIGJlIHVzZWQsIGZvciBleGFtcGxlLCBmb3Igb3B0aW9uYWwgY2FsbGJhY2suXG4gKi8gZnVuY3Rpb24gbm9vcCgpIHtcbi8qIG5vb3AgKi8gfVxuLyoqXG4gKiBSZXR1cm5zIGEgdW5pcXVlIGlkLCBzZXF1ZW50aWFsbHkgZ2VuZXJhdGVkIGZyb20gYSBnbG9iYWwgdmFyaWFibGUuXG4gKi8gY29uc3QgdWlkID0gKCgpPT57XG4gICAgbGV0IGlkID0gMDtcbiAgICByZXR1cm4gKCk9PmlkKys7XG59KSgpO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBuZWl0aGVyIG51bGwgbm9yIHVuZGVmaW5lZCwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiBpc051bGxPclVuZGVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IChpbmNsdWRpbmcgdHlwZWQgYXJyYXlzKSwgZWxzZSByZXR1cm5zIGZhbHNlLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIHRlc3QuXG4gKiBAZnVuY3Rpb25cbiAqLyBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIGlmICh0eXBlLnNsaWNlKDAsIDcpID09PSAnW29iamVjdCcgJiYgdHlwZS5zbGljZSgtNikgPT09ICdBcnJheV0nKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCAoZXhjbHVkaW5nIG51bGwpLCBlbHNlIHJldHVybnMgZmFsc2UuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cbiAqIEBzaW5jZSAyLjcuMFxuICovIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgcmV0dXJucyBmYWxzZVxuICogQHBhcmFtIHZhbHVlICAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuICovIGZ1bmN0aW9uIGlzTnVtYmVyRmluaXRlKHZhbHVlKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSAmJiBpc0Zpbml0ZSgrdmFsdWUpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZmluaXRlLCBlbHNlIHJldHVybnMgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGRlZmluZWQuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBgdmFsdWVgIGlzIG5vdCBmaW5pdGUuXG4gKi8gZnVuY3Rpb24gZmluaXRlT3JEZWZhdWx0KHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJGaW5pdGUodmFsdWUpID8gdmFsdWUgOiBkZWZhdWx0VmFsdWU7XG59XG4vKipcbiAqIFJldHVybnMgYHZhbHVlYCBpZiBkZWZpbmVkLCBlbHNlIHJldHVybnMgYGRlZmF1bHRWYWx1ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gcmV0dXJuIGlmIGRlZmluZWQuXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC5cbiAqLyBmdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbn1cbmNvbnN0IHRvUGVyY2VudGFnZSA9ICh2YWx1ZSwgZGltZW5zaW9uKT0+dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID8gcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgOiArdmFsdWUgLyBkaW1lbnNpb247XG5jb25zdCB0b0RpbWVuc2lvbiA9ICh2YWx1ZSwgZGltZW5zaW9uKT0+dHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiB2YWx1ZS5lbmRzV2l0aCgnJScpID8gcGFyc2VGbG9hdCh2YWx1ZSkgLyAxMDAgKiBkaW1lbnNpb24gOiArdmFsdWU7XG4vKipcbiAqIENhbGxzIGBmbmAgd2l0aCB0aGUgZ2l2ZW4gYGFyZ3NgIGluIHRoZSBzY29wZSBkZWZpbmVkIGJ5IGB0aGlzQXJnYCBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIHJldHVybmVkIGJ5IGBmbmAuIElmIGBmbmAgaXMgbm90IGEgZnVuY3Rpb24sIHRoaXMgbWV0aG9kIHJldHVybnMgdW5kZWZpbmVkLlxuICogQHBhcmFtIGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgd2l0aCB3aGljaCBgZm5gIHNob3VsZCBiZSBjYWxsZWQuXG4gKiBAcGFyYW0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cbiAqLyBmdW5jdGlvbiBjYWxsYmFjayhmbiwgYXJncywgdGhpc0FyZykge1xuICAgIGlmIChmbiAmJiB0eXBlb2YgZm4uY2FsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZWFjaChsb29wYWJsZSwgZm4sIHRoaXNBcmcsIHJldmVyc2UpIHtcbiAgICBsZXQgaSwgbGVuLCBrZXlzO1xuICAgIGlmIChpc0FycmF5KGxvb3BhYmxlKSkge1xuICAgICAgICBsZW4gPSBsb29wYWJsZS5sZW5ndGg7XG4gICAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgICAgICBmb3IoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKXtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKXtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobG9vcGFibGUpKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cyhsb29wYWJsZSk7XG4gICAgICAgIGxlbiA9IGtleXMubGVuZ3RoO1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKyl7XG4gICAgICAgICAgICBmbi5jYWxsKHRoaXNBcmcsIGxvb3BhYmxlW2tleXNbaV1dLCBrZXlzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBgYTBgIGFuZCBgYTFgIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQsIGVsc2UgcmV0dXJucyBmYWxzZS5cbiAqIEBwYXJhbSBhMCAtIFRoZSBhcnJheSB0byBjb21wYXJlXG4gKiBAcGFyYW0gYTEgLSBUaGUgYXJyYXkgdG8gY29tcGFyZVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZWxlbWVudHNFcXVhbChhMCwgYTEpIHtcbiAgICBsZXQgaSwgaWxlbiwgdjAsIHYxO1xuICAgIGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gYTAubGVuZ3RoOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgdjAgPSBhMFtpXTtcbiAgICAgICAgdjEgPSBhMVtpXTtcbiAgICAgICAgaWYgKHYwLmRhdGFzZXRJbmRleCAhPT0gdjEuZGF0YXNldEluZGV4IHx8IHYwLmluZGV4ICE9PSB2MS5pbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgZGVlcCBjb3B5IG9mIGBzb3VyY2VgIHdpdGhvdXQga2VlcGluZyByZWZlcmVuY2VzIG9uIG9iamVjdHMgYW5kIGFycmF5cy5cbiAqIEBwYXJhbSBzb3VyY2UgLSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gKi8gZnVuY3Rpb24gY2xvbmUoc291cmNlKSB7XG4gICAgaWYgKGlzQXJyYXkoc291cmNlKSkge1xuICAgICAgICByZXR1cm4gc291cmNlLm1hcChjbG9uZSk7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChzb3VyY2UpKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICAgICAgICBjb25zdCBrbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGxldCBrID0gMDtcbiAgICAgICAgZm9yKDsgayA8IGtsZW47ICsrayl7XG4gICAgICAgICAgICB0YXJnZXRba2V5c1trXV0gPSBjbG9uZShzb3VyY2Vba2V5c1trXV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG59XG5mdW5jdGlvbiBpc1ZhbGlkS2V5KGtleSkge1xuICAgIHJldHVybiBbXG4gICAgICAgICdfX3Byb3RvX18nLFxuICAgICAgICAncHJvdG90eXBlJyxcbiAgICAgICAgJ2NvbnN0cnVjdG9yJ1xuICAgIF0uaW5kZXhPZihrZXkpID09PSAtMTtcbn1cbi8qKlxuICogVGhlIGRlZmF1bHQgbWVyZ2VyIHdoZW4gQ2hhcnQuaGVscGVycy5tZXJnZSBpcyBjYWxsZWQgd2l0aG91dCBtZXJnZXIgb3B0aW9uLlxuICogTm90ZShTQik6IGFsc28gdXNlZCBieSBtZXJnZUNvbmZpZyBhbmQgbWVyZ2VTY2FsZUNvbmZpZyBhcyBmYWxsYmFjay5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVzZS1iZWZvcmUtZGVmaW5lXG4gICAgICAgIG1lcmdlKHR2YWwsIHN2YWwsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gY2xvbmUoc3ZhbCk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBzb3VyY2VzID0gaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogW1xuICAgICAgICBzb3VyY2VcbiAgICBdO1xuICAgIGNvbnN0IGlsZW4gPSBzb3VyY2VzLmxlbmd0aDtcbiAgICBpZiAoIWlzT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgbWVyZ2VyID0gb3B0aW9ucy5tZXJnZXIgfHwgX21lcmdlcjtcbiAgICBsZXQgY3VycmVudDtcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgY3VycmVudCA9IHNvdXJjZXNbaV07XG4gICAgICAgIGlmICghaXNPYmplY3QoY3VycmVudCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhjdXJyZW50KTtcbiAgICAgICAgZm9yKGxldCBrID0gMCwga2xlbiA9IGtleXMubGVuZ3RoOyBrIDwga2xlbjsgKytrKXtcbiAgICAgICAgICAgIG1lcmdlcihrZXlzW2tdLCB0YXJnZXQsIGN1cnJlbnQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBtZXJnZUlmKHRhcmdldCwgc291cmNlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11c2UtYmVmb3JlLWRlZmluZVxuICAgIHJldHVybiBtZXJnZSh0YXJnZXQsIHNvdXJjZSwge1xuICAgICAgICBtZXJnZXI6IF9tZXJnZXJJZlxuICAgIH0pO1xufVxuLyoqXG4gKiBNZXJnZXMgc291cmNlW2tleV0gaW4gdGFyZ2V0W2tleV0gb25seSBpZiB0YXJnZXRba2V5XSBpcyB1bmRlZmluZWQuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZXJnZXJJZihrZXksIHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKCFpc1ZhbGlkS2V5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB0dmFsID0gdGFyZ2V0W2tleV07XG4gICAgY29uc3Qgc3ZhbCA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChpc09iamVjdCh0dmFsKSAmJiBpc09iamVjdChzdmFsKSkge1xuICAgICAgICBtZXJnZUlmKHR2YWwsIHN2YWwpO1xuICAgIH0gZWxzZSBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0YXJnZXQsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBjbG9uZShzdmFsKTtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2RlcHJlY2F0ZWQoc2NvcGUsIHZhbHVlLCBwcmV2aW91cywgY3VycmVudCkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihzY29wZSArICc6IFwiJyArIHByZXZpb3VzICsgJ1wiIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgXCInICsgY3VycmVudCArICdcIiBpbnN0ZWFkJyk7XG4gICAgfVxufVxuLy8gcmVzb2x2ZU9iamVjdEtleSByZXNvbHZlciBjYWNoZVxuY29uc3Qga2V5UmVzb2x2ZXJzID0ge1xuICAgIC8vIENoYXJ0LmhlbHBlcnMuY29yZSByZXNvbHZlT2JqZWN0S2V5IHNob3VsZCByZXNvbHZlIGVtcHR5IGtleSB0byByb290IG9iamVjdFxuICAgICcnOiAodik9PnYsXG4gICAgLy8gZGVmYXVsdCByZXNvbHZlcnNcbiAgICB4OiAobyk9Pm8ueCxcbiAgICB5OiAobyk9Pm8ueVxufTtcbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfc3BsaXRLZXkoa2V5KSB7XG4gICAgY29uc3QgcGFydHMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgbGV0IHRtcCA9ICcnO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cyl7XG4gICAgICAgIHRtcCArPSBwYXJ0O1xuICAgICAgICBpZiAodG1wLmVuZHNXaXRoKCdcXFxcJykpIHtcbiAgICAgICAgICAgIHRtcCA9IHRtcC5zbGljZSgwLCAtMSkgKyAnLic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrZXlzLnB1c2godG1wKTtcbiAgICAgICAgICAgIHRtcCA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gX2dldEtleVJlc29sdmVyKGtleSkge1xuICAgIGNvbnN0IGtleXMgPSBfc3BsaXRLZXkoa2V5KTtcbiAgICByZXR1cm4gKG9iaik9PntcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIGtleXMpe1xuICAgICAgICAgICAgaWYgKGsgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmogPSBvYmogJiYgb2JqW2tdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVPYmplY3RLZXkob2JqLCBrZXkpIHtcbiAgICBjb25zdCByZXNvbHZlciA9IGtleVJlc29sdmVyc1trZXldIHx8IChrZXlSZXNvbHZlcnNba2V5XSA9IF9nZXRLZXlSZXNvbHZlcihrZXkpKTtcbiAgICByZXR1cm4gcmVzb2x2ZXIob2JqKTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfY2FwaXRhbGl6ZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuY29uc3QgZGVmaW5lZCA9ICh2YWx1ZSk9PnR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpc0Z1bmN0aW9uID0gKHZhbHVlKT0+dHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuLy8gQWRhcHRlZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxMTI4ODU1L2NvbXBhcmluZy1lY21hNi1zZXRzLWZvci1lcXVhbGl0eSMzMTEyOTM4NFxuY29uc3Qgc2V0c0VxdWFsID0gKGEsIGIpPT57XG4gICAgaWYgKGEuc2l6ZSAhPT0gYi5zaXplKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGEpe1xuICAgICAgICBpZiAoIWIuaGFzKGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBAcGFyYW0gZSAtIFRoZSBldmVudFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNDbGlja0V2ZW50KGUpIHtcbiAgICByZXR1cm4gZS50eXBlID09PSAnbW91c2V1cCcgfHwgZS50eXBlID09PSAnY2xpY2snIHx8IGUudHlwZSA9PT0gJ2NvbnRleHRtZW51Jztcbn1cblxuLyoqXG4gKiBAYWxpYXMgQ2hhcnQuaGVscGVycy5tYXRoXG4gKiBAbmFtZXNwYWNlXG4gKi8gY29uc3QgUEkgPSBNYXRoLlBJO1xuY29uc3QgVEFVID0gMiAqIFBJO1xuY29uc3QgUElUQVUgPSBUQVUgKyBQSTtcbmNvbnN0IElORklOSVRZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuY29uc3QgUkFEX1BFUl9ERUcgPSBQSSAvIDE4MDtcbmNvbnN0IEhBTEZfUEkgPSBQSSAvIDI7XG5jb25zdCBRVUFSVEVSX1BJID0gUEkgLyA0O1xuY29uc3QgVFdPX1RISVJEU19QSSA9IFBJICogMiAvIDM7XG5jb25zdCBsb2cxMCA9IE1hdGgubG9nMTA7XG5jb25zdCBzaWduID0gTWF0aC5zaWduO1xuZnVuY3Rpb24gYWxtb3N0RXF1YWxzKHgsIHksIGVwc2lsb24pIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCAtIHkpIDwgZXBzaWxvbjtcbn1cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgdGhlIG5pY2UgbnVtYmVyIGFsZ29yaXRobSB1c2VkIGluIGRldGVybWluaW5nIHdoZXJlIGF4aXMgbGFiZWxzIHdpbGwgZ29cbiAqLyBmdW5jdGlvbiBuaWNlTnVtKHJhbmdlKSB7XG4gICAgY29uc3Qgcm91bmRlZFJhbmdlID0gTWF0aC5yb3VuZChyYW5nZSk7XG4gICAgcmFuZ2UgPSBhbG1vc3RFcXVhbHMocmFuZ2UsIHJvdW5kZWRSYW5nZSwgcmFuZ2UgLyAxMDAwKSA/IHJvdW5kZWRSYW5nZSA6IHJhbmdlO1xuICAgIGNvbnN0IG5pY2VSYW5nZSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGxvZzEwKHJhbmdlKSkpO1xuICAgIGNvbnN0IGZyYWN0aW9uID0gcmFuZ2UgLyBuaWNlUmFuZ2U7XG4gICAgY29uc3QgbmljZUZyYWN0aW9uID0gZnJhY3Rpb24gPD0gMSA/IDEgOiBmcmFjdGlvbiA8PSAyID8gMiA6IGZyYWN0aW9uIDw9IDUgPyA1IDogMTA7XG4gICAgcmV0dXJuIG5pY2VGcmFjdGlvbiAqIG5pY2VSYW5nZTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBmYWN0b3JzIHNvcnRlZCBmcm9tIDEgdG8gc3FydCh2YWx1ZSlcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2ZhY3Rvcml6ZSh2YWx1ZSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGNvbnN0IHNxcnQgPSBNYXRoLnNxcnQodmFsdWUpO1xuICAgIGxldCBpO1xuICAgIGZvcihpID0gMTsgaSA8IHNxcnQ7IGkrKyl7XG4gICAgICAgIGlmICh2YWx1ZSAlIGkgPT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUgLyBpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3FydCA9PT0gKHNxcnQgfCAwKSkge1xuICAgICAgICByZXN1bHQucHVzaChzcXJ0KTtcbiAgICB9XG4gICAgcmVzdWx0LnNvcnQoKGEsIGIpPT5hIC0gYikucG9wKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKG4pIHtcbiAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pO1xufVxuZnVuY3Rpb24gYWxtb3N0V2hvbGUoeCwgZXBzaWxvbikge1xuICAgIGNvbnN0IHJvdW5kZWQgPSBNYXRoLnJvdW5kKHgpO1xuICAgIHJldHVybiByb3VuZGVkIC0gZXBzaWxvbiA8PSB4ICYmIHJvdW5kZWQgKyBlcHNpbG9uID49IHg7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3NldE1pbkFuZE1heEJ5S2V5KGFycmF5LCB0YXJnZXQsIHByb3BlcnR5KSB7XG4gICAgbGV0IGksIGlsZW4sIHZhbHVlO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47IGkrKyl7XG4gICAgICAgIHZhbHVlID0gYXJyYXlbaV1bcHJvcGVydHldO1xuICAgICAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgICAgICAgdGFyZ2V0Lm1pbiA9IE1hdGgubWluKHRhcmdldC5taW4sIHZhbHVlKTtcbiAgICAgICAgICAgIHRhcmdldC5tYXggPSBNYXRoLm1heCh0YXJnZXQubWF4LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiB0b1JhZGlhbnMoZGVncmVlcykge1xuICAgIHJldHVybiBkZWdyZWVzICogKFBJIC8gMTgwKTtcbn1cbmZ1bmN0aW9uIHRvRGVncmVlcyhyYWRpYW5zKSB7XG4gICAgcmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gUEkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXNcbiAqIGkuZS4gdGhlIG51bWJlciBvZiBkaWdpdHMgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnQsIG9mIHRoZSB2YWx1ZSBvZiB0aGlzIE51bWJlci5cbiAqIEBwYXJhbSB4IC0gQSBudW1iZXIuXG4gKiBAcmV0dXJucyBUaGUgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfZGVjaW1hbFBsYWNlcyh4KSB7XG4gICAgaWYgKCFpc051bWJlckZpbml0ZSh4KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBlID0gMTtcbiAgICBsZXQgcCA9IDA7XG4gICAgd2hpbGUoTWF0aC5yb3VuZCh4ICogZSkgLyBlICE9PSB4KXtcbiAgICAgICAgZSAqPSAxMDtcbiAgICAgICAgcCsrO1xuICAgIH1cbiAgICByZXR1cm4gcDtcbn1cbi8vIEdldHMgdGhlIGFuZ2xlIGZyb20gdmVydGljYWwgdXByaWdodCB0byB0aGUgcG9pbnQgYWJvdXQgYSBjZW50cmUuXG5mdW5jdGlvbiBnZXRBbmdsZUZyb21Qb2ludChjZW50cmVQb2ludCwgYW5nbGVQb2ludCkge1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuICAgIGNvbnN0IGRpc3RhbmNlRnJvbVlDZW50ZXIgPSBhbmdsZVBvaW50LnkgLSBjZW50cmVQb2ludC55O1xuICAgIGNvbnN0IHJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciA9IE1hdGguc3FydChkaXN0YW5jZUZyb21YQ2VudGVyICogZGlzdGFuY2VGcm9tWENlbnRlciArIGRpc3RhbmNlRnJvbVlDZW50ZXIgKiBkaXN0YW5jZUZyb21ZQ2VudGVyKTtcbiAgICBsZXQgYW5nbGUgPSBNYXRoLmF0YW4yKGRpc3RhbmNlRnJvbVlDZW50ZXIsIGRpc3RhbmNlRnJvbVhDZW50ZXIpO1xuICAgIGlmIChhbmdsZSA8IC0wLjUgKiBQSSkge1xuICAgICAgICBhbmdsZSArPSBUQVU7IC8vIG1ha2Ugc3VyZSB0aGUgcmV0dXJuZWQgYW5nbGUgaXMgaW4gdGhlIHJhbmdlIG9mICgtUEkvMiwgM1BJLzJdXG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFuZ2xlLFxuICAgICAgICBkaXN0YW5jZTogcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRpc3RhbmNlQmV0d2VlblBvaW50cyhwdDEsIHB0Mikge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocHQyLnggLSBwdDEueCwgMikgKyBNYXRoLnBvdyhwdDIueSAtIHB0MS55LCAyKSk7XG59XG4vKipcbiAqIFNob3J0ZXN0IGRpc3RhbmNlIGJldHdlZW4gYW5nbGVzLCBpbiBlaXRoZXIgZGlyZWN0aW9uLlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYW5nbGVEaWZmKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgLSBiICsgUElUQVUpICUgVEFVIC0gUEk7XG59XG4vKipcbiAqIE5vcm1hbGl6ZSBhbmdsZSB0byBiZSBiZXR3ZWVuIDAgYW5kIDIqUElcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX25vcm1hbGl6ZUFuZ2xlKGEpIHtcbiAgICByZXR1cm4gKGEgJSBUQVUgKyBUQVUpICUgVEFVO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hbmdsZUJldHdlZW4oYW5nbGUsIHN0YXJ0LCBlbmQsIHNhbWVBbmdsZUlzRnVsbENpcmNsZSkge1xuICAgIGNvbnN0IGEgPSBfbm9ybWFsaXplQW5nbGUoYW5nbGUpO1xuICAgIGNvbnN0IHMgPSBfbm9ybWFsaXplQW5nbGUoc3RhcnQpO1xuICAgIGNvbnN0IGUgPSBfbm9ybWFsaXplQW5nbGUoZW5kKTtcbiAgICBjb25zdCBhbmdsZVRvU3RhcnQgPSBfbm9ybWFsaXplQW5nbGUocyAtIGEpO1xuICAgIGNvbnN0IGFuZ2xlVG9FbmQgPSBfbm9ybWFsaXplQW5nbGUoZSAtIGEpO1xuICAgIGNvbnN0IHN0YXJ0VG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gcyk7XG4gICAgY29uc3QgZW5kVG9BbmdsZSA9IF9ub3JtYWxpemVBbmdsZShhIC0gZSk7XG4gICAgcmV0dXJuIGEgPT09IHMgfHwgYSA9PT0gZSB8fCBzYW1lQW5nbGVJc0Z1bGxDaXJjbGUgJiYgcyA9PT0gZSB8fCBhbmdsZVRvU3RhcnQgPiBhbmdsZVRvRW5kICYmIHN0YXJ0VG9BbmdsZSA8IGVuZFRvQW5nbGU7XG59XG4vKipcbiAqIExpbWl0IGB2YWx1ZWAgYmV0d2VlbiBgbWluYCBhbmQgYG1heGBcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIG1pblxuICogQHBhcmFtIG1heFxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfbGltaXRWYWx1ZSh2YWx1ZSwgbWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgobWluLCBNYXRoLm1pbihtYXgsIHZhbHVlKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaW50MTZSYW5nZSh2YWx1ZSkge1xuICAgIHJldHVybiBfbGltaXRWYWx1ZSh2YWx1ZSwgLTMyNzY4LCAzMjc2Nyk7XG59XG4vKipcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHBhcmFtIHN0YXJ0XG4gKiBAcGFyYW0gZW5kXG4gKiBAcGFyYW0gW2Vwc2lsb25dXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9pc0JldHdlZW4odmFsdWUsIHN0YXJ0LCBlbmQsIGVwc2lsb24gPSAxZS02KSB7XG4gICAgcmV0dXJuIHZhbHVlID49IE1hdGgubWluKHN0YXJ0LCBlbmQpIC0gZXBzaWxvbiAmJiB2YWx1ZSA8PSBNYXRoLm1heChzdGFydCwgZW5kKSArIGVwc2lsb247XG59XG5cbmZ1bmN0aW9uIF9sb29rdXAodGFibGUsIHZhbHVlLCBjbXApIHtcbiAgICBjbXAgPSBjbXAgfHwgKChpbmRleCk9PnRhYmxlW2luZGV4XSA8IHZhbHVlKTtcbiAgICBsZXQgaGkgPSB0YWJsZS5sZW5ndGggLSAxO1xuICAgIGxldCBsbyA9IDA7XG4gICAgbGV0IG1pZDtcbiAgICB3aGlsZShoaSAtIGxvID4gMSl7XG4gICAgICAgIG1pZCA9IGxvICsgaGkgPj4gMTtcbiAgICAgICAgaWYgKGNtcChtaWQpKSB7XG4gICAgICAgICAgICBsbyA9IG1pZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhpID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGxvLFxuICAgICAgICBoaVxuICAgIH07XG59XG4vKipcbiAqIEJpbmFyeSBzZWFyY2hcbiAqIEBwYXJhbSB0YWJsZSAtIHRoZSB0YWJsZSBzZWFyY2guIG11c3QgYmUgc29ydGVkIVxuICogQHBhcmFtIGtleSAtIHByb3BlcnR5IG5hbWUgZm9yIHRoZSB2YWx1ZSBpbiBlYWNoIGVudHJ5XG4gKiBAcGFyYW0gdmFsdWUgLSB2YWx1ZSB0byBmaW5kXG4gKiBAcGFyYW0gbGFzdCAtIGxvb2t1cCBsYXN0IGluZGV4XG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9sb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSwgbGFzdCk9Pl9sb29rdXAodGFibGUsIHZhbHVlLCBsYXN0ID8gKGluZGV4KT0+e1xuICAgICAgICBjb25zdCB0aSA9IHRhYmxlW2luZGV4XVtrZXldO1xuICAgICAgICByZXR1cm4gdGkgPCB2YWx1ZSB8fCB0aSA9PT0gdmFsdWUgJiYgdGFibGVbaW5kZXggKyAxXVtrZXldID09PSB2YWx1ZTtcbiAgICB9IDogKGluZGV4KT0+dGFibGVbaW5kZXhdW2tleV0gPCB2YWx1ZSk7XG4vKipcbiAqIFJldmVyc2UgYmluYXJ5IHNlYXJjaFxuICogQHBhcmFtIHRhYmxlIC0gdGhlIHRhYmxlIHNlYXJjaC4gbXVzdCBiZSBzb3J0ZWQhXG4gKiBAcGFyYW0ga2V5IC0gcHJvcGVydHkgbmFtZSBmb3IgdGhlIHZhbHVlIGluIGVhY2ggZW50cnlcbiAqIEBwYXJhbSB2YWx1ZSAtIHZhbHVlIHRvIGZpbmRcbiAqIEBwcml2YXRlXG4gKi8gY29uc3QgX3Jsb29rdXBCeUtleSA9ICh0YWJsZSwga2V5LCB2YWx1ZSk9Pl9sb29rdXAodGFibGUsIHZhbHVlLCAoaW5kZXgpPT50YWJsZVtpbmRleF1ba2V5XSA+PSB2YWx1ZSk7XG4vKipcbiAqIFJldHVybiBzdWJzZXQgb2YgYHZhbHVlc2AgYmV0d2VlbiBgbWluYCBhbmQgYG1heGAgaW5jbHVzaXZlLlxuICogVmFsdWVzIGFyZSBhc3N1bWVkIHRvIGJlIGluIHNvcnRlZCBvcmRlci5cbiAqIEBwYXJhbSB2YWx1ZXMgLSBzb3J0ZWQgYXJyYXkgb2YgdmFsdWVzXG4gKiBAcGFyYW0gbWluIC0gbWluIHZhbHVlXG4gKiBAcGFyYW0gbWF4IC0gbWF4IHZhbHVlXG4gKi8gZnVuY3Rpb24gX2ZpbHRlckJldHdlZW4odmFsdWVzLCBtaW4sIG1heCkge1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgd2hpbGUoc3RhcnQgPCBlbmQgJiYgdmFsdWVzW3N0YXJ0XSA8IG1pbil7XG4gICAgICAgIHN0YXJ0Kys7XG4gICAgfVxuICAgIHdoaWxlKGVuZCA+IHN0YXJ0ICYmIHZhbHVlc1tlbmQgLSAxXSA+IG1heCl7XG4gICAgICAgIGVuZC0tO1xuICAgIH1cbiAgICByZXR1cm4gc3RhcnQgPiAwIHx8IGVuZCA8IHZhbHVlcy5sZW5ndGggPyB2YWx1ZXMuc2xpY2Uoc3RhcnQsIGVuZCkgOiB2YWx1ZXM7XG59XG5jb25zdCBhcnJheUV2ZW50cyA9IFtcbiAgICAncHVzaCcsXG4gICAgJ3BvcCcsXG4gICAgJ3NoaWZ0JyxcbiAgICAnc3BsaWNlJyxcbiAgICAndW5zaGlmdCdcbl07XG5mdW5jdGlvbiBsaXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgICBpZiAoYXJyYXkuX2NoYXJ0anMpIHtcbiAgICAgICAgYXJyYXkuX2NoYXJ0anMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwgJ19jaGFydGpzJywge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgbGlzdGVuZXJzOiBbXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJcbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGFycmF5RXZlbnRzLmZvckVhY2goKGtleSk9PntcbiAgICAgICAgY29uc3QgbWV0aG9kID0gJ19vbkRhdGEnICsgX2NhcGl0YWxpemUoa2V5KTtcbiAgICAgICAgY29uc3QgYmFzZSA9IGFycmF5W2tleV07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhcnJheSwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlICguLi5hcmdzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICBhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMuZm9yRWFjaCgob2JqZWN0KT0+e1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iamVjdFttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gdW5saXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcbiAgICBjb25zdCBzdHViID0gYXJyYXkuX2NoYXJ0anM7XG4gICAgaWYgKCFzdHViKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXJzID0gc3R1Yi5saXN0ZW5lcnM7XG4gICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgaWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYXJyYXlFdmVudHMuZm9yRWFjaCgoa2V5KT0+e1xuICAgICAgICBkZWxldGUgYXJyYXlba2V5XTtcbiAgICB9KTtcbiAgICBkZWxldGUgYXJyYXkuX2NoYXJ0anM7XG59XG4vKipcbiAqIEBwYXJhbSBpdGVtc1xuICovIGZ1bmN0aW9uIF9hcnJheVVuaXF1ZShpdGVtcykge1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoaXRlbXMpO1xuICAgIGlmIChzZXQuc2l6ZSA9PT0gaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG4gICAgcmV0dXJuIEFycmF5LmZyb20oc2V0KTtcbn1cblxuZnVuY3Rpb24gZm9udFN0cmluZyhwaXhlbFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSkge1xuICAgIHJldHVybiBmb250U3R5bGUgKyAnICcgKyBwaXhlbFNpemUgKyAncHggJyArIGZvbnRGYW1pbHk7XG59XG4vKipcbiogUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGxcbiovIGNvbnN0IHJlcXVlc3RBbmltRnJhbWUgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG59KCk7XG4vKipcbiAqIFRocm90dGxlcyBjYWxsaW5nIGBmbmAgb25jZSBwZXIgYW5pbWF0aW9uIGZyYW1lXG4gKiBMYXRlc3QgYXJndW1lbnRzIGFyZSB1c2VkIG9uIHRoZSBhY3R1YWwgY2FsbFxuICovIGZ1bmN0aW9uIHRocm90dGxlZChmbiwgdGhpc0FyZykge1xuICAgIGxldCBhcmdzVG9Vc2UgPSBbXTtcbiAgICBsZXQgdGlja2luZyA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIC8vIFNhdmUgdGhlIGFyZ3MgZm9yIHVzZSBsYXRlclxuICAgICAgICBhcmdzVG9Vc2UgPSBhcmdzO1xuICAgICAgICBpZiAoIXRpY2tpbmcpIHtcbiAgICAgICAgICAgIHRpY2tpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgKCk9PntcbiAgICAgICAgICAgICAgICB0aWNraW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZm4uYXBwbHkodGhpc0FyZywgYXJnc1RvVXNlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogRGVib3VuY2VzIGNhbGxpbmcgYGZuYCBmb3IgYGRlbGF5YCBtc1xuICovIGZ1bmN0aW9uIGRlYm91bmNlKGZuLCBkZWxheSkge1xuICAgIGxldCB0aW1lb3V0O1xuICAgIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICAgIGlmIChkZWxheSkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoZm4sIGRlbGF5LCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWxheTtcbiAgICB9O1xufVxuLyoqXG4gKiBDb252ZXJ0cyAnc3RhcnQnIHRvICdsZWZ0JywgJ2VuZCcgdG8gJ3JpZ2h0JyBhbmQgb3RoZXJzIHRvICdjZW50ZXInXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF90b0xlZnRSaWdodENlbnRlciA9IChhbGlnbik9PmFsaWduID09PSAnc3RhcnQnID8gJ2xlZnQnIDogYWxpZ24gPT09ICdlbmQnID8gJ3JpZ2h0JyA6ICdjZW50ZXInO1xuLyoqXG4gKiBSZXR1cm5zIGBzdGFydGAsIGBlbmRgIG9yIGAoc3RhcnQgKyBlbmQpIC8gMmAgZGVwZW5kaW5nIG9uIGBhbGlnbmAuIERlZmF1bHRzIHRvIGBjZW50ZXJgXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF9hbGlnblN0YXJ0RW5kID0gKGFsaWduLCBzdGFydCwgZW5kKT0+YWxpZ24gPT09ICdzdGFydCcgPyBzdGFydCA6IGFsaWduID09PSAnZW5kJyA/IGVuZCA6IChzdGFydCArIGVuZCkgLyAyO1xuLyoqXG4gKiBSZXR1cm5zIGBsZWZ0YCwgYHJpZ2h0YCBvciBgKGxlZnQgKyByaWdodCkgLyAyYCBkZXBlbmRpbmcgb24gYGFsaWduYC4gRGVmYXVsdHMgdG8gYGxlZnRgXG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IF90ZXh0WCA9IChhbGlnbiwgbGVmdCwgcmlnaHQsIHJ0bCk9PntcbiAgICBjb25zdCBjaGVjayA9IHJ0bCA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgcmV0dXJuIGFsaWduID09PSBjaGVjayA/IHJpZ2h0IDogYWxpZ24gPT09ICdjZW50ZXInID8gKGxlZnQgKyByaWdodCkgLyAyIDogbGVmdDtcbn07XG4vKipcbiAqIFJldHVybiBzdGFydCBhbmQgY291bnQgb2YgdmlzaWJsZSBwb2ludHMuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9nZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzKG1ldGEsIHBvaW50cywgYW5pbWF0aW9uc0Rpc2FibGVkKSB7XG4gICAgY29uc3QgcG9pbnRDb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHN0YXJ0ID0gMDtcbiAgICBsZXQgY291bnQgPSBwb2ludENvdW50O1xuICAgIGlmIChtZXRhLl9zb3J0ZWQpIHtcbiAgICAgICAgY29uc3QgeyBpU2NhbGUgLCBfcGFyc2VkICB9ID0gbWV0YTtcbiAgICAgICAgY29uc3QgYXhpcyA9IGlTY2FsZS5heGlzO1xuICAgICAgICBjb25zdCB7IG1pbiAsIG1heCAsIG1pbkRlZmluZWQgLCBtYXhEZWZpbmVkICB9ID0gaVNjYWxlLmdldFVzZXJCb3VuZHMoKTtcbiAgICAgICAgaWYgKG1pbkRlZmluZWQpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gX2xpbWl0VmFsdWUoTWF0aC5taW4oLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIHR5cGUgX3BhcnNlZFxuICAgICAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGF4aXMsIG1pbikubG8sIC8vIEB0cy1leHBlY3QtZXJyb3IgTmVlZCB0byBmaXggdHlwZXMgb24gX2xvb2t1cEJ5S2V5XG4gICAgICAgICAgICBhbmltYXRpb25zRGlzYWJsZWQgPyBwb2ludENvdW50IDogX2xvb2t1cEJ5S2V5KHBvaW50cywgYXhpcywgaVNjYWxlLmdldFBpeGVsRm9yVmFsdWUobWluKSkubG8pLCAwLCBwb2ludENvdW50IC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heERlZmluZWQpIHtcbiAgICAgICAgICAgIGNvdW50ID0gX2xpbWl0VmFsdWUoTWF0aC5tYXgoLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIHR5cGUgX3BhcnNlZFxuICAgICAgICAgICAgX2xvb2t1cEJ5S2V5KF9wYXJzZWQsIGlTY2FsZS5heGlzLCBtYXgsIHRydWUpLmhpICsgMSwgLy8gQHRzLWV4cGVjdC1lcnJvciBOZWVkIHRvIGZpeCB0eXBlcyBvbiBfbG9va3VwQnlLZXlcbiAgICAgICAgICAgIGFuaW1hdGlvbnNEaXNhYmxlZCA/IDAgOiBfbG9va3VwQnlLZXkocG9pbnRzLCBheGlzLCBpU2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShtYXgpLCB0cnVlKS5oaSArIDEpLCBzdGFydCwgcG9pbnRDb3VudCkgLSBzdGFydDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvdW50ID0gcG9pbnRDb3VudCAtIHN0YXJ0O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBjb3VudFxuICAgIH07XG59XG4vKipcbiAqIENoZWNrcyBpZiB0aGUgc2NhbGUgcmFuZ2VzIGhhdmUgY2hhbmdlZC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhIC0gZGF0YXNldCBtZXRhLlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zY2FsZVJhbmdlc0NoYW5nZWQobWV0YSkge1xuICAgIGNvbnN0IHsgeFNjYWxlICwgeVNjYWxlICwgX3NjYWxlUmFuZ2VzICB9ID0gbWV0YTtcbiAgICBjb25zdCBuZXdSYW5nZXMgPSB7XG4gICAgICAgIHhtaW46IHhTY2FsZS5taW4sXG4gICAgICAgIHhtYXg6IHhTY2FsZS5tYXgsXG4gICAgICAgIHltaW46IHlTY2FsZS5taW4sXG4gICAgICAgIHltYXg6IHlTY2FsZS5tYXhcbiAgICB9O1xuICAgIGlmICghX3NjYWxlUmFuZ2VzKSB7XG4gICAgICAgIG1ldGEuX3NjYWxlUmFuZ2VzID0gbmV3UmFuZ2VzO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgY2hhbmdlZCA9IF9zY2FsZVJhbmdlcy54bWluICE9PSB4U2NhbGUubWluIHx8IF9zY2FsZVJhbmdlcy54bWF4ICE9PSB4U2NhbGUubWF4IHx8IF9zY2FsZVJhbmdlcy55bWluICE9PSB5U2NhbGUubWluIHx8IF9zY2FsZVJhbmdlcy55bWF4ICE9PSB5U2NhbGUubWF4O1xuICAgIE9iamVjdC5hc3NpZ24oX3NjYWxlUmFuZ2VzLCBuZXdSYW5nZXMpO1xuICAgIHJldHVybiBjaGFuZ2VkO1xufVxuXG5jb25zdCBhdEVkZ2UgPSAodCk9PnQgPT09IDAgfHwgdCA9PT0gMTtcbmNvbnN0IGVsYXN0aWNJbiA9ICh0LCBzLCBwKT0+LShNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSk7XG5jb25zdCBlbGFzdGljT3V0ID0gKHQsIHMsIHApPT5NYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiBUQVUgLyBwKSArIDE7XG4vKipcbiAqIEVhc2luZyBmdW5jdGlvbnMgYWRhcHRlZCBmcm9tIFJvYmVydCBQZW5uZXIncyBlYXNpbmcgZXF1YXRpb25zLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmVhc2luZy5lZmZlY3RzXG4gKiBAc2VlIGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmcvXG4gKi8gY29uc3QgZWZmZWN0cyA9IHtcbiAgICBsaW5lYXI6ICh0KT0+dCxcbiAgICBlYXNlSW5RdWFkOiAodCk9PnQgKiB0LFxuICAgIGVhc2VPdXRRdWFkOiAodCk9Pi10ICogKHQgLSAyKSxcbiAgICBlYXNlSW5PdXRRdWFkOiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgOiAtMC41ICogKC0tdCAqICh0IC0gMikgLSAxKSxcbiAgICBlYXNlSW5DdWJpYzogKHQpPT50ICogdCAqIHQsXG4gICAgZWFzZU91dEN1YmljOiAodCk9Pih0IC09IDEpICogdCAqIHQgKyAxLFxuICAgIGVhc2VJbk91dEN1YmljOiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgKiB0IDogMC41ICogKCh0IC09IDIpICogdCAqIHQgKyAyKSxcbiAgICBlYXNlSW5RdWFydDogKHQpPT50ICogdCAqIHQgKiB0LFxuICAgIGVhc2VPdXRRdWFydDogKHQpPT4tKCh0IC09IDEpICogdCAqIHQgKiB0IC0gMSksXG4gICAgZWFzZUluT3V0UXVhcnQ6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAwLjUgKiB0ICogdCAqIHQgKiB0IDogLTAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAtIDIpLFxuICAgIGVhc2VJblF1aW50OiAodCk9PnQgKiB0ICogdCAqIHQgKiB0LFxuICAgIGVhc2VPdXRRdWludDogKHQpPT4odCAtPSAxKSAqIHQgKiB0ICogdCAqIHQgKyAxLFxuICAgIGVhc2VJbk91dFF1aW50OiAodCk9Pih0IC89IDAuNSkgPCAxID8gMC41ICogdCAqIHQgKiB0ICogdCAqIHQgOiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMiksXG4gICAgZWFzZUluU2luZTogKHQpPT4tTWF0aC5jb3ModCAqIEhBTEZfUEkpICsgMSxcbiAgICBlYXNlT3V0U2luZTogKHQpPT5NYXRoLnNpbih0ICogSEFMRl9QSSksXG4gICAgZWFzZUluT3V0U2luZTogKHQpPT4tMC41ICogKE1hdGguY29zKFBJICogdCkgLSAxKSxcbiAgICBlYXNlSW5FeHBvOiAodCk9PnQgPT09IDAgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKSxcbiAgICBlYXNlT3V0RXhwbzogKHQpPT50ID09PSAxID8gMSA6IC1NYXRoLnBvdygyLCAtMTAgKiB0KSArIDEsXG4gICAgZWFzZUluT3V0RXhwbzogKHQpPT5hdEVkZ2UodCkgPyB0IDogdCA8IDAuNSA/IDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgKiAyIC0gMSkpIDogMC41ICogKC1NYXRoLnBvdygyLCAtMTAgKiAodCAqIDIgLSAxKSkgKyAyKSxcbiAgICBlYXNlSW5DaXJjOiAodCk9PnQgPj0gMSA/IHQgOiAtKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSksXG4gICAgZWFzZU91dENpcmM6ICh0KT0+TWF0aC5zcXJ0KDEgLSAodCAtPSAxKSAqIHQpLFxuICAgIGVhc2VJbk91dENpcmM6ICh0KT0+KHQgLz0gMC41KSA8IDEgPyAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSkgOiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSksXG4gICAgZWFzZUluRWxhc3RpYzogKHQpPT5hdEVkZ2UodCkgPyB0IDogZWxhc3RpY0luKHQsIDAuMDc1LCAwLjMpLFxuICAgIGVhc2VPdXRFbGFzdGljOiAodCk9PmF0RWRnZSh0KSA/IHQgOiBlbGFzdGljT3V0KHQsIDAuMDc1LCAwLjMpLFxuICAgIGVhc2VJbk91dEVsYXN0aWMgKHQpIHtcbiAgICAgICAgY29uc3QgcyA9IDAuMTEyNTtcbiAgICAgICAgY29uc3QgcCA9IDAuNDU7XG4gICAgICAgIHJldHVybiBhdEVkZ2UodCkgPyB0IDogdCA8IDAuNSA/IDAuNSAqIGVsYXN0aWNJbih0ICogMiwgcywgcCkgOiAwLjUgKyAwLjUgKiBlbGFzdGljT3V0KHQgKiAyIC0gMSwgcywgcCk7XG4gICAgfSxcbiAgICBlYXNlSW5CYWNrICh0KSB7XG4gICAgICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgICAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgICB9LFxuICAgIGVhc2VPdXRCYWNrICh0KSB7XG4gICAgICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgICAgICByZXR1cm4gKHQgLT0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuICAgIH0sXG4gICAgZWFzZUluT3V0QmFjayAodCkge1xuICAgICAgICBsZXQgcyA9IDEuNzAxNTg7XG4gICAgICAgIGlmICgodCAvPSAwLjUpIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgoKHMgKj0gMS41MjUpICsgMSkgKiB0IC0gcykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKCgocyAqPSAxLjUyNSkgKyAxKSAqIHQgKyBzKSArIDIpO1xuICAgIH0sXG4gICAgZWFzZUluQm91bmNlOiAodCk9PjEgLSBlZmZlY3RzLmVhc2VPdXRCb3VuY2UoMSAtIHQpLFxuICAgIGVhc2VPdXRCb3VuY2UgKHQpIHtcbiAgICAgICAgY29uc3QgbSA9IDcuNTYyNTtcbiAgICAgICAgY29uc3QgZCA9IDIuNzU7XG4gICAgICAgIGlmICh0IDwgMSAvIGQpIHtcbiAgICAgICAgICAgIHJldHVybiBtICogdCAqIHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHQgPCAyIC8gZCkge1xuICAgICAgICAgICAgcmV0dXJuIG0gKiAodCAtPSAxLjUgLyBkKSAqIHQgKyAwLjc1O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0IDwgMi41IC8gZCkge1xuICAgICAgICAgICAgcmV0dXJuIG0gKiAodCAtPSAyLjI1IC8gZCkgKiB0ICsgMC45Mzc1O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtICogKHQgLT0gMi42MjUgLyBkKSAqIHQgKyAwLjk4NDM3NTtcbiAgICB9LFxuICAgIGVhc2VJbk91dEJvdW5jZTogKHQpPT50IDwgMC41ID8gZWZmZWN0cy5lYXNlSW5Cb3VuY2UodCAqIDIpICogMC41IDogZWZmZWN0cy5lYXNlT3V0Qm91bmNlKHQgKiAyIC0gMSkgKiAwLjUgKyAwLjVcbn07XG5cbmZ1bmN0aW9uIGlzUGF0dGVybk9yR3JhZGllbnQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCB0eXBlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09ICdbb2JqZWN0IENhbnZhc1BhdHRlcm5dJyB8fCB0eXBlID09PSAnW29iamVjdCBDYW52YXNHcmFkaWVudF0nO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBjb2xvcih2YWx1ZSkge1xuICAgIHJldHVybiBpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSA/IHZhbHVlIDogbmV3IENvbG9yKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGdldEhvdmVyQ29sb3IodmFsdWUpIHtcbiAgICByZXR1cm4gaXNQYXR0ZXJuT3JHcmFkaWVudCh2YWx1ZSkgPyB2YWx1ZSA6IG5ldyBDb2xvcih2YWx1ZSkuc2F0dXJhdGUoMC41KS5kYXJrZW4oMC4xKS5oZXhTdHJpbmcoKTtcbn1cblxuY29uc3QgbnVtYmVycyA9IFtcbiAgICAneCcsXG4gICAgJ3knLFxuICAgICdib3JkZXJXaWR0aCcsXG4gICAgJ3JhZGl1cycsXG4gICAgJ3RlbnNpb24nXG5dO1xuY29uc3QgY29sb3JzID0gW1xuICAgICdjb2xvcicsXG4gICAgJ2JvcmRlckNvbG9yJyxcbiAgICAnYmFja2dyb3VuZENvbG9yJ1xuXTtcbmZ1bmN0aW9uIGFwcGx5QW5pbWF0aW9uc0RlZmF1bHRzKGRlZmF1bHRzKSB7XG4gICAgZGVmYXVsdHMuc2V0KCdhbmltYXRpb24nLCB7XG4gICAgICAgIGRlbGF5OiB1bmRlZmluZWQsXG4gICAgICAgIGR1cmF0aW9uOiAxMDAwLFxuICAgICAgICBlYXNpbmc6ICdlYXNlT3V0UXVhcnQnLFxuICAgICAgICBmbjogdW5kZWZpbmVkLFxuICAgICAgICBmcm9tOiB1bmRlZmluZWQsXG4gICAgICAgIGxvb3A6IHVuZGVmaW5lZCxcbiAgICAgICAgdG86IHVuZGVmaW5lZCxcbiAgICAgICAgdHlwZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbicsIHtcbiAgICAgICAgX2ZhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgX2luZGV4YWJsZTogZmFsc2UsXG4gICAgICAgIF9zY3JpcHRhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdvblByb2dyZXNzJyAmJiBuYW1lICE9PSAnb25Db21wbGV0ZScgJiYgbmFtZSAhPT0gJ2ZuJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLnNldCgnYW5pbWF0aW9ucycsIHtcbiAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICB0eXBlOiAnY29sb3InLFxuICAgICAgICAgICAgcHJvcGVydGllczogY29sb3JzXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlcnM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdudW1iZXInLFxuICAgICAgICAgICAgcHJvcGVydGllczogbnVtYmVyc1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmYXVsdHMuZGVzY3JpYmUoJ2FuaW1hdGlvbnMnLCB7XG4gICAgICAgIF9mYWxsYmFjazogJ2FuaW1hdGlvbidcbiAgICB9KTtcbiAgICBkZWZhdWx0cy5zZXQoJ3RyYW5zaXRpb25zJywge1xuICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA0MDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzaXplOiB7XG4gICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzaG93OiB7XG4gICAgICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgICAgICAgY29sb3JzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZyb206ICd0cmFuc3BhcmVudCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHZpc2libGU6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaGlkZToge1xuICAgICAgICAgICAgYW5pbWF0aW9uczoge1xuICAgICAgICAgICAgICAgIGNvbG9yczoge1xuICAgICAgICAgICAgICAgICAgICB0bzogJ3RyYW5zcGFyZW50J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdmlzaWJsZToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYm9vbGVhbicsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogJ2xpbmVhcicsXG4gICAgICAgICAgICAgICAgICAgIGZuOiAodik9PnYgfCAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5TGF5b3V0c0RlZmF1bHRzKGRlZmF1bHRzKSB7XG4gICAgZGVmYXVsdHMuc2V0KCdsYXlvdXQnLCB7XG4gICAgICAgIGF1dG9QYWRkaW5nOiB0cnVlLFxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICByaWdodDogMCxcbiAgICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICAgIGxlZnQ6IDBcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5jb25zdCBpbnRsQ2FjaGUgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXROdW1iZXJGb3JtYXQobG9jYWxlLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgY29uc3QgY2FjaGVLZXkgPSBsb2NhbGUgKyBKU09OLnN0cmluZ2lmeShvcHRpb25zKTtcbiAgICBsZXQgZm9ybWF0dGVyID0gaW50bENhY2hlLmdldChjYWNoZUtleSk7XG4gICAgaWYgKCFmb3JtYXR0ZXIpIHtcbiAgICAgICAgZm9ybWF0dGVyID0gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgICAgIGludGxDYWNoZS5zZXQoY2FjaGVLZXksIGZvcm1hdHRlcik7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXR0ZXI7XG59XG5mdW5jdGlvbiBmb3JtYXROdW1iZXIobnVtLCBsb2NhbGUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZ2V0TnVtYmVyRm9ybWF0KGxvY2FsZSwgb3B0aW9ucykuZm9ybWF0KG51bSk7XG59XG5cbmNvbnN0IGZvcm1hdHRlcnMgPSB7XG4gdmFsdWVzICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgPyAgdmFsdWUgOiAnJyArIHZhbHVlO1xuICAgIH0sXG4gbnVtZXJpYyAodGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICAgICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcwJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2NhbGUgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMubG9jYWxlO1xuICAgICAgICBsZXQgbm90YXRpb247XG4gICAgICAgIGxldCBkZWx0YSA9IHRpY2tWYWx1ZTtcbiAgICAgICAgaWYgKHRpY2tzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IG1heFRpY2sgPSBNYXRoLm1heChNYXRoLmFicyh0aWNrc1swXS52YWx1ZSksIE1hdGguYWJzKHRpY2tzW3RpY2tzLmxlbmd0aCAtIDFdLnZhbHVlKSk7XG4gICAgICAgICAgICBpZiAobWF4VGljayA8IDFlLTQgfHwgbWF4VGljayA+IDFlKzE1KSB7XG4gICAgICAgICAgICAgICAgbm90YXRpb24gPSAnc2NpZW50aWZpYyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWx0YSA9IGNhbGN1bGF0ZURlbHRhKHRpY2tWYWx1ZSwgdGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxvZ0RlbHRhID0gbG9nMTAoTWF0aC5hYnMoZGVsdGEpKTtcbiAgICAgICAgY29uc3QgbnVtRGVjaW1hbCA9IGlzTmFOKGxvZ0RlbHRhKSA/IDEgOiBNYXRoLm1heChNYXRoLm1pbigtMSAqIE1hdGguZmxvb3IobG9nRGVsdGEpLCAyMCksIDApO1xuICAgICAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbm90YXRpb24sXG4gICAgICAgICAgICBtaW5pbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWwsXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IG51bURlY2ltYWxcbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB0aGlzLm9wdGlvbnMudGlja3MuZm9ybWF0KTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE51bWJlcih0aWNrVmFsdWUsIGxvY2FsZSwgb3B0aW9ucyk7XG4gICAgfSxcbiBsb2dhcml0aG1pYyAodGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcbiAgICAgICAgaWYgKHRpY2tWYWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuICcwJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZW1haW4gPSB0aWNrc1tpbmRleF0uc2lnbmlmaWNhbmQgfHwgdGlja1ZhbHVlIC8gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IobG9nMTAodGlja1ZhbHVlKSkpO1xuICAgICAgICBpZiAoW1xuICAgICAgICAgICAgMSxcbiAgICAgICAgICAgIDIsXG4gICAgICAgICAgICAzLFxuICAgICAgICAgICAgNSxcbiAgICAgICAgICAgIDEwLFxuICAgICAgICAgICAgMTVcbiAgICAgICAgXS5pbmNsdWRlcyhyZW1haW4pIHx8IGluZGV4ID4gMC44ICogdGlja3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVycy5udW1lcmljLmNhbGwodGhpcywgdGlja1ZhbHVlLCBpbmRleCwgdGlja3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59O1xuZnVuY3Rpb24gY2FsY3VsYXRlRGVsdGEodGlja1ZhbHVlLCB0aWNrcykge1xuICAgIGxldCBkZWx0YSA9IHRpY2tzLmxlbmd0aCA+IDMgPyB0aWNrc1syXS52YWx1ZSAtIHRpY2tzWzFdLnZhbHVlIDogdGlja3NbMV0udmFsdWUgLSB0aWNrc1swXS52YWx1ZTtcbiAgICBpZiAoTWF0aC5hYnMoZGVsdGEpID49IDEgJiYgdGlja1ZhbHVlICE9PSBNYXRoLmZsb29yKHRpY2tWYWx1ZSkpIHtcbiAgICAgICAgZGVsdGEgPSB0aWNrVmFsdWUgLSBNYXRoLmZsb29yKHRpY2tWYWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBkZWx0YTtcbn1cbiB2YXIgVGlja3MgPSB7XG4gICAgZm9ybWF0dGVyc1xufTtcblxuZnVuY3Rpb24gYXBwbHlTY2FsZURlZmF1bHRzKGRlZmF1bHRzKSB7XG4gICAgZGVmYXVsdHMuc2V0KCdzY2FsZScsIHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgb2Zmc2V0OiBmYWxzZSxcbiAgICAgICAgcmV2ZXJzZTogZmFsc2UsXG4gICAgICAgIGJlZ2luQXRaZXJvOiBmYWxzZSxcbiBib3VuZHM6ICd0aWNrcycsXG4gICAgICAgIGNsaXA6IHRydWUsXG4gZ3JhY2U6IDAsXG4gICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDEsXG4gICAgICAgICAgICBkcmF3T25DaGFydEFyZWE6IHRydWUsXG4gICAgICAgICAgICBkcmF3VGlja3M6IHRydWUsXG4gICAgICAgICAgICB0aWNrTGVuZ3RoOiA4LFxuICAgICAgICAgICAgdGlja1dpZHRoOiAoX2N0eCwgb3B0aW9ucyk9Pm9wdGlvbnMubGluZVdpZHRoLFxuICAgICAgICAgICAgdGlja0NvbG9yOiAoX2N0eCwgb3B0aW9ucyk9Pm9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBvZmZzZXQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGRhc2g6IFtdLFxuICAgICAgICAgICAgZGFzaE9mZnNldDogMC4wLFxuICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgfSxcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgdGV4dDogJycsXG4gICAgICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICAgICAgdG9wOiA0LFxuICAgICAgICAgICAgICAgIGJvdHRvbTogNFxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgbWluUm90YXRpb246IDAsXG4gICAgICAgICAgICBtYXhSb3RhdGlvbjogNTAsXG4gICAgICAgICAgICBtaXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgdGV4dFN0cm9rZVdpZHRoOiAwLFxuICAgICAgICAgICAgdGV4dFN0cm9rZUNvbG9yOiAnJyxcbiAgICAgICAgICAgIHBhZGRpbmc6IDMsXG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgYXV0b1NraXA6IHRydWUsXG4gICAgICAgICAgICBhdXRvU2tpcFBhZGRpbmc6IDMsXG4gICAgICAgICAgICBsYWJlbE9mZnNldDogMCxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLnZhbHVlcyxcbiAgICAgICAgICAgIG1pbm9yOiB7fSxcbiAgICAgICAgICAgIG1ham9yOiB7fSxcbiAgICAgICAgICAgIGFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICAgIGNyb3NzQWxpZ246ICduZWFyJyxcbiAgICAgICAgICAgIHNob3dMYWJlbEJhY2tkcm9wOiBmYWxzZSxcbiAgICAgICAgICAgIGJhY2tkcm9wQ29sb3I6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNzUpJyxcbiAgICAgICAgICAgIGJhY2tkcm9wUGFkZGluZzogMlxuICAgICAgICB9XG4gICAgfSk7XG4gICAgZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpY2tzJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ncmlkJywgJ2NvbG9yJywgJycsICdib3JkZXJDb2xvcicpO1xuICAgIGRlZmF1bHRzLnJvdXRlKCdzY2FsZS5ib3JkZXInLCAnY29sb3InLCAnJywgJ2JvcmRlckNvbG9yJyk7XG4gICAgZGVmYXVsdHMucm91dGUoJ3NjYWxlLnRpdGxlJywgJ2NvbG9yJywgJycsICdjb2xvcicpO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZScsIHtcbiAgICAgICAgX2ZhbGxiYWNrOiBmYWxzZSxcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnYmVmb3JlJykgJiYgIW5hbWUuc3RhcnRzV2l0aCgnYWZ0ZXInKSAmJiBuYW1lICE9PSAnY2FsbGJhY2snICYmIG5hbWUgIT09ICdwYXJzZXInLFxuICAgICAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdib3JkZXJEYXNoJyAmJiBuYW1lICE9PSAndGlja0JvcmRlckRhc2gnICYmIG5hbWUgIT09ICdkYXNoJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZXMnLCB7XG4gICAgICAgIF9mYWxsYmFjazogJ3NjYWxlJ1xuICAgIH0pO1xuICAgIGRlZmF1bHRzLmRlc2NyaWJlKCdzY2FsZS50aWNrcycsIHtcbiAgICAgICAgX3NjcmlwdGFibGU6IChuYW1lKT0+bmFtZSAhPT0gJ2JhY2tkcm9wUGFkZGluZycgJiYgbmFtZSAhPT0gJ2NhbGxiYWNrJyxcbiAgICAgICAgX2luZGV4YWJsZTogKG5hbWUpPT5uYW1lICE9PSAnYmFja2Ryb3BQYWRkaW5nJ1xuICAgIH0pO1xufVxuXG5jb25zdCBvdmVycmlkZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuY29uc3QgZGVzY3JpcHRvcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIGZ1bmN0aW9uIGdldFNjb3BlJDEobm9kZSwga2V5KSB7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICAgIGNvbnN0IGtleXMgPSBrZXkuc3BsaXQoJy4nKTtcbiAgICBmb3IobGV0IGkgPSAwLCBuID0ga2V5cy5sZW5ndGg7IGkgPCBuOyArK2kpe1xuICAgICAgICBjb25zdCBrID0ga2V5c1tpXTtcbiAgICAgICAgbm9kZSA9IG5vZGVba10gfHwgKG5vZGVba10gPSBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBzZXQocm9vdCwgc2NvcGUsIHZhbHVlcykge1xuICAgIGlmICh0eXBlb2Ygc2NvcGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBtZXJnZShnZXRTY29wZSQxKHJvb3QsIHNjb3BlKSwgdmFsdWVzKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlKGdldFNjb3BlJDEocm9vdCwgJycpLCBzY29wZSk7XG59XG4gY2xhc3MgRGVmYXVsdHMge1xuICAgIGNvbnN0cnVjdG9yKF9kZXNjcmlwdG9ycywgX2FwcGxpZXJzKXtcbiAgICAgICAgdGhpcy5hbmltYXRpb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gJ3JnYmEoMCwwLDAsMC4xKSc7XG4gICAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSAncmdiYSgwLDAsMCwwLjEpJztcbiAgICAgICAgdGhpcy5jb2xvciA9ICcjNjY2JztcbiAgICAgICAgdGhpcy5kYXRhc2V0cyA9IHt9O1xuICAgICAgICB0aGlzLmRldmljZVBpeGVsUmF0aW8gPSAoY29udGV4dCk9PmNvbnRleHQuY2hhcnQucGxhdGZvcm0uZ2V0RGV2aWNlUGl4ZWxSYXRpbygpO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0ge307XG4gICAgICAgIHRoaXMuZXZlbnRzID0gW1xuICAgICAgICAgICAgJ21vdXNlbW92ZScsXG4gICAgICAgICAgICAnbW91c2VvdXQnLFxuICAgICAgICAgICAgJ2NsaWNrJyxcbiAgICAgICAgICAgICd0b3VjaHN0YXJ0JyxcbiAgICAgICAgICAgICd0b3VjaG1vdmUnXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuZm9udCA9IHtcbiAgICAgICAgICAgIGZhbWlseTogXCInSGVsdmV0aWNhIE5ldWUnLCAnSGVsdmV0aWNhJywgJ0FyaWFsJywgc2Fucy1zZXJpZlwiLFxuICAgICAgICAgICAgc2l6ZTogMTIsXG4gICAgICAgICAgICBzdHlsZTogJ25vcm1hbCcsXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiAxLjIsXG4gICAgICAgICAgICB3ZWlnaHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5ob3ZlciA9IHt9O1xuICAgICAgICB0aGlzLmhvdmVyQmFja2dyb3VuZENvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICB0aGlzLmhvdmVyQm9yZGVyQ29sb3IgPSAoY3R4LCBvcHRpb25zKT0+Z2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKTtcbiAgICAgICAgdGhpcy5ob3ZlckNvbG9yID0gKGN0eCwgb3B0aW9ucyk9PmdldEhvdmVyQ29sb3Iob3B0aW9ucy5jb2xvcik7XG4gICAgICAgIHRoaXMuaW5kZXhBeGlzID0gJ3gnO1xuICAgICAgICB0aGlzLmludGVyYWN0aW9uID0ge1xuICAgICAgICAgICAgbW9kZTogJ25lYXJlc3QnLFxuICAgICAgICAgICAgaW50ZXJzZWN0OiB0cnVlLFxuICAgICAgICAgICAgaW5jbHVkZUludmlzaWJsZTogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tYWludGFpbkFzcGVjdFJhdGlvID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vbkhvdmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5vbkNsaWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXJzaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wbHVnaW5zID0ge307XG4gICAgICAgIHRoaXMucmVzcG9uc2l2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuc2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuc2NhbGVzID0ge307XG4gICAgICAgIHRoaXMuc2hvd0xpbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmRyYXdBY3RpdmVFbGVtZW50c09uVG9wID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXNjcmliZShfZGVzY3JpcHRvcnMpO1xuICAgICAgICB0aGlzLmFwcGx5KF9hcHBsaWVycyk7XG4gICAgfVxuIHNldChzY29wZSwgdmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXQodGhpcywgc2NvcGUsIHZhbHVlcyk7XG4gICAgfVxuIGdldChzY29wZSkge1xuICAgICAgICByZXR1cm4gZ2V0U2NvcGUkMSh0aGlzLCBzY29wZSk7XG4gICAgfVxuIGRlc2NyaWJlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHNldChkZXNjcmlwdG9ycywgc2NvcGUsIHZhbHVlcyk7XG4gICAgfVxuICAgIG92ZXJyaWRlKHNjb3BlLCB2YWx1ZXMpIHtcbiAgICAgICAgcmV0dXJuIHNldChvdmVycmlkZXMsIHNjb3BlLCB2YWx1ZXMpO1xuICAgIH1cbiByb3V0ZShzY29wZSwgbmFtZSwgdGFyZ2V0U2NvcGUsIHRhcmdldE5hbWUpIHtcbiAgICAgICAgY29uc3Qgc2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHNjb3BlKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2NvcGVPYmplY3QgPSBnZXRTY29wZSQxKHRoaXMsIHRhcmdldFNjb3BlKTtcbiAgICAgICAgY29uc3QgcHJpdmF0ZU5hbWUgPSAnXycgKyBuYW1lO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY29wZU9iamVjdCwge1xuICAgICAgICAgICAgW3ByaXZhdGVOYW1lXToge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBzY29wZU9iamVjdFtuYW1lXSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtuYW1lXToge1xuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9jYWwgPSB0aGlzW3ByaXZhdGVOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gdGFyZ2V0U2NvcGVPYmplY3RbdGFyZ2V0TmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChsb2NhbCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB0YXJnZXQsIGxvY2FsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVPckRlZmF1bHQobG9jYWwsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzZXQgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpdmF0ZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXBwbHkoYXBwbGllcnMpIHtcbiAgICAgICAgYXBwbGllcnMuZm9yRWFjaCgoYXBwbHkpPT5hcHBseSh0aGlzKSk7XG4gICAgfVxufVxudmFyIGRlZmF1bHRzID0gLyogI19fUFVSRV9fICovIG5ldyBEZWZhdWx0cyh7XG4gICAgX3NjcmlwdGFibGU6IChuYW1lKT0+IW5hbWUuc3RhcnRzV2l0aCgnb24nKSxcbiAgICBfaW5kZXhhYmxlOiAobmFtZSk9Pm5hbWUgIT09ICdldmVudHMnLFxuICAgIGhvdmVyOiB7XG4gICAgICAgIF9mYWxsYmFjazogJ2ludGVyYWN0aW9uJ1xuICAgIH0sXG4gICAgaW50ZXJhY3Rpb246IHtcbiAgICAgICAgX3NjcmlwdGFibGU6IGZhbHNlLFxuICAgICAgICBfaW5kZXhhYmxlOiBmYWxzZVxuICAgIH1cbn0sIFtcbiAgICBhcHBseUFuaW1hdGlvbnNEZWZhdWx0cyxcbiAgICBhcHBseUxheW91dHNEZWZhdWx0cyxcbiAgICBhcHBseVNjYWxlRGVmYXVsdHNcbl0pO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiBmb250IG9iamVjdCBpbnRvIGEgQ1NTIGZvbnQgc3RyaW5nLlxuICogQHBhcmFtIGZvbnQgLSBBIGZvbnQgb2JqZWN0LlxuICogQHJldHVybiBUaGUgQ1NTIGZvbnQgc3RyaW5nLiBTZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2ZvbnRcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gdG9Gb250U3RyaW5nKGZvbnQpIHtcbiAgICBpZiAoIWZvbnQgfHwgaXNOdWxsT3JVbmRlZihmb250LnNpemUpIHx8IGlzTnVsbE9yVW5kZWYoZm9udC5mYW1pbHkpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gKGZvbnQuc3R5bGUgPyBmb250LnN0eWxlICsgJyAnIDogJycpICsgKGZvbnQud2VpZ2h0ID8gZm9udC53ZWlnaHQgKyAnICcgOiAnJykgKyBmb250LnNpemUgKyAncHggJyArIGZvbnQuZmFtaWx5O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBzdHJpbmcpIHtcbiAgICBsZXQgdGV4dFdpZHRoID0gZGF0YVtzdHJpbmddO1xuICAgIGlmICghdGV4dFdpZHRoKSB7XG4gICAgICAgIHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuICAgICAgICBnYy5wdXNoKHN0cmluZyk7XG4gICAgfVxuICAgIGlmICh0ZXh0V2lkdGggPiBsb25nZXN0KSB7XG4gICAgICAgIGxvbmdlc3QgPSB0ZXh0V2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBsb25nZXN0O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBfbG9uZ2VzdFRleHQoY3R4LCBmb250LCBhcnJheU9mVGhpbmdzLCBjYWNoZSkge1xuICAgIGNhY2hlID0gY2FjaGUgfHwge307XG4gICAgbGV0IGRhdGEgPSBjYWNoZS5kYXRhID0gY2FjaGUuZGF0YSB8fCB7fTtcbiAgICBsZXQgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0IHx8IFtdO1xuICAgIGlmIChjYWNoZS5mb250ICE9PSBmb250KSB7XG4gICAgICAgIGRhdGEgPSBjYWNoZS5kYXRhID0ge307XG4gICAgICAgIGdjID0gY2FjaGUuZ2FyYmFnZUNvbGxlY3QgPSBbXTtcbiAgICAgICAgY2FjaGUuZm9udCA9IGZvbnQ7XG4gICAgfVxuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LmZvbnQgPSBmb250O1xuICAgIGxldCBsb25nZXN0ID0gMDtcbiAgICBjb25zdCBpbGVuID0gYXJyYXlPZlRoaW5ncy5sZW5ndGg7XG4gICAgbGV0IGksIGosIGpsZW4sIHRoaW5nLCBuZXN0ZWRUaGluZztcbiAgICBmb3IoaSA9IDA7IGkgPCBpbGVuOyBpKyspe1xuICAgICAgICB0aGluZyA9IGFycmF5T2ZUaGluZ3NbaV07XG4gICAgICAgIC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuICAgICAgICBpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiAhaXNBcnJheSh0aGluZykpIHtcbiAgICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgdGhpbmcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkodGhpbmcpKSB7XG4gICAgICAgICAgICAvLyBpZiBpdCBpcyBhbiBhcnJheSBsZXRzIG1lYXN1cmUgZWFjaCBlbGVtZW50XG4gICAgICAgICAgICAvLyB0byBkbyBtYXliZSBzaW1wbGlmeSB0aGlzIGZ1bmN0aW9uIGEgYml0IHNvIHdlIGNhbiBkbyB0aGlzIG1vcmUgcmVjdXJzaXZlbHk/XG4gICAgICAgICAgICBmb3IoaiA9IDAsIGpsZW4gPSB0aGluZy5sZW5ndGg7IGogPCBqbGVuOyBqKyspe1xuICAgICAgICAgICAgICAgIG5lc3RlZFRoaW5nID0gdGhpbmdbal07XG4gICAgICAgICAgICAgICAgLy8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG4gICAgICAgICAgICAgICAgaWYgKG5lc3RlZFRoaW5nICE9PSB1bmRlZmluZWQgJiYgbmVzdGVkVGhpbmcgIT09IG51bGwgJiYgIWlzQXJyYXkobmVzdGVkVGhpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvbmdlc3QgPSBfbWVhc3VyZVRleHQoY3R4LCBkYXRhLCBnYywgbG9uZ2VzdCwgbmVzdGVkVGhpbmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGNvbnN0IGdjTGVuID0gZ2MubGVuZ3RoIC8gMjtcbiAgICBpZiAoZ2NMZW4gPiBhcnJheU9mVGhpbmdzLmxlbmd0aCkge1xuICAgICAgICBmb3IoaSA9IDA7IGkgPCBnY0xlbjsgaSsrKXtcbiAgICAgICAgICAgIGRlbGV0ZSBkYXRhW2djW2ldXTtcbiAgICAgICAgfVxuICAgICAgICBnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuICAgIH1cbiAgICByZXR1cm4gbG9uZ2VzdDtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgYWxpZ25lZCBwaXhlbCB2YWx1ZSB0byBhdm9pZCBhbnRpLWFsaWFzaW5nIGJsdXJcbiAqIEBwYXJhbSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSBwaXhlbCAtIEEgcGl4ZWwgdmFsdWUuXG4gKiBAcGFyYW0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIGVsZW1lbnQuXG4gKiBAcmV0dXJucyBUaGUgYWxpZ25lZCBwaXhlbCB2YWx1ZS5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2FsaWduUGl4ZWwoY2hhcnQsIHBpeGVsLCB3aWR0aCkge1xuICAgIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbztcbiAgICBjb25zdCBoYWxmV2lkdGggPSB3aWR0aCAhPT0gMCA/IE1hdGgubWF4KHdpZHRoIC8gMiwgMC41KSA6IDA7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoKHBpeGVsIC0gaGFsZldpZHRoKSAqIGRldmljZVBpeGVsUmF0aW8pIC8gZGV2aWNlUGl4ZWxSYXRpbyArIGhhbGZXaWR0aDtcbn1cbi8qKlxuICogQ2xlYXJzIHRoZSBlbnRpcmUgY2FudmFzLlxuICovIGZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNhbnZhcywgY3R4KSB7XG4gICAgY3R4ID0gY3R4IHx8IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgLy8gY2FudmFzLndpZHRoIGFuZCBjYW52YXMuaGVpZ2h0IGRvIG5vdCBjb25zaWRlciB0aGUgY2FudmFzIHRyYW5zZm9ybSxcbiAgICAvLyB3aGlsZSBjbGVhclJlY3QgZG9lc1xuICAgIGN0eC5yZXNldFRyYW5zZm9ybSgpO1xuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuZnVuY3Rpb24gZHJhd1BvaW50KGN0eCwgb3B0aW9ucywgeCwgeSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgICBkcmF3UG9pbnRMZWdlbmQoY3R4LCBvcHRpb25zLCB4LCB5LCBudWxsKTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiBkcmF3UG9pbnRMZWdlbmQoY3R4LCBvcHRpb25zLCB4LCB5LCB3KSB7XG4gICAgbGV0IHR5cGUsIHhPZmZzZXQsIHlPZmZzZXQsIHNpemUsIGNvcm5lclJhZGl1cywgd2lkdGgsIHhPZmZzZXRXLCB5T2Zmc2V0VztcbiAgICBjb25zdCBzdHlsZSA9IG9wdGlvbnMucG9pbnRTdHlsZTtcbiAgICBjb25zdCByb3RhdGlvbiA9IG9wdGlvbnMucm90YXRpb247XG4gICAgY29uc3QgcmFkaXVzID0gb3B0aW9ucy5yYWRpdXM7XG4gICAgbGV0IHJhZCA9IChyb3RhdGlvbiB8fCAwKSAqIFJBRF9QRVJfREVHO1xuICAgIGlmIChzdHlsZSAmJiB0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHR5cGUgPSBzdHlsZS50b1N0cmluZygpO1xuICAgICAgICBpZiAodHlwZSA9PT0gJ1tvYmplY3QgSFRNTEltYWdlRWxlbWVudF0nIHx8IHR5cGUgPT09ICdbb2JqZWN0IEhUTUxDYW52YXNFbGVtZW50XScpIHtcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHgudHJhbnNsYXRlKHgsIHkpO1xuICAgICAgICAgICAgY3R4LnJvdGF0ZShyYWQpO1xuICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzdHlsZSwgLXN0eWxlLndpZHRoIC8gMiwgLXN0eWxlLmhlaWdodCAvIDIsIHN0eWxlLndpZHRoLCBzdHlsZS5oZWlnaHQpO1xuICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBzd2l0Y2goc3R5bGUpe1xuICAgICAgICAvLyBEZWZhdWx0IGluY2x1ZGVzIGNpcmNsZVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgaWYgKHcpIHtcbiAgICAgICAgICAgICAgICBjdHguZWxsaXBzZSh4LCB5LCB3IC8gMiwgcmFkaXVzLCAwLCAwLCBUQVUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdHguYXJjKHgsIHksIHJhZGl1cywgMCwgVEFVKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0cmlhbmdsZSc6XG4gICAgICAgICAgICB3aWR0aCA9IHcgPyB3IC8gMiA6IHJhZGl1cztcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCArIE1hdGguc2luKHJhZCkgKiB3aWR0aCwgeSAtIE1hdGguY29zKHJhZCkgKiByYWRpdXMpO1xuICAgICAgICAgICAgcmFkICs9IFRXT19USElSRFNfUEk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyBNYXRoLnNpbihyYWQpICogd2lkdGgsIHkgLSBNYXRoLmNvcyhyYWQpICogcmFkaXVzKTtcbiAgICAgICAgICAgIHJhZCArPSBUV09fVEhJUkRTX1BJO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5zaW4ocmFkKSAqIHdpZHRoLCB5IC0gTWF0aC5jb3MocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVjdFJvdW5kZWQnOlxuICAgICAgICAgICAgLy8gTk9URTogdGhlIHJvdW5kZWQgcmVjdCBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VkIHRvIHVzZSBgYXJjYCBpbnN0ZWFkIG9mXG4gICAgICAgICAgICAvLyBgcXVhZHJhdGljQ3VydmVUb2Agc2luY2UgaXQgZ2VuZXJhdGVzIGJldHRlciByZXN1bHRzIHdoZW4gcmVjdCBpc1xuICAgICAgICAgICAgLy8gYWxtb3N0IGEgY2lyY2xlLiAwLjUxNiAoaW5zdGVhZCBvZiAwLjUpIHByb2R1Y2VzIHJlc3VsdHMgd2l0aCB2aXN1YWxseVxuICAgICAgICAgICAgLy8gY2xvc2VyIHByb3BvcnRpb24gdG8gdGhlIHByZXZpb3VzIGltcGwgYW5kIGl0IGlzIGluc2NyaWJlZCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGNpcmNsZSB3aXRoIGByYWRpdXNgLiBGb3IgbW9yZSBkZXRhaWxzLCBzZWUgdGhlIGZvbGxvd2luZyBQUnM6XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTU5N1xuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzU4NThcbiAgICAgICAgICAgIGNvcm5lclJhZGl1cyA9IHJhZGl1cyAqIDAuNTE2O1xuICAgICAgICAgICAgc2l6ZSA9IHJhZGl1cyAtIGNvcm5lclJhZGl1cztcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQgKyBRVUFSVEVSX1BJKSAqIHNpemU7XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCArIFFVQVJURVJfUEkpICogKHcgPyB3IC8gMiAtIGNvcm5lclJhZGl1cyA6IHNpemUpO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCArIFFVQVJURVJfUEkpICogc2l6ZTtcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkICsgUVVBUlRFUl9QSSkgKiAodyA/IHcgLyAyIC0gY29ybmVyUmFkaXVzIDogc2l6ZSk7XG4gICAgICAgICAgICBjdHguYXJjKHggLSB4T2Zmc2V0VywgeSAtIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkIC0gUEksIHJhZCAtIEhBTEZfUEkpO1xuICAgICAgICAgICAgY3R4LmFyYyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0LCBjb3JuZXJSYWRpdXMsIHJhZCAtIEhBTEZfUEksIHJhZCk7XG4gICAgICAgICAgICBjdHguYXJjKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQsIGNvcm5lclJhZGl1cywgcmFkLCByYWQgKyBIQUxGX1BJKTtcbiAgICAgICAgICAgIGN0eC5hcmMoeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCwgY29ybmVyUmFkaXVzLCByYWQgKyBIQUxGX1BJLCByYWQgKyBQSSk7XG4gICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVjdCc6XG4gICAgICAgICAgICBpZiAoIXJvdGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSA9IE1hdGguU1FSVDFfMiAqIHJhZGl1cztcbiAgICAgICAgICAgICAgICB3aWR0aCA9IHcgPyB3IC8gMiA6IHNpemU7XG4gICAgICAgICAgICAgICAgY3R4LnJlY3QoeCAtIHdpZHRoLCB5IC0gc2l6ZSwgMiAqIHdpZHRoLCAyICogc2l6ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLyBjYXNlICdyZWN0Um90JzpcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHlPZmZzZXRXLCB5IC0geE9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjcm9zc1JvdCc6XG4gICAgICAgICAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqLyBjYXNlICdjcm9zcyc6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc3Rhcic6XG4gICAgICAgICAgICB4T2Zmc2V0VyA9IE1hdGguY29zKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIHhPZmZzZXQgPSBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0VyA9IE1hdGguc2luKHJhZCkgKiAodyA/IHcgLyAyIDogcmFkaXVzKTtcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8oeCAtIHhPZmZzZXRXLCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0VywgeSArIHlPZmZzZXQpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4ICsgeU9mZnNldFcsIHkgLSB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCAtIHlPZmZzZXRXLCB5ICsgeE9mZnNldCk7XG4gICAgICAgICAgICByYWQgKz0gUVVBUlRFUl9QSTtcbiAgICAgICAgICAgIHhPZmZzZXRXID0gTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgeE9mZnNldCA9IE1hdGguY29zKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICB5T2Zmc2V0ID0gTWF0aC5zaW4ocmFkKSAqIHJhZGl1cztcbiAgICAgICAgICAgIHlPZmZzZXRXID0gTWF0aC5zaW4ocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpO1xuICAgICAgICAgICAgY3R4Lm1vdmVUbyh4IC0geE9mZnNldFcsIHkgLSB5T2Zmc2V0KTtcbiAgICAgICAgICAgIGN0eC5saW5lVG8oeCArIHhPZmZzZXRXLCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggKyB5T2Zmc2V0VywgeSAtIHhPZmZzZXQpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4IC0geU9mZnNldFcsIHkgKyB4T2Zmc2V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdsaW5lJzpcbiAgICAgICAgICAgIHhPZmZzZXQgPSB3ID8gdyAvIDIgOiBNYXRoLmNvcyhyYWQpICogcmFkaXVzO1xuICAgICAgICAgICAgeU9mZnNldCA9IE1hdGguc2luKHJhZCkgKiByYWRpdXM7XG4gICAgICAgICAgICBjdHgubW92ZVRvKHggLSB4T2Zmc2V0LCB5IC0geU9mZnNldCk7XG4gICAgICAgICAgICBjdHgubGluZVRvKHggKyB4T2Zmc2V0LCB5ICsgeU9mZnNldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGFzaCc6XG4gICAgICAgICAgICBjdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgY3R4LmxpbmVUbyh4ICsgTWF0aC5jb3MocmFkKSAqICh3ID8gdyAvIDIgOiByYWRpdXMpLCB5ICsgTWF0aC5zaW4ocmFkKSAqIHJhZGl1cyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBmYWxzZTpcbiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBjdHguZmlsbCgpO1xuICAgIGlmIChvcHRpb25zLmJvcmRlcldpZHRoID4gMCkge1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgcmVjdGFuZ2xlXG4gKiBAcGFyYW0gcG9pbnQgLSBUaGUgcG9pbnQgdG8gdGVzdFxuICogQHBhcmFtIGFyZWEgLSBUaGUgcmVjdGFuZ2xlXG4gKiBAcGFyYW0gbWFyZ2luIC0gYWxsb3dlZCBtYXJnaW5cbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2lzUG9pbnRJbkFyZWEocG9pbnQsIGFyZWEsIG1hcmdpbikge1xuICAgIG1hcmdpbiA9IG1hcmdpbiB8fCAwLjU7IC8vIG1hcmdpbiAtIGRlZmF1bHQgaXMgdG8gbWF0Y2ggcm91bmRlZCBkZWNpbWFsc1xuICAgIHJldHVybiAhYXJlYSB8fCBwb2ludCAmJiBwb2ludC54ID4gYXJlYS5sZWZ0IC0gbWFyZ2luICYmIHBvaW50LnggPCBhcmVhLnJpZ2h0ICsgbWFyZ2luICYmIHBvaW50LnkgPiBhcmVhLnRvcCAtIG1hcmdpbiAmJiBwb2ludC55IDwgYXJlYS5ib3R0b20gKyBtYXJnaW47XG59XG5mdW5jdGlvbiBjbGlwQXJlYShjdHgsIGFyZWEpIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgucmVjdChhcmVhLmxlZnQsIGFyZWEudG9wLCBhcmVhLnJpZ2h0IC0gYXJlYS5sZWZ0LCBhcmVhLmJvdHRvbSAtIGFyZWEudG9wKTtcbiAgICBjdHguY2xpcCgpO1xufVxuZnVuY3Rpb24gdW5jbGlwQXJlYShjdHgpIHtcbiAgICBjdHgucmVzdG9yZSgpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9zdGVwcGVkTGluZVRvKGN0eCwgcHJldmlvdXMsIHRhcmdldCwgZmxpcCwgbW9kZSkge1xuICAgIGlmICghcHJldmlvdXMpIHtcbiAgICAgICAgcmV0dXJuIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbiAgICB9XG4gICAgaWYgKG1vZGUgPT09ICdtaWRkbGUnKSB7XG4gICAgICAgIGNvbnN0IG1pZHBvaW50ID0gKHByZXZpb3VzLnggKyB0YXJnZXQueCkgLyAyLjA7XG4gICAgICAgIGN0eC5saW5lVG8obWlkcG9pbnQsIHByZXZpb3VzLnkpO1xuICAgICAgICBjdHgubGluZVRvKG1pZHBvaW50LCB0YXJnZXQueSk7XG4gICAgfSBlbHNlIGlmIChtb2RlID09PSAnYWZ0ZXInICE9PSAhIWZsaXApIHtcbiAgICAgICAgY3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY3R4LmxpbmVUbyh0YXJnZXQueCwgcHJldmlvdXMueSk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfYmV6aWVyQ3VydmVUbyhjdHgsIHByZXZpb3VzLCB0YXJnZXQsIGZsaXApIHtcbiAgICBpZiAoIXByZXZpb3VzKSB7XG4gICAgICAgIHJldHVybiBjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG4gICAgfVxuICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGZsaXAgPyBwcmV2aW91cy5jcDF4IDogcHJldmlvdXMuY3AyeCwgZmxpcCA/IHByZXZpb3VzLmNwMXkgOiBwcmV2aW91cy5jcDJ5LCBmbGlwID8gdGFyZ2V0LmNwMnggOiB0YXJnZXQuY3AxeCwgZmxpcCA/IHRhcmdldC5jcDJ5IDogdGFyZ2V0LmNwMXksIHRhcmdldC54LCB0YXJnZXQueSk7XG59XG5mdW5jdGlvbiBzZXRSZW5kZXJPcHRzKGN0eCwgb3B0cykge1xuICAgIGlmIChvcHRzLnRyYW5zbGF0aW9uKSB7XG4gICAgICAgIGN0eC50cmFuc2xhdGUob3B0cy50cmFuc2xhdGlvblswXSwgb3B0cy50cmFuc2xhdGlvblsxXSk7XG4gICAgfVxuICAgIGlmICghaXNOdWxsT3JVbmRlZihvcHRzLnJvdGF0aW9uKSkge1xuICAgICAgICBjdHgucm90YXRlKG9wdHMucm90YXRpb24pO1xuICAgIH1cbiAgICBpZiAob3B0cy5jb2xvcikge1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0cy5jb2xvcjtcbiAgICB9XG4gICAgaWYgKG9wdHMudGV4dEFsaWduKSB7XG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBvcHRzLnRleHRBbGlnbjtcbiAgICB9XG4gICAgaWYgKG9wdHMudGV4dEJhc2VsaW5lKSB7XG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSBvcHRzLnRleHRCYXNlbGluZTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZWNvcmF0ZVRleHQoY3R4LCB4LCB5LCBsaW5lLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMuc3RyaWtldGhyb3VnaCB8fCBvcHRzLnVuZGVybGluZSkge1xuICAgICAgICAvKipcbiAgICAgKiBOb3cgdGhhdCBJRTExIHN1cHBvcnQgaGFzIGJlZW4gZHJvcHBlZCwgd2UgY2FuIHVzZSBtb3JlXG4gICAgICogb2YgdGhlIFRleHRNZXRyaWNzIG9iamVjdC4gVGhlIGFjdHVhbCBib3VuZGluZyBib3hlc1xuICAgICAqIGFyZSB1bmZsYWdnZWQgaW4gQ2hyb21lLCBGaXJlZm94LCBFZGdlLCBhbmQgU2FmYXJpIHNvIHRoZXlcbiAgICAgKiBjYW4gYmUgc2FmZWx5IHVzZWQuXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UZXh0TWV0cmljcyNCcm93c2VyX2NvbXBhdGliaWxpdHlcbiAgICAgKi8gY29uc3QgbWV0cmljcyA9IGN0eC5tZWFzdXJlVGV4dChsaW5lKTtcbiAgICAgICAgY29uc3QgbGVmdCA9IHggLSBtZXRyaWNzLmFjdHVhbEJvdW5kaW5nQm94TGVmdDtcbiAgICAgICAgY29uc3QgcmlnaHQgPSB4ICsgbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveFJpZ2h0O1xuICAgICAgICBjb25zdCB0b3AgPSB5IC0gbWV0cmljcy5hY3R1YWxCb3VuZGluZ0JveEFzY2VudDtcbiAgICAgICAgY29uc3QgYm90dG9tID0geSArIG1ldHJpY3MuYWN0dWFsQm91bmRpbmdCb3hEZXNjZW50O1xuICAgICAgICBjb25zdCB5RGVjb3JhdGlvbiA9IG9wdHMuc3RyaWtldGhyb3VnaCA/ICh0b3AgKyBib3R0b20pIC8gMiA6IGJvdHRvbTtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gY3R4LmZpbGxTdHlsZTtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gb3B0cy5kZWNvcmF0aW9uV2lkdGggfHwgMjtcbiAgICAgICAgY3R4Lm1vdmVUbyhsZWZ0LCB5RGVjb3JhdGlvbik7XG4gICAgICAgIGN0eC5saW5lVG8ocmlnaHQsIHlEZWNvcmF0aW9uKTtcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRyYXdCYWNrZHJvcChjdHgsIG9wdHMpIHtcbiAgICBjb25zdCBvbGRDb2xvciA9IGN0eC5maWxsU3R5bGU7XG4gICAgY3R4LmZpbGxTdHlsZSA9IG9wdHMuY29sb3I7XG4gICAgY3R4LmZpbGxSZWN0KG9wdHMubGVmdCwgb3B0cy50b3AsIG9wdHMud2lkdGgsIG9wdHMuaGVpZ2h0KTtcbiAgICBjdHguZmlsbFN0eWxlID0gb2xkQ29sb3I7XG59XG4vKipcbiAqIFJlbmRlciB0ZXh0IG9udG8gdGhlIGNhbnZhc1xuICovIGZ1bmN0aW9uIHJlbmRlclRleHQoY3R4LCB0ZXh0LCB4LCB5LCBmb250LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBsaW5lcyA9IGlzQXJyYXkodGV4dCkgPyB0ZXh0IDogW1xuICAgICAgICB0ZXh0XG4gICAgXTtcbiAgICBjb25zdCBzdHJva2UgPSBvcHRzLnN0cm9rZVdpZHRoID4gMCAmJiBvcHRzLnN0cm9rZUNvbG9yICE9PSAnJztcbiAgICBsZXQgaSwgbGluZTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC5mb250ID0gZm9udC5zdHJpbmc7XG4gICAgc2V0UmVuZGVyT3B0cyhjdHgsIG9wdHMpO1xuICAgIGZvcihpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKXtcbiAgICAgICAgbGluZSA9IGxpbmVzW2ldO1xuICAgICAgICBpZiAob3B0cy5iYWNrZHJvcCkge1xuICAgICAgICAgICAgZHJhd0JhY2tkcm9wKGN0eCwgb3B0cy5iYWNrZHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0cm9rZSkge1xuICAgICAgICAgICAgaWYgKG9wdHMuc3Ryb2tlQ29sb3IpIHtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBvcHRzLnN0cm9rZUNvbG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmKG9wdHMuc3Ryb2tlV2lkdGgpKSB7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IG9wdHMuc3Ryb2tlV2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguc3Ryb2tlVGV4dChsaW5lLCB4LCB5LCBvcHRzLm1heFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBjdHguZmlsbFRleHQobGluZSwgeCwgeSwgb3B0cy5tYXhXaWR0aCk7XG4gICAgICAgIGRlY29yYXRlVGV4dChjdHgsIHgsIHksIGxpbmUsIG9wdHMpO1xuICAgICAgICB5ICs9IE51bWJlcihmb250LmxpbmVIZWlnaHQpO1xuICAgIH1cbiAgICBjdHgucmVzdG9yZSgpO1xufVxuLyoqXG4gKiBBZGQgYSBwYXRoIG9mIGEgcmVjdGFuZ2xlIHdpdGggcm91bmRlZCBjb3JuZXJzIHRvIHRoZSBjdXJyZW50IHN1Yi1wYXRoXG4gKiBAcGFyYW0gY3R4IC0gQ29udGV4dFxuICogQHBhcmFtIHJlY3QgLSBCb3VuZGluZyByZWN0XG4gKi8gZnVuY3Rpb24gYWRkUm91bmRlZFJlY3RQYXRoKGN0eCwgcmVjdCkge1xuICAgIGNvbnN0IHsgeCAsIHkgLCB3ICwgaCAsIHJhZGl1cyAgfSA9IHJlY3Q7XG4gICAgLy8gdG9wIGxlZnQgYXJjXG4gICAgY3R4LmFyYyh4ICsgcmFkaXVzLnRvcExlZnQsIHkgKyByYWRpdXMudG9wTGVmdCwgcmFkaXVzLnRvcExlZnQsIDEuNSAqIFBJLCBQSSwgdHJ1ZSk7XG4gICAgLy8gbGluZSBmcm9tIHRvcCBsZWZ0IHRvIGJvdHRvbSBsZWZ0XG4gICAgY3R4LmxpbmVUbyh4LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21MZWZ0KTtcbiAgICAvLyBib3R0b20gbGVmdCBhcmNcbiAgICBjdHguYXJjKHggKyByYWRpdXMuYm90dG9tTGVmdCwgeSArIGggLSByYWRpdXMuYm90dG9tTGVmdCwgcmFkaXVzLmJvdHRvbUxlZnQsIFBJLCBIQUxGX1BJLCB0cnVlKTtcbiAgICAvLyBsaW5lIGZyb20gYm90dG9tIGxlZnQgdG8gYm90dG9tIHJpZ2h0XG4gICAgY3R4LmxpbmVUbyh4ICsgdyAtIHJhZGl1cy5ib3R0b21SaWdodCwgeSArIGgpO1xuICAgIC8vIGJvdHRvbSByaWdodCBhcmNcbiAgICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLmJvdHRvbVJpZ2h0LCB5ICsgaCAtIHJhZGl1cy5ib3R0b21SaWdodCwgcmFkaXVzLmJvdHRvbVJpZ2h0LCBIQUxGX1BJLCAwLCB0cnVlKTtcbiAgICAvLyBsaW5lIGZyb20gYm90dG9tIHJpZ2h0IHRvIHRvcCByaWdodFxuICAgIGN0eC5saW5lVG8oeCArIHcsIHkgKyByYWRpdXMudG9wUmlnaHQpO1xuICAgIC8vIHRvcCByaWdodCBhcmNcbiAgICBjdHguYXJjKHggKyB3IC0gcmFkaXVzLnRvcFJpZ2h0LCB5ICsgcmFkaXVzLnRvcFJpZ2h0LCByYWRpdXMudG9wUmlnaHQsIDAsIC1IQUxGX1BJLCB0cnVlKTtcbiAgICAvLyBsaW5lIGZyb20gdG9wIHJpZ2h0IHRvIHRvcCBsZWZ0XG4gICAgY3R4LmxpbmVUbyh4ICsgcmFkaXVzLnRvcExlZnQsIHkpO1xufVxuXG5jb25zdCBMSU5FX0hFSUdIVCA9IC9eKG5vcm1hbHwoXFxkKyg/OlxcLlxcZCspPykocHh8ZW18JSk/KSQvO1xuY29uc3QgRk9OVF9TVFlMRSA9IC9eKG5vcm1hbHxpdGFsaWN8aW5pdGlhbHxpbmhlcml0fHVuc2V0fChvYmxpcXVlKCAtP1swLTldP1swLTldZGVnKT8pKSQvO1xuLyoqXG4gKiBAYWxpYXMgQ2hhcnQuaGVscGVycy5vcHRpb25zXG4gKiBAbmFtZXNwYWNlXG4gKi8gLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gbGluZSBoZWlnaHQgYHZhbHVlYCBpbiBwaXhlbHMgZm9yIGEgc3BlY2lmaWMgZm9udCBgc2l6ZWAuXG4gKiBAcGFyYW0gdmFsdWUgLSBUaGUgbGluZUhlaWdodCB0byBwYXJzZSAoZWcuIDEuNiwgJzE0cHgnLCAnNzUlJywgJzEuNmVtJykuXG4gKiBAcGFyYW0gc2l6ZSAtIFRoZSBmb250IHNpemUgKGluIHBpeGVscykgdXNlZCB0byByZXNvbHZlIHJlbGF0aXZlIGB2YWx1ZWAuXG4gKiBAcmV0dXJucyBUaGUgZWZmZWN0aXZlIGxpbmUgaGVpZ2h0IGluIHBpeGVscyAoc2l6ZSAqIDEuMiBpZiB2YWx1ZSBpcyBpbnZhbGlkKS5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpbmUtaGVpZ2h0XG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiB0b0xpbmVIZWlnaHQodmFsdWUsIHNpemUpIHtcbiAgICBjb25zdCBtYXRjaGVzID0gKCcnICsgdmFsdWUpLm1hdGNoKExJTkVfSEVJR0hUKTtcbiAgICBpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlc1sxXSA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgcmV0dXJuIHNpemUgKiAxLjI7XG4gICAgfVxuICAgIHZhbHVlID0gK21hdGNoZXNbMl07XG4gICAgc3dpdGNoKG1hdGNoZXNbM10pe1xuICAgICAgICBjYXNlICdweCc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgdmFsdWUgLz0gMTAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBzaXplICogdmFsdWU7XG59XG5jb25zdCBudW1iZXJPclplcm8gPSAodik9Pit2IHx8IDA7XG5mdW5jdGlvbiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgcHJvcHMpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBjb25zdCBvYmpQcm9wcyA9IGlzT2JqZWN0KHByb3BzKTtcbiAgICBjb25zdCBrZXlzID0gb2JqUHJvcHMgPyBPYmplY3Qua2V5cyhwcm9wcykgOiBwcm9wcztcbiAgICBjb25zdCByZWFkID0gaXNPYmplY3QodmFsdWUpID8gb2JqUHJvcHMgPyAocHJvcCk9PnZhbHVlT3JEZWZhdWx0KHZhbHVlW3Byb3BdLCB2YWx1ZVtwcm9wc1twcm9wXV0pIDogKHByb3ApPT52YWx1ZVtwcm9wXSA6ICgpPT52YWx1ZTtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2Yga2V5cyl7XG4gICAgICAgIHJldFtwcm9wXSA9IG51bWJlck9yWmVybyhyZWFkKHByb3ApKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cbi8qKlxuICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBUUkJMIG9iamVjdC5cbiAqIEBwYXJhbSB2YWx1ZSAtIElmIGEgbnVtYmVyLCBzZXQgdGhlIHZhbHVlIHRvIGFsbCBUUkJMIGNvbXBvbmVudCxcbiAqICBlbHNlLCBpZiBhbiBvYmplY3QsIHVzZSBkZWZpbmVkIHByb3BlcnRpZXMgYW5kIHNldHMgdW5kZWZpbmVkIG9uZXMgdG8gMC5cbiAqICB4IC8geSBhcmUgc2hvcnRoYW5kcyBmb3Igc2FtZSB2YWx1ZSBmb3IgbGVmdC9yaWdodCBhbmQgdG9wL2JvdHRvbS5cbiAqIEByZXR1cm5zIFRoZSBwYWRkaW5nIHZhbHVlcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0KVxuICogQHNpbmNlIDMuMC4wXG4gKi8gZnVuY3Rpb24gdG9UUkJMKHZhbHVlKSB7XG4gICAgcmV0dXJuIF9yZWFkVmFsdWVUb1Byb3BzKHZhbHVlLCB7XG4gICAgICAgIHRvcDogJ3knLFxuICAgICAgICByaWdodDogJ3gnLFxuICAgICAgICBib3R0b206ICd5JyxcbiAgICAgICAgbGVmdDogJ3gnXG4gICAgfSk7XG59XG4vKipcbiAqIENvbnZlcnRzIHRoZSBnaXZlbiB2YWx1ZSBpbnRvIGEgVFJCTCBjb3JuZXJzIG9iamVjdCAoc2ltaWxhciB3aXRoIGNzcyBib3JkZXItcmFkaXVzKS5cbiAqIEBwYXJhbSB2YWx1ZSAtIElmIGEgbnVtYmVyLCBzZXQgdGhlIHZhbHVlIHRvIGFsbCBUUkJMIGNvcm5lciBjb21wb25lbnRzLFxuICogIGVsc2UsIGlmIGFuIG9iamVjdCwgdXNlIGRlZmluZWQgcHJvcGVydGllcyBhbmQgc2V0cyB1bmRlZmluZWQgb25lcyB0byAwLlxuICogQHJldHVybnMgVGhlIFRSQkwgY29ybmVyIHZhbHVlcyAodG9wTGVmdCwgdG9wUmlnaHQsIGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0KVxuICogQHNpbmNlIDMuMC4wXG4gKi8gZnVuY3Rpb24gdG9UUkJMQ29ybmVycyh2YWx1ZSkge1xuICAgIHJldHVybiBfcmVhZFZhbHVlVG9Qcm9wcyh2YWx1ZSwgW1xuICAgICAgICAndG9wTGVmdCcsXG4gICAgICAgICd0b3BSaWdodCcsXG4gICAgICAgICdib3R0b21MZWZ0JyxcbiAgICAgICAgJ2JvdHRvbVJpZ2h0J1xuICAgIF0pO1xufVxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gdmFsdWUgaW50byBhIHBhZGRpbmcgb2JqZWN0IHdpdGggcHJlLWNvbXB1dGVkIHdpZHRoL2hlaWdodC5cbiAqIEBwYXJhbSB2YWx1ZSAtIElmIGEgbnVtYmVyLCBzZXQgdGhlIHZhbHVlIHRvIGFsbCBUUkJMIGNvbXBvbmVudCxcbiAqICBlbHNlLCBpZiBhbiBvYmplY3QsIHVzZSBkZWZpbmVkIHByb3BlcnRpZXMgYW5kIHNldHMgdW5kZWZpbmVkIG9uZXMgdG8gMC5cbiAqICB4IC8geSBhcmUgc2hvcnRoYW5kcyBmb3Igc2FtZSB2YWx1ZSBmb3IgbGVmdC9yaWdodCBhbmQgdG9wL2JvdHRvbS5cbiAqIEByZXR1cm5zIFRoZSBwYWRkaW5nIHZhbHVlcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KVxuICogQHNpbmNlIDIuNy4wXG4gKi8gZnVuY3Rpb24gdG9QYWRkaW5nKHZhbHVlKSB7XG4gICAgY29uc3Qgb2JqID0gdG9UUkJMKHZhbHVlKTtcbiAgICBvYmoud2lkdGggPSBvYmoubGVmdCArIG9iai5yaWdodDtcbiAgICBvYmouaGVpZ2h0ID0gb2JqLnRvcCArIG9iai5ib3R0b207XG4gICAgcmV0dXJuIG9iajtcbn1cbi8qKlxuICogUGFyc2VzIGZvbnQgb3B0aW9ucyBhbmQgcmV0dXJucyB0aGUgZm9udCBvYmplY3QuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEEgb2JqZWN0IHRoYXQgY29udGFpbnMgZm9udCBvcHRpb25zIHRvIGJlIHBhcnNlZC5cbiAqIEBwYXJhbSBmYWxsYmFjayAtIEEgb2JqZWN0IHRoYXQgY29udGFpbnMgZmFsbGJhY2sgZm9udCBvcHRpb25zLlxuICogQHJldHVybiBUaGUgZm9udCBvYmplY3QuXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHRvRm9udChvcHRpb25zLCBmYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIGZhbGxiYWNrID0gZmFsbGJhY2sgfHwgZGVmYXVsdHMuZm9udDtcbiAgICBsZXQgc2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuc2l6ZSwgZmFsbGJhY2suc2l6ZSk7XG4gICAgaWYgKHR5cGVvZiBzaXplID09PSAnc3RyaW5nJykge1xuICAgICAgICBzaXplID0gcGFyc2VJbnQoc2l6ZSwgMTApO1xuICAgIH1cbiAgICBsZXQgc3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLnN0eWxlLCBmYWxsYmFjay5zdHlsZSk7XG4gICAgaWYgKHN0eWxlICYmICEoJycgKyBzdHlsZSkubWF0Y2goRk9OVF9TVFlMRSkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdJbnZhbGlkIGZvbnQgc3R5bGUgc3BlY2lmaWVkOiBcIicgKyBzdHlsZSArICdcIicpO1xuICAgICAgICBzdHlsZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgZm9udCA9IHtcbiAgICAgICAgZmFtaWx5OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZhbWlseSwgZmFsbGJhY2suZmFtaWx5KSxcbiAgICAgICAgbGluZUhlaWdodDogdG9MaW5lSGVpZ2h0KHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubGluZUhlaWdodCwgZmFsbGJhY2subGluZUhlaWdodCksIHNpemUpLFxuICAgICAgICBzaXplLFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgd2VpZ2h0OiB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLndlaWdodCwgZmFsbGJhY2sud2VpZ2h0KSxcbiAgICAgICAgc3RyaW5nOiAnJ1xuICAgIH07XG4gICAgZm9udC5zdHJpbmcgPSB0b0ZvbnRTdHJpbmcoZm9udCk7XG4gICAgcmV0dXJuIGZvbnQ7XG59XG4vKipcbiAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gYGlucHV0c2Agc2VxdWVudGlhbGx5IGFuZCByZXR1cm5zIHRoZSBmaXJzdCBkZWZpbmVkIHZhbHVlLlxuICogQHBhcmFtIGlucHV0cyAtIEFuIGFycmF5IG9mIHZhbHVlcywgZmFsbGluZyBiYWNrIHRvIHRoZSBsYXN0IHZhbHVlLlxuICogQHBhcmFtIGNvbnRleHQgLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCB0aGUgdmFsdWVcbiAqIGlzIGNhbGxlZCB3aXRoIGBjb250ZXh0YCBhcyBmaXJzdCBhcmd1bWVudCBhbmQgdGhlIHJlc3VsdCBiZWNvbWVzIHRoZSBuZXcgaW5wdXQuXG4gKiBAcGFyYW0gaW5kZXggLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlIHZhbHVlXG4gKiBhdCBgaW5kZXhgIGJlY29tZSB0aGUgbmV3IGlucHV0LlxuICogQHBhcmFtIGluZm8gLSBvYmplY3QgdG8gcmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IHJlc29sdXRpb24gaW5cbiAqIEBwYXJhbSBpbmZvLmNhY2hlYWJsZSAtIFdpbGwgYmUgc2V0IHRvIGBmYWxzZWAgaWYgb3B0aW9uIGlzIG5vdCBjYWNoZWFibGUuXG4gKiBAc2luY2UgMi43LjBcbiAqLyBmdW5jdGlvbiByZXNvbHZlKGlucHV0cywgY29udGV4dCwgaW5kZXgsIGluZm8pIHtcbiAgICBsZXQgY2FjaGVhYmxlID0gdHJ1ZTtcbiAgICBsZXQgaSwgaWxlbiwgdmFsdWU7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gaW5wdXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIHZhbHVlID0gaW5wdXRzW2ldO1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUoY29udGV4dCk7XG4gICAgICAgICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZVtpbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgICAgICAgICBjYWNoZWFibGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGluZm8gJiYgIWNhY2hlYWJsZSkge1xuICAgICAgICAgICAgICAgIGluZm8uY2FjaGVhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEBwYXJhbSBtaW5tYXhcbiAqIEBwYXJhbSBncmFjZVxuICogQHBhcmFtIGJlZ2luQXRaZXJvXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9hZGRHcmFjZShtaW5tYXgsIGdyYWNlLCBiZWdpbkF0WmVybykge1xuICAgIGNvbnN0IHsgbWluICwgbWF4ICB9ID0gbWlubWF4O1xuICAgIGNvbnN0IGNoYW5nZSA9IHRvRGltZW5zaW9uKGdyYWNlLCAobWF4IC0gbWluKSAvIDIpO1xuICAgIGNvbnN0IGtlZXBaZXJvID0gKHZhbHVlLCBhZGQpPT5iZWdpbkF0WmVybyAmJiB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSArIGFkZDtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IGtlZXBaZXJvKG1pbiwgLU1hdGguYWJzKGNoYW5nZSkpLFxuICAgICAgICBtYXg6IGtlZXBaZXJvKG1heCwgY2hhbmdlKVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVDb250ZXh0KHBhcmVudENvbnRleHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKHBhcmVudENvbnRleHQpLCBjb250ZXh0KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgUHJveHkgZm9yIHJlc29sdmluZyByYXcgdmFsdWVzIGZvciBvcHRpb25zLlxuICogQHBhcmFtIHNjb3BlcyAtIFRoZSBvcHRpb24gc2NvcGVzIHRvIGxvb2sgZm9yIHZhbHVlcywgaW4gcmVzb2x1dGlvbiBvcmRlclxuICogQHBhcmFtIHByZWZpeGVzIC0gVGhlIHByZWZpeGVzIGZvciB2YWx1ZXMsIGluIHJlc29sdXRpb24gb3JkZXIuXG4gKiBAcGFyYW0gcm9vdFNjb3BlcyAtIFRoZSByb290IG9wdGlvbiBzY29wZXNcbiAqIEBwYXJhbSBmYWxsYmFjayAtIFBhcmVudCBzY29wZXMgZmFsbGJhY2tcbiAqIEBwYXJhbSBnZXRUYXJnZXQgLSBjYWxsYmFjayBmb3IgZ2V0dGluZyB0aGUgdGFyZ2V0IGZvciBjaGFuZ2VkIHZhbHVlc1xuICogQHJldHVybnMgUHJveHlcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2NyZWF0ZVJlc29sdmVyKHNjb3BlcywgcHJlZml4ZXMgPSBbXG4gICAgJydcbl0sIHJvb3RTY29wZXMsIGZhbGxiYWNrLCBnZXRUYXJnZXQgPSAoKT0+c2NvcGVzWzBdKSB7XG4gICAgY29uc3QgZmluYWxSb290U2NvcGVzID0gcm9vdFNjb3BlcyB8fCBzY29wZXM7XG4gICAgaWYgKHR5cGVvZiBmYWxsYmFjayA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgZmFsbGJhY2sgPSBfcmVzb2x2ZSgnX2ZhbGxiYWNrJywgc2NvcGVzKTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGUgPSB7XG4gICAgICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnT2JqZWN0JyxcbiAgICAgICAgX2NhY2hlYWJsZTogdHJ1ZSxcbiAgICAgICAgX3Njb3Blczogc2NvcGVzLFxuICAgICAgICBfcm9vdFNjb3BlczogZmluYWxSb290U2NvcGVzLFxuICAgICAgICBfZmFsbGJhY2s6IGZhbGxiYWNrLFxuICAgICAgICBfZ2V0VGFyZ2V0OiBnZXRUYXJnZXQsXG4gICAgICAgIG92ZXJyaWRlOiAoc2NvcGUpPT5fY3JlYXRlUmVzb2x2ZXIoW1xuICAgICAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgICAgIC4uLnNjb3Blc1xuICAgICAgICAgICAgXSwgcHJlZml4ZXMsIGZpbmFsUm9vdFNjb3BlcywgZmFsbGJhY2spXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFByb3h5KGNhY2hlLCB7XG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgdGhlIGRlbGV0ZSBvcGVyYXRvci5cbiAgICAgKi8gZGVsZXRlUHJvcGVydHkgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gY2FjaGVcbiAgICAgICAgICAgIGRlbGV0ZSB0YXJnZXQuX2tleXM7IC8vIHJlbW92ZSBjYWNoZWQga2V5c1xuICAgICAgICAgICAgZGVsZXRlIHNjb3Blc1swXVtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gdG9wIGxldmVsIHNjb3BlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBnZXR0aW5nIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKi8gZ2V0ICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBfY2FjaGVkKHRhcmdldCwgcHJvcCwgKCk9Pl9yZXNvbHZlV2l0aFByZWZpeGVzKHByb3AsIHByZWZpeGVzLCBzY29wZXMsIHRhcmdldCkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuXG4gICAgICogQWxzbyB1c2VkIGJ5IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5cbiAgICAgKi8gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQuX3Njb3Blc1swXSwgcHJvcCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mLlxuICAgICAqLyBnZXRQcm90b3R5cGVPZiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZihzY29wZXNbMF0pO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHRoZSBpbiBvcGVyYXRvci5cbiAgICAgKi8gaGFzICh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpLmluY2x1ZGVzKHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGFuZCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLlxuICAgICAqLyBvd25LZXlzICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXRLZXlzRnJvbUFsbFNjb3Blcyh0YXJnZXQpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHNldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBzZXQgKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0b3JhZ2UgPSB0YXJnZXQuX3N0b3JhZ2UgfHwgKHRhcmdldC5fc3RvcmFnZSA9IGdldFRhcmdldCgpKTtcbiAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHN0b3JhZ2VbcHJvcF0gPSB2YWx1ZTsgLy8gc2V0IHRvIHRvcCBsZXZlbCBzY29wZSArIGNhY2hlXG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0Ll9rZXlzOyAvLyByZW1vdmUgY2FjaGVkIGtleXNcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gUHJveHkgZm9yIHJlc29sdmluZyBvcHRpb24gdmFsdWVzIHdpdGggY29udGV4dC5cbiAqIEBwYXJhbSBwcm94eSAtIFRoZSBQcm94eSByZXR1cm5lZCBieSBgX2NyZWF0ZVJlc29sdmVyYFxuICogQHBhcmFtIGNvbnRleHQgLSBDb250ZXh0IG9iamVjdCBmb3Igc2NyaXB0YWJsZS9pbmRleGFibGUgb3B0aW9uc1xuICogQHBhcmFtIHN1YlByb3h5IC0gVGhlIHByb3h5IHByb3ZpZGVkIGZvciBzY3JpcHRhYmxlIG9wdGlvbnNcbiAqIEBwYXJhbSBkZXNjcmlwdG9yRGVmYXVsdHMgLSBEZWZhdWx0cyBmb3IgZGVzY3JpcHRvcnNcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2F0dGFjaENvbnRleHQocHJveHksIGNvbnRleHQsIHN1YlByb3h5LCBkZXNjcmlwdG9yRGVmYXVsdHMpIHtcbiAgICBjb25zdCBjYWNoZSA9IHtcbiAgICAgICAgX2NhY2hlYWJsZTogZmFsc2UsXG4gICAgICAgIF9wcm94eTogcHJveHksXG4gICAgICAgIF9jb250ZXh0OiBjb250ZXh0LFxuICAgICAgICBfc3ViUHJveHk6IHN1YlByb3h5LFxuICAgICAgICBfc3RhY2s6IG5ldyBTZXQoKSxcbiAgICAgICAgX2Rlc2NyaXB0b3JzOiBfZGVzY3JpcHRvcnMocHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cyksXG4gICAgICAgIHNldENvbnRleHQ6IChjdHgpPT5fYXR0YWNoQ29udGV4dChwcm94eSwgY3R4LCBzdWJQcm94eSwgZGVzY3JpcHRvckRlZmF1bHRzKSxcbiAgICAgICAgb3ZlcnJpZGU6IChzY29wZSk9Pl9hdHRhY2hDb250ZXh0KHByb3h5Lm92ZXJyaWRlKHNjb3BlKSwgY29udGV4dCwgc3ViUHJveHksIGRlc2NyaXB0b3JEZWZhdWx0cylcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJveHkoY2FjaGUsIHtcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgZGVsZXRlIG9wZXJhdG9yLlxuICAgICAqLyBkZWxldGVQcm9wZXJ0eSAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0W3Byb3BdOyAvLyByZW1vdmUgZnJvbSBjYWNoZVxuICAgICAgICAgICAgZGVsZXRlIHByb3h5W3Byb3BdOyAvLyByZW1vdmUgZnJvbSBwcm94eVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgZ2V0dGluZyBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICovIGdldCAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICAgICAgcmV0dXJuIF9jYWNoZWQodGFyZ2V0LCBwcm9wLCAoKT0+X3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAqIEEgdHJhcCBmb3IgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvci5cbiAgICAgKiBBbHNvIHVzZWQgYnkgT2JqZWN0Lmhhc093blByb3BlcnR5LlxuICAgICAqLyBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgKHRhcmdldCwgcHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5fZGVzY3JpcHRvcnMuYWxsS2V5cyA/IFJlZmxlY3QuaGFzKHByb3h5LCBwcm9wKSA/IHtcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSA6IHVuZGVmaW5lZCA6IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3h5LCBwcm9wKTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YuXG4gICAgICovIGdldFByb3RvdHlwZU9mICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHByb3h5KTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICogQSB0cmFwIGZvciB0aGUgaW4gb3BlcmF0b3IuXG4gICAgICovIGhhcyAodGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVmbGVjdC5oYXMocHJveHksIHByb3ApO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIGFuZCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzLlxuICAgICAqLyBvd25LZXlzICgpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWZsZWN0Lm93bktleXMocHJveHkpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgKiBBIHRyYXAgZm9yIHNldHRpbmcgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqLyBzZXQgKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgIHByb3h5W3Byb3BdID0gdmFsdWU7IC8vIHNldCB0byBwcm94eVxuICAgICAgICAgICAgZGVsZXRlIHRhcmdldFtwcm9wXTsgLy8gcmVtb3ZlIGZyb20gY2FjaGVcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2Rlc2NyaXB0b3JzKHByb3h5LCBkZWZhdWx0cyA9IHtcbiAgICBzY3JpcHRhYmxlOiB0cnVlLFxuICAgIGluZGV4YWJsZTogdHJ1ZVxufSkge1xuICAgIGNvbnN0IHsgX3NjcmlwdGFibGUgPWRlZmF1bHRzLnNjcmlwdGFibGUgLCBfaW5kZXhhYmxlID1kZWZhdWx0cy5pbmRleGFibGUgLCBfYWxsS2V5cyA9ZGVmYXVsdHMuYWxsS2V5cyAgfSA9IHByb3h5O1xuICAgIHJldHVybiB7XG4gICAgICAgIGFsbEtleXM6IF9hbGxLZXlzLFxuICAgICAgICBzY3JpcHRhYmxlOiBfc2NyaXB0YWJsZSxcbiAgICAgICAgaW5kZXhhYmxlOiBfaW5kZXhhYmxlLFxuICAgICAgICBpc1NjcmlwdGFibGU6IGlzRnVuY3Rpb24oX3NjcmlwdGFibGUpID8gX3NjcmlwdGFibGUgOiAoKT0+X3NjcmlwdGFibGUsXG4gICAgICAgIGlzSW5kZXhhYmxlOiBpc0Z1bmN0aW9uKF9pbmRleGFibGUpID8gX2luZGV4YWJsZSA6ICgpPT5faW5kZXhhYmxlXG4gICAgfTtcbn1cbmNvbnN0IHJlYWRLZXkgPSAocHJlZml4LCBuYW1lKT0+cHJlZml4ID8gcHJlZml4ICsgX2NhcGl0YWxpemUobmFtZSkgOiBuYW1lO1xuY29uc3QgbmVlZHNTdWJSZXNvbHZlciA9IChwcm9wLCB2YWx1ZSk9PmlzT2JqZWN0KHZhbHVlKSAmJiBwcm9wICE9PSAnYWRhcHRlcnMnICYmIChPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpID09PSBudWxsIHx8IHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xuZnVuY3Rpb24gX2NhY2hlZCh0YXJnZXQsIHByb3AsIHJlc29sdmUpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSByZXNvbHZlKCk7XG4gICAgLy8gY2FjaGUgdGhlIHJlc29sdmVkIHZhbHVlXG4gICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoQ29udGV4dCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgY29uc3QgeyBfcHJveHkgLCBfY29udGV4dCAsIF9zdWJQcm94eSAsIF9kZXNjcmlwdG9yczogZGVzY3JpcHRvcnMgIH0gPSB0YXJnZXQ7XG4gICAgbGV0IHZhbHVlID0gX3Byb3h5W3Byb3BdOyAvLyByZXNvbHZlIGZyb20gcHJveHlcbiAgICAvLyByZXNvbHZlIHdpdGggY29udGV4dFxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlKSAmJiBkZXNjcmlwdG9ycy5pc1NjcmlwdGFibGUocHJvcCkpIHtcbiAgICAgICAgdmFsdWUgPSBfcmVzb2x2ZVNjcmlwdGFibGUocHJvcCwgdmFsdWUsIHRhcmdldCwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBkZXNjcmlwdG9ycy5pc0luZGV4YWJsZSk7XG4gICAgfVxuICAgIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgICAgICAvLyBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYW4gb2JqZWN0LCBjcmVhdGUgYSBzdWIgcmVzb2x2ZXIgZm9yIGl0XG4gICAgICAgIHZhbHVlID0gX2F0dGFjaENvbnRleHQodmFsdWUsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIF9yZXNvbHZlU2NyaXB0YWJsZShwcm9wLCBnZXRWYWx1ZSwgdGFyZ2V0LCByZWNlaXZlcikge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfc3RhY2sgIH0gPSB0YXJnZXQ7XG4gICAgaWYgKF9zdGFjay5oYXMocHJvcCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWN1cnNpb24gZGV0ZWN0ZWQ6ICcgKyBBcnJheS5mcm9tKF9zdGFjaykuam9pbignLT4nKSArICctPicgKyBwcm9wKTtcbiAgICB9XG4gICAgX3N0YWNrLmFkZChwcm9wKTtcbiAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZShfY29udGV4dCwgX3N1YlByb3h5IHx8IHJlY2VpdmVyKTtcbiAgICBfc3RhY2suZGVsZXRlKHByb3ApO1xuICAgIGlmIChuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSkge1xuICAgICAgICAvLyBXaGVuIHNjcmlwdGFibGUgb3B0aW9uIHJldHVybnMgYW4gb2JqZWN0LCBjcmVhdGUgYSByZXNvbHZlciBvbiB0aGF0LlxuICAgICAgICB2YWx1ZSA9IGNyZWF0ZVN1YlJlc29sdmVyKF9wcm94eS5fc2NvcGVzLCBfcHJveHksIHByb3AsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gX3Jlc29sdmVBcnJheShwcm9wLCB2YWx1ZSwgdGFyZ2V0LCBpc0luZGV4YWJsZSkge1xuICAgIGNvbnN0IHsgX3Byb3h5ICwgX2NvbnRleHQgLCBfc3ViUHJveHkgLCBfZGVzY3JpcHRvcnM6IGRlc2NyaXB0b3JzICB9ID0gdGFyZ2V0O1xuICAgIGlmICh0eXBlb2YgX2NvbnRleHQuaW5kZXggIT09ICd1bmRlZmluZWQnICYmIGlzSW5kZXhhYmxlKHByb3ApKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZVtfY29udGV4dC5pbmRleCAlIHZhbHVlLmxlbmd0aF07XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWx1ZVswXSkpIHtcbiAgICAgICAgLy8gQXJyYXkgb2Ygb2JqZWN0cywgcmV0dXJuIGFycmF5IG9yIHJlc29sdmVyc1xuICAgICAgICBjb25zdCBhcnIgPSB2YWx1ZTtcbiAgICAgICAgY29uc3Qgc2NvcGVzID0gX3Byb3h5Ll9zY29wZXMuZmlsdGVyKChzKT0+cyAhPT0gYXJyKTtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGFycil7XG4gICAgICAgICAgICBjb25zdCByZXNvbHZlciA9IGNyZWF0ZVN1YlJlc29sdmVyKHNjb3BlcywgX3Byb3h5LCBwcm9wLCBpdGVtKTtcbiAgICAgICAgICAgIHZhbHVlLnB1c2goX2F0dGFjaENvbnRleHQocmVzb2x2ZXIsIF9jb250ZXh0LCBfc3ViUHJveHkgJiYgX3N1YlByb3h5W3Byb3BdLCBkZXNjcmlwdG9ycykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVGYWxsYmFjayhmYWxsYmFjaywgcHJvcCwgdmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihmYWxsYmFjaykgPyBmYWxsYmFjayhwcm9wLCB2YWx1ZSkgOiBmYWxsYmFjaztcbn1cbmNvbnN0IGdldFNjb3BlID0gKGtleSwgcGFyZW50KT0+a2V5ID09PSB0cnVlID8gcGFyZW50IDogdHlwZW9mIGtleSA9PT0gJ3N0cmluZycgPyByZXNvbHZlT2JqZWN0S2V5KHBhcmVudCwga2V5KSA6IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGFkZFNjb3BlcyhzZXQsIHBhcmVudFNjb3Blcywga2V5LCBwYXJlbnRGYWxsYmFjaywgdmFsdWUpIHtcbiAgICBmb3IgKGNvbnN0IHBhcmVudCBvZiBwYXJlbnRTY29wZXMpe1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKGtleSwgcGFyZW50KTtcbiAgICAgICAgaWYgKHNjb3BlKSB7XG4gICAgICAgICAgICBzZXQuYWRkKHNjb3BlKTtcbiAgICAgICAgICAgIGNvbnN0IGZhbGxiYWNrID0gcmVzb2x2ZUZhbGxiYWNrKHNjb3BlLl9mYWxsYmFjaywga2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiBmYWxsYmFjayAhPT0ga2V5ICYmIGZhbGxiYWNrICE9PSBwYXJlbnRGYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gd2UgcmVhY2ggdGhlIGRlc2NyaXB0b3IgdGhhdCBkZWZpbmVzIGEgbmV3IF9mYWxsYmFjaywgcmV0dXJuIHRoYXQuXG4gICAgICAgICAgICAgICAgLy8gVGhlIGZhbGxiYWNrIHdpbGwgcmVzdW1lIHRvIHRoYXQgbmV3IHNjb3BlLlxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxsYmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzY29wZSA9PT0gZmFsc2UgJiYgdHlwZW9mIHBhcmVudEZhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiBrZXkgIT09IHBhcmVudEZhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBGYWxsYmFjayB0byBgZmFsc2VgIHJlc3VsdHMgdG8gYGZhbHNlYCwgd2hlbiBmYWxsaW5nIGJhY2sgdG8gZGlmZmVyZW50IGtleS5cbiAgICAgICAgICAgIC8vIEZvciBleGFtcGxlIGBpbnRlcmFjdGlvbmAgZnJvbSBgaG92ZXJgIG9yIGBwbHVnaW5zLnRvb2x0aXBgIGFuZCBgYW5pbWF0aW9uYCBmcm9tIGBhbmltYXRpb25zYFxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY3JlYXRlU3ViUmVzb2x2ZXIocGFyZW50U2NvcGVzLCByZXNvbHZlciwgcHJvcCwgdmFsdWUpIHtcbiAgICBjb25zdCByb290U2NvcGVzID0gcmVzb2x2ZXIuX3Jvb3RTY29wZXM7XG4gICAgY29uc3QgZmFsbGJhY2sgPSByZXNvbHZlRmFsbGJhY2socmVzb2x2ZXIuX2ZhbGxiYWNrLCBwcm9wLCB2YWx1ZSk7XG4gICAgY29uc3QgYWxsU2NvcGVzID0gW1xuICAgICAgICAuLi5wYXJlbnRTY29wZXMsXG4gICAgICAgIC4uLnJvb3RTY29wZXNcbiAgICBdO1xuICAgIGNvbnN0IHNldCA9IG5ldyBTZXQoKTtcbiAgICBzZXQuYWRkKHZhbHVlKTtcbiAgICBsZXQga2V5ID0gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3BlcywgcHJvcCwgZmFsbGJhY2sgfHwgcHJvcCwgdmFsdWUpO1xuICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZhbGxiYWNrICE9PSAndW5kZWZpbmVkJyAmJiBmYWxsYmFjayAhPT0gcHJvcCkge1xuICAgICAgICBrZXkgPSBhZGRTY29wZXNGcm9tS2V5KHNldCwgYWxsU2NvcGVzLCBmYWxsYmFjaywga2V5LCB2YWx1ZSk7XG4gICAgICAgIGlmIChrZXkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2NyZWF0ZVJlc29sdmVyKEFycmF5LmZyb20oc2V0KSwgW1xuICAgICAgICAnJ1xuICAgIF0sIHJvb3RTY29wZXMsIGZhbGxiYWNrLCAoKT0+c3ViR2V0VGFyZ2V0KHJlc29sdmVyLCBwcm9wLCB2YWx1ZSkpO1xufVxuZnVuY3Rpb24gYWRkU2NvcGVzRnJvbUtleShzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSkge1xuICAgIHdoaWxlKGtleSl7XG4gICAgICAgIGtleSA9IGFkZFNjb3BlcyhzZXQsIGFsbFNjb3Blcywga2V5LCBmYWxsYmFjaywgaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG59XG5mdW5jdGlvbiBzdWJHZXRUYXJnZXQocmVzb2x2ZXIsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcmVzb2x2ZXIuX2dldFRhcmdldCgpO1xuICAgIGlmICghKHByb3AgaW4gcGFyZW50KSkge1xuICAgICAgICBwYXJlbnRbcHJvcF0gPSB7fTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gcGFyZW50W3Byb3BdO1xuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIC8vIEZvciBhcnJheSBvZiBvYmplY3RzLCB0aGUgb2JqZWN0IGlzIHVzZWQgdG8gc3RvcmUgdXBkYXRlZCB2YWx1ZXNcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0IHx8IHt9O1xufVxuZnVuY3Rpb24gX3Jlc29sdmVXaXRoUHJlZml4ZXMocHJvcCwgcHJlZml4ZXMsIHNjb3BlcywgcHJveHkpIHtcbiAgICBsZXQgdmFsdWU7XG4gICAgZm9yIChjb25zdCBwcmVmaXggb2YgcHJlZml4ZXMpe1xuICAgICAgICB2YWx1ZSA9IF9yZXNvbHZlKHJlYWRLZXkocHJlZml4LCBwcm9wKSwgc2NvcGVzKTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBuZWVkc1N1YlJlc29sdmVyKHByb3AsIHZhbHVlKSA/IGNyZWF0ZVN1YlJlc29sdmVyKHNjb3BlcywgcHJveHksIHByb3AsIHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gX3Jlc29sdmUoa2V5LCBzY29wZXMpIHtcbiAgICBmb3IgKGNvbnN0IHNjb3BlIG9mIHNjb3Blcyl7XG4gICAgICAgIGlmICghc2NvcGUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc2NvcGVba2V5XTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGdldEtleXNGcm9tQWxsU2NvcGVzKHRhcmdldCkge1xuICAgIGxldCBrZXlzID0gdGFyZ2V0Ll9rZXlzO1xuICAgIGlmICgha2V5cykge1xuICAgICAgICBrZXlzID0gdGFyZ2V0Ll9rZXlzID0gcmVzb2x2ZUtleXNGcm9tQWxsU2NvcGVzKHRhcmdldC5fc2NvcGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleXM7XG59XG5mdW5jdGlvbiByZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMoc2NvcGVzKSB7XG4gICAgY29uc3Qgc2V0ID0gbmV3IFNldCgpO1xuICAgIGZvciAoY29uc3Qgc2NvcGUgb2Ygc2NvcGVzKXtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMoc2NvcGUpLmZpbHRlcigoayk9PiFrLnN0YXJ0c1dpdGgoJ18nKSkpe1xuICAgICAgICAgICAgc2V0LmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHNldCk7XG59XG5mdW5jdGlvbiBfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUobWV0YSwgZGF0YSwgc3RhcnQsIGNvdW50KSB7XG4gICAgY29uc3QgeyBpU2NhbGUgIH0gPSBtZXRhO1xuICAgIGNvbnN0IHsga2V5ID0ncicgIH0gPSB0aGlzLl9wYXJzaW5nO1xuICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgbGV0IGksIGlsZW4sIGluZGV4LCBpdGVtO1xuICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgaW5kZXggPSBpICsgc3RhcnQ7XG4gICAgICAgIGl0ZW0gPSBkYXRhW2luZGV4XTtcbiAgICAgICAgcGFyc2VkW2ldID0ge1xuICAgICAgICAgICAgcjogaVNjYWxlLnBhcnNlKHJlc29sdmVPYmplY3RLZXkoaXRlbSwga2V5KSwgaW5kZXgpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBwYXJzZWQ7XG59XG5cbmNvbnN0IEVQU0lMT04gPSBOdW1iZXIuRVBTSUxPTiB8fCAxZS0xNDtcbmNvbnN0IGdldFBvaW50ID0gKHBvaW50cywgaSk9PmkgPCBwb2ludHMubGVuZ3RoICYmICFwb2ludHNbaV0uc2tpcCAmJiBwb2ludHNbaV07XG5jb25zdCBnZXRWYWx1ZUF4aXMgPSAoaW5kZXhBeGlzKT0+aW5kZXhBeGlzID09PSAneCcgPyAneScgOiAneCc7XG5mdW5jdGlvbiBzcGxpbmVDdXJ2ZShmaXJzdFBvaW50LCBtaWRkbGVQb2ludCwgYWZ0ZXJQb2ludCwgdCkge1xuICAgIC8vIFByb3BzIHRvIFJvYiBTcGVuY2VyIGF0IHNjYWxlZCBpbm5vdmF0aW9uIGZvciBoaXMgcG9zdCBvbiBzcGxpbmluZyBiZXR3ZWVuIHBvaW50c1xuICAgIC8vIGh0dHA6Ly9zY2FsZWRpbm5vdmF0aW9uLmNvbS9hbmFseXRpY3Mvc3BsaW5lcy9hYm91dFNwbGluZXMuaHRtbFxuICAgIC8vIFRoaXMgZnVuY3Rpb24gbXVzdCBhbHNvIHJlc3BlY3QgXCJza2lwcGVkXCIgcG9pbnRzXG4gICAgY29uc3QgcHJldmlvdXMgPSBmaXJzdFBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGZpcnN0UG9pbnQ7XG4gICAgY29uc3QgY3VycmVudCA9IG1pZGRsZVBvaW50O1xuICAgIGNvbnN0IG5leHQgPSBhZnRlclBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGFmdGVyUG9pbnQ7XG4gICAgY29uc3QgZDAxID0gZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGN1cnJlbnQsIHByZXZpb3VzKTtcbiAgICBjb25zdCBkMTIgPSBkaXN0YW5jZUJldHdlZW5Qb2ludHMobmV4dCwgY3VycmVudCk7XG4gICAgbGV0IHMwMSA9IGQwMSAvIChkMDEgKyBkMTIpO1xuICAgIGxldCBzMTIgPSBkMTIgLyAoZDAxICsgZDEyKTtcbiAgICAvLyBJZiBhbGwgcG9pbnRzIGFyZSB0aGUgc2FtZSwgczAxICYgczAyIHdpbGwgYmUgaW5mXG4gICAgczAxID0gaXNOYU4oczAxKSA/IDAgOiBzMDE7XG4gICAgczEyID0gaXNOYU4oczEyKSA/IDAgOiBzMTI7XG4gICAgY29uc3QgZmEgPSB0ICogczAxOyAvLyBzY2FsaW5nIGZhY3RvciBmb3IgdHJpYW5nbGUgVGFcbiAgICBjb25zdCBmYiA9IHQgKiBzMTI7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJldmlvdXM6IHtcbiAgICAgICAgICAgIHg6IGN1cnJlbnQueCAtIGZhICogKG5leHQueCAtIHByZXZpb3VzLngpLFxuICAgICAgICAgICAgeTogY3VycmVudC55IC0gZmEgKiAobmV4dC55IC0gcHJldmlvdXMueSlcbiAgICAgICAgfSxcbiAgICAgICAgbmV4dDoge1xuICAgICAgICAgICAgeDogY3VycmVudC54ICsgZmIgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG4gICAgICAgICAgICB5OiBjdXJyZW50LnkgKyBmYiAqIChuZXh0LnkgLSBwcmV2aW91cy55KVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQWRqdXN0IHRhbmdlbnRzIHRvIGVuc3VyZSBtb25vdG9uaWMgcHJvcGVydGllc1xuICovIGZ1bmN0aW9uIG1vbm90b25lQWRqdXN0KHBvaW50cywgZGVsdGFLLCBtSykge1xuICAgIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSl7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQgfHwgIXBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhbG1vc3RFcXVhbHMoZGVsdGFLW2ldLCAwLCBFUFNJTE9OKSkge1xuICAgICAgICAgICAgbUtbaV0gPSBtS1tpICsgMV0gPSAwO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgYWxwaGFLID0gbUtbaV0gLyBkZWx0YUtbaV07XG4gICAgICAgIGJldGFLID0gbUtbaSArIDFdIC8gZGVsdGFLW2ldO1xuICAgICAgICBzcXVhcmVkTWFnbml0dWRlID0gTWF0aC5wb3coYWxwaGFLLCAyKSArIE1hdGgucG93KGJldGFLLCAyKTtcbiAgICAgICAgaWYgKHNxdWFyZWRNYWduaXR1ZGUgPD0gOSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdGF1SyA9IDMgLyBNYXRoLnNxcnQoc3F1YXJlZE1hZ25pdHVkZSk7XG4gICAgICAgIG1LW2ldID0gYWxwaGFLICogdGF1SyAqIGRlbHRhS1tpXTtcbiAgICAgICAgbUtbaSArIDFdID0gYmV0YUsgKiB0YXVLICogZGVsdGFLW2ldO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMgPSAneCcpIHtcbiAgICBjb25zdCB2YWx1ZUF4aXMgPSBnZXRWYWx1ZUF4aXMoaW5kZXhBeGlzKTtcbiAgICBjb25zdCBwb2ludHNMZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGxldCBkZWx0YSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKXtcbiAgICAgICAgcG9pbnRCZWZvcmUgPSBwb2ludEN1cnJlbnQ7XG4gICAgICAgIHBvaW50Q3VycmVudCA9IHBvaW50QWZ0ZXI7XG4gICAgICAgIHBvaW50QWZ0ZXIgPSBnZXRQb2ludChwb2ludHMsIGkgKyAxKTtcbiAgICAgICAgaWYgKCFwb2ludEN1cnJlbnQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGlQaXhlbCA9IHBvaW50Q3VycmVudFtpbmRleEF4aXNdO1xuICAgICAgICBjb25zdCB2UGl4ZWwgPSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXTtcbiAgICAgICAgaWYgKHBvaW50QmVmb3JlKSB7XG4gICAgICAgICAgICBkZWx0YSA9IChpUGl4ZWwgLSBwb2ludEJlZm9yZVtpbmRleEF4aXNdKSAvIDM7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMSR7aW5kZXhBeGlzfWBdID0gaVBpeGVsIC0gZGVsdGE7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMSR7dmFsdWVBeGlzfWBdID0gdlBpeGVsIC0gZGVsdGEgKiBtS1tpXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9pbnRBZnRlcikge1xuICAgICAgICAgICAgZGVsdGEgPSAocG9pbnRBZnRlcltpbmRleEF4aXNdIC0gaVBpeGVsKSAvIDM7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMiR7aW5kZXhBeGlzfWBdID0gaVBpeGVsICsgZGVsdGE7XG4gICAgICAgICAgICBwb2ludEN1cnJlbnRbYGNwMiR7dmFsdWVBeGlzfWBdID0gdlBpeGVsICsgZGVsdGEgKiBtS1tpXTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIELDqXppZXIgY29udHJvbCBwb2ludHMgaW4gYSBzaW1pbGFyIHdheSB0aGFuIHxzcGxpbmVDdXJ2ZXwsXG4gKiBidXQgcHJlc2VydmVzIG1vbm90b25pY2l0eSBvZiB0aGUgcHJvdmlkZWQgZGF0YSBhbmQgZW5zdXJlcyBubyBsb2NhbCBleHRyZW11bXMgYXJlIGFkZGVkXG4gKiBiZXR3ZWVuIHRoZSBkYXRhc2V0IGRpc2NyZXRlIHBvaW50cyBkdWUgdG8gdGhlIGludGVycG9sYXRpb24uXG4gKiBTZWUgOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb25vdG9uZV9jdWJpY19pbnRlcnBvbGF0aW9uXG4gKi8gZnVuY3Rpb24gc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyA9ICd4Jykge1xuICAgIGNvbnN0IHZhbHVlQXhpcyA9IGdldFZhbHVlQXhpcyhpbmRleEF4aXMpO1xuICAgIGNvbnN0IHBvaW50c0xlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgZGVsdGFLID0gQXJyYXkocG9pbnRzTGVuKS5maWxsKDApO1xuICAgIGNvbnN0IG1LID0gQXJyYXkocG9pbnRzTGVuKTtcbiAgICAvLyBDYWxjdWxhdGUgc2xvcGVzIChkZWx0YUspIGFuZCBpbml0aWFsaXplIHRhbmdlbnRzIChtSylcbiAgICBsZXQgaSwgcG9pbnRCZWZvcmUsIHBvaW50Q3VycmVudDtcbiAgICBsZXQgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgMCk7XG4gICAgZm9yKGkgPSAwOyBpIDwgcG9pbnRzTGVuOyArK2kpe1xuICAgICAgICBwb2ludEJlZm9yZSA9IHBvaW50Q3VycmVudDtcbiAgICAgICAgcG9pbnRDdXJyZW50ID0gcG9pbnRBZnRlcjtcbiAgICAgICAgcG9pbnRBZnRlciA9IGdldFBvaW50KHBvaW50cywgaSArIDEpO1xuICAgICAgICBpZiAoIXBvaW50Q3VycmVudCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50QWZ0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHNsb3BlRGVsdGEgPSBwb2ludEFmdGVyW2luZGV4QXhpc10gLSBwb2ludEN1cnJlbnRbaW5kZXhBeGlzXTtcbiAgICAgICAgICAgIC8vIEluIHRoZSBjYXNlIG9mIHR3byBwb2ludHMgdGhhdCBhcHBlYXIgYXQgdGhlIHNhbWUgeCBwaXhlbCwgc2xvcGVEZWx0YVggaXMgMFxuICAgICAgICAgICAgZGVsdGFLW2ldID0gc2xvcGVEZWx0YSAhPT0gMCA/IChwb2ludEFmdGVyW3ZhbHVlQXhpc10gLSBwb2ludEN1cnJlbnRbdmFsdWVBeGlzXSkgLyBzbG9wZURlbHRhIDogMDtcbiAgICAgICAgfVxuICAgICAgICBtS1tpXSA9ICFwb2ludEJlZm9yZSA/IGRlbHRhS1tpXSA6ICFwb2ludEFmdGVyID8gZGVsdGFLW2kgLSAxXSA6IHNpZ24oZGVsdGFLW2kgLSAxXSkgIT09IHNpZ24oZGVsdGFLW2ldKSA/IDAgOiAoZGVsdGFLW2kgLSAxXSArIGRlbHRhS1tpXSkgLyAyO1xuICAgIH1cbiAgICBtb25vdG9uZUFkanVzdChwb2ludHMsIGRlbHRhSywgbUspO1xuICAgIG1vbm90b25lQ29tcHV0ZShwb2ludHMsIG1LLCBpbmRleEF4aXMpO1xufVxuZnVuY3Rpb24gY2FwQ29udHJvbFBvaW50KHB0LCBtaW4sIG1heCkge1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcbn1cbmZ1bmN0aW9uIGNhcEJlemllclBvaW50cyhwb2ludHMsIGFyZWEpIHtcbiAgICBsZXQgaSwgaWxlbiwgcG9pbnQsIGluQXJlYSwgaW5BcmVhUHJldjtcbiAgICBsZXQgaW5BcmVhTmV4dCA9IF9pc1BvaW50SW5BcmVhKHBvaW50c1swXSwgYXJlYSk7XG4gICAgZm9yKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgIGluQXJlYVByZXYgPSBpbkFyZWE7XG4gICAgICAgIGluQXJlYSA9IGluQXJlYU5leHQ7XG4gICAgICAgIGluQXJlYU5leHQgPSBpIDwgaWxlbiAtIDEgJiYgX2lzUG9pbnRJbkFyZWEocG9pbnRzW2kgKyAxXSwgYXJlYSk7XG4gICAgICAgIGlmICghaW5BcmVhKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgaWYgKGluQXJlYVByZXYpIHtcbiAgICAgICAgICAgIHBvaW50LmNwMXggPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcbiAgICAgICAgICAgIHBvaW50LmNwMXkgPSBjYXBDb250cm9sUG9pbnQocG9pbnQuY3AxeSwgYXJlYS50b3AsIGFyZWEuYm90dG9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5BcmVhTmV4dCkge1xuICAgICAgICAgICAgcG9pbnQuY3AyeCA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ4LCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuICAgICAgICAgICAgcG9pbnQuY3AyeSA9IGNhcENvbnRyb2xQb2ludChwb2ludC5jcDJ5LCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzKHBvaW50cywgb3B0aW9ucywgYXJlYSwgbG9vcCwgaW5kZXhBeGlzKSB7XG4gICAgbGV0IGksIGlsZW4sIHBvaW50LCBjb250cm9sUG9pbnRzO1xuICAgIC8vIE9ubHkgY29uc2lkZXIgcG9pbnRzIHRoYXQgYXJlIGRyYXduIGluIGNhc2UgdGhlIHNwYW5HYXBzIG9wdGlvbiBpcyB1c2VkXG4gICAgaWYgKG9wdGlvbnMuc3BhbkdhcHMpIHtcbiAgICAgICAgcG9pbnRzID0gcG9pbnRzLmZpbHRlcigocHQpPT4hcHQuc2tpcCk7XG4gICAgfVxuICAgIGlmIChvcHRpb25zLmN1YmljSW50ZXJwb2xhdGlvbk1vZGUgPT09ICdtb25vdG9uZScpIHtcbiAgICAgICAgc3BsaW5lQ3VydmVNb25vdG9uZShwb2ludHMsIGluZGV4QXhpcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHByZXYgPSBsb29wID8gcG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSA6IHBvaW50c1swXTtcbiAgICAgICAgZm9yKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSl7XG4gICAgICAgICAgICBwb2ludCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnRyb2xQb2ludHMgPSBzcGxpbmVDdXJ2ZShwcmV2LCBwb2ludCwgcG9pbnRzW01hdGgubWluKGkgKyAxLCBpbGVuIC0gKGxvb3AgPyAwIDogMSkpICUgaWxlbl0sIG9wdGlvbnMudGVuc2lvbik7XG4gICAgICAgICAgICBwb2ludC5jcDF4ID0gY29udHJvbFBvaW50cy5wcmV2aW91cy54O1xuICAgICAgICAgICAgcG9pbnQuY3AxeSA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueTtcbiAgICAgICAgICAgIHBvaW50LmNwMnggPSBjb250cm9sUG9pbnRzLm5leHQueDtcbiAgICAgICAgICAgIHBvaW50LmNwMnkgPSBjb250cm9sUG9pbnRzLm5leHQueTtcbiAgICAgICAgICAgIHByZXYgPSBwb2ludDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5jYXBCZXppZXJQb2ludHMpIHtcbiAgICAgICAgY2FwQmV6aWVyUG9pbnRzKHBvaW50cywgYXJlYSk7XG4gICAgfVxufVxuXG4vKipcbiAqIE5vdGU6IHR5cGVkZWZzIGFyZSBhdXRvLWV4cG9ydGVkLCBzbyB1c2UgYSBtYWRlLXVwIGBkb21gIG5hbWVzcGFjZSB3aGVyZVxuICogbmVjZXNzYXJ5IHRvIGF2b2lkIGR1cGxpY2F0ZXMgd2l0aCBgZXhwb3J0ICogZnJvbSAnLi9oZWxwZXJzYDsgc2VlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzQ2MDExXG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vY29yZS9jb3JlLmNvbnRyb2xsZXIuanMnKS5kZWZhdWx0IH0gZG9tLkNoYXJ0XG4gKiBAdHlwZWRlZiB7IGltcG9ydCgnLi4vLi4vdHlwZXMnKS5DaGFydEV2ZW50IH0gQ2hhcnRFdmVudFxuICovIC8qKlxuICogQHByaXZhdGVcbiAqLyBmdW5jdGlvbiBfaXNEb21TdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX2dldFBhcmVudE5vZGUoZG9tTm9kZSkge1xuICAgIGxldCBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgU2hhZG93Um9vdF0nKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudC5ob3N0O1xuICAgIH1cbiAgICByZXR1cm4gcGFyZW50O1xufVxuLyoqXG4gKiBjb252ZXJ0IG1heC13aWR0aC9tYXgtaGVpZ2h0IHZhbHVlcyB0aGF0IG1heSBiZSBwZXJjZW50YWdlcyBpbnRvIGEgbnVtYmVyXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIHBhcnNlTWF4U3R5bGUoc3R5bGVWYWx1ZSwgbm9kZSwgcGFyZW50UHJvcGVydHkpIHtcbiAgICBsZXQgdmFsdWVJblBpeGVscztcbiAgICBpZiAodHlwZW9mIHN0eWxlVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhbHVlSW5QaXhlbHMgPSBwYXJzZUludChzdHlsZVZhbHVlLCAxMCk7XG4gICAgICAgIGlmIChzdHlsZVZhbHVlLmluZGV4T2YoJyUnKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIC8vIHBlcmNlbnRhZ2UgKiBzaXplIGluIGRpbWVuc2lvblxuICAgICAgICAgICAgdmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVJblBpeGVscyA9IHN0eWxlVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZUluUGl4ZWxzO1xufVxuY29uc3QgZ2V0Q29tcHV0ZWRTdHlsZSA9IChlbGVtZW50KT0+ZWxlbWVudC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG5mdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG59XG5jb25zdCBwb3NpdGlvbnMgPSBbXG4gICAgJ3RvcCcsXG4gICAgJ3JpZ2h0JyxcbiAgICAnYm90dG9tJyxcbiAgICAnbGVmdCdcbl07XG5mdW5jdGlvbiBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGVzLCBzdHlsZSwgc3VmZml4KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgc3VmZml4ID0gc3VmZml4ID8gJy0nICsgc3VmZml4IDogJyc7XG4gICAgZm9yKGxldCBpID0gMDsgaSA8IDQ7IGkrKyl7XG4gICAgICAgIGNvbnN0IHBvcyA9IHBvc2l0aW9uc1tpXTtcbiAgICAgICAgcmVzdWx0W3Bvc10gPSBwYXJzZUZsb2F0KHN0eWxlc1tzdHlsZSArICctJyArIHBvcyArIHN1ZmZpeF0pIHx8IDA7XG4gICAgfVxuICAgIHJlc3VsdC53aWR0aCA9IHJlc3VsdC5sZWZ0ICsgcmVzdWx0LnJpZ2h0O1xuICAgIHJlc3VsdC5oZWlnaHQgPSByZXN1bHQudG9wICsgcmVzdWx0LmJvdHRvbTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuY29uc3QgdXNlT2Zmc2V0UG9zID0gKHgsIHksIHRhcmdldCk9Pih4ID4gMCB8fCB5ID4gMCkgJiYgKCF0YXJnZXQgfHwgIXRhcmdldC5zaGFkb3dSb290KTtcbi8qKlxuICogQHBhcmFtIGVcbiAqIEBwYXJhbSBjYW52YXNcbiAqIEByZXR1cm5zIENhbnZhcyBwb3NpdGlvblxuICovIGZ1bmN0aW9uIGdldENhbnZhc1Bvc2l0aW9uKGUsIGNhbnZhcykge1xuICAgIGNvbnN0IHRvdWNoZXMgPSBlLnRvdWNoZXM7XG4gICAgY29uc3Qgc291cmNlID0gdG91Y2hlcyAmJiB0b3VjaGVzLmxlbmd0aCA/IHRvdWNoZXNbMF0gOiBlO1xuICAgIGNvbnN0IHsgb2Zmc2V0WCAsIG9mZnNldFkgIH0gPSBzb3VyY2U7XG4gICAgbGV0IGJveCA9IGZhbHNlO1xuICAgIGxldCB4LCB5O1xuICAgIGlmICh1c2VPZmZzZXRQb3Mob2Zmc2V0WCwgb2Zmc2V0WSwgZS50YXJnZXQpKSB7XG4gICAgICAgIHggPSBvZmZzZXRYO1xuICAgICAgICB5ID0gb2Zmc2V0WTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCByZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB4ID0gc291cmNlLmNsaWVudFggLSByZWN0LmxlZnQ7XG4gICAgICAgIHkgPSBzb3VyY2UuY2xpZW50WSAtIHJlY3QudG9wO1xuICAgICAgICBib3ggPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBib3hcbiAgICB9O1xufVxuLyoqXG4gKiBHZXRzIGFuIGV2ZW50J3MgeCwgeSBjb29yZGluYXRlcywgcmVsYXRpdmUgdG8gdGhlIGNoYXJ0IGFyZWFcbiAqIEBwYXJhbSBldmVudFxuICogQHBhcmFtIGNoYXJ0XG4gKiBAcmV0dXJucyB4IGFuZCB5IGNvb3JkaW5hdGVzIG9mIHRoZSBldmVudFxuICovIGZ1bmN0aW9uIGdldFJlbGF0aXZlUG9zaXRpb24oZXZlbnQsIGNoYXJ0KSB7XG4gICAgaWYgKCduYXRpdmUnIGluIGV2ZW50KSB7XG4gICAgICAgIHJldHVybiBldmVudDtcbiAgICB9XG4gICAgY29uc3QgeyBjYW52YXMgLCBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAgfSA9IGNoYXJ0O1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShjYW52YXMpO1xuICAgIGNvbnN0IGJvcmRlckJveCA9IHN0eWxlLmJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnO1xuICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgIGNvbnN0IGJvcmRlcnMgPSBnZXRQb3NpdGlvbmVkU3R5bGUoc3R5bGUsICdib3JkZXInLCAnd2lkdGgnKTtcbiAgICBjb25zdCB7IHggLCB5ICwgYm94ICB9ID0gZ2V0Q2FudmFzUG9zaXRpb24oZXZlbnQsIGNhbnZhcyk7XG4gICAgY29uc3QgeE9mZnNldCA9IHBhZGRpbmdzLmxlZnQgKyAoYm94ICYmIGJvcmRlcnMubGVmdCk7XG4gICAgY29uc3QgeU9mZnNldCA9IHBhZGRpbmdzLnRvcCArIChib3ggJiYgYm9yZGVycy50b3ApO1xuICAgIGxldCB7IHdpZHRoICwgaGVpZ2h0ICB9ID0gY2hhcnQ7XG4gICAgaWYgKGJvcmRlckJveCkge1xuICAgICAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogTWF0aC5yb3VuZCgoeCAtIHhPZmZzZXQpIC8gd2lkdGggKiBjYW52YXMud2lkdGggLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyksXG4gICAgICAgIHk6IE1hdGgucm91bmQoKHkgLSB5T2Zmc2V0KSAvIGhlaWdodCAqIGNhbnZhcy5oZWlnaHQgLyBjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbylcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBsZXQgbWF4V2lkdGgsIG1heEhlaWdodDtcbiAgICBpZiAod2lkdGggPT09IHVuZGVmaW5lZCB8fCBoZWlnaHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBfZ2V0UGFyZW50Tm9kZShjYW52YXMpO1xuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgICAgd2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSBjYW52YXMuY2xpZW50SGVpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVjdCA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgLy8gdGhpcyBpcyB0aGUgYm9yZGVyIGJveCBvZiB0aGUgY29udGFpbmVyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY29udGFpbmVyKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lckJvcmRlciA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ2JvcmRlcicsICd3aWR0aCcpO1xuICAgICAgICAgICAgY29uc3QgY29udGFpbmVyUGFkZGluZyA9IGdldFBvc2l0aW9uZWRTdHlsZShjb250YWluZXJTdHlsZSwgJ3BhZGRpbmcnKTtcbiAgICAgICAgICAgIHdpZHRoID0gcmVjdC53aWR0aCAtIGNvbnRhaW5lclBhZGRpbmcud2lkdGggLSBjb250YWluZXJCb3JkZXIud2lkdGg7XG4gICAgICAgICAgICBoZWlnaHQgPSByZWN0LmhlaWdodCAtIGNvbnRhaW5lclBhZGRpbmcuaGVpZ2h0IC0gY29udGFpbmVyQm9yZGVyLmhlaWdodDtcbiAgICAgICAgICAgIG1heFdpZHRoID0gcGFyc2VNYXhTdHlsZShjb250YWluZXJTdHlsZS5tYXhXaWR0aCwgY29udGFpbmVyLCAnY2xpZW50V2lkdGgnKTtcbiAgICAgICAgICAgIG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoY29udGFpbmVyU3R5bGUubWF4SGVpZ2h0LCBjb250YWluZXIsICdjbGllbnRIZWlnaHQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0LFxuICAgICAgICBtYXhXaWR0aDogbWF4V2lkdGggfHwgSU5GSU5JVFksXG4gICAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0IHx8IElORklOSVRZXG4gICAgfTtcbn1cbmNvbnN0IHJvdW5kMSA9ICh2KT0+TWF0aC5yb3VuZCh2ICogMTApIC8gMTA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gZ2V0TWF4aW11bVNpemUoY2FudmFzLCBiYldpZHRoLCBiYkhlaWdodCwgYXNwZWN0UmF0aW8pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoY2FudmFzKTtcbiAgICBjb25zdCBtYXJnaW5zID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnbWFyZ2luJyk7XG4gICAgY29uc3QgbWF4V2lkdGggPSBwYXJzZU1heFN0eWxlKHN0eWxlLm1heFdpZHRoLCBjYW52YXMsICdjbGllbnRXaWR0aCcpIHx8IElORklOSVRZO1xuICAgIGNvbnN0IG1heEhlaWdodCA9IHBhcnNlTWF4U3R5bGUoc3R5bGUubWF4SGVpZ2h0LCBjYW52YXMsICdjbGllbnRIZWlnaHQnKSB8fCBJTkZJTklUWTtcbiAgICBjb25zdCBjb250YWluZXJTaXplID0gZ2V0Q29udGFpbmVyU2l6ZShjYW52YXMsIGJiV2lkdGgsIGJiSGVpZ2h0KTtcbiAgICBsZXQgeyB3aWR0aCAsIGhlaWdodCAgfSA9IGNvbnRhaW5lclNpemU7XG4gICAgaWYgKHN0eWxlLmJveFNpemluZyA9PT0gJ2NvbnRlbnQtYm94Jykge1xuICAgICAgICBjb25zdCBib3JkZXJzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAnYm9yZGVyJywgJ3dpZHRoJyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdzID0gZ2V0UG9zaXRpb25lZFN0eWxlKHN0eWxlLCAncGFkZGluZycpO1xuICAgICAgICB3aWR0aCAtPSBwYWRkaW5ncy53aWR0aCArIGJvcmRlcnMud2lkdGg7XG4gICAgICAgIGhlaWdodCAtPSBwYWRkaW5ncy5oZWlnaHQgKyBib3JkZXJzLmhlaWdodDtcbiAgICB9XG4gICAgd2lkdGggPSBNYXRoLm1heCgwLCB3aWR0aCAtIG1hcmdpbnMud2lkdGgpO1xuICAgIGhlaWdodCA9IE1hdGgubWF4KDAsIGFzcGVjdFJhdGlvID8gd2lkdGggLyBhc3BlY3RSYXRpbyA6IGhlaWdodCAtIG1hcmdpbnMuaGVpZ2h0KTtcbiAgICB3aWR0aCA9IHJvdW5kMShNYXRoLm1pbih3aWR0aCwgbWF4V2lkdGgsIGNvbnRhaW5lclNpemUubWF4V2lkdGgpKTtcbiAgICBoZWlnaHQgPSByb3VuZDEoTWF0aC5taW4oaGVpZ2h0LCBtYXhIZWlnaHQsIGNvbnRhaW5lclNpemUubWF4SGVpZ2h0KSk7XG4gICAgaWYgKHdpZHRoICYmICFoZWlnaHQpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQ2NTlcbiAgICAgICAgLy8gSWYgdGhlIGNhbnZhcyBoYXMgd2lkdGgsIGJ1dCBubyBoZWlnaHQsIGRlZmF1bHQgdG8gYXNwZWN0UmF0aW8gb2YgMiAoY2FudmFzIGRlZmF1bHQpXG4gICAgICAgIGhlaWdodCA9IHJvdW5kMSh3aWR0aCAvIDIpO1xuICAgIH1cbiAgICBjb25zdCBtYWludGFpbkhlaWdodCA9IGJiV2lkdGggIT09IHVuZGVmaW5lZCB8fCBiYkhlaWdodCAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChtYWludGFpbkhlaWdodCAmJiBhc3BlY3RSYXRpbyAmJiBjb250YWluZXJTaXplLmhlaWdodCAmJiBoZWlnaHQgPiBjb250YWluZXJTaXplLmhlaWdodCkge1xuICAgICAgICBoZWlnaHQgPSBjb250YWluZXJTaXplLmhlaWdodDtcbiAgICAgICAgd2lkdGggPSByb3VuZDEoTWF0aC5mbG9vcihoZWlnaHQgKiBhc3BlY3RSYXRpbykpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aCxcbiAgICAgICAgaGVpZ2h0XG4gICAgfTtcbn1cbi8qKlxuICogQHBhcmFtIGNoYXJ0XG4gKiBAcGFyYW0gZm9yY2VSYXRpb1xuICogQHBhcmFtIGZvcmNlU3R5bGVcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGNhbnZhcyBjb250ZXh0IHNpemUgb3IgdHJhbnNmb3JtYXRpb24gaGFzIGNoYW5nZWQuXG4gKi8gZnVuY3Rpb24gcmV0aW5hU2NhbGUoY2hhcnQsIGZvcmNlUmF0aW8sIGZvcmNlU3R5bGUpIHtcbiAgICBjb25zdCBwaXhlbFJhdGlvID0gZm9yY2VSYXRpbyB8fCAxO1xuICAgIGNvbnN0IGRldmljZUhlaWdodCA9IE1hdGguZmxvb3IoY2hhcnQuaGVpZ2h0ICogcGl4ZWxSYXRpbyk7XG4gICAgY29uc3QgZGV2aWNlV2lkdGggPSBNYXRoLmZsb29yKGNoYXJ0LndpZHRoICogcGl4ZWxSYXRpbyk7XG4gICAgY2hhcnQuaGVpZ2h0ID0gTWF0aC5mbG9vcihjaGFydC5oZWlnaHQpO1xuICAgIGNoYXJ0LndpZHRoID0gTWF0aC5mbG9vcihjaGFydC53aWR0aCk7XG4gICAgY29uc3QgY2FudmFzID0gY2hhcnQuY2FudmFzO1xuICAgIC8vIElmIG5vIHN0eWxlIGhhcyBiZWVuIHNldCBvbiB0aGUgY2FudmFzLCB0aGUgcmVuZGVyIHNpemUgaXMgdXNlZCBhcyBkaXNwbGF5IHNpemUsXG4gICAgLy8gbWFraW5nIHRoZSBjaGFydCB2aXN1YWxseSBiaWdnZXIsIHNvIGxldCdzIGVuZm9yY2UgaXQgdG8gdGhlIFwiY29ycmVjdFwiIHZhbHVlcy5cbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM1NzVcbiAgICBpZiAoY2FudmFzLnN0eWxlICYmIChmb3JjZVN0eWxlIHx8ICFjYW52YXMuc3R5bGUuaGVpZ2h0ICYmICFjYW52YXMuc3R5bGUud2lkdGgpKSB7XG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBgJHtjaGFydC5oZWlnaHR9cHhgO1xuICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSBgJHtjaGFydC53aWR0aH1weGA7XG4gICAgfVxuICAgIGlmIChjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyAhPT0gcGl4ZWxSYXRpbyB8fCBjYW52YXMuaGVpZ2h0ICE9PSBkZXZpY2VIZWlnaHQgfHwgY2FudmFzLndpZHRoICE9PSBkZXZpY2VXaWR0aCkge1xuICAgICAgICBjaGFydC5jdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW87XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBkZXZpY2VIZWlnaHQ7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IGRldmljZVdpZHRoO1xuICAgICAgICBjaGFydC5jdHguc2V0VHJhbnNmb3JtKHBpeGVsUmF0aW8sIDAsIDAsIHBpeGVsUmF0aW8sIDAsIDApO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBEZXRlY3RzIHN1cHBvcnQgZm9yIG9wdGlvbnMgb2JqZWN0IGFyZ3VtZW50IGluIGFkZEV2ZW50TGlzdGVuZXIuXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNTYWZlbHlfZGV0ZWN0aW5nX29wdGlvbl9zdXBwb3J0XG4gKiBAcHJpdmF0ZVxuICovIGNvbnN0IHN1cHBvcnRzRXZlbnRMaXN0ZW5lck9wdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBnZXQgcGFzc2l2ZSAoKSB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndGVzdCcsIG51bGwsIG9wdGlvbnMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBjb250aW51ZSByZWdhcmRsZXNzIG9mIGVycm9yXG4gICAgfVxuICAgIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufSgpO1xuLyoqXG4gKiBUaGUgXCJ1c2VkXCIgc2l6ZSBpcyB0aGUgZmluYWwgdmFsdWUgb2YgYSBkaW1lbnNpb24gcHJvcGVydHkgYWZ0ZXIgYWxsIGNhbGN1bGF0aW9ucyBoYXZlXG4gKiBiZWVuIHBlcmZvcm1lZC4gVGhpcyBtZXRob2QgdXNlcyB0aGUgY29tcHV0ZWQgc3R5bGUgb2YgYGVsZW1lbnRgIGJ1dCByZXR1cm5zIHVuZGVmaW5lZFxuICogaWYgdGhlIGNvbXB1dGVkIHN0eWxlIGlzIG5vdCBleHByZXNzZWQgaW4gcGl4ZWxzLiBUaGF0IGNhbiBoYXBwZW4gaW4gc29tZSBjYXNlcyB3aGVyZVxuICogYGVsZW1lbnRgIGhhcyBhIHNpemUgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBhbmQgdGhpcyBsYXN0IG9uZSBpcyBub3QgeWV0IGRpc3BsYXllZCxcbiAqIGZvciBleGFtcGxlIGJlY2F1c2Ugb2YgYGRpc3BsYXk6IG5vbmVgIG9uIGEgcGFyZW50IG5vZGUuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91c2VkX3ZhbHVlXG4gKiBAcmV0dXJucyBTaXplIGluIHBpeGVscyBvciB1bmRlZmluZWQgaWYgdW5rbm93bi5cbiAqLyBmdW5jdGlvbiByZWFkVXNlZFNpemUoZWxlbWVudCwgcHJvcGVydHkpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGdldFN0eWxlKGVsZW1lbnQsIHByb3BlcnR5KTtcbiAgICBjb25zdCBtYXRjaGVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goL14oXFxkKykoXFwuXFxkKyk/cHgkLyk7XG4gICAgcmV0dXJuIG1hdGNoZXMgPyArbWF0Y2hlc1sxXSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9wb2ludEluTGluZShwMSwgcDIsIHQsIG1vZGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiBwMS54ICsgdCAqIChwMi54IC0gcDEueCksXG4gICAgICAgIHk6IHAxLnkgKyB0ICogKHAyLnkgLSBwMS55KVxuICAgIH07XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi8gZnVuY3Rpb24gX3N0ZXBwZWRJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHAxLnggKyB0ICogKHAyLnggLSBwMS54KSxcbiAgICAgICAgeTogbW9kZSA9PT0gJ21pZGRsZScgPyB0IDwgMC41ID8gcDEueSA6IHAyLnkgOiBtb2RlID09PSAnYWZ0ZXInID8gdCA8IDEgPyBwMS55IDogcDIueSA6IHQgPiAwID8gcDIueSA6IHAxLnlcbiAgICB9O1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovIGZ1bmN0aW9uIF9iZXppZXJJbnRlcnBvbGF0aW9uKHAxLCBwMiwgdCwgbW9kZSkge1xuICAgIGNvbnN0IGNwMSA9IHtcbiAgICAgICAgeDogcDEuY3AyeCxcbiAgICAgICAgeTogcDEuY3AyeVxuICAgIH07XG4gICAgY29uc3QgY3AyID0ge1xuICAgICAgICB4OiBwMi5jcDF4LFxuICAgICAgICB5OiBwMi5jcDF5XG4gICAgfTtcbiAgICBjb25zdCBhID0gX3BvaW50SW5MaW5lKHAxLCBjcDEsIHQpO1xuICAgIGNvbnN0IGIgPSBfcG9pbnRJbkxpbmUoY3AxLCBjcDIsIHQpO1xuICAgIGNvbnN0IGMgPSBfcG9pbnRJbkxpbmUoY3AyLCBwMiwgdCk7XG4gICAgY29uc3QgZCA9IF9wb2ludEluTGluZShhLCBiLCB0KTtcbiAgICBjb25zdCBlID0gX3BvaW50SW5MaW5lKGIsIGMsIHQpO1xuICAgIHJldHVybiBfcG9pbnRJbkxpbmUoZCwgZSwgdCk7XG59XG5cbmNvbnN0IGdldFJpZ2h0VG9MZWZ0QWRhcHRlciA9IGZ1bmN0aW9uKHJlY3RYLCB3aWR0aCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHggKHgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWN0WCArIHJlY3RYICsgd2lkdGggLSB4O1xuICAgICAgICB9LFxuICAgICAgICBzZXRXaWR0aCAodykge1xuICAgICAgICAgICAgd2lkdGggPSB3O1xuICAgICAgICB9LFxuICAgICAgICB0ZXh0QWxpZ24gKGFsaWduKSB7XG4gICAgICAgICAgICBpZiAoYWxpZ24gPT09ICdjZW50ZXInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsaWduO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFsaWduID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgfSxcbiAgICAgICAgeFBsdXMgKHgsIHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4geCAtIHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBsZWZ0Rm9yTHRyICh4LCBpdGVtV2lkdGgpIHtcbiAgICAgICAgICAgIHJldHVybiB4IC0gaXRlbVdpZHRoO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5jb25zdCBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4ICh4KSB7XG4gICAgICAgICAgICByZXR1cm4geDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0V2lkdGggKHcpIHt9LFxuICAgICAgICB0ZXh0QWxpZ24gKGFsaWduKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxpZ247XG4gICAgICAgIH0sXG4gICAgICAgIHhQbHVzICh4LCB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHggKyB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgbGVmdEZvckx0ciAoeCwgX2l0ZW1XaWR0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgIH1cbiAgICB9O1xufTtcbmZ1bmN0aW9uIGdldFJ0bEFkYXB0ZXIocnRsLCByZWN0WCwgd2lkdGgpIHtcbiAgICByZXR1cm4gcnRsID8gZ2V0UmlnaHRUb0xlZnRBZGFwdGVyKHJlY3RYLCB3aWR0aCkgOiBnZXRMZWZ0VG9SaWdodEFkYXB0ZXIoKTtcbn1cbmZ1bmN0aW9uIG92ZXJyaWRlVGV4dERpcmVjdGlvbihjdHgsIGRpcmVjdGlvbikge1xuICAgIGxldCBzdHlsZSwgb3JpZ2luYWw7XG4gICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2x0cicgfHwgZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgICAgICBzdHlsZSA9IGN0eC5jYW52YXMuc3R5bGU7XG4gICAgICAgIG9yaWdpbmFsID0gW1xuICAgICAgICAgICAgc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJyksXG4gICAgICAgICAgICBzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KCdkaXJlY3Rpb24nKVxuICAgICAgICBdO1xuICAgICAgICBzdHlsZS5zZXRQcm9wZXJ0eSgnZGlyZWN0aW9uJywgZGlyZWN0aW9uLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIGN0eC5wcmV2VGV4dERpcmVjdGlvbiA9IG9yaWdpbmFsO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHJlc3RvcmVUZXh0RGlyZWN0aW9uKGN0eCwgb3JpZ2luYWwpIHtcbiAgICBpZiAob3JpZ2luYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGUgY3R4LnByZXZUZXh0RGlyZWN0aW9uO1xuICAgICAgICBjdHguY2FudmFzLnN0eWxlLnNldFByb3BlcnR5KCdkaXJlY3Rpb24nLCBvcmlnaW5hbFswXSwgb3JpZ2luYWxbMV0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGbihwcm9wZXJ0eSkge1xuICAgIGlmIChwcm9wZXJ0eSA9PT0gJ2FuZ2xlJykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmV0d2VlbjogX2FuZ2xlQmV0d2VlbixcbiAgICAgICAgICAgIGNvbXBhcmU6IF9hbmdsZURpZmYsXG4gICAgICAgICAgICBub3JtYWxpemU6IF9ub3JtYWxpemVBbmdsZVxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBiZXR3ZWVuOiBfaXNCZXR3ZWVuLFxuICAgICAgICBjb21wYXJlOiAoYSwgYik9PmEgLSBiLFxuICAgICAgICBub3JtYWxpemU6ICh4KT0+eFxuICAgIH07XG59XG5mdW5jdGlvbiBub3JtYWxpemVTZWdtZW50KHsgc3RhcnQgLCBlbmQgLCBjb3VudCAsIGxvb3AgLCBzdHlsZSAgfSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBzdGFydCAlIGNvdW50LFxuICAgICAgICBlbmQ6IGVuZCAlIGNvdW50LFxuICAgICAgICBsb29wOiBsb29wICYmIChlbmQgLSBzdGFydCArIDEpICUgY291bnQgPT09IDAsXG4gICAgICAgIHN0eWxlXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGdldFNlZ21lbnQoc2VnbWVudCwgcG9pbnRzLCBib3VuZHMpIHtcbiAgICBjb25zdCB7IHByb3BlcnR5ICwgc3RhcnQ6IHN0YXJ0Qm91bmQgLCBlbmQ6IGVuZEJvdW5kICB9ID0gYm91bmRzO1xuICAgIGNvbnN0IHsgYmV0d2VlbiAsIG5vcm1hbGl6ZSAgfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBsZXQgeyBzdGFydCAsIGVuZCAsIGxvb3AgIH0gPSBzZWdtZW50O1xuICAgIGxldCBpLCBpbGVuO1xuICAgIGlmIChsb29wKSB7XG4gICAgICAgIHN0YXJ0ICs9IGNvdW50O1xuICAgICAgICBlbmQgKz0gY291bnQ7XG4gICAgICAgIGZvcihpID0gMCwgaWxlbiA9IGNvdW50OyBpIDwgaWxlbjsgKytpKXtcbiAgICAgICAgICAgIGlmICghYmV0d2Vlbihub3JtYWxpemUocG9pbnRzW3N0YXJ0ICUgY291bnRdW3Byb3BlcnR5XSksIHN0YXJ0Qm91bmQsIGVuZEJvdW5kKSkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhcnQtLTtcbiAgICAgICAgICAgIGVuZC0tO1xuICAgICAgICB9XG4gICAgICAgIHN0YXJ0ICU9IGNvdW50O1xuICAgICAgICBlbmQgJT0gY291bnQ7XG4gICAgfVxuICAgIGlmIChlbmQgPCBzdGFydCkge1xuICAgICAgICBlbmQgKz0gY291bnQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIGxvb3AsXG4gICAgICAgIHN0eWxlOiBzZWdtZW50LnN0eWxlXG4gICAgfTtcbn1cbiBmdW5jdGlvbiBfYm91bmRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKSB7XG4gICAgaWYgKCFib3VuZHMpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHNlZ21lbnRcbiAgICAgICAgXTtcbiAgICB9XG4gICAgY29uc3QgeyBwcm9wZXJ0eSAsIHN0YXJ0OiBzdGFydEJvdW5kICwgZW5kOiBlbmRCb3VuZCAgfSA9IGJvdW5kcztcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgeyBjb21wYXJlICwgYmV0d2VlbiAsIG5vcm1hbGl6ZSAgfSA9IHByb3BlcnR5Rm4ocHJvcGVydHkpO1xuICAgIGNvbnN0IHsgc3RhcnQgLCBlbmQgLCBsb29wICwgc3R5bGUgIH0gPSBnZXRTZWdtZW50KHNlZ21lbnQsIHBvaW50cywgYm91bmRzKTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgaW5zaWRlID0gZmFsc2U7XG4gICAgbGV0IHN1YlN0YXJ0ID0gbnVsbDtcbiAgICBsZXQgdmFsdWUsIHBvaW50LCBwcmV2VmFsdWU7XG4gICAgY29uc3Qgc3RhcnRJc0JlZm9yZSA9ICgpPT5iZXR3ZWVuKHN0YXJ0Qm91bmQsIHByZXZWYWx1ZSwgdmFsdWUpICYmIGNvbXBhcmUoc3RhcnRCb3VuZCwgcHJldlZhbHVlKSAhPT0gMDtcbiAgICBjb25zdCBlbmRJc0JlZm9yZSA9ICgpPT5jb21wYXJlKGVuZEJvdW5kLCB2YWx1ZSkgPT09IDAgfHwgYmV0d2VlbihlbmRCb3VuZCwgcHJldlZhbHVlLCB2YWx1ZSk7XG4gICAgY29uc3Qgc2hvdWxkU3RhcnQgPSAoKT0+aW5zaWRlIHx8IHN0YXJ0SXNCZWZvcmUoKTtcbiAgICBjb25zdCBzaG91bGRTdG9wID0gKCk9PiFpbnNpZGUgfHwgZW5kSXNCZWZvcmUoKTtcbiAgICBmb3IobGV0IGkgPSBzdGFydCwgcHJldiA9IHN0YXJ0OyBpIDw9IGVuZDsgKytpKXtcbiAgICAgICAgcG9pbnQgPSBwb2ludHNbaSAlIGNvdW50XTtcbiAgICAgICAgaWYgKHBvaW50LnNraXApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gbm9ybWFsaXplKHBvaW50W3Byb3BlcnR5XSk7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gcHJldlZhbHVlKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpbnNpZGUgPSBiZXR3ZWVuKHZhbHVlLCBzdGFydEJvdW5kLCBlbmRCb3VuZCk7XG4gICAgICAgIGlmIChzdWJTdGFydCA9PT0gbnVsbCAmJiBzaG91bGRTdGFydCgpKSB7XG4gICAgICAgICAgICBzdWJTdGFydCA9IGNvbXBhcmUodmFsdWUsIHN0YXJ0Qm91bmQpID09PSAwID8gaSA6IHByZXY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1YlN0YXJ0ICE9PSBudWxsICYmIHNob3VsZFN0b3AoKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7XG4gICAgICAgICAgICAgICAgc3RhcnQ6IHN1YlN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZDogaSxcbiAgICAgICAgICAgICAgICBsb29wLFxuICAgICAgICAgICAgICAgIGNvdW50LFxuICAgICAgICAgICAgICAgIHN0eWxlXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICBzdWJTdGFydCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGk7XG4gICAgICAgIHByZXZWYWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAoc3ViU3RhcnQgIT09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gobm9ybWFsaXplU2VnbWVudCh7XG4gICAgICAgICAgICBzdGFydDogc3ViU3RhcnQsXG4gICAgICAgICAgICBlbmQsXG4gICAgICAgICAgICBsb29wLFxuICAgICAgICAgICAgY291bnQsXG4gICAgICAgICAgICBzdHlsZVxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gX2JvdW5kU2VnbWVudHMobGluZSwgYm91bmRzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgY29uc3Qgc2VnbWVudHMgPSBsaW5lLnNlZ21lbnRzO1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIGNvbnN0IHN1YiA9IF9ib3VuZFNlZ21lbnQoc2VnbWVudHNbaV0sIGxpbmUucG9pbnRzLCBib3VuZHMpO1xuICAgICAgICBpZiAoc3ViLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goLi4uc3ViKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIGZ1bmN0aW9uIGZpbmRTdGFydEFuZEVuZChwb2ludHMsIGNvdW50LCBsb29wLCBzcGFuR2Fwcykge1xuICAgIGxldCBzdGFydCA9IDA7XG4gICAgbGV0IGVuZCA9IGNvdW50IC0gMTtcbiAgICBpZiAobG9vcCAmJiAhc3BhbkdhcHMpIHtcbiAgICAgICAgd2hpbGUoc3RhcnQgPCBjb3VudCAmJiAhcG9pbnRzW3N0YXJ0XS5za2lwKXtcbiAgICAgICAgICAgIHN0YXJ0Kys7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUoc3RhcnQgPCBjb3VudCAmJiBwb2ludHNbc3RhcnRdLnNraXApe1xuICAgICAgICBzdGFydCsrO1xuICAgIH1cbiAgICBzdGFydCAlPSBjb3VudDtcbiAgICBpZiAobG9vcCkge1xuICAgICAgICBlbmQgKz0gc3RhcnQ7XG4gICAgfVxuICAgIHdoaWxlKGVuZCA+IHN0YXJ0ICYmIHBvaW50c1tlbmQgJSBjb3VudF0uc2tpcCl7XG4gICAgICAgIGVuZC0tO1xuICAgIH1cbiAgICBlbmQgJT0gY291bnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZFxuICAgIH07XG59XG4gZnVuY3Rpb24gc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGxvb3ApIHtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGxhc3QgPSBzdGFydDtcbiAgICBsZXQgcHJldiA9IHBvaW50c1tzdGFydF07XG4gICAgbGV0IGVuZDtcbiAgICBmb3IoZW5kID0gc3RhcnQgKyAxOyBlbmQgPD0gbWF4OyArK2VuZCl7XG4gICAgICAgIGNvbnN0IGN1ciA9IHBvaW50c1tlbmQgJSBjb3VudF07XG4gICAgICAgIGlmIChjdXIuc2tpcCB8fCBjdXIuc3RvcCkge1xuICAgICAgICAgICAgaWYgKCFwcmV2LnNraXApIHtcbiAgICAgICAgICAgICAgICBsb29wID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogc3RhcnQgJSBjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiAoZW5kIC0gMSkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICAgICAgbG9vcFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHN0YXJ0ID0gbGFzdCA9IGN1ci5zdG9wID8gZW5kIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxhc3QgPSBlbmQ7XG4gICAgICAgICAgICBpZiAocHJldi5za2lwKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcHJldiA9IGN1cjtcbiAgICB9XG4gICAgaWYgKGxhc3QgIT09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgc3RhcnQ6IHN0YXJ0ICUgY291bnQsXG4gICAgICAgICAgICBlbmQ6IGxhc3QgJSBjb3VudCxcbiAgICAgICAgICAgIGxvb3BcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4gZnVuY3Rpb24gX2NvbXB1dGVTZWdtZW50cyhsaW5lLCBzZWdtZW50T3B0aW9ucykge1xuICAgIGNvbnN0IHBvaW50cyA9IGxpbmUucG9pbnRzO1xuICAgIGNvbnN0IHNwYW5HYXBzID0gbGluZS5vcHRpb25zLnNwYW5HYXBzO1xuICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICBpZiAoIWNvdW50KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY29uc3QgbG9vcCA9ICEhbGluZS5fbG9vcDtcbiAgICBjb25zdCB7IHN0YXJ0ICwgZW5kICB9ID0gZmluZFN0YXJ0QW5kRW5kKHBvaW50cywgY291bnQsIGxvb3AsIHNwYW5HYXBzKTtcbiAgICBpZiAoc3BhbkdhcHMgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0LFxuICAgICAgICAgICAgICAgIGVuZCxcbiAgICAgICAgICAgICAgICBsb29wXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xuICAgIH1cbiAgICBjb25zdCBtYXggPSBlbmQgPCBzdGFydCA/IGVuZCArIGNvdW50IDogZW5kO1xuICAgIGNvbnN0IGNvbXBsZXRlTG9vcCA9ICEhbGluZS5fZnVsbExvb3AgJiYgc3RhcnQgPT09IDAgJiYgZW5kID09PSBjb3VudCAtIDE7XG4gICAgcmV0dXJuIHNwbGl0QnlTdHlsZXMobGluZSwgc29saWRTZWdtZW50cyhwb2ludHMsIHN0YXJ0LCBtYXgsIGNvbXBsZXRlTG9vcCksIHBvaW50cywgc2VnbWVudE9wdGlvbnMpO1xufVxuIGZ1bmN0aW9uIHNwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBpZiAoIXNlZ21lbnRPcHRpb25zIHx8ICFzZWdtZW50T3B0aW9ucy5zZXRDb250ZXh0IHx8ICFwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH1cbiAgICByZXR1cm4gZG9TcGxpdEJ5U3R5bGVzKGxpbmUsIHNlZ21lbnRzLCBwb2ludHMsIHNlZ21lbnRPcHRpb25zKTtcbn1cbiBmdW5jdGlvbiBkb1NwbGl0QnlTdHlsZXMobGluZSwgc2VnbWVudHMsIHBvaW50cywgc2VnbWVudE9wdGlvbnMpIHtcbiAgICBjb25zdCBjaGFydENvbnRleHQgPSBsaW5lLl9jaGFydC5nZXRDb250ZXh0KCk7XG4gICAgY29uc3QgYmFzZVN0eWxlID0gcmVhZFN0eWxlKGxpbmUub3B0aW9ucyk7XG4gICAgY29uc3QgeyBfZGF0YXNldEluZGV4OiBkYXRhc2V0SW5kZXggLCBvcHRpb25zOiB7IHNwYW5HYXBzICB9ICB9ID0gbGluZTtcbiAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IHByZXZTdHlsZSA9IGJhc2VTdHlsZTtcbiAgICBsZXQgc3RhcnQgPSBzZWdtZW50c1swXS5zdGFydDtcbiAgICBsZXQgaSA9IHN0YXJ0O1xuICAgIGZ1bmN0aW9uIGFkZFN0eWxlKHMsIGUsIGwsIHN0KSB7XG4gICAgICAgIGNvbnN0IGRpciA9IHNwYW5HYXBzID8gLTEgOiAxO1xuICAgICAgICBpZiAocyA9PT0gZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHMgKz0gY291bnQ7XG4gICAgICAgIHdoaWxlKHBvaW50c1tzICUgY291bnRdLnNraXApe1xuICAgICAgICAgICAgcyAtPSBkaXI7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUocG9pbnRzW2UgJSBjb3VudF0uc2tpcCl7XG4gICAgICAgICAgICBlICs9IGRpcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocyAlIGNvdW50ICE9PSBlICUgY291bnQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICBzdGFydDogcyAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGVuZDogZSAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGxvb3A6IGwsXG4gICAgICAgICAgICAgICAgc3R5bGU6IHN0XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHByZXZTdHlsZSA9IHN0O1xuICAgICAgICAgICAgc3RhcnQgPSBlICUgY291bnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKXtcbiAgICAgICAgc3RhcnQgPSBzcGFuR2FwcyA/IHN0YXJ0IDogc2VnbWVudC5zdGFydDtcbiAgICAgICAgbGV0IHByZXYgPSBwb2ludHNbc3RhcnQgJSBjb3VudF07XG4gICAgICAgIGxldCBzdHlsZTtcbiAgICAgICAgZm9yKGkgPSBzdGFydCArIDE7IGkgPD0gc2VnbWVudC5lbmQ7IGkrKyl7XG4gICAgICAgICAgICBjb25zdCBwdCA9IHBvaW50c1tpICUgY291bnRdO1xuICAgICAgICAgICAgc3R5bGUgPSByZWFkU3R5bGUoc2VnbWVudE9wdGlvbnMuc2V0Q29udGV4dChjcmVhdGVDb250ZXh0KGNoYXJ0Q29udGV4dCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdzZWdtZW50JyxcbiAgICAgICAgICAgICAgICBwMDogcHJldixcbiAgICAgICAgICAgICAgICBwMTogcHQsXG4gICAgICAgICAgICAgICAgcDBEYXRhSW5kZXg6IChpIC0gMSkgJSBjb3VudCxcbiAgICAgICAgICAgICAgICBwMURhdGFJbmRleDogaSAlIGNvdW50LFxuICAgICAgICAgICAgICAgIGRhdGFzZXRJbmRleFxuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgICAgIGlmIChzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkpIHtcbiAgICAgICAgICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXYgPSBwdDtcbiAgICAgICAgICAgIHByZXZTdHlsZSA9IHN0eWxlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydCA8IGkgLSAxKSB7XG4gICAgICAgICAgICBhZGRTdHlsZShzdGFydCwgaSAtIDEsIHNlZ21lbnQubG9vcCwgcHJldlN0eWxlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcmVhZFN0eWxlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IG9wdGlvbnMuYmFja2dyb3VuZENvbG9yLFxuICAgICAgICBib3JkZXJDYXBTdHlsZTogb3B0aW9ucy5ib3JkZXJDYXBTdHlsZSxcbiAgICAgICAgYm9yZGVyRGFzaDogb3B0aW9ucy5ib3JkZXJEYXNoLFxuICAgICAgICBib3JkZXJEYXNoT2Zmc2V0OiBvcHRpb25zLmJvcmRlckRhc2hPZmZzZXQsXG4gICAgICAgIGJvcmRlckpvaW5TdHlsZTogb3B0aW9ucy5ib3JkZXJKb2luU3R5bGUsXG4gICAgICAgIGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuICAgICAgICBib3JkZXJDb2xvcjogb3B0aW9ucy5ib3JkZXJDb2xvclxuICAgIH07XG59XG5mdW5jdGlvbiBzdHlsZUNoYW5nZWQoc3R5bGUsIHByZXZTdHlsZSkge1xuICAgIGlmICghcHJldlN0eWxlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgY2FjaGUgPSBbXTtcbiAgICBjb25zdCByZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc1BhdHRlcm5PckdyYWRpZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2FjaGUuaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICBjYWNoZS5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FjaGUuaW5kZXhPZih2YWx1ZSk7XG4gICAgfTtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc3R5bGUsIHJlcGxhY2VyKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldlN0eWxlLCByZXBsYWNlcik7XG59XG5cbmV4cG9ydCB7IHVuY2xpcEFyZWEgYXMgJCwgX3Jsb29rdXBCeUtleSBhcyBBLCBfbG9va3VwQnlLZXkgYXMgQiwgX2lzUG9pbnRJbkFyZWEgYXMgQywgZ2V0QW5nbGVGcm9tUG9pbnQgYXMgRCwgdG9QYWRkaW5nIGFzIEUsIGVhY2ggYXMgRiwgZ2V0TWF4aW11bVNpemUgYXMgRywgSEFMRl9QSSBhcyBILCBfZ2V0UGFyZW50Tm9kZSBhcyBJLCByZWFkVXNlZFNpemUgYXMgSiwgc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyBhcyBLLCB0aHJvdHRsZWQgYXMgTCwgX2lzRG9tU3VwcG9ydGVkIGFzIE0sIF9mYWN0b3JpemUgYXMgTiwgZmluaXRlT3JEZWZhdWx0IGFzIE8sIFBJIGFzIFAsIGNhbGxiYWNrIGFzIFEsIF9hZGRHcmFjZSBhcyBSLCBfbGltaXRWYWx1ZSBhcyBTLCBUQVUgYXMgVCwgdG9EZWdyZWVzIGFzIFUsIF9tZWFzdXJlVGV4dCBhcyBWLCBfaW50MTZSYW5nZSBhcyBXLCBfYWxpZ25QaXhlbCBhcyBYLCBjbGlwQXJlYSBhcyBZLCByZW5kZXJUZXh0IGFzIFosIF9hcnJheVVuaXF1ZSBhcyBfLCByZXNvbHZlIGFzIGEsIGZvbnRTdHJpbmcgYXMgYSQsIHRvRm9udCBhcyBhMCwgX3RvTGVmdFJpZ2h0Q2VudGVyIGFzIGExLCBfYWxpZ25TdGFydEVuZCBhcyBhMiwgb3ZlcnJpZGVzIGFzIGEzLCBtZXJnZSBhcyBhNCwgX2NhcGl0YWxpemUgYXMgYTUsIGRlc2NyaXB0b3JzIGFzIGE2LCBpc0Z1bmN0aW9uIGFzIGE3LCBfYXR0YWNoQ29udGV4dCBhcyBhOCwgX2NyZWF0ZVJlc29sdmVyIGFzIGE5LCBvdmVycmlkZVRleHREaXJlY3Rpb24gYXMgYUEsIF90ZXh0WCBhcyBhQiwgcmVzdG9yZVRleHREaXJlY3Rpb24gYXMgYUMsIGRyYXdQb2ludExlZ2VuZCBhcyBhRCwgZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIGFzIGFFLCBub29wIGFzIGFGLCBfc2V0TWluQW5kTWF4QnlLZXkgYXMgYUcsIG5pY2VOdW0gYXMgYUgsIGFsbW9zdFdob2xlIGFzIGFJLCBhbG1vc3RFcXVhbHMgYXMgYUosIF9kZWNpbWFsUGxhY2VzIGFzIGFLLCBUaWNrcyBhcyBhTCwgbG9nMTAgYXMgYU0sIF9sb25nZXN0VGV4dCBhcyBhTiwgX2ZpbHRlckJldHdlZW4gYXMgYU8sIF9sb29rdXAgYXMgYVAsIGlzUGF0dGVybk9yR3JhZGllbnQgYXMgYVEsIGdldEhvdmVyQ29sb3IgYXMgYVIsIGNsb25lIGFzIGFTLCBfbWVyZ2VyIGFzIGFULCBfbWVyZ2VySWYgYXMgYVUsIF9kZXByZWNhdGVkIGFzIGFWLCBfc3BsaXRLZXkgYXMgYVcsIHRvRm9udFN0cmluZyBhcyBhWCwgc3BsaW5lQ3VydmUgYXMgYVksIHNwbGluZUN1cnZlTW9ub3RvbmUgYXMgYVosIGdldFN0eWxlIGFzIGFfLCBfZGVzY3JpcHRvcnMgYXMgYWEsIG1lcmdlSWYgYXMgYWIsIHVpZCBhcyBhYywgZGVib3VuY2UgYXMgYWQsIHJldGluYVNjYWxlIGFzIGFlLCBjbGVhckNhbnZhcyBhcyBhZiwgc2V0c0VxdWFsIGFzIGFnLCBfZWxlbWVudHNFcXVhbCBhcyBhaCwgX2lzQ2xpY2tFdmVudCBhcyBhaSwgX2lzQmV0d2VlbiBhcyBhaiwgX3JlYWRWYWx1ZVRvUHJvcHMgYXMgYWssIF91cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIGFzIGFsLCBfY29tcHV0ZVNlZ21lbnRzIGFzIGFtLCBfYm91bmRTZWdtZW50cyBhcyBhbiwgX3N0ZXBwZWRJbnRlcnBvbGF0aW9uIGFzIGFvLCBfYmV6aWVySW50ZXJwb2xhdGlvbiBhcyBhcCwgX3BvaW50SW5MaW5lIGFzIGFxLCBfc3RlcHBlZExpbmVUbyBhcyBhciwgX2JlemllckN1cnZlVG8gYXMgYXMsIGRyYXdQb2ludCBhcyBhdCwgYWRkUm91bmRlZFJlY3RQYXRoIGFzIGF1LCB0b1RSQkwgYXMgYXYsIHRvVFJCTENvcm5lcnMgYXMgYXcsIF9ib3VuZFNlZ21lbnQgYXMgYXgsIF9ub3JtYWxpemVBbmdsZSBhcyBheSwgZ2V0UnRsQWRhcHRlciBhcyBheiwgaXNBcnJheSBhcyBiLCB0b0xpbmVIZWlnaHQgYXMgYjAsIFBJVEFVIGFzIGIxLCBJTkZJTklUWSBhcyBiMiwgUkFEX1BFUl9ERUcgYXMgYjMsIFFVQVJURVJfUEkgYXMgYjQsIFRXT19USElSRFNfUEkgYXMgYjUsIF9hbmdsZURpZmYgYXMgYjYsIGNvbG9yIGFzIGMsIGRlZmF1bHRzIGFzIGQsIGVmZmVjdHMgYXMgZSwgcmVzb2x2ZU9iamVjdEtleSBhcyBmLCBpc051bWJlckZpbml0ZSBhcyBnLCBkZWZpbmVkIGFzIGgsIGlzT2JqZWN0IGFzIGksIGNyZWF0ZUNvbnRleHQgYXMgaiwgaXNOdWxsT3JVbmRlZiBhcyBrLCBsaXN0ZW5BcnJheUV2ZW50cyBhcyBsLCB0b1BlcmNlbnRhZ2UgYXMgbSwgdG9EaW1lbnNpb24gYXMgbiwgZm9ybWF0TnVtYmVyIGFzIG8sIF9hbmdsZUJldHdlZW4gYXMgcCwgX2dldFN0YXJ0QW5kQ291bnRPZlZpc2libGVQb2ludHMgYXMgcSwgcmVxdWVzdEFuaW1GcmFtZSBhcyByLCBzaWduIGFzIHMsIHRvUmFkaWFucyBhcyB0LCB1bmxpc3RlbkFycmF5RXZlbnRzIGFzIHUsIHZhbHVlT3JEZWZhdWx0IGFzIHYsIF9zY2FsZVJhbmdlc0NoYW5nZWQgYXMgdywgaXNOdW1iZXIgYXMgeCwgX3BhcnNlT2JqZWN0RGF0YVJhZGlhbFNjYWxlIGFzIHksIGdldFJlbGF0aXZlUG9zaXRpb24gYXMgeiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5zZWdtZW50LmpzLm1hcFxuIiwiaW1wb3J0IHsgdmVyc2lvbiwgaXNQcm94eSwgdG9SYXcsIGRlZmluZUNvbXBvbmVudCwgcmVmLCBzaGFsbG93UmVmLCBvbk1vdW50ZWQsIG9uQmVmb3JlVW5tb3VudCwgd2F0Y2gsIGggfSBmcm9tICd2dWUnO1xuaW1wb3J0IHsgQ2hhcnQgYXMgQ2hhcnQkMSwgQmFyQ29udHJvbGxlciwgRG91Z2hudXRDb250cm9sbGVyLCBMaW5lQ29udHJvbGxlciwgUGllQ29udHJvbGxlciwgUG9sYXJBcmVhQ29udHJvbGxlciwgUmFkYXJDb250cm9sbGVyLCBCdWJibGVDb250cm9sbGVyLCBTY2F0dGVyQ29udHJvbGxlciB9IGZyb20gJ2NoYXJ0LmpzJztcblxuY29uc3QgQ29tbW9uUHJvcHMgPSB7XG4gICAgZGF0YToge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgZGVmYXVsdDogKCk9Pih7fSlcbiAgICB9LFxuICAgIHBsdWdpbnM6IHtcbiAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgIGRlZmF1bHQ6ICgpPT5bXVxuICAgIH0sXG4gICAgZGF0YXNldElkS2V5OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogXCJsYWJlbFwiXG4gICAgfSxcbiAgICB1cGRhdGVNb2RlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogdW5kZWZpbmVkXG4gICAgfVxufTtcbmNvbnN0IFByb3BzID0ge1xuICAgIHR5cGU6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgLi4uQ29tbW9uUHJvcHNcbn07XG5cbmNvbnN0IGNvbXBhdFByb3BzID0gdmVyc2lvblswXSA9PT0gXCIyXCIgPyAoaW50ZXJuYWxzLCBwcm9wcyk9Pk9iamVjdC5hc3NpZ24oaW50ZXJuYWxzLCB7XG4gICAgICAgIGF0dHJzOiBwcm9wc1xuICAgIH0pIDogKGludGVybmFscywgcHJvcHMpPT5PYmplY3QuYXNzaWduKGludGVybmFscywgcHJvcHMpO1xuZnVuY3Rpb24gdG9SYXdJZlByb3h5KG9iaikge1xuICAgIHJldHVybiBpc1Byb3h5KG9iaikgPyB0b1JhdyhvYmopIDogb2JqO1xufVxuZnVuY3Rpb24gY2xvbmVQcm94eShvYmopIHtcbiAgICBsZXQgc3JjID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB2b2lkIDAgPyBhcmd1bWVudHNbMV0gOiBvYmo7XG4gICAgcmV0dXJuIGlzUHJveHkoc3JjKSA/IG5ldyBQcm94eShvYmosIHt9KSA6IG9iajtcbn1cbmZ1bmN0aW9uIHNldE9wdGlvbnMoY2hhcnQsIG5leHRPcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnM7XG4gICAgaWYgKG9wdGlvbnMgJiYgbmV4dE9wdGlvbnMpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCBuZXh0T3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0TGFiZWxzKGN1cnJlbnREYXRhLCBuZXh0TGFiZWxzKSB7XG4gICAgY3VycmVudERhdGEubGFiZWxzID0gbmV4dExhYmVscztcbn1cbmZ1bmN0aW9uIHNldERhdGFzZXRzKGN1cnJlbnREYXRhLCBuZXh0RGF0YXNldHMsIGRhdGFzZXRJZEtleSkge1xuICAgIGNvbnN0IGFkZGVkRGF0YXNldHMgPSBbXTtcbiAgICBjdXJyZW50RGF0YS5kYXRhc2V0cyA9IG5leHREYXRhc2V0cy5tYXAoKG5leHREYXRhc2V0KT0+e1xuICAgICAgICAvLyBnaXZlbiB0aGUgbmV3IHNldCwgZmluZCBpdCdzIGN1cnJlbnQgbWF0Y2hcbiAgICAgICAgY29uc3QgY3VycmVudERhdGFzZXQgPSBjdXJyZW50RGF0YS5kYXRhc2V0cy5maW5kKChkYXRhc2V0KT0+ZGF0YXNldFtkYXRhc2V0SWRLZXldID09PSBuZXh0RGF0YXNldFtkYXRhc2V0SWRLZXldKTtcbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gb3JpZ2luYWwgdG8gdXBkYXRlLCBzbyBzaW1wbHkgYWRkIG5ldyBvbmVcbiAgICAgICAgaWYgKCFjdXJyZW50RGF0YXNldCB8fCAhbmV4dERhdGFzZXQuZGF0YSB8fCBhZGRlZERhdGFzZXRzLmluY2x1ZGVzKGN1cnJlbnREYXRhc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5uZXh0RGF0YXNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBhZGRlZERhdGFzZXRzLnB1c2goY3VycmVudERhdGFzZXQpO1xuICAgICAgICBPYmplY3QuYXNzaWduKGN1cnJlbnREYXRhc2V0LCBuZXh0RGF0YXNldCk7XG4gICAgICAgIHJldHVybiBjdXJyZW50RGF0YXNldDtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGNsb25lRGF0YShkYXRhLCBkYXRhc2V0SWRLZXkpIHtcbiAgICBjb25zdCBuZXh0RGF0YSA9IHtcbiAgICAgICAgbGFiZWxzOiBbXSxcbiAgICAgICAgZGF0YXNldHM6IFtdXG4gICAgfTtcbiAgICBzZXRMYWJlbHMobmV4dERhdGEsIGRhdGEubGFiZWxzKTtcbiAgICBzZXREYXRhc2V0cyhuZXh0RGF0YSwgZGF0YS5kYXRhc2V0cywgZGF0YXNldElkS2V5KTtcbiAgICByZXR1cm4gbmV4dERhdGE7XG59XG4vKipcbiAqIEdldCBkYXRhc2V0IGZyb20gbW91c2UgY2xpY2sgZXZlbnRcbiAqIEBwYXJhbSBjaGFydCAtIENoYXJ0LmpzIGluc3RhbmNlXG4gKiBAcGFyYW0gZXZlbnQgLSBNb3VzZSBjbGljayBldmVudFxuICogQHJldHVybnMgRGF0YXNldFxuICovIGZ1bmN0aW9uIGdldERhdGFzZXRBdEV2ZW50KGNoYXJ0LCBldmVudCkge1xuICAgIHJldHVybiBjaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGV2ZW50LCBcImRhdGFzZXRcIiwge1xuICAgICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICB9LCBmYWxzZSk7XG59XG4vKipcbiAqIEdldCBzaW5nbGUgZGF0YXNldCBlbGVtZW50IGZyb20gbW91c2UgY2xpY2sgZXZlbnRcbiAqIEBwYXJhbSBjaGFydCAtIENoYXJ0LmpzIGluc3RhbmNlXG4gKiBAcGFyYW0gZXZlbnQgLSBNb3VzZSBjbGljayBldmVudFxuICogQHJldHVybnMgRGF0YXNldFxuICovIGZ1bmN0aW9uIGdldEVsZW1lbnRBdEV2ZW50KGNoYXJ0LCBldmVudCkge1xuICAgIHJldHVybiBjaGFydC5nZXRFbGVtZW50c0F0RXZlbnRGb3JNb2RlKGV2ZW50LCBcIm5lYXJlc3RcIiwge1xuICAgICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICB9LCBmYWxzZSk7XG59XG4vKipcbiAqIEdldCBhbGwgZGF0YXNldCBlbGVtZW50cyBmcm9tIG1vdXNlIGNsaWNrIGV2ZW50XG4gKiBAcGFyYW0gY2hhcnQgLSBDaGFydC5qcyBpbnN0YW5jZVxuICogQHBhcmFtIGV2ZW50IC0gTW91c2UgY2xpY2sgZXZlbnRcbiAqIEByZXR1cm5zIERhdGFzZXRcbiAqLyBmdW5jdGlvbiBnZXRFbGVtZW50c0F0RXZlbnQoY2hhcnQsIGV2ZW50KSB7XG4gICAgcmV0dXJuIGNoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZXZlbnQsIFwiaW5kZXhcIiwge1xuICAgICAgICBpbnRlcnNlY3Q6IHRydWVcbiAgICB9LCBmYWxzZSk7XG59XG5cbmNvbnN0IENoYXJ0ID0gZGVmaW5lQ29tcG9uZW50KHtcbiAgICBwcm9wczogUHJvcHMsXG4gICAgc2V0dXAgKHByb3BzLCBwYXJhbSkge1xuICAgICAgICBsZXQgeyBleHBvc2UgIH0gPSBwYXJhbTtcbiAgICAgICAgY29uc3QgY2FudmFzUmVmID0gcmVmKG51bGwpO1xuICAgICAgICBjb25zdCBjaGFydFJlZiA9IHNoYWxsb3dSZWYobnVsbCk7XG4gICAgICAgIGV4cG9zZSh7XG4gICAgICAgICAgICBjaGFydDogY2hhcnRSZWZcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlbmRlckNoYXJ0ID0gKCk9PntcbiAgICAgICAgICAgIGlmICghY2FudmFzUmVmLnZhbHVlKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCB7IHR5cGUgLCBkYXRhICwgb3B0aW9ucyAsIHBsdWdpbnMgLCBkYXRhc2V0SWRLZXkgIH0gPSBwcm9wcztcbiAgICAgICAgICAgIGNvbnN0IGNsb25lZERhdGEgPSBjbG9uZURhdGEoZGF0YSwgZGF0YXNldElkS2V5KTtcbiAgICAgICAgICAgIGNvbnN0IHByb3hpZWREYXRhID0gY2xvbmVQcm94eShjbG9uZWREYXRhLCBkYXRhKTtcbiAgICAgICAgICAgIGNoYXJ0UmVmLnZhbHVlID0gbmV3IENoYXJ0JDEoY2FudmFzUmVmLnZhbHVlLCB7XG4gICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBwcm94aWVkRGF0YSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnNcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsdWdpbnNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBkZXN0cm95Q2hhcnQgPSAoKT0+e1xuICAgICAgICAgICAgY29uc3QgY2hhcnQgPSB0b1JhdyhjaGFydFJlZi52YWx1ZSk7XG4gICAgICAgICAgICBpZiAoY2hhcnQpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgY2hhcnRSZWYudmFsdWUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB1cGRhdGUgPSAoY2hhcnQpPT57XG4gICAgICAgICAgICBjaGFydC51cGRhdGUocHJvcHMudXBkYXRlTW9kZSk7XG4gICAgICAgIH07XG4gICAgICAgIG9uTW91bnRlZChyZW5kZXJDaGFydCk7XG4gICAgICAgIG9uQmVmb3JlVW5tb3VudChkZXN0cm95Q2hhcnQpO1xuICAgICAgICB3YXRjaChbXG4gICAgICAgICAgICAoKT0+cHJvcHMub3B0aW9ucyxcbiAgICAgICAgICAgICgpPT5wcm9wcy5kYXRhXG4gICAgICAgIF0sIChwYXJhbSwgcGFyYW0xKT0+e1xuICAgICAgICAgICAgbGV0IFtuZXh0T3B0aW9uc1Byb3h5LCBuZXh0RGF0YVByb3h5XSA9IHBhcmFtLCBbcHJldk9wdGlvbnNQcm94eSwgcHJldkRhdGFQcm94eV0gPSBwYXJhbTE7XG4gICAgICAgICAgICBjb25zdCBjaGFydCA9IHRvUmF3KGNoYXJ0UmVmLnZhbHVlKTtcbiAgICAgICAgICAgIGlmICghY2hhcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc2hvdWxkVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAobmV4dE9wdGlvbnNQcm94eSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHRPcHRpb25zID0gdG9SYXdJZlByb3h5KG5leHRPcHRpb25zUHJveHkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZPcHRpb25zID0gdG9SYXdJZlByb3h5KHByZXZPcHRpb25zUHJveHkpO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0T3B0aW9ucyAmJiBuZXh0T3B0aW9ucyAhPT0gcHJldk9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9ucyhjaGFydCwgbmV4dE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBzaG91bGRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0RGF0YVByb3h5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dExhYmVscyA9IHRvUmF3SWZQcm94eShuZXh0RGF0YVByb3h5LmxhYmVscyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkxhYmVscyA9IHRvUmF3SWZQcm94eShwcmV2RGF0YVByb3h5LmxhYmVscyk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dERhdGFzZXRzID0gdG9SYXdJZlByb3h5KG5leHREYXRhUHJveHkuZGF0YXNldHMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXZEYXRhc2V0cyA9IHRvUmF3SWZQcm94eShwcmV2RGF0YVByb3h5LmRhdGFzZXRzKTtcbiAgICAgICAgICAgICAgICBpZiAobmV4dExhYmVscyAhPT0gcHJldkxhYmVscykge1xuICAgICAgICAgICAgICAgICAgICBzZXRMYWJlbHMoY2hhcnQuY29uZmlnLmRhdGEsIG5leHRMYWJlbHMpO1xuICAgICAgICAgICAgICAgICAgICBzaG91bGRVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dERhdGFzZXRzICYmIG5leHREYXRhc2V0cyAhPT0gcHJldkRhdGFzZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldERhdGFzZXRzKGNoYXJ0LmNvbmZpZy5kYXRhLCBuZXh0RGF0YXNldHMsIHByb3BzLmRhdGFzZXRJZEtleSk7XG4gICAgICAgICAgICAgICAgICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZShjaGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIGRlZXA6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoKT0+e1xuICAgICAgICAgICAgcmV0dXJuIGgoXCJjYW52YXNcIiwge1xuICAgICAgICAgICAgICAgIHJlZjogY2FudmFzUmVmXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlVHlwZWRDaGFydCh0eXBlLCByZWdpc3RlcmFibGVzKSB7XG4gICAgQ2hhcnQkMS5yZWdpc3RlcihyZWdpc3RlcmFibGVzKTtcbiAgICByZXR1cm4gZGVmaW5lQ29tcG9uZW50KHtcbiAgICAgICAgcHJvcHM6IENvbW1vblByb3BzLFxuICAgICAgICBzZXR1cCAocHJvcHMsIHBhcmFtKSB7XG4gICAgICAgICAgICBsZXQgeyBleHBvc2UgIH0gPSBwYXJhbTtcbiAgICAgICAgICAgIGNvbnN0IHJlZiA9IHNoYWxsb3dSZWYobnVsbCk7XG4gICAgICAgICAgICBjb25zdCByZWZvcndhcmRSZWYgPSAoY2hhcnRSZWYpPT57XG4gICAgICAgICAgICAgICAgcmVmLnZhbHVlID0gY2hhcnRSZWY/LmNoYXJ0O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGV4cG9zZSh7XG4gICAgICAgICAgICAgICAgY2hhcnQ6IHJlZlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKCk9PntcbiAgICAgICAgICAgICAgICByZXR1cm4gaChDaGFydCwgY29tcGF0UHJvcHMoe1xuICAgICAgICAgICAgICAgICAgICByZWY6IHJlZm9yd2FyZFJlZlxuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgLi4ucHJvcHNcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSk7XG59XG5jb25zdCBCYXIgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydChcImJhclwiLCBCYXJDb250cm9sbGVyKTtcbmNvbnN0IERvdWdobnV0ID0gLyogI19fUFVSRV9fICovIGNyZWF0ZVR5cGVkQ2hhcnQoXCJkb3VnaG51dFwiLCBEb3VnaG51dENvbnRyb2xsZXIpO1xuY29uc3QgTGluZSA9IC8qICNfX1BVUkVfXyAqLyBjcmVhdGVUeXBlZENoYXJ0KFwibGluZVwiLCBMaW5lQ29udHJvbGxlcik7XG5jb25zdCBQaWUgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydChcInBpZVwiLCBQaWVDb250cm9sbGVyKTtcbmNvbnN0IFBvbGFyQXJlYSA9IC8qICNfX1BVUkVfXyAqLyBjcmVhdGVUeXBlZENoYXJ0KFwicG9sYXJBcmVhXCIsIFBvbGFyQXJlYUNvbnRyb2xsZXIpO1xuY29uc3QgUmFkYXIgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydChcInJhZGFyXCIsIFJhZGFyQ29udHJvbGxlcik7XG5jb25zdCBCdWJibGUgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydChcImJ1YmJsZVwiLCBCdWJibGVDb250cm9sbGVyKTtcbmNvbnN0IFNjYXR0ZXIgPSAvKiAjX19QVVJFX18gKi8gY3JlYXRlVHlwZWRDaGFydChcInNjYXR0ZXJcIiwgU2NhdHRlckNvbnRyb2xsZXIpO1xuXG5leHBvcnQgeyBCYXIsIEJ1YmJsZSwgQ2hhcnQsIERvdWdobnV0LCBMaW5lLCBQaWUsIFBvbGFyQXJlYSwgUmFkYXIsIFNjYXR0ZXIsIGNyZWF0ZVR5cGVkQ2hhcnQsIGdldERhdGFzZXRBdEV2ZW50LCBnZXRFbGVtZW50QXRFdmVudCwgZ2V0RWxlbWVudHNBdEV2ZW50IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJyb3VuZCIsInYiLCJsaW0iLCJsIiwiaCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJwMmIiLCJiMnAiLCJuMmIiLCJiMm4iLCJuMnAiLCJtYXAkMSIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsImEiLCJiIiwiYyIsImQiLCJlIiwiZiIsImhleCIsImgxIiwiaDIiLCJlcSIsImlzU2hvcnQiLCJyIiwiZyIsImhleFBhcnNlIiwic3RyIiwicmV0IiwibGVuIiwibGVuZ3RoIiwiYWxwaGEiLCJoZXhTdHJpbmciLCJ1bmRlZmluZWQiLCJIVUVfUkUiLCJoc2wycmdibiIsInMiLCJuIiwiayIsImhzdjJyZ2JuIiwiaHdiMnJnYm4iLCJ3IiwicmdiIiwiaSIsInJnYjJoc2wiLCJodWVWYWx1ZSIsImNhbGxuIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwiaHNsMnJnYiIsImh3YjJyZ2IiLCJoc3YycmdiIiwiaHVlIiwiaHVlUGFyc2UiLCJtIiwiZXhlYyIsInAxIiwicDIiLCJyb3RhdGUiLCJkZWciLCJoc2xTdHJpbmciLCJ4IiwiWiIsIlkiLCJYIiwiVyIsIlYiLCJVIiwiVCIsIlMiLCJSIiwiUSIsIlAiLCJPIiwiTiIsIk0iLCJMIiwiSyIsIkciLCJIIiwiSSIsIkoiLCJuYW1lcyQxIiwiT2ljZVhlIiwiYW50aXF1ZXdFdGUiLCJhcXVhIiwiYXF1YW1hclJlIiwiYXp1WSIsImJlaWdlIiwiYmlzcXVlIiwiYmxhY2siLCJibGFuS2VkT21vbmQiLCJYZSIsIlhldmlUZXQiLCJiUHduIiwiYnVybHl3b29kIiwiY2FNdFhlIiwiS2FydFl1c2UiLCJLb2NUYXRlIiwiY1NPIiwiY1NuZmxvd2VyWGUiLCJjU25zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJ4WGUiLCJ4Y3lhbiIsInhnVE1uUGQiLCJ4V2F5IiwieGdZRiIsInhnWXkiLCJ4a2hha2kiLCJ4bWFnRnRhIiwieFRpdmVnWUYiLCJ4U2FuZ2UiLCJ4U2NFZCIsInhZZCIsInhzT21vbiIsInhzSGdZRiIsInhVWGUiLCJ4VVdheSIsInhVZ1l5IiwieFFlIiwieHZpVGV0IiwiZEFwcFJrIiwiZEFwc2t5WGUiLCJkaW1XYXkiLCJkaW1nWXkiLCJkb2RnZXJYZSIsImZpWWJyaWNrIiwiZmxTT3dFdGUiLCJmb1lzdFdBbiIsImZ1S3NpYSIsImdhUnNiU28iLCJnaG9zdHdFdGUiLCJnVGQiLCJnVE1uUGQiLCJXYXkiLCJnWUYiLCJnWUZMdyIsImdZeSIsImhvbmV5TXciLCJob3RwUmsiLCJSZGlhbllkIiwiUmRpZ28iLCJpdlN5Iiwia2hha2kiLCJsYXZGTXIiLCJsYXZGTXJYc2giLCJsYXduZ1lGIiwiTm1vbmNFZmZvbiIsIlpYZSIsIlpjU08iLCJaY3lhbiIsIlpnVE1uUGRMdyIsIlpXYXkiLCJaZ1lGIiwiWmdZeSIsIlpwUmsiLCJac09tb24iLCJac0hnWUYiLCJac2t5WGUiLCJaVVdheSIsIlpVZ1l5IiwiWnN0QWxYZSIsIlpMdyIsImxpbWUiLCJsaW1lZ1lGIiwibFJGIiwibWFnRnRhIiwibWFQb24iLCJWYXF1YW1hclJlIiwiVlhlIiwiVlNjRWQiLCJWcHVycE4iLCJWc0hnWUYiLCJWVVhlIiwiVnNwclJnZ1lGIiwiVlFlIiwiVnZpVGV0WWQiLCJtaWRuaWdodFhlIiwibVJ0Y1lhbSIsIm1pc3R5UHNlIiwibW9jY2FzUiIsIm5hdmFqb3dFdGUiLCJuYXZ5IiwiVGRsYWNlIiwiVGl2ZSIsIlRpdmVkQmIiLCJTYW5nZSIsIlNhbmdlWWQiLCJTY0VkIiwicE9lZ1RNblBkIiwicE9lZ1lGIiwicE9lUWUiLCJwT2V2aVRldFlkIiwicGFwYXlhd0VwIiwicEhLcHVmZiIsInBlcnUiLCJwUmsiLCJwbHVtIiwicG93TXJYZSIsInB1cnBOIiwiWWJlY2NhcHVycE4iLCJZZCIsIlBzeWJyb3duIiwiUHlPWGUiLCJzYWRkTmJQd24iLCJzT21vbiIsInNhbmR5YlB3biIsInNIZ1lGIiwic0hzaGVsbCIsInNpRm5hIiwic2lsdmVyIiwic2t5WGUiLCJVWGUiLCJVV2F5IiwiVWdZeSIsInNub3ciLCJzcHJSZ2dZRiIsInN0QWxYZSIsInRhbiIsInRlTyIsInRFc3ROIiwidG9tYXRvIiwiUWUiLCJ2aVRldCIsIkpIdCIsIndFdGUiLCJ3RXRlc21va2UiLCJMdyIsIkx3Z1lGIiwibmFtZXMiLCJuYW1lUGFyc2UiLCJ1bnBhY2tlZCIsImtleXMiLCJPYmplY3QiLCJ0a2V5cyIsImoiLCJvayIsIm5rIiwicmVwbGFjZSIsInBhcnNlSW50IiwidW5wYWNrIiwidHJhbnNwYXJlbnQiLCJ0b0xvd2VyQ2FzZSIsIlJHQl9SRSIsInJnYlBhcnNlIiwicmdiU3RyaW5nIiwidG8iLCJwb3ciLCJmcm9tIiwibW9kSFNMIiwicmF0aW8iLCJ0bXAiLCJjbG9uZSIsInByb3RvIiwiYXNzaWduIiwiZnJvbU9iamVjdCIsImlucHV0IiwiQ29sb3IiLCJjb25zdHJ1Y3RvciIsInR5cGUiLCJjaGFyQXQiLCJ0aGlzIiwiX3JnYiIsIl92YWxpZCIsInZhbGlkIiwib2JqIiwibWl4IiwiY29sb3IiLCJ3ZWlnaHQiLCJjMSIsImMyIiwidzIiLCJwIiwidzEiLCJpbnRlcnBvbGF0ZSIsInQiLCJyZ2IxIiwicmdiMiIsImNsZWFyZXIiLCJncmV5c2NhbGUiLCJ2YWwiLCJvcGFxdWVyIiwibmVnYXRlIiwibGlnaHRlbiIsImRhcmtlbiIsInNhdHVyYXRlIiwiZGVzYXR1cmF0ZSIsImluZGV4X2VzbSIsIkFuaW1hdG9yIiwiX3JlcXVlc3QiLCJfY2hhcnRzIiwiTWFwIiwiX3J1bm5pbmciLCJfbGFzdERhdGUiLCJfbm90aWZ5IiwiY2hhcnQiLCJhbmltcyIsImRhdGUiLCJjYWxsYmFja3MiLCJsaXN0ZW5lcnMiLCJudW1TdGVwcyIsImR1cmF0aW9uIiwiZm9yRWFjaCIsImZuIiwiaW5pdGlhbCIsImN1cnJlbnRTdGVwIiwic3RhcnQiLCJfcmVmcmVzaCIsImNhbGwiLCJ3aW5kb3ciLCJfdXBkYXRlIiwiRGF0ZSIsIm5vdyIsInJlbWFpbmluZyIsInJ1bm5pbmciLCJpdGVtcyIsIml0ZW0iLCJkcmF3IiwiX2FjdGl2ZSIsIl90b3RhbCIsInRpY2siLCJwb3AiLCJfZ2V0QW5pbXMiLCJjaGFydHMiLCJnZXQiLCJjb21wbGV0ZSIsInByb2dyZXNzIiwic2V0IiwibGlzdGVuIiwiZXZlbnQiLCJjYiIsInB1c2giLCJhZGQiLCJoYXMiLCJyZWR1Y2UiLCJhY2MiLCJjdXIiLCJfZHVyYXRpb24iLCJzdG9wIiwiY2FuY2VsIiwicmVtb3ZlIiwiZGVsZXRlIiwiYW5pbWF0b3IiLCJpbnRlcnBvbGF0b3JzIiwiYm9vbGVhbiIsImZhY3RvciIsImMwIiwibnVtYmVyIiwiQW5pbWF0aW9uIiwiY2ZnIiwidGFyZ2V0IiwicHJvcCIsImN1cnJlbnRWYWx1ZSIsIl9mbiIsIl9lYXNpbmciLCJlYXNpbmciLCJsaW5lYXIiLCJfc3RhcnQiLCJmbG9vciIsImRlbGF5IiwiX2xvb3AiLCJsb29wIiwiX3RhcmdldCIsIl9wcm9wIiwiX2Zyb20iLCJfdG8iLCJfcHJvbWlzZXMiLCJhY3RpdmUiLCJ1cGRhdGUiLCJlbGFwc2VkIiwicmVtYWluIiwid2FpdCIsInByb21pc2VzIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsInJlc29sdmVkIiwibWV0aG9kIiwiQW5pbWF0aW9ucyIsImNvbmZpZyIsIl9jaGFydCIsIl9wcm9wZXJ0aWVzIiwiY29uZmlndXJlIiwiYW5pbWF0aW9uT3B0aW9ucyIsImFuaW1hdGlvbiIsImFuaW1hdGVkUHJvcHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwia2V5Iiwib3B0aW9uIiwicHJvcGVydGllcyIsIl9hbmltYXRlT3B0aW9ucyIsInZhbHVlcyIsIm5ld09wdGlvbnMiLCJvcHRpb25zIiwiJHNoYXJlZCIsIiRhbmltYXRpb25zIiwicmVzb2x2ZVRhcmdldE9wdGlvbnMiLCJhbmltYXRpb25zIiwiX2NyZWF0ZUFuaW1hdGlvbnMiLCJhbmltIiwiYWxsIiwiYXdhaXRBbGwiLCJ0aGVuIiwicHJvcHMiLCJ2YWx1ZSIsInNpemUiLCJzY2FsZUNsaXAiLCJzY2FsZSIsImFsbG93ZWRPdmVyZmxvdyIsIm9wdHMiLCJyZXZlcnNlIiwiZW5kIiwiZ2V0U29ydGVkRGF0YXNldEluZGljZXMiLCJmaWx0ZXJWaXNpYmxlIiwibWV0YXNldHMiLCJfZ2V0U29ydGVkRGF0YXNldE1ldGFzIiwiaWxlbiIsImluZGV4IiwiYXBwbHlTdGFjayIsInN0YWNrIiwiZHNJbmRleCIsInNpbmdsZU1vZGUiLCJtb2RlIiwiZGF0YXNldEluZGV4Iiwib3RoZXJWYWx1ZSIsImlzU3RhY2tlZCIsIm1ldGEiLCJzdGFja2VkIiwiZ2V0T3JDcmVhdGVTdGFjayIsInN0YWNrcyIsInN0YWNrS2V5IiwiaW5kZXhWYWx1ZSIsInN1YlN0YWNrIiwiZ2V0TGFzdEluZGV4SW5TdGFjayIsInZTY2FsZSIsInBvc2l0aXZlIiwiZ2V0TWF0Y2hpbmdWaXNpYmxlTWV0YXMiLCJ1cGRhdGVTdGFja3MiLCJjb250cm9sbGVyIiwicGFyc2VkIiwiX2NhY2hlZE1ldGEiLCJfc3RhY2tzIiwiaVNjYWxlIiwiaUF4aXMiLCJheGlzIiwidkF4aXMiLCJpbmRleFNjYWxlIiwidmFsdWVTY2FsZSIsImlkIiwiZ2V0U3RhY2tLZXkiLCJfdG9wIiwiX2JvdHRvbSIsIl92aXN1YWxWYWx1ZXMiLCJnZXRGaXJzdFNjYWxlSWQiLCJzY2FsZXMiLCJmaWx0ZXIiLCJzaGlmdCIsImNsZWFyU3RhY2tzIiwiX3BhcnNlZCIsImlzRGlyZWN0VXBkYXRlTW9kZSIsImNsb25lSWZOb3RTaGFyZWQiLCJjYWNoZWQiLCJzaGFyZWQiLCJEYXRhc2V0Q29udHJvbGxlciIsInN0YXRpYyIsIl9jdHgiLCJjdHgiLCJfY2FjaGVkRGF0YU9wdHMiLCJnZXRNZXRhIiwiX3R5cGUiLCJfcGFyc2luZyIsIl9kYXRhIiwiX29iamVjdERhdGEiLCJfc2hhcmVkT3B0aW9ucyIsIl9kcmF3U3RhcnQiLCJfZHJhd0NvdW50IiwiZW5hYmxlT3B0aW9uU2hhcmluZyIsInN1cHBvcnRzRGVjaW1hdGlvbiIsIiRjb250ZXh0IiwiX3N5bmNMaXN0IiwiZGF0YXNldEVsZW1lbnRUeXBlIiwiZGF0YUVsZW1lbnRUeXBlIiwiaW5pdGlhbGl6ZSIsImxpbmtTY2FsZXMiLCJfc3RhY2tlZCIsImFkZEVsZW1lbnRzIiwiZmlsbCIsImlzUGx1Z2luRW5hYmxlZCIsImNvbnNvbGUiLCJ3YXJuIiwidXBkYXRlSW5kZXgiLCJkYXRhc2V0IiwiZ2V0RGF0YXNldCIsImNob29zZUlkIiwieSIsInhpZCIsInhBeGlzSUQiLCJ5aWQiLCJ5QXhpc0lEIiwicmlkIiwickF4aXNJRCIsImluZGV4QXhpcyIsImlpZCIsImlBeGlzSUQiLCJ2aWQiLCJ2QXhpc0lEIiwieFNjYWxlIiwiZ2V0U2NhbGVGb3JJZCIsInlTY2FsZSIsInJTY2FsZSIsImRhdGEiLCJkYXRhc2V0cyIsImdldERhdGFzZXRNZXRhIiwic2NhbGVJRCIsIl9nZXRPdGhlclNjYWxlIiwicmVzZXQiLCJfZGVzdHJveSIsInUiLCJfZGF0YUNoZWNrIiwiYWRhdGEiLCJjb252ZXJ0T2JqZWN0RGF0YVRvQXJyYXkiLCJpc0V4dGVuc2libGUiLCJidWlsZE9yVXBkYXRlRWxlbWVudHMiLCJyZXNldE5ld0VsZW1lbnRzIiwic3RhY2tDaGFuZ2VkIiwib2xkU3RhY2tlZCIsIl9yZXN5bmNFbGVtZW50cyIsInNjb3BlS2V5cyIsImRhdGFzZXRTY29wZUtleXMiLCJzY29wZXMiLCJnZXRPcHRpb25TY29wZXMiLCJjcmVhdGVSZXNvbHZlciIsImdldENvbnRleHQiLCJwYXJzaW5nIiwicGFyc2UiLCJjb3VudCIsInNvcnRlZCIsIl9zb3J0ZWQiLCJwcmV2IiwicGFyc2VBcnJheURhdGEiLCJwYXJzZU9iamVjdERhdGEiLCJwYXJzZVByaW1pdGl2ZURhdGEiLCJpc05vdEluT3JkZXJDb21wYXJlZFRvUHJldiIsImxhYmVscyIsImdldExhYmVscyIsInNpbmdsZVNjYWxlIiwieEF4aXNLZXkiLCJ5QXhpc0tleSIsImdldFBhcnNlZCIsImdldERhdGFFbGVtZW50IiwidXBkYXRlUmFuZ2VGcm9tUGFyc2VkIiwicmFuZ2UiLCJwYXJzZWRWYWx1ZSIsIk5hTiIsImdldE1pbk1heCIsImNhblN0YWNrIiwib3RoZXJTY2FsZSIsImhpZGRlbiIsImNyZWF0ZVN0YWNrIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJORUdBVElWRV9JTkZJTklUWSIsIm90aGVyTWluIiwib3RoZXJNYXgiLCJtaW5EZWZpbmVkIiwibWF4RGVmaW5lZCIsImdldFVzZXJCb3VuZHMiLCJfc2tpcCIsImdldEFsbFBhcnNlZFZhbHVlcyIsImdldE1heE92ZXJmbG93IiwiZ2V0TGFiZWxBbmRWYWx1ZSIsImxhYmVsIiwiZ2V0TGFiZWxGb3JWYWx1ZSIsIl9jbGlwIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiZGlzYWJsZWQiLCJ0b0NsaXAiLCJjbGlwIiwiZGVmYXVsdENsaXAiLCJlbGVtZW50cyIsImFyZWEiLCJjaGFydEFyZWEiLCJkcmF3QWN0aXZlRWxlbWVudHNPblRvcCIsImVsZW1lbnQiLCJnZXRTdHlsZSIsInJlc29sdmVEYXRhc2V0RWxlbWVudE9wdGlvbnMiLCJyZXNvbHZlRGF0YUVsZW1lbnRPcHRpb25zIiwiY29udGV4dCIsInBhcmVudCIsImRhdGFJbmRleCIsInJhdyIsImNyZWF0ZURhdGFDb250ZXh0IiwiY3JlYXRlRGF0YXNldENvbnRleHQiLCJfcmVzb2x2ZUVsZW1lbnRPcHRpb25zIiwiZWxlbWVudFR5cGUiLCJjYWNoZSIsImNhY2hlS2V5Iiwic2hhcmluZyIsImRhdGFzZXRFbGVtZW50U2NvcGVLZXlzIiwicHJlZml4ZXMiLCJyZXNvbHZlTmFtZWRPcHRpb25zIiwiZnJlZXplIiwiX3Jlc29sdmVBbmltYXRpb25zIiwidHJhbnNpdGlvbiIsImRhdGFzZXRBbmltYXRpb25TY29wZUtleXMiLCJfY2FjaGVhYmxlIiwiZ2V0U2hhcmVkT3B0aW9ucyIsImluY2x1ZGVPcHRpb25zIiwic2hhcmVkT3B0aW9ucyIsIl9hbmltYXRpb25zRGlzYWJsZWQiLCJfZ2V0U2hhcmVkT3B0aW9ucyIsImZpcnN0T3B0cyIsInByZXZpb3VzbHlTaGFyZWRPcHRpb25zIiwidXBkYXRlU2hhcmVkT3B0aW9ucyIsInVwZGF0ZUVsZW1lbnQiLCJfc2V0U3R5bGUiLCJyZW1vdmVIb3ZlclN0eWxlIiwic2V0SG92ZXJTdHlsZSIsIl9yZW1vdmVEYXRhc2V0SG92ZXJTdHlsZSIsIl9zZXREYXRhc2V0SG92ZXJTdHlsZSIsImFyZzEiLCJhcmcyIiwibnVtTWV0YSIsIm51bURhdGEiLCJfaW5zZXJ0RWxlbWVudHMiLCJfcmVtb3ZlRWxlbWVudHMiLCJtb3ZlIiwiYXJyIiwidXBkYXRlRWxlbWVudHMiLCJyZW1vdmVkIiwic3BsaWNlIiwiX3N5bmMiLCJhcmdzIiwiX2RhdGFDaGFuZ2VzIiwiX29uRGF0YVB1c2giLCJhcmd1bWVudHMiLCJfb25EYXRhUG9wIiwiX29uRGF0YVNoaWZ0IiwiX29uRGF0YVNwbGljZSIsIm5ld0NvdW50IiwiX29uRGF0YVVuc2hpZnQiLCJjb21wdXRlTWluU2FtcGxlU2l6ZSIsIl9jYWNoZSIsIiRiYXIiLCJ2aXNpYmxlTWV0YXMiLCJjb25jYXQiLCJfIiwic29ydCIsImdldEFsbFNjYWxlVmFsdWVzIiwiY3VyciIsIl9sZW5ndGgiLCJ1cGRhdGVNaW5BbmRQcmV2IiwiYWJzIiwiZ2V0UGl4ZWxGb3JWYWx1ZSIsInRpY2tzIiwiZ2V0UGl4ZWxGb3JUaWNrIiwicGFyc2VWYWx1ZSIsImVudHJ5Iiwic3RhcnRWYWx1ZSIsImVuZFZhbHVlIiwiYmFyU3RhcnQiLCJiYXJFbmQiLCJfY3VzdG9tIiwicGFyc2VGbG9hdEJhciIsInBhcnNlQXJyYXlPclByaW1pdGl2ZSIsImlzRmxvYXRCYXIiLCJjdXN0b20iLCJzZXRCb3JkZXJTa2lwcGVkIiwiZWRnZSIsImJvcmRlclNraXBwZWQiLCJob3Jpem9udGFsIiwiYmFzZSIsImJvcmRlclByb3BzIiwiZW5hYmxlQm9yZGVyUmFkaXVzIiwicGFyc2VFZGdlIiwib3JpZyIsInYxIiwidjIiLCJzdGFydEVuZCIsInNldEluZmxhdGVBbW91bnQiLCJpbmZsYXRlQW1vdW50IiwiQmFyQ29udHJvbGxlciIsImNhdGVnb3J5UGVyY2VudGFnZSIsImJhclBlcmNlbnRhZ2UiLCJncm91cGVkIiwibnVtYmVycyIsIl9pbmRleF8iLCJvZmZzZXQiLCJncmlkIiwiX3ZhbHVlXyIsImJlZ2luQXRaZXJvIiwiaUF4aXNLZXkiLCJ2QXhpc0tleSIsInN1cGVyIiwiYmFycyIsImdldEJhc2VQaXhlbCIsImlzSG9yaXpvbnRhbCIsInJ1bGVyIiwiX2dldFJ1bGVyIiwidnBpeGVscyIsImhlYWQiLCJfY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCJpcGl4ZWxzIiwiX2NhbGN1bGF0ZUJhckluZGV4UGl4ZWxzIiwiY2VudGVyIiwiaGVpZ2h0Iiwid2lkdGgiLCJfZ2V0U3RhY2tzIiwibGFzdCIsInNraXBOdWxsIiwiaXNOYU4iLCJpbmRleE9mIiwiX2dldFN0YWNrQ291bnQiLCJfZ2V0U3RhY2tJbmRleCIsIm5hbWUiLCJwaXhlbHMiLCJiYXJUaGlja25lc3MiLCJfc3RhcnRQaXhlbCIsIl9lbmRQaXhlbCIsInN0YWNrQ291bnQiLCJiYXNlVmFsdWUiLCJtaW5CYXJMZW5ndGgiLCJhY3R1YWxCYXNlIiwiZmxvYXRpbmciLCJnZXREYXRhVmlzaWJpbGl0eSIsImJhclNpZ24iLCJzdGFydFBpeGVsIiwiZ2V0UGl4ZWxGb3JEZWNpbWFsIiwiZW5kUGl4ZWwiLCJnZXRWYWx1ZUZvclBpeGVsIiwiaGFsZkdyaWQiLCJnZXRMaW5lV2lkdGhGb3JWYWx1ZSIsIm1heEJhclRoaWNrbmVzcyIsIkluZmluaXR5IiwibmV4dCIsInBlcmNlbnQiLCJjaHVuayIsImNvbXB1dGVGbGV4Q2F0ZWdvcnlUcmFpdHMiLCJ0aGlja25lc3MiLCJjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMiLCJzdGFja0luZGV4IiwicmVjdHMiLCJCdWJibGVDb250cm9sbGVyIiwicmFkaXVzIiwicG9pbnRzIiwicG9pbnQiLCJpUGl4ZWwiLCJ2UGl4ZWwiLCJza2lwIiwiRG91Z2hudXRDb250cm9sbGVyIiwiYW5pbWF0ZVJvdGF0ZSIsImFuaW1hdGVTY2FsZSIsImN1dG91dCIsInJvdGF0aW9uIiwiY2lyY3VtZmVyZW5jZSIsInNwYWNpbmciLCJfc2NyaXB0YWJsZSIsIl9pbmRleGFibGUiLCJzdGFydHNXaXRoIiwiYXNwZWN0UmF0aW8iLCJwbHVnaW5zIiwibGVnZW5kIiwiZ2VuZXJhdGVMYWJlbHMiLCJwb2ludFN0eWxlIiwic3R5bGUiLCJ0ZXh0IiwiZmlsbFN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwic3Ryb2tlU3R5bGUiLCJib3JkZXJDb2xvciIsImZvbnRDb2xvciIsImxpbmVXaWR0aCIsImJvcmRlcldpZHRoIiwib25DbGljayIsImxlZ2VuZEl0ZW0iLCJ0b2dnbGVEYXRhVmlzaWJpbGl0eSIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImdldHRlciIsIl9nZXRSb3RhdGlvbiIsIl9nZXRDaXJjdW1mZXJlbmNlIiwiX2dldFJvdGF0aW9uRXh0ZW50cyIsImlzRGF0YXNldFZpc2libGUiLCJhcmNzIiwiZ2V0TWF4Qm9yZGVyV2lkdGgiLCJnZXRNYXhPZmZzZXQiLCJtYXhTaXplIiwiY2hhcnRXZWlnaHQiLCJfZ2V0UmluZ1dlaWdodCIsInJhdGlvWCIsInJhdGlvWSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsInN0YXJ0WCIsImNvcyIsInN0YXJ0WSIsInNpbiIsImVuZFgiLCJlbmRZIiwiY2FsY01heCIsImFuZ2xlIiwiY2FsY01pbiIsIm1heFgiLCJtYXhZIiwibWluWCIsIm1pblkiLCJnZXRSYXRpb0FuZE9mZnNldCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwibWF4UmFkaXVzIiwicmFkaXVzTGVuZ3RoIiwiX2dldFZpc2libGVEYXRhc2V0V2VpZ2h0VG90YWwiLCJ0b3RhbCIsImNhbGN1bGF0ZVRvdGFsIiwiX2dldFJpbmdXZWlnaHRPZmZzZXQiLCJfY2lyY3VtZmVyZW5jZSIsImNhbGN1bGF0ZUNpcmN1bWZlcmVuY2UiLCJhbmltYXRpb25PcHRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJhcmMiLCJtZXRhRGF0YSIsImxvY2FsZSIsImJvcmRlckFsaWduIiwiaG92ZXJCb3JkZXJXaWR0aCIsImhvdmVyT2Zmc2V0IiwicmluZ1dlaWdodE9mZnNldCIsIkxpbmVDb250cm9sbGVyIiwic2hvd0xpbmUiLCJzcGFuR2FwcyIsImxpbmUiLCJfZGF0YXNldCIsImFuaW1hdGlvbnNEaXNhYmxlZCIsIl9kYXRhc2V0SW5kZXgiLCJfZGVjaW1hdGVkIiwic2VnbWVudCIsImFuaW1hdGVkIiwibWF4R2FwTGVuZ3RoIiwiZGlyZWN0VXBkYXRlIiwicG9pbnRzQ291bnQiLCJwcmV2UGFyc2VkIiwibnVsbERhdGEiLCJib3JkZXIiLCJmaXJzdFBvaW50IiwibGFzdFBvaW50IiwidXBkYXRlQ29udHJvbFBvaW50cyIsIlBvbGFyQXJlYUNvbnRyb2xsZXIiLCJhbmdsZUxpbmVzIiwiZGlzcGxheSIsImNpcmN1bGFyIiwicG9pbnRMYWJlbHMiLCJiaW5kIiwiX3VwZGF0ZVJhZGl1cyIsIm1pblNpemUiLCJjdXRvdXRQZXJjZW50YWdlIiwiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsInhDZW50ZXIiLCJ5Q2VudGVyIiwiZGF0YXNldFN0YXJ0QW5nbGUiLCJnZXRJbmRleEFuZ2xlIiwiZGVmYXVsdEFuZ2xlIiwiY291bnRWaXNpYmxlRWxlbWVudHMiLCJfY29tcHV0ZUFuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJQaWVDb250cm9sbGVyIiwiUmFkYXJDb250cm9sbGVyIiwiX2Z1bGxMb29wIiwicG9pbnRQb3NpdGlvbiIsImdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZSIsIlNjYXR0ZXJDb250cm9sbGVyIiwiaW50ZXJhY3Rpb24iLCJyZWdpc3RyeSIsImdldEVsZW1lbnQiLCJjb250cm9sbGVycyIsIl9fcHJvdG9fXyIsImFic3RyYWN0IiwiRXJyb3IiLCJEYXRlQWRhcHRlckJhc2UiLCJvdmVycmlkZSIsIm1lbWJlcnMiLCJwcm90b3R5cGUiLCJpbml0IiwiZm9ybWF0cyIsImZvcm1hdCIsImRpZmYiLCJzdGFydE9mIiwiZW5kT2YiLCJhZGFwdGVycyIsIl9kYXRlIiwiYmluYXJ5U2VhcmNoIiwibWV0YXNldCIsImludGVyc2VjdCIsImxvb2t1cE1ldGhvZCIsIl9yZXZlcnNlUGl4ZWxzIiwiZWwiLCJnZXRSYW5nZSIsImxvIiwiaGkiLCJldmFsdWF0ZUludGVyYWN0aW9uSXRlbXMiLCJwb3NpdGlvbiIsImhhbmRsZXIiLCJnZXRTb3J0ZWRWaXNpYmxlRGF0YXNldE1ldGFzIiwiZ2V0SW50ZXJzZWN0SXRlbXMiLCJ1c2VGaW5hbFBvc2l0aW9uIiwiaW5jbHVkZUludmlzaWJsZSIsImlzUG9pbnRJbkFyZWEiLCJpblJhbmdlIiwiZ2V0TmVhcmVzdEl0ZW1zIiwiZGlzdGFuY2VNZXRyaWMiLCJ1c2VYIiwidXNlWSIsInB0MSIsInB0MiIsImRlbHRhWCIsImRlbHRhWSIsInNxcnQiLCJnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMiLCJtaW5EaXN0YW5jZSIsImdldENlbnRlclBvaW50IiwiZGlzdGFuY2UiLCJnZXROZWFyZXN0Q2FydGVzaWFuSXRlbXMiLCJnZXRQcm9wcyIsImdldE5lYXJlc3RSYWRpYWxJdGVtcyIsImdldEF4aXNJdGVtcyIsInJhbmdlTWV0aG9kIiwiaW50ZXJzZWN0c0l0ZW0iLCJJbnRlcmFjdGlvbiIsIm1vZGVzIiwibmVhcmVzdCIsIlNUQVRJQ19QT1NJVElPTlMiLCJmaWx0ZXJCeVBvc2l0aW9uIiwiYXJyYXkiLCJwb3MiLCJmaWx0ZXJEeW5hbWljUG9zaXRpb25CeUF4aXMiLCJib3giLCJzb3J0QnlXZWlnaHQiLCJ2MCIsImdldENvbWJpbmVkTWF4IiwibWF4UGFkZGluZyIsInVwZGF0ZU1heFBhZGRpbmciLCJib3hQYWRkaW5nIiwidXBkYXRlRGltcyIsInBhcmFtcyIsImxheW91dCIsImdldFBhZGRpbmciLCJuZXdXaWR0aCIsIm91dGVyV2lkdGgiLCJuZXdIZWlnaHQiLCJvdXRlckhlaWdodCIsIndpZHRoQ2hhbmdlZCIsImhlaWdodENoYW5nZWQiLCJzYW1lIiwib3RoZXIiLCJnZXRNYXJnaW5zIiwicG9zaXRpb25zIiwibWFyZ2luIiwibWFyZ2luRm9yUG9zaXRpb25zIiwiZml0Qm94ZXMiLCJib3hlcyIsInJlZml0Qm94ZXMiLCJyZWZpdCIsImNoYW5nZWQiLCJmdWxsU2l6ZSIsInNldEJveERpbXMiLCJwbGFjZUJveGVzIiwidXNlclBhZGRpbmciLCJwYWRkaW5nIiwicGxhY2VkIiwic3RhY2tXZWlnaHQiLCJsYXlvdXRzIiwiYWRkQm94IiwiX2xheWVycyIsInoiLCJyZW1vdmVCb3giLCJsYXlvdXRJdGVtIiwibWluUGFkZGluZyIsImF2YWlsYWJsZVdpZHRoIiwiYXZhaWxhYmxlSGVpZ2h0IiwibGF5b3V0Qm94ZXMiLCJ3cmFwQm94ZXMiLCJ3cmFwIiwiY2VudGVySG9yaXpvbnRhbCIsImNlbnRlclZlcnRpY2FsIiwibGVmdEFuZFRvcCIsInJpZ2h0QW5kQm90dG9tIiwidmVydGljYWwiLCJidWlsZExheW91dEJveGVzIiwidmVydGljYWxCb3hlcyIsImhvcml6b250YWxCb3hlcyIsImJlZm9yZUxheW91dCIsInZpc2libGVWZXJ0aWNhbEJveENvdW50IiwidkJveE1heFdpZHRoIiwiaEJveE1heEhlaWdodCIsImluY2x1ZGVzIiwiX3N0YWNrIiwiYnVpbGRTdGFja3MiLCJzZXRMYXlvdXREaW1zIiwidXBkYXRlUG9zIiwiY2hhbmdlIiwiaGFuZGxlTWF4UGFkZGluZyIsIkJhc2VQbGF0Zm9ybSIsImFjcXVpcmVDb250ZXh0IiwiY2FudmFzIiwicmVsZWFzZUNvbnRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwibGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZ2V0RGV2aWNlUGl4ZWxSYXRpbyIsImdldE1heGltdW1TaXplIiwiaXNBdHRhY2hlZCIsInVwZGF0ZUNvbmZpZyIsIkJhc2ljUGxhdGZvcm0iLCJFWFBBTkRPX0tFWSIsIkVWRU5UX1RZUEVTIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmRvd24iLCJwb2ludGVybW92ZSIsInBvaW50ZXJ1cCIsInBvaW50ZXJsZWF2ZSIsInBvaW50ZXJvdXQiLCJpc051bGxPckVtcHR5IiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJwYXNzaXZlIiwicmVtb3ZlTGlzdGVuZXIiLCJub2RlTGlzdENvbnRhaW5zIiwibm9kZUxpc3QiLCJub2RlIiwiY29udGFpbnMiLCJjcmVhdGVBdHRhY2hPYnNlcnZlciIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsImVudHJpZXMiLCJ0cmlnZ2VyIiwiYWRkZWROb2RlcyIsInJlbW92ZWROb2RlcyIsIm9ic2VydmUiLCJkb2N1bWVudCIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJjcmVhdGVEZXRhY2hPYnNlcnZlciIsImRycExpc3RlbmluZ0NoYXJ0cyIsIm9sZERldmljZVBpeGVsUmF0aW8iLCJvbldpbmRvd1Jlc2l6ZSIsImRwciIsImRldmljZVBpeGVsUmF0aW8iLCJyZXNpemUiLCJjdXJyZW50RGV2aWNlUGl4ZWxSYXRpbyIsImNyZWF0ZVJlc2l6ZU9ic2VydmVyIiwiY29udGFpbmVyIiwiY2xpZW50V2lkdGgiLCJSZXNpemVPYnNlcnZlciIsImNvbnRlbnRSZWN0IiwibGlzdGVuRGV2aWNlUGl4ZWxSYXRpb0NoYW5nZXMiLCJyZWxlYXNlT2JzZXJ2ZXIiLCJkaXNjb25uZWN0IiwidW5saXN0ZW5EZXZpY2VQaXhlbFJhdGlvQ2hhbmdlcyIsImNyZWF0ZVByb3h5QW5kTGlzdGVuIiwicHJveHkiLCJuYXRpdmUiLCJmcm9tTmF0aXZlRXZlbnQiLCJhZGRMaXN0ZW5lciIsIkRvbVBsYXRmb3JtIiwicmVuZGVySGVpZ2h0IiwiZ2V0QXR0cmlidXRlIiwicmVuZGVyV2lkdGgiLCJib3hTaXppbmciLCJkaXNwbGF5V2lkdGgiLCJkaXNwbGF5SGVpZ2h0IiwiaW5pdENhbnZhcyIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInByb3hpZXMiLCIkcHJveGllcyIsImF0dGFjaCIsImRldGFjaCIsImlzQ29ubmVjdGVkIiwiX2RldGVjdFBsYXRmb3JtIiwiT2Zmc2NyZWVuQ2FudmFzIiwiRWxlbWVudCIsInRvb2x0aXBQb3NpdGlvbiIsImhhc1ZhbHVlIiwiZmluYWwiLCJuZXdUaWNrcyIsIm1ham9yU3RhcnQiLCJtYWpvckVuZCIsImNlaWwiLCJvZmZzZXRGcm9tRWRnZSIsImdldFRpY2tzTGltaXQiLCJ0aWNrc0xlbmd0aCIsIm1heFRpY2tzTGltaXQiLCJzYW1wbGUiLCJudW1JdGVtcyIsInJlc3VsdCIsImluY3JlbWVudCIsImdldFBpeGVsRm9yR3JpZExpbmUiLCJvZmZzZXRHcmlkTGluZXMiLCJ2YWxpZEluZGV4IiwiZXBzaWxvbiIsImxpbmVWYWx1ZSIsImdldFRpY2tNYXJrTGVuZ3RoIiwiZHJhd1RpY2tzIiwidGlja0xlbmd0aCIsImdldFRpdGxlSGVpZ2h0IiwiZmFsbGJhY2siLCJmb250IiwibGluZUhlaWdodCIsInRpdGxlQWxpZ24iLCJhbGlnbiIsInJldmVyc2VBbGlnbiIsIlNjYWxlIiwiX21hcmdpbnMiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwibGFiZWxSb3RhdGlvbiIsIl9yYW5nZSIsIl9ncmlkTGluZUl0ZW1zIiwiX2xhYmVsSXRlbXMiLCJfbGFiZWxTaXplcyIsIl9tYXhMZW5ndGgiLCJfbG9uZ2VzdFRleHRDYWNoZSIsIl91c2VyTWF4IiwiX3VzZXJNaW4iLCJfc3VnZ2VzdGVkTWF4IiwiX3N1Z2dlc3RlZE1pbiIsIl90aWNrc0xlbmd0aCIsIl9ib3JkZXJWYWx1ZSIsIl9kYXRhTGltaXRzQ2FjaGVkIiwic2V0Q29udGV4dCIsInN1Z2dlc3RlZE1pbiIsInN1Z2dlc3RlZE1heCIsIm1ldGFzIiwiZ2V0VGlja3MiLCJ4TGFiZWxzIiwieUxhYmVscyIsImdldExhYmVsSXRlbXMiLCJfY29tcHV0ZUxhYmVsSXRlbXMiLCJiZWZvcmVVcGRhdGUiLCJtYXJnaW5zIiwiZ3JhY2UiLCJ0aWNrT3B0cyIsInNhbXBsZVNpemUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJzYW1wbGluZ0VuYWJsZWQiLCJfY29udmVydFRpY2tzVG9MYWJlbHMiLCJiZWZvcmVDYWxjdWxhdGVMYWJlbFJvdGF0aW9uIiwiY2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImFmdGVyQ2FsY3VsYXRlTGFiZWxSb3RhdGlvbiIsImF1dG9Ta2lwIiwic291cmNlIiwiZGV0ZXJtaW5lZE1heFRpY2tzIiwiX3RpY2tTaXplIiwibWF4U2NhbGUiLCJtYXhDaGFydCIsImRldGVybWluZU1heFRpY2tzIiwidGlja3NMaW1pdCIsIm1ham9ySW5kaWNlcyIsIm1ham9yIiwiZW5hYmxlZCIsImdldE1ham9ySW5kaWNlcyIsIm51bU1ham9ySW5kaWNlcyIsImZpcnN0Iiwic2tpcE1ham9ycyIsImV2ZW5NYWpvclNwYWNpbmciLCJnZXRFdmVuU3BhY2luZyIsImZhY3RvcnMiLCJjYWxjdWxhdGVTcGFjaW5nIiwiYXZnTWFqb3JTcGFjaW5nIiwiYWZ0ZXJBdXRvU2tpcCIsImJlZm9yZUZpdCIsImZpdCIsImFmdGVyRml0IiwiYWZ0ZXJVcGRhdGUiLCJyZXZlcnNlUGl4ZWxzIiwiX2FsaWduVG9QaXhlbHMiLCJhbGlnblRvUGl4ZWxzIiwiX2NhbGxIb29rcyIsIm5vdGlmeVBsdWdpbnMiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJnZW5lcmF0ZVRpY2tMYWJlbHMiLCJjYWxsYmFjayIsImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwibnVtVGlja3MiLCJtaW5Sb3RhdGlvbiIsIm1heFJvdGF0aW9uIiwidGlja1dpZHRoIiwibWF4TGFiZWxEaWFnb25hbCIsIl9pc1Zpc2libGUiLCJsYWJlbFNpemVzIiwiX2dldExhYmVsU2l6ZXMiLCJtYXhMYWJlbFdpZHRoIiwid2lkZXN0IiwibWF4TGFiZWxIZWlnaHQiLCJoaWdoZXN0IiwidGl0bGUiLCJhc2luIiwidGl0bGVPcHRzIiwiZ3JpZE9wdHMiLCJ0aXRsZUhlaWdodCIsInRpY2tQYWRkaW5nIiwiYW5nbGVSYWRpYW5zIiwibGFiZWxIZWlnaHQiLCJtaXJyb3IiLCJsYWJlbFdpZHRoIiwiX2NhbGN1bGF0ZVBhZGRpbmciLCJfaGFuZGxlTWFyZ2lucyIsImlzUm90YXRlZCIsImxhYmVsc0JlbG93VGlja3MiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0UmlnaHQiLCJpc0Z1bGxTaXplIiwiX2NvbXB1dGVMYWJlbFNpemVzIiwiY2FjaGVzIiwid2lkdGhzIiwiaGVpZ2h0cyIsImpsZW4iLCJ0aWNrRm9udCIsImZvbnRTdHJpbmciLCJuZXN0ZWRMYWJlbCIsIndpZGVzdExhYmVsU2l6ZSIsImhpZ2hlc3RMYWJlbFNpemUiLCJfcmVzb2x2ZVRpY2tGb250T3B0aW9ucyIsInN0cmluZyIsImdjIiwiZ2NMZW4iLCJnYXJiYWdlQ29sbGVjdCIsInZhbHVlQXQiLCJpZHgiLCJwaXhlbCIsImRlY2ltYWwiLCJnZXREZWNpbWFsRm9yUGl4ZWwiLCJnZXRCYXNlVmFsdWUiLCJjcmVhdGVUaWNrQ29udGV4dCIsIm9wdGlvblRpY2tzIiwicm90IiwiYXV0b1NraXBQYWRkaW5nIiwiX2NvbXB1dGVHcmlkTGluZUl0ZW1zIiwidGwiLCJib3JkZXJPcHRzIiwiYXhpc1dpZHRoIiwiYXhpc0hhbGZXaWR0aCIsImFsaWduQm9yZGVyVmFsdWUiLCJib3JkZXJWYWx1ZSIsImFsaWduZWRMaW5lVmFsdWUiLCJ0eDEiLCJ0eTEiLCJ0eDIiLCJ0eTIiLCJ4MSIsInkxIiwieDIiLCJ5MiIsInBvc2l0aW9uQXhpc0lEIiwibGltaXQiLCJzdGVwIiwib3B0c0F0SW5kZXgiLCJvcHRzQXRJbmRleEJvcmRlciIsImxpbmVDb2xvciIsImJvcmRlckRhc2giLCJkYXNoIiwiYm9yZGVyRGFzaE9mZnNldCIsImRhc2hPZmZzZXQiLCJ0aWNrQ29sb3IiLCJ0aWNrQm9yZGVyRGFzaCIsInRpY2tCb3JkZXJEYXNoT2Zmc2V0IiwiY3Jvc3NBbGlnbiIsInRpY2tBbmRQYWRkaW5nIiwiaFRpY2tBbmRQYWRkaW5nIiwidGV4dEFsaWduIiwibGluZUNvdW50IiwidGV4dE9mZnNldCIsInRleHRCYXNlbGluZSIsIl9nZXRYQXhpc0xhYmVsQWxpZ25tZW50IiwiX2dldFlBeGlzTGFiZWxBbGlnbm1lbnQiLCJsYWJlbE9mZnNldCIsImhhbGZDb3VudCIsInN0cm9rZUNvbG9yIiwidGV4dFN0cm9rZUNvbG9yIiwic3Ryb2tlV2lkdGgiLCJ0ZXh0U3Ryb2tlV2lkdGgiLCJiYWNrZHJvcCIsInRpY2tUZXh0QWxpZ24iLCJzaG93TGFiZWxCYWNrZHJvcCIsImxhYmVsUGFkZGluZyIsImJhY2tkcm9wUGFkZGluZyIsImJhY2tkcm9wQ29sb3IiLCJ0cmFuc2xhdGlvbiIsIl9jb21wdXRlTGFiZWxBcmVhIiwiZHJhd0JhY2tncm91bmQiLCJzYXZlIiwiZmlsbFJlY3QiLCJyZXN0b3JlIiwiZmluZEluZGV4IiwiZHJhd0dyaWQiLCJkcmF3TGluZSIsInNldExpbmVEYXNoIiwibGluZURhc2hPZmZzZXQiLCJiZWdpblBhdGgiLCJtb3ZlVG8iLCJsaW5lVG8iLCJzdHJva2UiLCJkcmF3T25DaGFydEFyZWEiLCJkcmF3Qm9yZGVyIiwibGFzdExpbmVXaWR0aCIsImRyYXdMYWJlbHMiLCJyZW5kZXJUZXh0T3B0aW9ucyIsImRyYXdUaXRsZSIsInRpdGxlWCIsInRpdGxlWSIsInRpdGxlQXJncyIsInR6IiwiZ3oiLCJieiIsImF4aXNJRCIsIl9tYXhEaWdpdHMiLCJmb250U2l6ZSIsIlR5cGVkUmVnaXN0cnkiLCJzY29wZSIsImNyZWF0ZSIsImlzRm9yVHlwZSIsImlzUHJvdG90eXBlT2YiLCJyZWdpc3RlciIsImdldFByb3RvdHlwZU9mIiwicGFyZW50U2NvcGUiLCJpc0lDaGFydENvbXBvbmVudCIsIml0ZW1EZWZhdWx0cyIsImRlZmF1bHRzIiwiZGVmYXVsdFJvdXRlcyIsInJvdXRlcyIsInByb3BlcnR5IiwicHJvcGVydHlQYXJ0cyIsInNwbGl0Iiwic291cmNlTmFtZSIsInNvdXJjZVNjb3BlIiwiam9pbiIsInBhcnRzIiwidGFyZ2V0TmFtZSIsInRhcmdldFNjb3BlIiwicm91dGUiLCJyb3V0ZURlZmF1bHRzIiwiZGVzY3JpcHRvcnMiLCJkZXNjcmliZSIsInJlZ2lzdGVyRGVmYXVsdHMiLCJvdmVycmlkZXMiLCJ1bnJlZ2lzdGVyIiwiUmVnaXN0cnkiLCJfdHlwZWRSZWdpc3RyaWVzIiwiX2VhY2giLCJhZGRDb250cm9sbGVycyIsImFkZFBsdWdpbnMiLCJhZGRTY2FsZXMiLCJnZXRDb250cm9sbGVyIiwiX2dldCIsImdldFBsdWdpbiIsImdldFNjYWxlIiwicmVtb3ZlQ29udHJvbGxlcnMiLCJyZW1vdmVFbGVtZW50cyIsInJlbW92ZVBsdWdpbnMiLCJyZW1vdmVTY2FsZXMiLCJ0eXBlZFJlZ2lzdHJ5IiwiYXJnIiwicmVnIiwiX2dldFJlZ2lzdHJ5Rm9yVHlwZSIsIl9leGVjIiwiaXRlbVJlZyIsImNvbXBvbmVudCIsImNhbWVsTWV0aG9kIiwiUGx1Z2luU2VydmljZSIsIl9pbml0Iiwibm90aWZ5IiwiaG9vayIsIl9jcmVhdGVEZXNjcmlwdG9ycyIsIl9kZXNjcmlwdG9ycyIsImRlc2NyaXB0b3IiLCJwbHVnaW4iLCJjYW5jZWxhYmxlIiwiaW52YWxpZGF0ZSIsIl9vbGRDYWNoZSIsIl9ub3RpZnlTdGF0ZUNoYW5nZXMiLCJsb2NhbElkcyIsImxvY2FsIiwiYWxsUGx1Z2lucyIsImdldE9wdHMiLCJwbHVnaW5PcHRzIiwiY3JlYXRlRGVzY3JpcHRvcnMiLCJwcmV2aW91c0Rlc2NyaXB0b3JzIiwic29tZSIsInBsdWdpblNjb3BlS2V5cyIsInNjcmlwdGFibGUiLCJpbmRleGFibGUiLCJhbGxLZXlzIiwiZ2V0SW5kZXhBeGlzIiwiZGF0YXNldERlZmF1bHRzIiwiaWRNYXRjaGVzQXhpcyIsImRldGVybWluZUF4aXMiLCJzY2FsZU9wdGlvbnMiLCJnZXRBeGlzRnJvbURhdGFzZXQiLCJpbml0T3B0aW9ucyIsImNoYXJ0RGVmYXVsdHMiLCJjb25maWdTY2FsZXMiLCJjaGFydEluZGV4QXhpcyIsInNjYWxlQ29uZiIsImVycm9yIiwiX3Byb3h5IiwiYm91bmREcyIsInJldHJpZXZlQXhpc0Zyb21EYXRhc2V0cyIsImRlZmF1bHRJZCIsImdldERlZmF1bHRTY2FsZUlERnJvbUF4aXMiLCJkZWZhdWx0U2NhbGVPcHRpb25zIiwiZGVmYXVsdElEIiwiZ2V0QXhpc0Zyb21EZWZhdWx0U2NhbGVJRCIsIm1lcmdlU2NhbGVDb25maWciLCJpbml0RGF0YSIsImtleUNhY2hlIiwia2V5c0NhY2hlZCIsIlNldCIsImNhY2hlZEtleXMiLCJnZW5lcmF0ZSIsImFkZElmRm91bmQiLCJDb25maWciLCJfY29uZmlnIiwiaW5pdENvbmZpZyIsIl9zY29wZUNhY2hlIiwiX3Jlc29sdmVyQ2FjaGUiLCJwbGF0Zm9ybSIsImNsZWFyQ2FjaGUiLCJjbGVhciIsImRhdGFzZXRUeXBlIiwiYWRkaXRpb25hbE9wdGlvblNjb3BlcyIsIl9jYWNoZWRTY29wZXMiLCJtYWluU2NvcGUiLCJyZXNldENhY2hlIiwia2V5TGlzdHMiLCJjaGFydE9wdGlvblNjb3BlcyIsInJlc29sdmVyIiwic3ViUHJlZml4ZXMiLCJnZXRSZXNvbHZlciIsImlzU2NyaXB0YWJsZSIsImlzSW5kZXhhYmxlIiwiaGFzRnVuY3Rpb24iLCJuZWVkQ29udGV4dCIsInN1YlJlc29sdmVyIiwiZGVzY3JpcHRvckRlZmF1bHRzIiwicmVzb2x2ZXJDYWNoZSIsIktOT1dOX1BPU0lUSU9OUyIsInBvc2l0aW9uSXNIb3Jpem9udGFsIiwiY29tcGFyZTJMZXZlbCIsImwxIiwibDIiLCJvbkFuaW1hdGlvbnNDb21wbGV0ZSIsIm9uQ29tcGxldGUiLCJvbkFuaW1hdGlvblByb2dyZXNzIiwib25Qcm9ncmVzcyIsImdldENhbnZhcyIsImdldEVsZW1lbnRCeUlkIiwiaW5zdGFuY2VzIiwiZ2V0Q2hhcnQiLCJtb3ZlTnVtZXJpY0tleXMiLCJpbnRLZXkiLCJnZXRTaXplRm9yQXJlYSIsImZpZWxkIiwiQ2hhcnQiLCJpbnZhbGlkYXRlUGx1Z2lucyIsInVzZXJDb25maWciLCJpbml0aWFsQ2FudmFzIiwiZXhpc3RpbmdDaGFydCIsIl9vcHRpb25zIiwiX2FzcGVjdFJhdGlvIiwiX21ldGFzZXRzIiwiX2xhc3RFdmVudCIsIl9saXN0ZW5lcnMiLCJfcmVzcG9uc2l2ZUxpc3RlbmVycyIsIl9zb3J0ZWRNZXRhc2V0cyIsIl9wbHVnaW5zIiwiX2hpZGRlbkluZGljZXMiLCJhdHRhY2hlZCIsIl9kb1Jlc2l6ZSIsInJlc2l6ZURlbGF5IiwiX2luaXRpYWxpemUiLCJtYWludGFpbkFzcGVjdFJhdGlvIiwicmVzcG9uc2l2ZSIsImJpbmRFdmVudHMiLCJfcmVzaXplQmVmb3JlRHJhdyIsIl9yZXNpemUiLCJuZXdTaXplIiwibmV3UmF0aW8iLCJvblJlc2l6ZSIsInJlbmRlciIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJzY2FsZXNPcHRpb25zIiwiYXhpc09wdGlvbnMiLCJidWlsZE9yVXBkYXRlU2NhbGVzIiwic2NhbGVPcHRzIiwidXBkYXRlZCIsImlzUmFkaWFsIiwiZHBvc2l0aW9uIiwiZHR5cGUiLCJzY2FsZVR5cGUiLCJoYXNVcGRhdGVkIiwiX3VwZGF0ZU1ldGFzZXRzIiwiX2Rlc3Ryb3lEYXRhc2V0TWV0YSIsInNsaWNlIiwiX3JlbW92ZVVucmVmZXJlbmNlZE1ldGFzZXRzIiwiYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzIiwibmV3Q29udHJvbGxlcnMiLCJvcmRlciIsInZpc2libGUiLCJDb250cm9sbGVyQ2xhc3MiLCJfcmVzZXRFbGVtZW50cyIsImFuaW1zRGlzYWJsZWQiLCJfdXBkYXRlU2NhbGVzIiwiX2NoZWNrRXZlbnRCaW5kaW5ncyIsIl91cGRhdGVIaWRkZW5JbmRpY2VzIiwiX21pblBhZGRpbmciLCJhdXRvUGFkZGluZyIsIl91cGRhdGVMYXlvdXQiLCJfdXBkYXRlRGF0YXNldHMiLCJfZXZlbnRIYW5kbGVyIiwiX3VwZGF0ZUhvdmVyU3R5bGVzIiwiZXhpc3RpbmdFdmVudHMiLCJuZXdFdmVudHMiLCJldmVudHMiLCJ1bmJpbmRFdmVudHMiLCJjaGFuZ2VzIiwiX2dldFVuaWZvcm1EYXRhQ2hhbmdlcyIsImRhdGFzZXRDb3VudCIsIm1ha2VTZXQiLCJjaGFuZ2VTZXQiLCJub0FyZWEiLCJfaWR4IiwiX3VwZGF0ZURhdGFzZXQiLCJsYXllcnMiLCJfZHJhd0RhdGFzZXRzIiwiX2RyYXdEYXRhc2V0IiwidXNlQ2xpcCIsImdldERhdGFzZXRBcmVhIiwiZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSIsInNldERhdGFzZXRWaXNpYmlsaXR5IiwiX3VwZGF0ZVZpc2liaWxpdHkiLCJoaWRlIiwic2hvdyIsIl9zdG9wIiwiZGVzdHJveSIsInRvQmFzZTY0SW1hZ2UiLCJ0b0RhdGFVUkwiLCJiaW5kVXNlckV2ZW50cyIsImJpbmRSZXNwb25zaXZlRXZlbnRzIiwiX2FkZCIsIl9yZW1vdmUiLCJkZXRhY2hlZCIsInVwZGF0ZUhvdmVyU3R5bGUiLCJwcmVmaXgiLCJnZXRBY3RpdmVFbGVtZW50cyIsInNldEFjdGl2ZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudHMiLCJsYXN0QWN0aXZlIiwicGx1Z2luSWQiLCJyZXBsYXkiLCJob3Zlck9wdGlvbnMiLCJob3ZlciIsImRlYWN0aXZhdGVkIiwiYWN0aXZhdGVkIiwiaW5DaGFydEFyZWEiLCJldmVudEZpbHRlciIsIl9oYW5kbGVFdmVudCIsIl9nZXRBY3RpdmVFbGVtZW50cyIsImlzQ2xpY2siLCJsYXN0RXZlbnQiLCJkZXRlcm1pbmVMYXN0RXZlbnQiLCJvbkhvdmVyIiwiclRoZXRhVG9YWSIsInRoZXRhIiwicGF0aEFyYyIsInBpeGVsTWFyZ2luIiwiaW5uZXJSIiwic3BhY2luZ09mZnNldCIsImF2Tm9nU3BhY2luZ1JhZGl1cyIsImFuZ2xlT2Zmc2V0Iiwib3V0ZXJTdGFydCIsIm91dGVyRW5kIiwiaW5uZXJTdGFydCIsImlubmVyRW5kIiwiYW5nbGVEZWx0YSIsIm8iLCJib3JkZXJSYWRpdXMiLCJoYWxmVGhpY2tuZXNzIiwiaW5uZXJMaW1pdCIsImNvbXB1dGVPdXRlckxpbWl0Iiwib3V0ZXJBcmNMaW1pdCIsInBhcnNlQm9yZGVyUmFkaXVzJDEiLCJvdXRlclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJvdXRlckVuZEFkanVzdGVkUmFkaXVzIiwib3V0ZXJTdGFydEFkanVzdGVkQW5nbGUiLCJvdXRlckVuZEFkanVzdGVkQW5nbGUiLCJpbm5lclN0YXJ0QWRqdXN0ZWRSYWRpdXMiLCJpbm5lckVuZEFkanVzdGVkUmFkaXVzIiwiaW5uZXJTdGFydEFkanVzdGVkQW5nbGUiLCJpbm5lckVuZEFkanVzdGVkQW5nbGUiLCJvdXRlck1pZEFkanVzdGVkQW5nbGUiLCJwQ2VudGVyIiwicDQiLCJQSSIsImlubmVyTWlkQWRqdXN0ZWRBbmdsZSIsInA4Iiwib3V0ZXJTdGFydFgiLCJvdXRlclN0YXJ0WSIsIm91dGVyRW5kWCIsIm91dGVyRW5kWSIsImNsb3NlUGF0aCIsIkFyY0VsZW1lbnQiLCJib3JkZXJKb2luU3R5bGUiLCJmdWxsQ2lyY2xlcyIsImNoYXJ0WCIsImNoYXJ0WSIsInJBZGp1c3QiLCJiZXR3ZWVuQW5nbGVzIiwid2l0aGluUmFkaXVzIiwiaGFsZkFuZ2xlIiwiaGFsZlJhZGl1cyIsInRyYW5zbGF0ZSIsInJhZGl1c09mZnNldCIsImRyYXdBcmMiLCJpbm5lciIsImxpbmVKb2luIiwiYW5nbGVNYXJnaW4iLCJjbGlwQXJjIiwic2V0U3R5bGUiLCJsaW5lQ2FwIiwiYm9yZGVyQ2FwU3R5bGUiLCJwcmV2aW91cyIsInBhdGhWYXJzIiwicGFyYW1zU3RhcnQiLCJwYXJhbXNFbmQiLCJzZWdtZW50U3RhcnQiLCJzZWdtZW50RW5kIiwib3V0c2lkZSIsInBhdGhTZWdtZW50IiwibGluZU1ldGhvZCIsInN0ZXBwZWQiLCJ0ZW5zaW9uIiwiY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSIsImdldExpbmVNZXRob2QiLCJmYXN0UGF0aFNlZ21lbnQiLCJwcmV2WCIsImxhc3RZIiwiYXZnWCIsImNvdW50WCIsInBvaW50SW5kZXgiLCJkcmF3WCIsInRydW5jWCIsIl9nZXRTZWdtZW50TWV0aG9kIiwidXNlUGF0aDJEIiwiUGF0aDJEIiwiTGluZUVsZW1lbnQiLCJjYXBCZXppZXJQb2ludHMiLCJfcGF0aCIsIl9wb2ludHMiLCJfc2VnbWVudHMiLCJfcG9pbnRzVXBkYXRlZCIsInNlZ21lbnRzIiwiX2ludGVycG9sYXRlIiwiX2dldEludGVycG9sYXRpb25NZXRob2QiLCJpbnRlcnBvbGF0ZWQiLCJzZWdtZW50TWV0aG9kIiwicGF0aCIsInN0cm9rZVBhdGhXaXRoQ2FjaGUiLCJzdHJva2VQYXRoRGlyZWN0IiwiaW5SYW5nZSQxIiwiaGl0UmFkaXVzIiwiUG9pbnRFbGVtZW50IiwiaG92ZXJSYWRpdXMiLCJtb3VzZVgiLCJtb3VzZVkiLCJpblhSYW5nZSIsImluWVJhbmdlIiwiZ2V0QmFyQm91bmRzIiwiYmFyIiwiaGFsZiIsInNraXBPckxpbWl0Iiwic2tpcFgiLCJza2lwWSIsImJvdW5kcyIsImFkZE5vcm1hbFJlY3RQYXRoIiwicmVjdCIsImluZmxhdGVSZWN0IiwiYW1vdW50IiwicmVmUmVjdCIsIkJhckVsZW1lbnQiLCJvdXRlciIsIm1heFciLCJtYXhIIiwicGFyc2VCb3JkZXJXaWR0aCIsIm1heFIiLCJlbmFibGVCb3JkZXIiLCJ0b3BMZWZ0IiwidG9wUmlnaHQiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJwYXJzZUJvcmRlclJhZGl1cyIsImJvdW5kaW5nUmVjdHMiLCJhZGRSZWN0UGF0aCIsIkJPUkRFUl9DT0xPUlMiLCJCQUNLR1JPVU5EX0NPTE9SUyIsImdldEJvcmRlckNvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwiY29udGFpbnNDb2xvcnNEZWZpbml0aW9ucyIsInBsdWdpbl9jb2xvcnMiLCJmb3JjZU92ZXJyaWRlIiwiX2FyZ3MiLCJjaGFydE9wdGlvbnMiLCJjb2xvcml6ZXIiLCJjb2xvcml6ZURvdWdobnV0RGF0YXNldCIsImNvbG9yaXplUG9sYXJBcmVhRGF0YXNldCIsImNvbG9yaXplRGVmYXVsdERhdGFzZXQiLCJnZXRDb2xvcml6ZXIiLCJjbGVhbkRlY2ltYXRlZERhdGFzZXQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNsZWFuRGVjaW1hdGVkRGF0YSIsInBsdWdpbl9kZWNpbWF0aW9uIiwiYWxnb3JpdGhtIiwiYmVmb3JlRWxlbWVudHNVcGRhdGUiLCJ4QXhpcyIsImRlY2ltYXRlZCIsInBvaW50Q291bnQiLCJnZXRTdGFydEFuZENvdW50T2ZWaXNpYmxlUG9pbnRzU2ltcGxpZmllZCIsInRocmVzaG9sZCIsInNhbXBsZXMiLCJidWNrZXRXaWR0aCIsInNhbXBsZWRJbmRleCIsImVuZEluZGV4IiwibWF4QXJlYVBvaW50IiwibWF4QXJlYSIsIm5leHRBIiwiYXZnWSIsImF2Z1JhbmdlU3RhcnQiLCJhdmdSYW5nZUVuZCIsImF2Z1JhbmdlTGVuZ3RoIiwicmFuZ2VPZmZzIiwicmFuZ2VUbyIsInBvaW50QXgiLCJwb2ludEF5IiwibHR0YkRlY2ltYXRpb24iLCJtaW5JbmRleCIsIm1heEluZGV4Iiwic3RhcnRJbmRleCIsInhNaW4iLCJkeCIsImxhc3RJbmRleCIsImludGVybWVkaWF0ZUluZGV4MSIsImludGVybWVkaWF0ZUluZGV4MiIsIm1pbk1heERlY2ltYXRpb24iLCJfZ2V0Qm91bmRzIiwiX2ZpbmRTZWdtZW50RW5kIiwiX2dldEVkZ2UiLCJfY3JlYXRlQm91bmRhcnlMaW5lIiwiYm91bmRhcnkiLCJsaW5lUG9pbnRzIiwiX3BvaW50c0Zyb21TZWdtZW50cyIsIl9zaG91bGRBcHBseUZpbGwiLCJfcmVzb2x2ZVRhcmdldCIsInNvdXJjZXMiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwiX2RlY29kZUZpbGwiLCJmaWxsT3B0aW9uIiwicGFyc2VGaWxsT3B0aW9uIiwicGFyc2VGbG9hdCIsImZpcnN0Q2giLCJkZWNvZGVUYXJnZXRJbmRleCIsImFkZFBvaW50c0JlbG93Iiwic291cmNlUG9pbnQiLCJsaW5lc0JlbG93IiwicG9zdHBvbmVkIiwiZmluZFBvaW50IiwidW5zaGlmdCIsInBvaW50VmFsdWUiLCJmaXJzdFZhbHVlIiwibGFzdFZhbHVlIiwic2ltcGxlQXJjIiwiX2RyYXdmaWxsIiwiZ2V0TGluZUJ5SW5kZXgiLCJzb3VyY2VQb2ludHMiLCJiZWxvdyIsImdldExpbmVzQmVsb3ciLCJfYnVpbGRTdGFja0xpbmUiLCJfZ2V0VGFyZ2V0VmFsdWUiLCJjb21wdXRlQ2lyY3VsYXJCb3VuZGFyeSIsIl9nZXRUYXJnZXRQaXhlbCIsImNvbXB1dGVMaW5lYXJCb3VuZGFyeSIsImNvbXB1dGVCb3VuZGFyeSIsIl9nZXRUYXJnZXQiLCJsaW5lT3B0cyIsImFib3ZlIiwiY2xpcFZlcnRpY2FsIiwiZG9GaWxsIiwiY2xpcFkiLCJsaW5lTG9vcCIsInRwb2ludHMiLCJ0YXJnZXRTZWdtZW50cyIsInRndCIsInN1YkJvdW5kcyIsImZpbGxTb3VyY2VzIiwiZmlsbFNvdXJjZSIsInNyYyIsIm5vdFNoYXBlIiwiY2xpcEJvdW5kcyIsImludGVycG9sYXRlZExpbmVUbyIsInRhcmdldExvb3AiLCJpbnRlcnBvbGF0ZWRQb2ludCIsImFmdGVyRGF0YXNldHNVcGRhdGUiLCIkZmlsbGVyIiwiYmVmb3JlRHJhdyIsImRyYXdUaW1lIiwiYmVmb3JlRGF0YXNldHNEcmF3IiwiYmVmb3JlRGF0YXNldERyYXciLCJnZXRCb3hTaXplIiwibGFiZWxPcHRzIiwiYm94SGVpZ2h0IiwiYm94V2lkdGgiLCJ1c2VQb2ludFN0eWxlIiwicG9pbnRTdHlsZVdpZHRoIiwiaXRlbUhlaWdodCIsIkxlZ2VuZCIsIl9hZGRlZCIsImxlZ2VuZEhpdEJveGVzIiwiX2hvdmVyZWRJdGVtIiwiZG91Z2hudXRNb2RlIiwibGVnZW5kSXRlbXMiLCJjb2x1bW5TaXplcyIsImxpbmVXaWR0aHMiLCJidWlsZExhYmVscyIsImxhYmVsRm9udCIsIl9jb21wdXRlVGl0bGVIZWlnaHQiLCJfZml0Um93cyIsIl9maXRDb2xzIiwiaGl0Ym94ZXMiLCJ0b3RhbEhlaWdodCIsInJvdyIsIml0ZW1XaWR0aCIsIm1lYXN1cmVUZXh0IiwiX2l0ZW1IZWlnaHQiLCJoZWlnaHRMaW1pdCIsInRvdGFsV2lkdGgiLCJjdXJyZW50Q29sV2lkdGgiLCJjdXJyZW50Q29sSGVpZ2h0IiwiY29sIiwibGVnZW5kSXRlbVRleHQiLCJjYWxjdWxhdGVJdGVtV2lkdGgiLCJmb250TGluZUhlaWdodCIsImNhbGN1bGF0ZUxlZ2VuZEl0ZW1IZWlnaHQiLCJjYWxjdWxhdGVJdGVtSGVpZ2h0IiwiY2FsY3VsYXRlSXRlbVNpemUiLCJhZGp1c3RIaXRCb3hlcyIsInJ0bCIsInJ0bEhlbHBlciIsImhpdGJveCIsImxlZnRGb3JMdHIiLCJfZHJhdyIsImRlZmF1bHRDb2xvciIsImhhbGZGb250U2l6ZSIsImN1cnNvciIsInRleHREaXJlY3Rpb24iLCJ0ZXh0V2lkdGgiLCJzZXRXaWR0aCIsImxpbmVEYXNoIiwiZHJhd09wdGlvbnMiLCJTUVJUMiIsInhQbHVzIiwieUJveFRvcCIsInhCb3hMZWZ0IiwiZHJhd0xlZ2VuZEJveCIsInN0cmlrZXRocm91Z2giLCJmaWxsVGV4dCIsInRpdGxlRm9udCIsInRpdGxlUGFkZGluZyIsInRvcFBhZGRpbmdQbHVzSGFsZkZvbnRTaXplIiwiX2dldExlZ2VuZEl0ZW1BdCIsImhpdEJveCIsImxoIiwiaGFuZGxlRXZlbnQiLCJvbkxlYXZlIiwiaXNMaXN0ZW5lZCIsImhvdmVyZWRJdGVtIiwic2FtZUl0ZW0iLCJwbHVnaW5fbGVnZW5kIiwiX2VsZW1lbnQiLCJhZnRlckV2ZW50IiwiY2kiLCJ1c2VCb3JkZXJSYWRpdXMiLCJUaXRsZSIsIl9wYWRkaW5nIiwidGV4dFNpemUiLCJfZHJhd0FyZ3MiLCJmb250T3B0cyIsInBsdWdpbl90aXRsZSIsInRpdGxlQmxvY2siLCJjcmVhdGVUaXRsZSIsIldlYWtNYXAiLCJwbHVnaW5fc3VidGl0bGUiLCJwb3NpdGlvbmVycyIsImF2ZXJhZ2UiLCJldmVudFBvc2l0aW9uIiwibmVhcmVzdEVsZW1lbnQiLCJ0cCIsInB1c2hPckNvbmNhdCIsInRvUHVzaCIsImFwcGx5Iiwic3BsaXROZXdsaW5lcyIsIlN0cmluZyIsImNyZWF0ZVRvb2x0aXBJdGVtIiwiZm9ybWF0dGVkVmFsdWUiLCJnZXRUb29sdGlwU2l6ZSIsInRvb2x0aXAiLCJib2R5IiwiZm9vdGVyIiwiYm9keUZvbnQiLCJmb290ZXJGb250IiwidGl0bGVMaW5lQ291bnQiLCJmb290ZXJMaW5lQ291bnQiLCJib2R5TGluZUl0ZW1Db3VudCIsImNvbWJpbmVkQm9keUxlbmd0aCIsImJvZHlJdGVtIiwiYmVmb3JlIiwibGluZXMiLCJhZnRlciIsImJlZm9yZUJvZHkiLCJhZnRlckJvZHkiLCJ0aXRsZVNwYWNpbmciLCJ0aXRsZU1hcmdpbkJvdHRvbSIsImRpc3BsYXlDb2xvcnMiLCJib2R5U3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImZvb3RlclNwYWNpbmciLCJ3aWR0aFBhZGRpbmciLCJtYXhMaW5lV2lkdGgiLCJkZXRlcm1pbmVYQWxpZ24iLCJ5QWxpZ24iLCJjaGFydFdpZHRoIiwieEFsaWduIiwiY2FyZXQiLCJjYXJldFNpemUiLCJjYXJldFBhZGRpbmciLCJkb2VzTm90Rml0V2l0aEFsaWduIiwiZGV0ZXJtaW5lQWxpZ25tZW50IiwiZGV0ZXJtaW5lWUFsaWduIiwiZ2V0QmFja2dyb3VuZFBvaW50IiwiYWxpZ25tZW50IiwiY29ybmVyUmFkaXVzIiwicGFkZGluZ0FuZFNpemUiLCJhbGlnblgiLCJhbGlnblkiLCJnZXRBbGlnbmVkWCIsImdldEJlZm9yZUFmdGVyQm9keUxpbmVzIiwib3ZlcnJpZGVDYWxsYmFja3MiLCJkZWZhdWx0Q2FsbGJhY2tzIiwiYmVmb3JlVGl0bGUiLCJ0b29sdGlwSXRlbXMiLCJsYWJlbENvdW50IiwiYWZ0ZXJUaXRsZSIsImJlZm9yZUxhYmVsIiwidG9vbHRpcEl0ZW0iLCJsYWJlbENvbG9yIiwibGFiZWxUZXh0Q29sb3IiLCJib2R5Q29sb3IiLCJsYWJlbFBvaW50U3R5bGUiLCJhZnRlckxhYmVsIiwiYmVmb3JlRm9vdGVyIiwiYWZ0ZXJGb290ZXIiLCJpbnZva2VDYWxsYmFja1dpdGhGYWxsYmFjayIsIlRvb2x0aXAiLCJvcGFjaXR5IiwiX2V2ZW50UG9zaXRpb24iLCJfc2l6ZSIsIl9jYWNoZWRBbmltYXRpb25zIiwiX3Rvb2x0aXBJdGVtcyIsImRhdGFQb2ludHMiLCJjYXJldFgiLCJjYXJldFkiLCJsYWJlbENvbG9ycyIsImxhYmVsUG9pbnRTdHlsZXMiLCJsYWJlbFRleHRDb2xvcnMiLCJnZXRUaXRsZSIsImdldEJlZm9yZUJvZHkiLCJnZXRCb2R5IiwiYm9keUl0ZW1zIiwic2NvcGVkIiwiZ2V0QWZ0ZXJCb2R5IiwiZ2V0Rm9vdGVyIiwiX2NyZWF0ZUl0ZW1zIiwiaXRlbVNvcnQiLCJwb3NpdGlvbkFuZFNpemUiLCJiYWNrZ3JvdW5kUG9pbnQiLCJleHRlcm5hbCIsImRyYXdDYXJldCIsInRvb2x0aXBQb2ludCIsImNhcmV0UG9zaXRpb24iLCJnZXRDYXJldFBvc2l0aW9uIiwieDMiLCJ5MyIsInB0WCIsInB0WSIsInB0IiwidGl0bGVDb2xvciIsIl9kcmF3Q29sb3JCb3giLCJjb2xvclgiLCJydGxDb2xvclgiLCJ5T2ZmU2V0IiwiY29sb3JZIiwibXVsdGlLZXlCYWNrZ3JvdW5kIiwib3V0ZXJYIiwiaW5uZXJYIiwic3Ryb2tlUmVjdCIsImRyYXdCb2R5IiwiYm9keUFsaWduIiwiYm9keUxpbmVIZWlnaHQiLCJ4TGluZVBhZGRpbmciLCJmaWxsTGluZU9mVGV4dCIsImJvZHlBbGlnbkZvckNhbGN1bGF0aW9uIiwidGV4dENvbG9yIiwiZHJhd0Zvb3RlciIsImZvb3RlckFsaWduIiwiZm9vdGVyQ29sb3IiLCJ0b29sdGlwU2l6ZSIsInF1YWRyYXRpY0N1cnZlVG8iLCJfdXBkYXRlQW5pbWF0aW9uVGFyZ2V0IiwiYW5pbVgiLCJhbmltWSIsIl93aWxsUmVuZGVyIiwiaGFzVG9vbHRpcENvbnRlbnQiLCJnbG9iYWxBbHBoYSIsInBvc2l0aW9uQ2hhbmdlZCIsIl9wb3NpdGlvbkNoYW5nZWQiLCJfaWdub3JlUmVwbGF5RXZlbnRzIiwicGx1Z2luX3Rvb2x0aXAiLCJhZnRlckluaXQiLCJhZnRlckRyYXciLCJfZmFsbGJhY2siLCJDb2xvcnMiLCJEZWNpbWF0aW9uIiwiRmlsbGVyIiwiU3ViVGl0bGUiLCJfZ2V0TGFiZWxGb3JWYWx1ZSIsIkNhdGVnb3J5U2NhbGUiLCJfc3RhcnRWYWx1ZSIsIl92YWx1ZVJhbmdlIiwiX2FkZGVkTGFiZWxzIiwiYWRkZWQiLCJpc0Zpbml0ZSIsImFkZGVkTGFiZWxzIiwiYWRkSWZTdHJpbmciLCJsYXN0SW5kZXhPZiIsImZpbmRPckFkZExhYmVsIiwicmVsYXRpdmVMYWJlbFNpemUiLCJtaW5TcGFjaW5nIiwicmFkIiwiTGluZWFyU2NhbGVCYXNlIiwiX2VuZFZhbHVlIiwiaGFuZGxlVGlja1JhbmdlT3B0aW9ucyIsInNldE1pbiIsInNldE1heCIsIm1pblNpZ24iLCJtYXhTaWduIiwiZ2V0VGlja0xpbWl0IiwibWF4VGlja3MiLCJzdGVwU2l6ZSIsImNvbXB1dGVUaWNrTGltaXQiLCJnZW5lcmF0aW9uT3B0aW9ucyIsImRhdGFSYW5nZSIsInByZWNpc2lvbiIsIm1heERpZ2l0cyIsImluY2x1ZGVCb3VuZHMiLCJ1bml0IiwibWF4U3BhY2VzIiwicm1pbiIsInJtYXgiLCJjb3VudERlZmluZWQiLCJuaWNlTWluIiwibmljZU1heCIsIm51bVNwYWNlcyIsImRlY2ltYWxQbGFjZXMiLCJ0aWNrVmFsdWUiLCJnZW5lcmF0ZVRpY2tzJDEiLCJMaW5lYXJTY2FsZSIsImZvcm1hdHRlcnMiLCJudW1lcmljIiwibG9nMTBGbG9vciIsImNoYW5nZUV4cG9uZW50IiwiaXNNYWpvciIsInRpY2tWYWwiLCJzdGVwcyIsInJhbmdlRXhwIiwicmFuZ2VTdGVwIiwiTG9nYXJpdGhtaWNTY2FsZSIsImxvZ2FyaXRobWljIiwiX3plcm8iLCJtaW5FeHAiLCJleHAiLCJzdGFydEV4cCIsInNpZ25pZmljYW5kIiwibGFzdFRpY2siLCJnZW5lcmF0ZVRpY2tzIiwiZ2V0VGlja0JhY2tkcm9wSGVpZ2h0IiwiZGV0ZXJtaW5lTGltaXRzIiwidXBkYXRlTGltaXRzIiwibGltaXRzIiwiaExpbWl0cyIsInZMaW1pdHMiLCJjcmVhdGVQb2ludExhYmVsSXRlbSIsIml0ZW1PcHRzIiwib3V0ZXJEaXN0YW5jZSIsImRyYXdpbmdBcmVhIiwiZXh0cmEiLCJhZGRpdGlvbmFsQW5nbGUiLCJwb2ludExhYmVsUG9zaXRpb24iLCJnZXRQb2ludFBvc2l0aW9uIiwieUZvckFuZ2xlIiwiZ2V0VGV4dEFsaWduRm9yQW5nbGUiLCJpc05vdE92ZXJsYXBwZWQiLCJkcmF3UG9pbnRMYWJlbEJveCIsImJhY2tkcm9wTGVmdCIsImJhY2tkcm9wVG9wIiwiYmFja2Ryb3BXaWR0aCIsImJhY2tkcm9wSGVpZ2h0IiwicGF0aFJhZGl1c0xpbmUiLCJSYWRpYWxMaW5lYXJTY2FsZSIsImFuaW1hdGUiLCJjZW50ZXJQb2ludExhYmVscyIsIl9wb2ludExhYmVscyIsIl9wb2ludExhYmVsSXRlbXMiLCJ2YWx1ZUNvdW50IiwicG9pbnRMYWJlbE9wdHMiLCJnZXRQb2ludExhYmVsQ29udGV4dCIsInBsRm9udCIsInNldENlbnRlclBvaW50IiwiYnVpbGRQb2ludExhYmVsSXRlbXMiLCJmaXRXaXRoUG9pbnRMYWJlbHMiLCJsZWZ0TW92ZW1lbnQiLCJyaWdodE1vdmVtZW50IiwidG9wTW92ZW1lbnQiLCJib3R0b21Nb3ZlbWVudCIsImFuZ2xlTXVsdGlwbGllciIsInNjYWxpbmdGYWN0b3IiLCJnZXRWYWx1ZUZvckRpc3RhbmNlRnJvbUNlbnRlciIsInNjYWxlZERpc3RhbmNlIiwicG9pbnRMYWJlbCIsImNyZWF0ZVBvaW50TGFiZWxDb250ZXh0IiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwiZ2V0QmFzZVBvc2l0aW9uIiwiZ2V0UG9pbnRMYWJlbFBvc2l0aW9uIiwiZHJhd1BvaW50TGFiZWxzIiwiZ3JpZExpbmVPcHRzIiwiZHJhd1JhZGl1c0xpbmUiLCJJTlRFUlZBTFMiLCJtaWxsaXNlY29uZCIsImNvbW1vbiIsInNlY29uZCIsIm1pbnV0ZSIsImhvdXIiLCJkYXkiLCJ3ZWVrIiwibW9udGgiLCJxdWFydGVyIiwieWVhciIsIlVOSVRTIiwic29ydGVyIiwiYWRhcHRlciIsIl9hZGFwdGVyIiwicGFyc2VyIiwiaXNvV2Vla2RheSIsIl9wYXJzZU9wdHMiLCJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwibWluVW5pdCIsImNhcGFjaXR5IiwiaW50ZXJ2YWwiLCJNQVhfU0FGRV9JTlRFR0VSIiwiYWRkVGljayIsInRpbWUiLCJ0aW1lc3RhbXBzIiwidGlja3NGcm9tVGltZXN0YW1wcyIsIm1ham9yVW5pdCIsInNldE1ham9yVGlja3MiLCJUaW1lU2NhbGUiLCJkaXNwbGF5Rm9ybWF0cyIsIl91bml0IiwiX21ham9yVW5pdCIsIl9vZmZzZXRzIiwiX25vcm1hbGl6ZWQiLCJub3JtYWxpemVkIiwiX2FwcGx5Qm91bmRzIiwiX2dldExhYmVsQm91bmRzIiwiZ2V0TGFiZWxUaW1lc3RhbXBzIiwidGltZU9wdHMiLCJfZ2VuZXJhdGUiLCJfZ2V0TGFiZWxDYXBhY2l0eSIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwiaW5pdE9mZnNldHMiLCJvZmZzZXRBZnRlckF1dG9za2lwIiwiZ2V0RGVjaW1hbEZvclZhbHVlIiwibWlub3IiLCJ3ZWVrZGF5IiwiaGFzV2Vla2RheSIsImdldERhdGFUaW1lc3RhbXBzIiwidG9vbHRpcEZvcm1hdCIsImRhdGV0aW1lIiwiZm10IiwiX3RpY2tGb3JtYXRGdW5jdGlvbiIsImZvcm1hdHRlciIsIm1pbm9yRm9ybWF0IiwibWFqb3JGb3JtYXQiLCJvZmZzZXRzIiwiX2dldExhYmVsU2l6ZSIsInRpY2tzT3B0cyIsInRpY2tMYWJlbFdpZHRoIiwiY29zUm90YXRpb24iLCJzaW5Sb3RhdGlvbiIsInRpY2tGb250U2l6ZSIsImV4YW1wbGVUaW1lIiwiZXhhbXBsZUxhYmVsIiwibm9ybWFsaXplIiwidGFibGUiLCJwcmV2U291cmNlIiwibmV4dFNvdXJjZSIsInByZXZUYXJnZXQiLCJuZXh0VGFyZ2V0Iiwic3BhbiIsIlRpbWVTZXJpZXNTY2FsZSIsIl90YWJsZSIsIl9taW5Qb3MiLCJfdGFibGVSYW5nZSIsIl9nZXRUaW1lc3RhbXBzRm9yVGFibGUiLCJidWlsZExvb2t1cFRhYmxlIiwicmVnaXN0ZXJhYmxlcyIsIm5vb3AiLCJ1aWQiLCJpc051bGxPclVuZGVmIiwidG9TdHJpbmciLCJpc09iamVjdCIsImlzTnVtYmVyRmluaXRlIiwiZmluaXRlT3JEZWZhdWx0IiwiZGVmYXVsdFZhbHVlIiwidmFsdWVPckRlZmF1bHQiLCJ0b1BlcmNlbnRhZ2UiLCJkaW1lbnNpb24iLCJlbmRzV2l0aCIsInRvRGltZW5zaW9uIiwidGhpc0FyZyIsImVhY2giLCJsb29wYWJsZSIsIl9lbGVtZW50c0VxdWFsIiwiYTAiLCJhMSIsImtsZW4iLCJpc1ZhbGlkS2V5IiwiX21lcmdlciIsInR2YWwiLCJzdmFsIiwibWVyZ2UiLCJtZXJnZXIiLCJjdXJyZW50IiwibWVyZ2VJZiIsIl9tZXJnZXJJZiIsImhhc093blByb3BlcnR5IiwiX2RlcHJlY2F0ZWQiLCJrZXlSZXNvbHZlcnMiLCJfc3BsaXRLZXkiLCJwYXJ0IiwicmVzb2x2ZU9iamVjdEtleSIsIl9nZXRLZXlSZXNvbHZlciIsIl9jYXBpdGFsaXplIiwidG9VcHBlckNhc2UiLCJkZWZpbmVkIiwiaXNGdW5jdGlvbiIsInNldHNFcXVhbCIsIl9pc0NsaWNrRXZlbnQiLCJUQVUiLCJQSVRBVSIsIklORklOSVRZIiwiUkFEX1BFUl9ERUciLCJIQUxGX1BJIiwiUVVBUlRFUl9QSSIsIlRXT19USElSRFNfUEkiLCJsb2cxMCIsInNpZ24iLCJhbG1vc3RFcXVhbHMiLCJuaWNlTnVtIiwicm91bmRlZFJhbmdlIiwibmljZVJhbmdlIiwiZnJhY3Rpb24iLCJfZmFjdG9yaXplIiwiaXNOdW1iZXIiLCJhbG1vc3RXaG9sZSIsInJvdW5kZWQiLCJfc2V0TWluQW5kTWF4QnlLZXkiLCJ0b1JhZGlhbnMiLCJkZWdyZWVzIiwidG9EZWdyZWVzIiwicmFkaWFucyIsIl9kZWNpbWFsUGxhY2VzIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJjZW50cmVQb2ludCIsImFuZ2xlUG9pbnQiLCJkaXN0YW5jZUZyb21YQ2VudGVyIiwiZGlzdGFuY2VGcm9tWUNlbnRlciIsInJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciIsImF0YW4yIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwiX2FuZ2xlRGlmZiIsIl9ub3JtYWxpemVBbmdsZSIsIl9hbmdsZUJldHdlZW4iLCJzYW1lQW5nbGVJc0Z1bGxDaXJjbGUiLCJhbmdsZVRvU3RhcnQiLCJhbmdsZVRvRW5kIiwic3RhcnRUb0FuZ2xlIiwiZW5kVG9BbmdsZSIsIl9saW1pdFZhbHVlIiwiX2ludDE2UmFuZ2UiLCJfaXNCZXR3ZWVuIiwiX2xvb2t1cCIsImNtcCIsIm1pZCIsIl9sb29rdXBCeUtleSIsInRpIiwiX3Jsb29rdXBCeUtleSIsIl9maWx0ZXJCZXR3ZWVuIiwiYXJyYXlFdmVudHMiLCJsaXN0ZW5BcnJheUV2ZW50cyIsIl9jaGFydGpzIiwib2JqZWN0IiwidW5saXN0ZW5BcnJheUV2ZW50cyIsInN0dWIiLCJfYXJyYXlVbmlxdWUiLCJwaXhlbFNpemUiLCJmb250U3R5bGUiLCJmb250RmFtaWx5IiwicmVxdWVzdEFuaW1GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInRocm90dGxlZCIsImFyZ3NUb1VzZSIsInRpY2tpbmciLCJkZWJvdW5jZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiX3RvTGVmdFJpZ2h0Q2VudGVyIiwiX2FsaWduU3RhcnRFbmQiLCJfdGV4dFgiLCJfZ2V0U3RhcnRBbmRDb3VudE9mVmlzaWJsZVBvaW50cyIsIl9zY2FsZVJhbmdlc0NoYW5nZWQiLCJfc2NhbGVSYW5nZXMiLCJuZXdSYW5nZXMiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwiYXRFZGdlIiwiZWxhc3RpY0luIiwiZWxhc3RpY091dCIsImVmZmVjdHMiLCJlYXNlSW5RdWFkIiwiZWFzZU91dFF1YWQiLCJlYXNlSW5PdXRRdWFkIiwiZWFzZUluQ3ViaWMiLCJlYXNlT3V0Q3ViaWMiLCJlYXNlSW5PdXRDdWJpYyIsImVhc2VJblF1YXJ0IiwiZWFzZU91dFF1YXJ0IiwiZWFzZUluT3V0UXVhcnQiLCJlYXNlSW5RdWludCIsImVhc2VPdXRRdWludCIsImVhc2VJbk91dFF1aW50IiwiZWFzZUluU2luZSIsImVhc2VPdXRTaW5lIiwiZWFzZUluT3V0U2luZSIsImVhc2VJbkV4cG8iLCJlYXNlT3V0RXhwbyIsImVhc2VJbk91dEV4cG8iLCJlYXNlSW5DaXJjIiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluRWxhc3RpYyIsImVhc2VPdXRFbGFzdGljIiwiZWFzZUluT3V0RWxhc3RpYyIsImVhc2VJbkJhY2siLCJlYXNlT3V0QmFjayIsImVhc2VJbk91dEJhY2siLCJlYXNlSW5Cb3VuY2UiLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluT3V0Qm91bmNlIiwiaXNQYXR0ZXJuT3JHcmFkaWVudCIsImdldEhvdmVyQ29sb3IiLCJjb2xvcnMiLCJpbnRsQ2FjaGUiLCJmb3JtYXROdW1iZXIiLCJudW0iLCJKU09OIiwic3RyaW5naWZ5IiwiSW50bCIsIk51bWJlckZvcm1hdCIsImdldE51bWJlckZvcm1hdCIsIm5vdGF0aW9uIiwiZGVsdGEiLCJtYXhUaWNrIiwiY2FsY3VsYXRlRGVsdGEiLCJsb2dEZWx0YSIsIm51bURlY2ltYWwiLCJtaW5pbXVtRnJhY3Rpb25EaWdpdHMiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJUaWNrcyIsImdldFNjb3BlJDEiLCJyb290IiwiRGVmYXVsdHMiLCJfYXBwbGllcnMiLCJmYW1pbHkiLCJob3ZlckJhY2tncm91bmRDb2xvciIsImhvdmVyQm9yZGVyQ29sb3IiLCJob3ZlckNvbG9yIiwic2NvcGVPYmplY3QiLCJ0YXJnZXRTY29wZU9iamVjdCIsInByaXZhdGVOYW1lIiwiZGVmaW5lUHJvcGVydGllcyIsImFwcGxpZXJzIiwidG9Gb250U3RyaW5nIiwiX21lYXN1cmVUZXh0IiwibG9uZ2VzdCIsIl9sb25nZXN0VGV4dCIsImFycmF5T2ZUaGluZ3MiLCJ0aGluZyIsIm5lc3RlZFRoaW5nIiwiX2FsaWduUGl4ZWwiLCJoYWxmV2lkdGgiLCJjbGVhckNhbnZhcyIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwiZHJhd1BvaW50IiwiZHJhd1BvaW50TGVnZW5kIiwieE9mZnNldCIsInlPZmZzZXQiLCJ4T2Zmc2V0VyIsInlPZmZzZXRXIiwiZHJhd0ltYWdlIiwiZWxsaXBzZSIsIlNRUlQxXzIiLCJfaXNQb2ludEluQXJlYSIsImNsaXBBcmVhIiwidW5jbGlwQXJlYSIsIl9zdGVwcGVkTGluZVRvIiwiZmxpcCIsIm1pZHBvaW50IiwiX2JlemllckN1cnZlVG8iLCJiZXppZXJDdXJ2ZVRvIiwiY3AxeCIsImNwMngiLCJjcDF5IiwiY3AyeSIsImRlY29yYXRlVGV4dCIsInVuZGVybGluZSIsIm1ldHJpY3MiLCJhY3R1YWxCb3VuZGluZ0JveExlZnQiLCJhY3R1YWxCb3VuZGluZ0JveFJpZ2h0IiwiYWN0dWFsQm91bmRpbmdCb3hBc2NlbnQiLCJhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQiLCJ5RGVjb3JhdGlvbiIsImRlY29yYXRpb25XaWR0aCIsImRyYXdCYWNrZHJvcCIsIm9sZENvbG9yIiwicmVuZGVyVGV4dCIsInNldFJlbmRlck9wdHMiLCJzdHJva2VUZXh0IiwiYWRkUm91bmRlZFJlY3RQYXRoIiwiTElORV9IRUlHSFQiLCJGT05UX1NUWUxFIiwidG9MaW5lSGVpZ2h0IiwibWF0Y2hlcyIsIm1hdGNoIiwibnVtYmVyT3JaZXJvIiwiX3JlYWRWYWx1ZVRvUHJvcHMiLCJvYmpQcm9wcyIsInJlYWQiLCJ0b1RSQkwiLCJ0b1RSQkxDb3JuZXJzIiwidG9QYWRkaW5nIiwidG9Gb250IiwicmVzb2x2ZSIsImlucHV0cyIsImluZm8iLCJjYWNoZWFibGUiLCJfYWRkR3JhY2UiLCJtaW5tYXgiLCJrZWVwWmVybyIsImNyZWF0ZUNvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiX2NyZWF0ZVJlc29sdmVyIiwicm9vdFNjb3BlcyIsImdldFRhcmdldCIsImZpbmFsUm9vdFNjb3BlcyIsIl9yZXNvbHZlIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfc2NvcGVzIiwiX3Jvb3RTY29wZXMiLCJQcm94eSIsImRlbGV0ZVByb3BlcnR5IiwiX2tleXMiLCJfY2FjaGVkIiwicmVhZEtleSIsIm5lZWRzU3ViUmVzb2x2ZXIiLCJjcmVhdGVTdWJSZXNvbHZlciIsIl9yZXNvbHZlV2l0aFByZWZpeGVzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImdldEtleXNGcm9tQWxsU2NvcGVzIiwib3duS2V5cyIsInN0b3JhZ2UiLCJfc3RvcmFnZSIsIl9hdHRhY2hDb250ZXh0Iiwic3ViUHJveHkiLCJfY29udGV4dCIsIl9zdWJQcm94eSIsInJlY2VpdmVyIiwiZ2V0VmFsdWUiLCJfcmVzb2x2ZVNjcmlwdGFibGUiLCJfcmVzb2x2ZUFycmF5IiwiX3Jlc29sdmVXaXRoQ29udGV4dCIsIl9hbGxLZXlzIiwicmVzb2x2ZUZhbGxiYWNrIiwiZ2V0U2NvcGUiLCJhZGRTY29wZXMiLCJwYXJlbnRTY29wZXMiLCJwYXJlbnRGYWxsYmFjayIsImFsbFNjb3BlcyIsImFkZFNjb3Blc0Zyb21LZXkiLCJzdWJHZXRUYXJnZXQiLCJyZXNvbHZlS2V5c0Zyb21BbGxTY29wZXMiLCJfcGFyc2VPYmplY3REYXRhUmFkaWFsU2NhbGUiLCJFUFNJTE9OIiwiZ2V0UG9pbnQiLCJnZXRWYWx1ZUF4aXMiLCJzcGxpbmVDdXJ2ZSIsIm1pZGRsZVBvaW50IiwiYWZ0ZXJQb2ludCIsImQwMSIsImQxMiIsInMwMSIsInMxMiIsImZhIiwiZmIiLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwidmFsdWVBeGlzIiwicG9pbnRzTGVuIiwiZGVsdGFLIiwibUsiLCJwb2ludEJlZm9yZSIsInBvaW50Q3VycmVudCIsInBvaW50QWZ0ZXIiLCJzbG9wZURlbHRhIiwiYWxwaGFLIiwiYmV0YUsiLCJ0YXVLIiwic3F1YXJlZE1hZ25pdHVkZSIsIm1vbm90b25lQWRqdXN0IiwibW9ub3RvbmVDb21wdXRlIiwiY2FwQ29udHJvbFBvaW50IiwiX3VwZGF0ZUJlemllckNvbnRyb2xQb2ludHMiLCJjb250cm9sUG9pbnRzIiwiaW5BcmVhIiwiaW5BcmVhUHJldiIsImluQXJlYU5leHQiLCJfaXNEb21TdXBwb3J0ZWQiLCJfZ2V0UGFyZW50Tm9kZSIsImRvbU5vZGUiLCJwYXJlbnROb2RlIiwiaG9zdCIsInBhcnNlTWF4U3R5bGUiLCJzdHlsZVZhbHVlIiwicGFyZW50UHJvcGVydHkiLCJ2YWx1ZUluUGl4ZWxzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldFByb3BlcnR5VmFsdWUiLCJnZXRQb3NpdGlvbmVkU3R5bGUiLCJzdHlsZXMiLCJzdWZmaXgiLCJ1c2VPZmZzZXRQb3MiLCJzaGFkb3dSb290IiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImJvcmRlckJveCIsInBhZGRpbmdzIiwiYm9yZGVycyIsInRvdWNoZXMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwiY2xpZW50WSIsImdldENhbnZhc1Bvc2l0aW9uIiwicm91bmQxIiwiYmJXaWR0aCIsImJiSGVpZ2h0IiwiY29udGFpbmVyU2l6ZSIsImNvbnRhaW5lclN0eWxlIiwiY29udGFpbmVyQm9yZGVyIiwiY29udGFpbmVyUGFkZGluZyIsImNsaWVudEhlaWdodCIsImdldENvbnRhaW5lclNpemUiLCJyZXRpbmFTY2FsZSIsImZvcmNlUmF0aW8iLCJmb3JjZVN0eWxlIiwicGl4ZWxSYXRpbyIsImRldmljZUhlaWdodCIsImRldmljZVdpZHRoIiwic2V0VHJhbnNmb3JtIiwic3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyIsInBhc3NpdmVTdXBwb3J0ZWQiLCJyZWFkVXNlZFNpemUiLCJfcG9pbnRJbkxpbmUiLCJfc3RlcHBlZEludGVycG9sYXRpb24iLCJfYmV6aWVySW50ZXJwb2xhdGlvbiIsImNwMSIsImNwMiIsImdldFJpZ2h0VG9MZWZ0QWRhcHRlciIsInJlY3RYIiwiZ2V0TGVmdFRvUmlnaHRBZGFwdGVyIiwiX2l0ZW1XaWR0aCIsImdldFJ0bEFkYXB0ZXIiLCJvdmVycmlkZVRleHREaXJlY3Rpb24iLCJkaXJlY3Rpb24iLCJvcmlnaW5hbCIsImdldFByb3BlcnR5UHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInByZXZUZXh0RGlyZWN0aW9uIiwicmVzdG9yZVRleHREaXJlY3Rpb24iLCJwcm9wZXJ0eUZuIiwiYmV0d2VlbiIsImNvbXBhcmUiLCJub3JtYWxpemVTZWdtZW50IiwiX2JvdW5kU2VnbWVudCIsInN0YXJ0Qm91bmQiLCJlbmRCb3VuZCIsImdldFNlZ21lbnQiLCJwcmV2VmFsdWUiLCJpbnNpZGUiLCJzdWJTdGFydCIsIl9ib3VuZFNlZ21lbnRzIiwic3ViIiwiX2NvbXB1dGVTZWdtZW50cyIsInNlZ21lbnRPcHRpb25zIiwiZmluZFN0YXJ0QW5kRW5kIiwic3BsaXRCeVN0eWxlcyIsInNvbGlkU2VnbWVudHMiLCJjaGFydENvbnRleHQiLCJiYXNlU3R5bGUiLCJyZWFkU3R5bGUiLCJwcmV2U3R5bGUiLCJhZGRTdHlsZSIsInN0IiwiZGlyIiwicDAiLCJwMERhdGFJbmRleCIsInAxRGF0YUluZGV4Iiwic3R5bGVDaGFuZ2VkIiwiZG9TcGxpdEJ5U3R5bGVzIiwicmVwbGFjZXIiLCJDb21tb25Qcm9wcyIsInJlcXVpcmVkIiwiZGVmYXVsdCIsImRhdGFzZXRJZEtleSIsInVwZGF0ZU1vZGUiLCJQcm9wcyIsImNvbXBhdFByb3BzIiwidmVyc2lvbiIsImludGVybmFscyIsImF0dHJzIiwidG9SYXdJZlByb3h5IiwiaXNQcm94eSIsInRvUmF3Iiwic2V0TGFiZWxzIiwiY3VycmVudERhdGEiLCJuZXh0TGFiZWxzIiwic2V0RGF0YXNldHMiLCJuZXh0RGF0YXNldHMiLCJhZGRlZERhdGFzZXRzIiwibmV4dERhdGFzZXQiLCJjdXJyZW50RGF0YXNldCIsImZpbmQiLCJnZXREYXRhc2V0QXRFdmVudCIsImdldEVsZW1lbnRBdEV2ZW50IiwiZ2V0RWxlbWVudHNBdEV2ZW50IiwiZGVmaW5lQ29tcG9uZW50Iiwic2V0dXAiLCJwYXJhbSIsImV4cG9zZSIsImNhbnZhc1JlZiIsInJlZiIsImNoYXJ0UmVmIiwic2hhbGxvd1JlZiIsIm9uTW91bnRlZCIsImNsb25lZERhdGEiLCJuZXh0RGF0YSIsImNsb25lRGF0YSIsInByb3hpZWREYXRhIiwiY2xvbmVQcm94eSIsIm9uQmVmb3JlVW5tb3VudCIsIndhdGNoIiwicGFyYW0xIiwibmV4dE9wdGlvbnNQcm94eSIsIm5leHREYXRhUHJveHkiLCJwcmV2T3B0aW9uc1Byb3h5IiwicHJldkRhdGFQcm94eSIsInNob3VsZFVwZGF0ZSIsIm5leHRPcHRpb25zIiwicHJldk9wdGlvbnMiLCJzZXRPcHRpb25zIiwicHJldkxhYmVscyIsInByZXZEYXRhc2V0cyIsImRlZXAiLCJjcmVhdGVUeXBlZENoYXJ0IiwicmVmb3J3YXJkUmVmIiwiQmFyIiwiRG91Z2hudXQiLCJMaW5lIiwiUGllIiwiUG9sYXJBcmVhIiwiUmFkYXIiLCJCdWJibGUiLCJTY2F0dGVyIl0sInNvdXJjZVJvb3QiOiIifQ==